<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LangChain使用之Retrieval</title>
      <link href="/2025/09/28/LangChain%E4%BD%BF%E7%94%A8%E4%B9%8BRetrieval/"/>
      <url>/2025/09/28/LangChain%E4%BD%BF%E7%94%A8%E4%B9%8BRetrieval/</url>
      
        <content type="html"><![CDATA[<h1 id="Retrieval模块的设计意义"><a href="#Retrieval模块的设计意义" class="headerlink" title="Retrieval模块的设计意义"></a>Retrieval模块的设计意义</h1><h2 id="大模型的幻觉问题"><a href="#大模型的幻觉问题" class="headerlink" title="大模型的幻觉问题"></a>大模型的幻觉问题</h2><p>拥有记忆后，确实扩展了AI工程的应用场景。 </p><p>但是在专有领域，LLM无法学习到所有的专业知识细节，因此在 面向专业领域知识的提问时，无法给出 可靠准确的回答，甚至会“胡言乱语”，这种现象称之为 <strong>LLM的“幻觉”</strong>。 </p><p>大模型生成内容的不可控，尤其是在金融和医疗领域等领域，<strong>一次金额评估的错误，一次医疗诊断的失误，哪怕只出现一次都是致命的</strong>。但，对于非专业人士来说可能难以辨识。<strong>目前还没有能够百分之百解决这种情况的方案。</strong></p><p><strong>当前大家普遍达成共识的一个方案</strong>：<br>首先，为大模型提供一定的上下文信息，让其输出会变得更稳定。<br>其次，利用本章的RAG，将检索出来的 文档和提示词输送给大模型，生成更可靠的答案。</p><h2 id="RAG的优缺点"><a href="#RAG的优缺点" class="headerlink" title="RAG的优缺点"></a>RAG的优缺点</h2><ul><li><p>RAG的优点 </p><ol><li>相比提示词工程，RAG有 <strong>更丰富的上下文和数据样本</strong>，可以不需要用户提供过多的背景描述，就能生 成比较符合用户预期的答案。</li><li>相比于模型微调，RAG可以提升问答内容的 <strong>时效性和 可靠性</strong></li><li>在一定程度上保护了业务数据的 隐私性。</li></ol></li><li><p>RAG的缺点 </p><ol><li>由于每次问答都涉及外部系统数据检索，因此RAG的 <strong>响应时延相对较高</strong>。</li><li>引用的外部知识数据会 <strong>消耗大量的模型Token</strong> 资源。</li></ol></li></ul><h2 id="Retrieval流程"><a href="#Retrieval流程" class="headerlink" title="Retrieval流程"></a>Retrieval流程</h2><p><img src="/2025/09/28/LangChain%E4%BD%BF%E7%94%A8%E4%B9%8BRetrieval/file-20250926111132475.png"></p><h3 id="环节1：Source（数据源）"><a href="#环节1：Source（数据源）" class="headerlink" title="环节1：Source（数据源）"></a>环节1：Source（数据源）</h3><p>指的是RAG架构中所外挂的知识库。这里有三点说明： </p><ol><li>原始数据源类型多样：如：视频、图片、文本、代码、文档等 </li><li>形式的多样性： <ul><li>可以是上百个.csv文件，可以是上千个.json文件，也可以是上万个.pdf文件 </li><li>可以是某一个业务流程外放的API，可以是某个网站的实时数据等</li></ul></li></ol><h3 id="环节2：Load（加载）"><a href="#环节2：Load（加载）" class="headerlink" title="环节2：Load（加载）"></a>环节2：Load（加载）</h3><p>文档加载器（Document Loaders）负责将来自不同数据源的非结构化文本，加载到 <strong>内存</strong>成为(Document)对象 。 </p><p>文档对象包含 <strong>文档内容</strong>和相关<strong>元数据信息</strong> ，例如TXT、CSV、HTML、JSON、Markdown、PDF，甚至 YouTube 视频转录等。<br><img src="/2025/09/28/LangChain%E4%BD%BF%E7%94%A8%E4%B9%8BRetrieval/file-20250926111455347.png"></p><p>文档加载器还支持“ <strong>延迟加载</strong>”模式，以缓解处理大文件时的内存压力。<br>文档加载器的编程接口使用起来非常简单，以下给出加载TXT格式文档的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.document_loadersimport TextLoader </span><br><span class="line"></span><br><span class="line">text_loader = TextLoader( <span class="string">&quot;./test.txt&quot;</span> ) </span><br><span class="line"></span><br><span class="line">docs = text_loader.load() <span class="comment">#返回List列表(Document对象) </span></span><br><span class="line"><span class="built_in">print</span> (docs)</span><br></pre></td></tr></table></figure><h3 id="环节3：Transform（转换）"><a href="#环节3：Transform（转换）" class="headerlink" title="环节3：Transform（转换）"></a>环节3：Transform（转换）</h3><p><strong>文档转换器(Document Transformers)</strong> 负责对加载的文档进行转换和处理，以便更好地适应下游任务的 需求。 </p><p>文档转换器提供了一致的接口（工具）来操作文档，主要包括以下几类：</p><ul><li><strong>文本拆分器(Text Splitters)</strong> ：将长文本拆分成语义上相关的小块，以适应语言模型的上下文窗口限 制。 </li><li><strong>冗余过滤器(Redundancy Filters)</strong> ：识别并过滤重复的文档。</li><li>元数据提取器(Metadata Extractors) ：从文档中提取标题、语调等结构化元数据。 </li><li><strong>多语言转换器(Multi-lingual Transformers)</strong> ：实现文档的机器翻译。 </li><li><strong>对话转换器(Conversational Transformers)</strong> ：将非结构化对话转换为问答格式的文档。</li></ul><p>总的来说，文档转换器是 LangChain 处理管道中非常重要的一个组件，它丰富了框架对文档的表示和 操作能力。</p><h4 id="环节3-1：Text-Splitting（文档拆分）"><a href="#环节3-1：Text-Splitting（文档拆分）" class="headerlink" title="环节3.1：Text Splitting（文档拆分）"></a>环节3.1：Text Splitting（文档拆分）</h4><ul><li>向量化并存入数据库中。 拆分&#x2F;分块的必要性：前一个环节加载后的文档对象可以直接传入文档拆分器进行拆分，而文档切块 后才能 </li><li>文档拆分器的多样性：LangChain提供了丰富的文档拆分器，不仅能够切分普通文本，还能切分 Markdown、JSON、HTML、代码等特殊格式的文本。 </li><li>拆分&#x2F;分块的挑战性：实际拆分操作中需要处理许多细节问题， 需要采用不同的分块策略。 <ul><li>可以按照 数据类型进行切片处理，比如针对 不同类型的文本、 不同的使用场景都 文本类数据，可以直接按照字符、段落进行切 片；代 码类数据则需要进一步细分以保证代码的功能性； </li><li>可以直接根据 token 进行切片处理</li></ul></li></ul><p><strong>在构建RAG应用程序的整个流程中，拆分&#x2F;分块是最具挑战性的环节之一，它显著影响检索效果</strong>。目前 还没有通用的方法可以明确指出哪一种分块策略最为有效。不同的使用场景和数据类型都会影响分块策 略的选择。</p><h3 id="环节4：Embed（嵌入）"><a href="#环节4：Embed（嵌入）" class="headerlink" title="环节4：Embed（嵌入）"></a>环节4：Embed（嵌入）</h3><p>文档嵌入模型（Text Embedding Models）负责将 <strong>文本</strong>转换为 <strong>向量表示</strong>，即<strong>模型赋予了文本计算机可 理解的数值表示</strong>，使文本可用于向量空间中的各种运算，大大拓展了文本分析的可能性，是自然语言处 理领域非常重要的技术。</p><p>举例：<br><img src="/2025/09/28/LangChain%E4%BD%BF%E7%94%A8%E4%B9%8BRetrieval/file-20250927222436889.png"></p><ul><li>实现原理：通过 <strong>特定算法</strong>（如Word2Vec）将语义信息编码为固定维度的向量，具体算法细节需后 续深入。 </li><li>关键特性：<strong>相似的词在向量空间中距离相近</strong>，例如”猫”和”犬”的向量夹角小于”猫”和”汽车”。<br><img src="/2025/09/28/LangChain%E4%BD%BF%E7%94%A8%E4%B9%8BRetrieval/file-20250927222545025.png"></li></ul><p>文本嵌入为 LangChain 中的问答、检索、推荐等功能提供了重要支持。具体为：</p><ul><li><strong>语义匹配</strong>：通过计算两个文本的向量余弦相似度，判断它们在语义上的相似程度，实现语义匹配。 </li><li><strong>文本检索</strong>：通过计算不同文本之间的向量相似度，可以实现语义搜索，找到向量空间中最相似的文 本。</li><li><strong>信息推荐</strong>：根据用户的历史记录或兴趣嵌入生成用户向量，计算不同信息的向量与用户向量的相似 度，推荐相似的信息。 </li><li><strong>知识挖掘</strong>：可以通过聚类、降维等手段分析文本向量的分布，发现文本之间的潜在关联，挖掘知 识。 </li><li><strong>自然语言处理</strong>：将词语、句子等表示为稠密向量，为神经网络等下游任务提供输入。</li></ul><h3 id="环节5：Store（存储）"><a href="#环节5：Store（存储）" class="headerlink" title="环节5：Store（存储）"></a>环节5：Store（存储）</h3><p>LangChain 还支持把文本嵌入存储到向量存储或临时缓存，以避免需要重新计算它们。这里就出现了数 据库，支持这些嵌入的高效 <strong>存储和搜索</strong>的需求。</p><p><img src="/2025/09/28/LangChain%E4%BD%BF%E7%94%A8%E4%B9%8BRetrieval/file-20250927222756909.png"></p><h3 id="环节6：Retrieve（检索）"><a href="#环节6：Retrieve（检索）" class="headerlink" title="环节6：Retrieve（检索）"></a>环节6：Retrieve（检索）</h3><p>检索器（Retrievers）是一种用于 <strong>响应非结构化查询</strong>的接口，它可以返回符合查询要求的文档。</p><p>LangChain 提供了一些常用的检索器，如 <strong>向量检索器、 文档检索器、 网站研究检索器</strong>等。 </p><p>通过配置不同的检索器，LangChain 可以灵活地平衡检索的精度、召回率与效率。检索结果将为后续的 问答生成提供信息支持，以产生更加准确和完整的回答。</p><h1 id="文档加载器-Document-Loaders"><a href="#文档加载器-Document-Loaders" class="headerlink" title="文档加载器 Document Loaders"></a>文档加载器 Document Loaders</h1><p>LangChain的设计：对于<strong>Source</strong>中多种不同的数据源，我们可以用一种统一的形式读取、调用。</p><h2 id="加载txt"><a href="#加载txt" class="headerlink" title="加载txt"></a>加载txt</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> TextLoader, PyPDFLoader  </span><br><span class="line">   </span><br><span class="line"><span class="comment"># 指明txt文档的路径  </span></span><br><span class="line">file_path = <span class="string">&quot;./asset/load/01-langchain-utf-8.txt&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建一个TextLoader的实例  </span></span><br><span class="line">text_loader = TextLoader(  </span><br><span class="line">    file_path=file_path,  </span><br><span class="line">    encoding=<span class="string">&quot;utf-8&quot;</span>,  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 调用load()，返回一个list[Document]  </span></span><br><span class="line">docs = text_loader.load()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(docs)  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(docs))  <span class="comment"># 查看列表中元素的个数‘  </span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(docs[<span class="number">0</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;./asset/load/01-langchain-utf-8.txt&#x27;</span>&#125;, page_content=<span class="string">&#x27;LangChain 是一个用于构建基于大语言模型（LLM）应用的开发框架，旨在帮助开发者更高效地集成、管理和增强大语言模型的能力，构建端到端的应用程序。它提供了一套模块化工具和接口，支持从简单的文本生成到复杂的多步骤推理任务&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">page_content=<span class="string">&#x27;LangChain 是一个用于构建基于大语言模型（LLM）应用的开发框架，旨在帮助开发者更高效地集成、管理和增强大语言模型的能力，构建端到端的应用程序。它提供了一套模块化工具和接口，支持从简单的文本生成到复杂的多步骤推理任务&#x27;</span> metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;./asset/load/01-langchain-utf-8.txt&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>Documment对象中有两个重要的属性： </p><ul><li>page_content：真正的文档内容 </li><li>metadata：文档内容的原数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示Document对象的元数据  </span></span><br><span class="line"><span class="built_in">print</span>(docs[<span class="number">0</span>].metadata)  </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#123;&#x27;source&#x27;: &#x27;./asset/load/01-langchain-utf-8.txt&#x27;&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>  </span><br><span class="line"><span class="comment"># 显示文档中的内容信息  </span></span><br><span class="line"><span class="built_in">print</span>(docs[<span class="number">0</span>].page_content)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">LangChain 是一个用于构建基于大语言模型（LLM）应用的开发框架，旨在帮助开发者更高效地集成、管理和增强大语言模型的能力，构建端到端的应用程序。它提供了一套模块化工具和接口，支持从简单的文本生成到复杂的多步骤推理任务</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>结果：</p><h2 id="加载pdf"><a href="#加载pdf" class="headerlink" title="加载pdf"></a>加载pdf</h2><h3 id="举例1："><a href="#举例1：" class="headerlink" title="举例1："></a><strong>举例1：</strong></h3><p>LangChain加载PDF文件使用的是pypdf，先安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pypdf</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入相关的依赖 PyPDFLoader()</span></span><br><span class="line"><span class="keyword">from</span> langchain_community.document_loaders.pdf <span class="keyword">import</span> PyPDFLoader  </span><br><span class="line">  </span><br><span class="line">pdf_loader = PyPDFLoader(  </span><br><span class="line">    file_path=<span class="string">&quot;./asset/load/02-load.pdf&quot;</span>  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line">docs = pdf_loader.load()  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(docs)  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(docs))</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Document(metadata=&#123;<span class="string">&#x27;producer&#x27;</span>: <span class="string">&#x27;Microsoft® Word 2019&#x27;</span>, <span class="string">&#x27;creator&#x27;</span>: <span class="string">&#x27;Microsoft® Word 2019&#x27;</span>, <span class="string">&#x27;creationdate&#x27;</span>: <span class="string">&#x27;2025-06-20T17:18:19+08:00&#x27;</span>, <span class="string">&#x27;moddate&#x27;</span>: <span class="string">&#x27;2025-06-20T17:18:19+08:00&#x27;</span>, <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;./asset/load/02-load.pdf&#x27;</span>, <span class="string">&#x27;total_pages&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;page&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;page_label&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;, page_content=<span class="string">&#x27;&quot;他的车，他的命！ 他忽然想起来，一年，二年，至少有三四年；一滴汗，两滴汗，不\n知道多少万滴汗，才挣出那辆车。从风里雨里的咬牙，从饭里茶里的自苦，才赚出那辆车。\n那辆车是他的一切挣扎与困苦的总结果与报酬，像身经百战的武士的一颗徽章。……他老想\n着远远的一辆车，可以使他自由，独立，像自己的手脚的那么一辆车。&quot; \n \n&quot;他吃，他喝，他嫖，他赌，他懒，他狡猾， 因为他没了心，他的心被人家摘了去。他\n只剩下那个高大的肉架子，等着溃烂，预备着到乱死岗子去。……体面的、要强的、好梦想\n的、利己的、个人的、健壮的、伟大的祥子，不知陪着人家送了多少回殡；不知道何时何地\n会埋起他自己来， 埋起这堕落的、 自私的、 不幸的、 社会病胎里的产儿， 个人主义的末路鬼！\n&quot;&#x27;</span>)]</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>同样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> (pages[<span class="number">0</span>]) <span class="comment">#langchain_core.documents.base.Document</span></span><br><span class="line"></span><br><span class="line">pages[<span class="number">0</span>].page_content <span class="comment">#只获取本页内容</span></span><br><span class="line"> </span><br><span class="line">pages[<span class="number">0</span>].metadata <span class="comment"># &#123;...,&#x27;source&#x27;: &#x27;./asset/load/load.pdf&#x27;,.., &#x27;page&#x27;: 0&#125;</span></span><br></pre></td></tr></table></figure><h3 id="举例2："><a href="#举例2：" class="headerlink" title="举例2："></a><strong>举例2：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_community.document_loaders.pdf <span class="keyword">import</span> PyPDFLoader  </span><br><span class="line">  </span><br><span class="line">pdf_loader = PyPDFLoader(  </span><br><span class="line">    file_path=<span class="string">&quot;https://arxiv.org/pdf/2302.03803&quot;</span>  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line">docs = pdf_loader.load()  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(docs))  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> docs:  </span><br><span class="line">    <span class="built_in">print</span>(doc)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">page_content=<span class="string">&#x27;arXiv:2302.03803v1  [math.AG]  7 Feb 2023</span></span><br><span class="line"><span class="string">A WEAK (k, k )-LEFSCHETZ THEOREM FOR PROJECTIVE</span></span><br><span class="line"><span class="string">TORIC ORBIFOLDS</span></span><br><span class="line"><span class="string">William D. Montoya</span></span><br><span class="line"><span class="string">Instituto de Matem´ atica, Estat´ ıstica e Computa¸ c˜ ao Cient´ ıﬁca,</span></span><br><span class="line"><span class="string">Universidade Estadual de Campinas (UNICAMP),</span></span><br><span class="line"><span class="string">Rua S´ ergio Buarque de Holanda 651, 13083-859, Campinas, SP , Brazil</span></span><br><span class="line"><span class="string">February 9, 2023</span></span><br><span class="line"><span class="string">Abstract</span></span><br><span class="line"><span class="string">Firstly we show a generalization of the (1,1)-Lefschetz theorem for projective</span></span><br><span class="line"><span class="string">toric orbifolds and secondly we prove that on 2k-dimensional quasi-smooth hyper-</span></span><br><span class="line"><span class="string">surfaces coming from quasi-smooth intersection surfaces, under the Cayley trick,</span></span><br><span class="line"><span class="string">every rational (k, k)-cohomology class is algebraic, i.e., the Hodge conjectureholds</span></span><br><span class="line"><span class="string">on them.</span></span><br><span class="line"><span class="string">1 Introduction</span></span><br><span class="line"><span class="string">In [3] we proved that, under suitable conditions, on a very general codimension s quasi-</span></span><br><span class="line"><span class="string">smooth intersection subvariety X in a projective toric orbifold Pd</span></span><br><span class="line"><span class="string">Σ with d +s = 2(k +1)</span></span><br><span class="line"><span class="string">the Hodge conjecture holds, that is, every (p, p )-cohomology class, under the Poincar´ e</span></span><br><span class="line"><span class="string">duality is a rational linear combination of fundamental classes of alge braic subvarieties</span></span><br><span class="line"><span class="string">of X. The proof of the above-mentioned result relies, for p ≠ d +1 − s, on a Lefschetz</span></span><br><span class="line"><span class="string">Date: February 9, 2023</span></span><br><span class="line"><span class="string">2020 Mathematics Subject Classiﬁcation: 14C30, 14M10, 14J70, 14M25</span></span><br><span class="line"><span class="string">Keywords: (1,1)- Lefschetz theorem, Hodge conjecture, toric varieties, complete intersection</span></span><br><span class="line"><span class="string">Email: wmontoya@ime.unicamp.br</span></span><br><span class="line"><span class="string">1&#x27;</span> metadata=&#123;<span class="string">&#x27;producer&#x27;</span>: <span class="string">&#x27;dvips + GPL Ghostscript GIT PRERELEASE 9.22&#x27;</span>, <span class="string">&#x27;creator&#x27;</span>: <span class="string">&#x27;LaTeX with hyperref&#x27;</span>, <span class="string">&#x27;creationdate&#x27;</span>: <span class="string">&#x27;2023-02-08T20:27:28-05:00&#x27;</span>, <span class="string">&#x27;moddate&#x27;</span>: <span class="string">&#x27;2023-02-08T20:27:28-05:00&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;subject&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;keywords&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;https://arxiv.org/pdf/2302.03803&#x27;</span>, <span class="string">&#x27;total_pages&#x27;</span>: 8, <span class="string">&#x27;page&#x27;</span>: 0, <span class="string">&#x27;page_label&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line">page_content=<span class="string">&#x27;theorem ([7]) and the Hard Lefschetz theorem for projective orb ifolds ([11]). When p =</span></span><br><span class="line"><span class="string">d +1 −s the proof relies on the Cayley trick, a trick which associates to X a quasi-smooth</span></span><br><span class="line"><span class="string">hypersurface Y in a projective vector bundle, and the Cayley Proposition (4.3) which</span></span><br><span class="line"><span class="string">gives an isomorphism of some primitive cohomologies (4.2) of X and Y . The Cayley</span></span><br><span class="line"><span class="string">trick, following the philosophy of Mavlyutov in [7], reduces results kn own for quasi-smooth</span></span><br><span class="line"><span class="string">hypersurfaces to quasi-smooth intersection subvarieties. The id ea in this paper goes the</span></span><br><span class="line"><span class="string">other way around, we translate some results for quasi-smooth int ersection subvarieties to</span></span><br><span class="line"><span class="string">quasi-smooth hypersurfaces, mainly the (1, 1)-Lefschetz theorem.</span></span><br><span class="line"><span class="string">Acknowledgement. I thank Prof. Ugo Bruzzo and Tiago Fonseca for useful discus-</span></span><br><span class="line"><span class="string">sions. I also acknowledge support from FAPESP postdoctoral gra nt No. 2019/23499-7.</span></span><br><span class="line"><span class="string">2 Preliminaries and Notation</span></span><br><span class="line"><span class="string">2.1 Toric varieties</span></span><br><span class="line"><span class="string">Let M be a free abelian group of rank d, let N =Hom(M, Z ), and NR =N ⊗Z R.</span></span><br><span class="line"><span class="string">Deﬁnition 2.1. • A convex subset σ ⊂NR is a rational k-dimensional simplicial cone</span></span><br><span class="line"><span class="string">if there exist k linearly independent primitive elements e1, . . . , e k ∈ N such that σ =</span></span><br><span class="line"><span class="string">&#123;µ1e1 +⋯+ µkek&#125;.</span></span><br><span class="line"><span class="string">• The generators ei are integral if for every i and any nonnegative rational number µ</span></span><br><span class="line"><span class="string">the product µei is in N only if µ is an integer.</span></span><br><span class="line"><span class="string">• Given two rational simplicial cones σ, σ′ one says that σ′ is a face of σ (σ′ &lt; σ) if</span></span><br><span class="line"><span class="string">the set of integral generators of σ′ is a subset of the set of integral generators of σ.</span></span><br><span class="line"><span class="string">• A ﬁnite set Σ =&#123;σ1, . . . , σ t&#125; of rational simplicial cones is called a rational simplicia l</span></span><br><span class="line"><span class="string">complete d-dimensional fan if:</span></span><br><span class="line"><span class="string">1. all faces of cones in Σ are in Σ ;</span></span><br><span class="line"><span class="string">2. if σ, σ ′ ∈Σ then σ ∩σ′ &lt;σ and σ ∩σ′ &lt;σ′;</span></span><br><span class="line"><span class="string">3. NR =σ1 ∪⋅⋅⋅∪ σt.</span></span><br><span class="line"><span class="string">A rational simplicial complete d-dimensional fan Σ deﬁnes a d-dimensional toric variety</span></span><br><span class="line"><span class="string">Pd</span></span><br><span class="line"><span class="string">Σ having only orbifold singularities which we assume to be projective. Mo reover, T ∶=</span></span><br><span class="line"><span class="string">N ⊗Z C∗ ≃ (C∗)d is the torus action on Pd</span></span><br><span class="line"><span class="string">Σ . We denote by Σ (i) the i-dimensional cones</span></span><br><span class="line"><span class="string">2&#x27;</span> metadata=&#123;<span class="string">&#x27;producer&#x27;</span>: <span class="string">&#x27;dvips + GPL Ghostscript GIT PRERELEASE 9.22&#x27;</span>, <span class="string">&#x27;creator&#x27;</span>: <span class="string">&#x27;LaTeX with hyperref&#x27;</span>, <span class="string">&#x27;creationdate&#x27;</span>: <span class="string">&#x27;2023-02-08T20:27:28-05:00&#x27;</span>, <span class="string">&#x27;moddate&#x27;</span>: <span class="string">&#x27;2023-02-08T20:27:28-05:00&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;subject&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;keywords&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;https://arxiv.org/pdf/2302.03803&#x27;</span>, <span class="string">&#x27;total_pages&#x27;</span>: 8, <span class="string">&#x27;page&#x27;</span>: 1, <span class="string">&#x27;page_label&#x27;</span>: <span class="string">&#x27;2&#x27;</span>&#125;</span><br><span class="line">page_content=<span class="string">&#x27;of Σ and each ρ ∈Σ corresponds to an irreducible T -invariant Weil divisor Dρ on Pd</span></span><br><span class="line"><span class="string">Σ . Let</span></span><br><span class="line"><span class="string">Cl(Σ ) be the group of Weil divisors on Pd</span></span><br><span class="line"><span class="string">Σ module rational equivalences.</span></span><br><span class="line"><span class="string">The total coordinate ring of Pd</span></span><br><span class="line"><span class="string">Σ is the polynomial ring S = C[xρ /divides.alt0 ρ ∈ Σ (1)], S has the</span></span><br><span class="line"><span class="string">Cl(Σ )-grading, a Weil divisor D =∑ρ∈Σ (1) uρDρ determines the monomial xu ∶=∏ρ∈Σ (1) xuρ</span></span><br><span class="line"><span class="string">ρ ∈</span></span><br><span class="line"><span class="string">S and conversely deg (xu)=[D]∈Cl(Σ ).</span></span><br><span class="line"><span class="string">For a cone σ ∈ Σ, ˆσ is the set of 1-dimensional cone in Σ that are not contained in σ</span></span><br><span class="line"><span class="string">and xˆσ ∶=∏ρ∈ˆσ xρ is the associated monomial in S.</span></span><br><span class="line"><span class="string">Deﬁnition 2.2. The irrelevant ideal of Pd</span></span><br><span class="line"><span class="string">Σ is the monomial ideal BΣ ∶=&lt; xˆσ /divides.alt0 σ ∈ Σ &gt; and</span></span><br><span class="line"><span class="string">the zero locus Z(Σ )∶=V(BΣ ) in the aﬃne space Ad ∶=Spec(S) is the irrelevant locus.</span></span><br><span class="line"><span class="string">Proposition 2.3 (Theorem 5.1.11 [5]) . The toric variety Pd</span></span><br><span class="line"><span class="string">Σ is a categorical quotient</span></span><br><span class="line"><span class="string">Ad ∖Z(Σ ) by the group Hom(Cl(Σ ), C∗) and the group action is induced by the Cl(Σ )-</span></span><br><span class="line"><span class="string">grading of S.</span></span><br><span class="line"><span class="string">2.2 Orbifolds</span></span><br><span class="line"><span class="string">Now we give a brief introduction to complex orbifolds and we mention th e needed theorems</span></span><br><span class="line"><span class="string">for the next section. Namely: de Rham theorem and Dolbeault theor em for complex</span></span><br><span class="line"><span class="string">orbifolds.</span></span><br><span class="line"><span class="string">Deﬁnition 2.4. A complex orbifold of complex dimension d is a singular complex space</span></span><br><span class="line"><span class="string">whose singularities are locally isomorphic to quotient sin gularities Cd/slash.left G, for ﬁnite sub-</span></span><br><span class="line"><span class="string">groups G ⊂Gl(d, C).</span></span><br><span class="line"><span class="string">Deﬁnition 2.5. A diﬀerential form on a complex orbifold Z is deﬁned locally at z ∈Z as</span></span><br><span class="line"><span class="string">a G-invariant diﬀerential form on Cd where G ⊂ Gl(d, C) and Z is locally isomorphic to</span></span><br><span class="line"><span class="string">Cd/slash.left G around z.</span></span><br><span class="line"><span class="string">Roughly speaking the local geometry of orbifolds reduces to local G-invariant geometry.</span></span><br><span class="line"><span class="string">We have a complex of diﬀerential forms (A●(Z), d )and a double complex (A●, ●(Z), ∂, ¯∂)</span></span><br><span class="line"><span class="string">of bigraded diﬀerential forms which deﬁne the de Rham and the Dolbe ault cohomology</span></span><br><span class="line"><span class="string">groups (for a ﬁxed p ∈N) respectively:</span></span><br><span class="line"><span class="string">H●</span></span><br><span class="line"><span class="string">dR(Z, C)∶= kerd</span></span><br><span class="line"><span class="string">im d and Hp, ●(Z, ¯∂)∶= ker ¯∂</span></span><br><span class="line"><span class="string">im ¯∂</span></span><br><span class="line"><span class="string">Theorem 2.6 (Theorem 3.4.4 in [4] and Theorem 1.2 in [1] ) . Let Z be a compact complex</span></span><br><span class="line"><span class="string">orbifold. There are natural isomorphisms:</span></span><br><span class="line"><span class="string">3&#x27;</span> metadata=&#123;<span class="string">&#x27;producer&#x27;</span>: <span class="string">&#x27;dvips + GPL Ghostscript GIT PRERELEASE 9.22&#x27;</span>, <span class="string">&#x27;creator&#x27;</span>: <span class="string">&#x27;LaTeX with hyperref&#x27;</span>, <span class="string">&#x27;creationdate&#x27;</span>: <span class="string">&#x27;2023-02-08T20:27:28-05:00&#x27;</span>, <span class="string">&#x27;moddate&#x27;</span>: <span class="string">&#x27;2023-02-08T20:27:28-05:00&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;subject&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;keywords&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;https://arxiv.org/pdf/2302.03803&#x27;</span>, <span class="string">&#x27;total_pages&#x27;</span>: 8, <span class="string">&#x27;page&#x27;</span>: 2, <span class="string">&#x27;page_label&#x27;</span>: <span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line">page_content=<span class="string">&#x27;• H●</span></span><br><span class="line"><span class="string">dR(Z, C)≃H●(Z, C)</span></span><br><span class="line"><span class="string">• Hp, ●(Z, ¯∂)≃H●(X, Ω p</span></span><br><span class="line"><span class="string">Z )</span></span><br><span class="line"><span class="string">3 (1,1)-Lefschetz theorem for projective toric orbifolds</span></span><br><span class="line"><span class="string">Deﬁnition 3.1. A subvariety X ⊂Pd</span></span><br><span class="line"><span class="string">Σ is quasi-smooth if V(IX )⊂A#Σ (1) is smooth outside</span></span><br><span class="line"><span class="string">Z(Σ ).</span></span><br><span class="line"><span class="string">Example 3.2. Quasi-smooth hypersurfaces or more generally quasi-smooth inte rsection sub-</span></span><br><span class="line"><span class="string">varieties are quasi-smooth subvarieties (see [2] or [7] for more det ails).</span></span><br><span class="line"><span class="string">△</span></span><br><span class="line"><span class="string">Remark 3.3. Quasi-smooth subvarieties are suborbifolds of Pd</span></span><br><span class="line"><span class="string">Σ in the sense of Satake in [8].</span></span><br><span class="line"><span class="string">Intuitively speaking they are subvarieties whose only singularities co me from the ambient</span></span><br><span class="line"><span class="string">space.</span></span><br><span class="line"><span class="string">△</span></span><br><span class="line"><span class="string">Theorem 3.4. Let X ⊂ Pd</span></span><br><span class="line"><span class="string">Σ be a quasi-smooth subvariety. Then every (1, 1)-cohomology</span></span><br><span class="line"><span class="string">class λ ∈H1, 1(X)∩H2(X, Z) is algebraic</span></span><br><span class="line"><span class="string">Proof. From the exponential short exact sequence</span></span><br><span class="line"><span class="string">0 →Z →OX →O∗</span></span><br><span class="line"><span class="string">X →0</span></span><br><span class="line"><span class="string">we have a long exact sequence in cohomology</span></span><br><span class="line"><span class="string">H1(O∗</span></span><br><span class="line"><span class="string">X )→H2(X, Z) →H2(OX )≃H0, 2(X)</span></span><br><span class="line"><span class="string">where the last isomorphisms is due to Steenbrink in [9]. Now, it is enoug h to prove the</span></span><br><span class="line"><span class="string">commutativity of the next diagram</span></span><br><span class="line"><span class="string">H2(X, Z) → → </span></span><br><span class="line"><span class="string">↓ ↓ </span></span><br><span class="line"><span class="string">H2(X, OX )</span></span><br><span class="line"><span class="string">≃ Dolbeault</span></span><br><span class="line"><span class="string">↓ ↓ </span></span><br><span class="line"><span class="string">H2(X, C)</span></span><br><span class="line"><span class="string">de Rham ≃</span></span><br><span class="line"><span class="string">↓ ↓ </span></span><br><span class="line"><span class="string">H2</span></span><br><span class="line"><span class="string">dR(X, C) → → H0, 2</span></span><br><span class="line"><span class="string">¯∂ (X)</span></span><br><span class="line"><span class="string">4&#x27;</span> metadata=&#123;<span class="string">&#x27;producer&#x27;</span>: <span class="string">&#x27;dvips + GPL Ghostscript GIT PRERELEASE 9.22&#x27;</span>, <span class="string">&#x27;creator&#x27;</span>: <span class="string">&#x27;LaTeX with hyperref&#x27;</span>, <span class="string">&#x27;creationdate&#x27;</span>: <span class="string">&#x27;2023-02-08T20:27:28-05:00&#x27;</span>, <span class="string">&#x27;moddate&#x27;</span>: <span class="string">&#x27;2023-02-08T20:27:28-05:00&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;subject&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;keywords&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;https://arxiv.org/pdf/2302.03803&#x27;</span>, <span class="string">&#x27;total_pages&#x27;</span>: 8, <span class="string">&#x27;page&#x27;</span>: 3, <span class="string">&#x27;page_label&#x27;</span>: <span class="string">&#x27;4&#x27;</span>&#125;</span><br><span class="line">page_content=<span class="string">&#x27;The key points are the de Rham and Dolbeault’s isomorphisms for orbif olds. The rest</span></span><br><span class="line"><span class="string">of the proof follows as the (1, 1)-Lefschetz theorem in [6].</span></span><br><span class="line"><span class="string">Remark 3.5. For k = 1 and Pd</span></span><br><span class="line"><span class="string">Σ as the projective space, we recover the classical (1, 1)-</span></span><br><span class="line"><span class="string">Lefschetz theorem.</span></span><br><span class="line"><span class="string">△</span></span><br><span class="line"><span class="string">By the Hard Lefschetz Theorem for projective orbifolds (see [11] for details) we get an</span></span><br><span class="line"><span class="string">isomorphism of cohomologies :</span></span><br><span class="line"><span class="string">H●(X, Q) ≃H2 dim X−●(X, Q)</span></span><br><span class="line"><span class="string">given by the Lefschetz morphism and since it is a morphism of Hodge st ructures, we have:</span></span><br><span class="line"><span class="string">H1, 1(X, Q) ≃Hdim X−1, dim X−1(X, Q)</span></span><br><span class="line"><span class="string">For X as before:</span></span><br><span class="line"><span class="string">Corollary 3.6. If the dimension of X is 1, 2 or 3. The Hodge conjecture holds on X.</span></span><br><span class="line"><span class="string">Proof. If the dimCX = 1 the result is clear by the Hard Lefschetz theorem for projective</span></span><br><span class="line"><span class="string">orbifolds. The dimension 2 and 3 cases are covered by Theorem 3.5 an d the Hard Lefschetz.</span></span><br><span class="line"><span class="string">theorem.4 Cayley trick and Cayley proposition</span></span><br><span class="line"><span class="string">The Cayley trick is a way to associate to a quasi-smooth intersection subvariety a quasi-</span></span><br><span class="line"><span class="string">smooth hypersurface. Let L1, . . . , L s be line bundles on Pd</span></span><br><span class="line"><span class="string">Σ and let π ∶ P(E) → Pd</span></span><br><span class="line"><span class="string">Σ be the</span></span><br><span class="line"><span class="string">projective space bundle associated to the vector bundle E =L1 ⊕⋯⊕ Ls. It is known that</span></span><br><span class="line"><span class="string">P(E) is a (d +s −1)-dimensional simplicial toric variety whose fan depends on the degre es</span></span><br><span class="line"><span class="string">of the line bundles and the fan Σ. Furthermore, if the Cox ring, witho ut considering the</span></span><br><span class="line"><span class="string">grading, of Pd</span></span><br><span class="line"><span class="string">Σ is C[x1, . . . , x m] then the Cox ring of P(E) is</span></span><br><span class="line"><span class="string">C[x1, . . . , x m, y 1, . . . , y s]</span></span><br><span class="line"><span class="string">Moreover for X a quasi-smooth intersection subvariety cut oﬀ by f1, . . . , f s with deg(fi)=</span></span><br><span class="line"><span class="string">[Li] we relate the hypersurface Y cut oﬀ by F = y1f1 +⋅⋅⋅+ ysfs which turns out to be</span></span><br><span class="line"><span class="string">quasi-smooth. For more details see Section 2 in [7].</span></span><br><span class="line"><span class="string">5&#x27;</span> metadata=&#123;<span class="string">&#x27;producer&#x27;</span>: <span class="string">&#x27;dvips + GPL Ghostscript GIT PRERELEASE 9.22&#x27;</span>, <span class="string">&#x27;creator&#x27;</span>: <span class="string">&#x27;LaTeX with hyperref&#x27;</span>, <span class="string">&#x27;creationdate&#x27;</span>: <span class="string">&#x27;2023-02-08T20:27:28-05:00&#x27;</span>, <span class="string">&#x27;moddate&#x27;</span>: <span class="string">&#x27;2023-02-08T20:27:28-05:00&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;subject&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;keywords&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;https://arxiv.org/pdf/2302.03803&#x27;</span>, <span class="string">&#x27;total_pages&#x27;</span>: 8, <span class="string">&#x27;page&#x27;</span>: 4, <span class="string">&#x27;page_label&#x27;</span>: <span class="string">&#x27;5&#x27;</span>&#125;</span><br><span class="line">page_content=<span class="string">&#x27;We will denote P(E) as Pd+s−1</span></span><br><span class="line"><span class="string">Σ ,X to keep track of its relation with X and Pd</span></span><br><span class="line"><span class="string">Σ .</span></span><br><span class="line"><span class="string">The following is a key remark.</span></span><br><span class="line"><span class="string">Remark 4.1. There is a morphism ι∶X →Y ⊂Pd+s−1</span></span><br><span class="line"><span class="string">Σ ,X . Moreover every point z ∶=(x, y )∈Y</span></span><br><span class="line"><span class="string">with y ≠ 0 has a preimage. Hence for any subvariety W = V(IW ) ⊂ X ⊂ Pd</span></span><br><span class="line"><span class="string">Σ there exists</span></span><br><span class="line"><span class="string">W ′ ⊂Y ⊂Pd+s−1</span></span><br><span class="line"><span class="string">Σ ,X such that π(W ′)=W , i.e., W ′ =&#123;z =(x, y ) /divides.alt0 x ∈W &#125;.</span></span><br><span class="line"><span class="string">△</span></span><br><span class="line"><span class="string">For X ⊂ Pd</span></span><br><span class="line"><span class="string">Σ a quasi-smooth intersection variety the morphism in cohomology indu ced</span></span><br><span class="line"><span class="string">by the inclusion i∗ ∶Hd−s(Pd</span></span><br><span class="line"><span class="string">Σ , C)→Hd−s(X, C) is injective by Proposition 1.4 in [7].</span></span><br><span class="line"><span class="string">Deﬁnition 4.2. The primitive cohomology of Hd−s</span></span><br><span class="line"><span class="string">prim(X)is the quotient Hd−s(X, C)/slash.left i∗(Hd−s(Pd</span></span><br><span class="line"><span class="string">Σ , C))</span></span><br><span class="line"><span class="string">and Hd−s</span></span><br><span class="line"><span class="string">prim(X, Q) with rational coeﬃcients.</span></span><br><span class="line"><span class="string">Hd−s(Pd</span></span><br><span class="line"><span class="string">Σ , C) and Hd−s(X, C) have pure Hodge structures, and the morphism i∗ is com-</span></span><br><span class="line"><span class="string">patible with them, so that Hd−s</span></span><br><span class="line"><span class="string">prim(X) gets a pure Hodge structure.</span></span><br><span class="line"><span class="string">The next Proposition is the Cayley proposition.</span></span><br><span class="line"><span class="string">Proposition 4.3. [Proposition 2.3 in [3] ] Let X =X1 ∩⋅⋅⋅∩ Xs be a quasi-smooth intersec-</span></span><br><span class="line"><span class="string">tion subvariety in Pd</span></span><br><span class="line"><span class="string">Σ cut oﬀ by homogeneous polynomials f1 . . . f s. Then for p ≠ d+s−1</span></span><br><span class="line"><span class="string">2 , d+s−3</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">Hp−1,d +s−1−p</span></span><br><span class="line"><span class="string">prim (Y )≃Hp−s,d −p</span></span><br><span class="line"><span class="string">prim (X).</span></span><br><span class="line"><span class="string">Corollary 4.4. If d +s =2(k +1),</span></span><br><span class="line"><span class="string">Hk+1−s,k +1−s</span></span><br><span class="line"><span class="string">prim (X)≃Hk,k</span></span><br><span class="line"><span class="string">prim(Y )</span></span><br><span class="line"><span class="string">Remark 4.5. The above isomorphisms are also true with rational coeﬃcients since H●(X, C) =</span></span><br><span class="line"><span class="string">H●(X, Q)⊗Q C. See the beginning of Section 7.1 in [10] for more details.</span></span><br><span class="line"><span class="string">△</span></span><br><span class="line"><span class="string">5 Main result</span></span><br><span class="line"><span class="string">Theorem 5.1. Let Y =&#123;F =y1f1 +⋯+ ykfk =0&#125;⊂P2k+1</span></span><br><span class="line"><span class="string">Σ ,X be the quasi-smooth hypersurface</span></span><br><span class="line"><span class="string">associated to the quasi-smooth intersection surface X = Xf1 ∩⋅⋅⋅∩ Xfk ⊂ Pk+2</span></span><br><span class="line"><span class="string">Σ . Then on Y</span></span><br><span class="line"><span class="string">the Hodge conjecture holds.</span></span><br><span class="line"><span class="string">Proof. If Hk,k</span></span><br><span class="line"><span class="string">prim(X, Q) = 0 we are done. So let us assume Hk,k</span></span><br><span class="line"><span class="string">prim(X, Q) ≠ 0. By the Cayley</span></span><br><span class="line"><span class="string">proposition Hk,k</span></span><br><span class="line"><span class="string">prim(Y, Q) ≃ H1, 1</span></span><br><span class="line"><span class="string">prim(X, Q) and by the (1, 1)-Lefschetz theorem for projective</span></span><br><span class="line"><span class="string">6&#x27;</span> metadata=&#123;<span class="string">&#x27;producer&#x27;</span>: <span class="string">&#x27;dvips + GPL Ghostscript GIT PRERELEASE 9.22&#x27;</span>, <span class="string">&#x27;creator&#x27;</span>: <span class="string">&#x27;LaTeX with hyperref&#x27;</span>, <span class="string">&#x27;creationdate&#x27;</span>: <span class="string">&#x27;2023-02-08T20:27:28-05:00&#x27;</span>, <span class="string">&#x27;moddate&#x27;</span>: <span class="string">&#x27;2023-02-08T20:27:28-05:00&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;subject&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;keywords&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;https://arxiv.org/pdf/2302.03803&#x27;</span>, <span class="string">&#x27;total_pages&#x27;</span>: 8, <span class="string">&#x27;page&#x27;</span>: 5, <span class="string">&#x27;page_label&#x27;</span>: <span class="string">&#x27;6&#x27;</span>&#125;</span><br><span class="line">page_content=<span class="string">&#x27;toric orbifolds there is a non-zero algebraic basis λC1 , . . . , λ Cn with rational coeﬃcients of</span></span><br><span class="line"><span class="string">H1, 1</span></span><br><span class="line"><span class="string">prim(X, Q), that is, there are n ∶=h1, 1</span></span><br><span class="line"><span class="string">prim(X, Q) algebraic curves C1, . . . , C n in X such that</span></span><br><span class="line"><span class="string">under the Poincar´ e duality the class in homology [Ci] goes to λCi , [Ci] ↦ λCi . Recall</span></span><br><span class="line"><span class="string">that the Cox ring of Pk+2 is contained in the Cox ring of P2k+1</span></span><br><span class="line"><span class="string">Σ ,X without considering the</span></span><br><span class="line"><span class="string">grading. Considering the grading we have that if α ∈ Cl(Pk+2</span></span><br><span class="line"><span class="string">Σ ) then (α, 0) ∈ Cl(P2k+1</span></span><br><span class="line"><span class="string">Σ ,X ). So</span></span><br><span class="line"><span class="string">the polynomials deﬁning Ci ⊂ Pk+2</span></span><br><span class="line"><span class="string">Σ can be interpreted in P2k+1</span></span><br><span class="line"><span class="string">X, Σ but with diﬀerent degree.</span></span><br><span class="line"><span class="string">Moreover, by Remark 4.1 each Ci is contained in Y = &#123;F = y1f1 + ⋯ + ykfk = 0&#125; and</span></span><br><span class="line"><span class="string">furthermore it has codimension k.</span></span><br><span class="line"><span class="string">Claim: &#123;λCi &#125;n</span></span><br><span class="line"><span class="string">i=1 is a basis of Hk,k</span></span><br><span class="line"><span class="string">prim(Y, Q).</span></span><br><span class="line"><span class="string">It is enough to prove that λCi is diﬀerent from zero in Hk,k</span></span><br><span class="line"><span class="string">prim(Y, Q) or equivalently that the</span></span><br><span class="line"><span class="string">cohomology classes &#123;λCi &#125;n</span></span><br><span class="line"><span class="string">i=1 do not come from the ambient space. By contradiction, let us</span></span><br><span class="line"><span class="string">assume that there exists a j and C ⊂P2k+1</span></span><br><span class="line"><span class="string">Σ ,X such that λC ∈Hk,k (P2k+1</span></span><br><span class="line"><span class="string">Σ ,X , Q) with i∗(λC )=λCj</span></span><br><span class="line"><span class="string">or in terms of homology there exists a (k +2)-dimensional algebraic subvariety V ⊂ P2k+1</span></span><br><span class="line"><span class="string">Σ ,X</span></span><br><span class="line"><span class="string">such that V ∩Y = Cj so they are equal as a homology class of P2k+1</span></span><br><span class="line"><span class="string">Σ ,X ,i.e., [V ∩Y ] = [Cj] .</span></span><br><span class="line"><span class="string">It is easy to check that π(V )∩X =Cj as a subvariety of Pk+2</span></span><br><span class="line"><span class="string">Σ where π ∶ (x, y )↦x. Hence</span></span><br><span class="line"><span class="string">[π(V )∩X] = [Cj] which is equivalent to say that λCj comes from Pk+2</span></span><br><span class="line"><span class="string">Σ which contradicts</span></span><br><span class="line"><span class="string">the choice of [Cj].</span></span><br><span class="line"><span class="string">Remark 5.2. Into the proof of the previous theorem, the key fact was that on X the</span></span><br><span class="line"><span class="string">Hodge conjecture holds and we translate it to Y by contradiction. So, using an analogous</span></span><br><span class="line"><span class="string">argument we have:</span></span><br><span class="line"><span class="string">△</span></span><br><span class="line"><span class="string">Proposition 5.3. Let Y =&#123;F =y1fs+⋯+ysfs =0&#125;⊂P2k+1</span></span><br><span class="line"><span class="string">Σ ,X be the quasi-smooth hypersurface</span></span><br><span class="line"><span class="string">associated to a quasi-smooth intersection subvariety X = Xf1 ∩ ⋅⋅⋅ ∩ Xfs ⊂ Pd</span></span><br><span class="line"><span class="string">Σ such that</span></span><br><span class="line"><span class="string">d +s =2(k +1). If the Hodge conjecture holds on X then it holds as well on Y .</span></span><br><span class="line"><span class="string">Corollary 5.4. If the dimension of Y is 2s −1, 2s or 2s +1 then the Hodge conjecture</span></span><br><span class="line"><span class="string">holds on Y .</span></span><br><span class="line"><span class="string">Proof. By Proposition 5.3 and Corollary 3.6.</span></span><br><span class="line"><span class="string">7&#x27;</span> metadata=&#123;<span class="string">&#x27;producer&#x27;</span>: <span class="string">&#x27;dvips + GPL Ghostscript GIT PRERELEASE 9.22&#x27;</span>, <span class="string">&#x27;creator&#x27;</span>: <span class="string">&#x27;LaTeX with hyperref&#x27;</span>, <span class="string">&#x27;creationdate&#x27;</span>: <span class="string">&#x27;2023-02-08T20:27:28-05:00&#x27;</span>, <span class="string">&#x27;moddate&#x27;</span>: <span class="string">&#x27;2023-02-08T20:27:28-05:00&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;subject&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;keywords&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;https://arxiv.org/pdf/2302.03803&#x27;</span>, <span class="string">&#x27;total_pages&#x27;</span>: 8, <span class="string">&#x27;page&#x27;</span>: 6, <span class="string">&#x27;page_label&#x27;</span>: <span class="string">&#x27;7&#x27;</span>&#125;</span><br><span class="line">page_content=<span class="string">&#x27;References</span></span><br><span class="line"><span class="string">[1] Angella, D. Cohomologies of certain orbifolds. Journal of Geometry and Physics</span></span><br><span class="line"><span class="string">71 (2013), 117–126.</span></span><br><span class="line"><span class="string">[2] Batyrev, V. V., and Cox, D. A.On the Hodge structure of projective hypersur-</span></span><br><span class="line"><span class="string">faces in toric varieties. Duke Mathematical Journal 75, 2 (Aug 199 4).</span></span><br><span class="line"><span class="string">[3] Bruzzo, U., and Montoya, W. On the Hodge conjecture for quasi-smooth in-</span></span><br><span class="line"><span class="string">tersections in toric varieties. S˜ ao Paulo J. Math. Sci. Special Section: Geometry in</span></span><br><span class="line"><span class="string">Algebra and Algebra in Geometry (2021).</span></span><br><span class="line"><span class="string">[4] Caramello Jr, F. C.Introduction to orbifolds. arXiv:1909.08699v6 (2019).</span></span><br><span class="line"><span class="string">[5] Cox, D., Little, J., and Schenck, H.Toric varieties, vol. 124. American Math-</span></span><br><span class="line"><span class="string">ematical Soc., 2011.</span></span><br><span class="line"><span class="string">[6] Griffiths, P., and Harris, J. Principles of Algebraic Geometry. John Wiley &amp;</span></span><br><span class="line"><span class="string">Sons, Ltd, 1978.</span></span><br><span class="line"><span class="string">[7] Mavlyutov, A. R. Cohomology of complete intersections in toric varieties. Pub-</span></span><br><span class="line"><span class="string">lished in Paciﬁc J. of Math. 191 No. 1 (1999), 133–144.</span></span><br><span class="line"><span class="string">[8] Satake, I. On a Generalization of the Notion of Manifold. Proceedings of the</span></span><br><span class="line"><span class="string">National Academy of Sciences of the United States of America 42, 6 (1956), 359–363.</span></span><br><span class="line"><span class="string">[9] Steenbrink, J. H. M.Intersection form for quasi-homogeneous singularities. Com-</span></span><br><span class="line"><span class="string">positio Mathematica 34 , 2 (1977), 211–223.</span></span><br><span class="line"><span class="string">[10] Voisin, C. Hodge Theory and Complex Algebraic Geometry I, vol. 1 of Cambridge</span></span><br><span class="line"><span class="string">Studies in Advanced Mathematics . Cambridge University Press, 2002.</span></span><br><span class="line"><span class="string">[11] W ang, Z. Z., and Zaffran, D.A remark on the Hard Lefschetz theorem for K¨ ahler</span></span><br><span class="line"><span class="string">orbifolds. Proceedings of the American Mathematical Society 137 , 08 (Aug 2009).</span></span><br><span class="line"><span class="string">8&#x27;</span> metadata=&#123;<span class="string">&#x27;producer&#x27;</span>: <span class="string">&#x27;dvips + GPL Ghostscript GIT PRERELEASE 9.22&#x27;</span>, <span class="string">&#x27;creator&#x27;</span>: <span class="string">&#x27;LaTeX with hyperref&#x27;</span>, <span class="string">&#x27;creationdate&#x27;</span>: <span class="string">&#x27;2023-02-08T20:27:28-05:00&#x27;</span>, <span class="string">&#x27;moddate&#x27;</span>: <span class="string">&#x27;2023-02-08T20:27:28-05:00&#x27;</span>, <span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;subject&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;keywords&#x27;</span>: <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;https://arxiv.org/pdf/2302.03803&#x27;</span>, <span class="string">&#x27;total_pages&#x27;</span>: 8, <span class="string">&#x27;page&#x27;</span>: 7, <span class="string">&#x27;page_label&#x27;</span>: <span class="string">&#x27;8&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="举例3：使用load-and-split"><a href="#举例3：使用load-and-split" class="headerlink" title="举例3：使用load_and_split()"></a>举例3：使用load_and_split()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入相关的依赖 PyPDFLoader() </span></span><br><span class="line"><span class="keyword">from</span> langchain.document_loaders <span class="keyword">import</span> PyPDFLoader </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.定义PyPDFLoader </span></span><br><span class="line">py_pdfLoader = PyPDFLoader(file_path= <span class="string">&quot;./asset/load/load.pdf&quot;</span> ) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.加载 </span></span><br><span class="line">docs = py_pdfLoader.load_and_split() <span class="comment">#底层默认使用了递归字符文本切分器 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (docs)</span><br></pre></td></tr></table></figure><p>同样，对于 PyPDFLoader ，依然是使用 .page_content 和 .metadata 去访问数据，也就是说，每一个 文档加载器虽然代码逻辑不同，应用需求不同，但使用方式是相同的。</p><h2 id="加载CSV"><a href="#加载CSV" class="headerlink" title="加载CSV"></a>加载CSV</h2><h3 id="举例1：加载csv所有列"><a href="#举例1：加载csv所有列" class="headerlink" title="举例1：加载csv所有列"></a>举例1：加载csv所有列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> CSVLoader  </span><br><span class="line">  </span><br><span class="line">csv_loader = CSVLoader(  </span><br><span class="line">    file_path=<span class="string">&quot;./asset/load/03-load.csv&quot;</span>  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line">docs = csv_loader.load()  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(docs))  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(docs)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> docs:  </span><br><span class="line">    <span class="built_in">print</span>(doc)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">[Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;./asset/load/03-load.csv&#x27;</span>, <span class="string">&#x27;row&#x27;</span>: 0&#125;, page_content=<span class="string">&#x27;id: 1\ntitle: Introduction to Python\ncontent: Python is a popular programming language.\nauthor: John Doe&#x27;</span>), Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;./asset/load/03-load.csv&#x27;</span>, <span class="string">&#x27;row&#x27;</span>: 1&#125;, page_content=<span class="string">&#x27;id: 2\ntitle: Data Science Basics\ncontent: Data science involves statistics and machine learning.\nauthor: Jane Smith&#x27;</span>), Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;./asset/load/03-load.csv&#x27;</span>, <span class="string">&#x27;row&#x27;</span>: 2&#125;, page_content=<span class="string">&#x27;id: 3\ntitle: Web Development\ncontent: HTML, CSS and JavaScript are core web technologies.\nauthor: Mike Johnson&#x27;</span>), Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;./asset/load/03-load.csv&#x27;</span>, <span class="string">&#x27;row&#x27;</span>: 3&#125;, page_content=<span class="string">&#x27;id: 4\ntitle: Artificial Intelligence\ncontent: AI is transforming many industries.\nauthor: Sarah Williams&#x27;</span>)]</span><br><span class="line">page_content=<span class="string">&#x27;id: 1</span></span><br><span class="line"><span class="string">title: Introduction to Python</span></span><br><span class="line"><span class="string">content: Python is a popular programming language.</span></span><br><span class="line"><span class="string">author: John Doe&#x27;</span> metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;./asset/load/03-load.csv&#x27;</span>, <span class="string">&#x27;row&#x27;</span>: 0&#125;</span><br><span class="line">page_content=<span class="string">&#x27;id: 2</span></span><br><span class="line"><span class="string">title: Data Science Basics</span></span><br><span class="line"><span class="string">content: Data science involves statistics and machine learning.</span></span><br><span class="line"><span class="string">author: Jane Smith&#x27;</span> metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;./asset/load/03-load.csv&#x27;</span>, <span class="string">&#x27;row&#x27;</span>: 1&#125;</span><br><span class="line">page_content=<span class="string">&#x27;id: 3</span></span><br><span class="line"><span class="string">title: Web Development</span></span><br><span class="line"><span class="string">content: HTML, CSS and JavaScript are core web technologies.</span></span><br><span class="line"><span class="string">author: Mike Johnson&#x27;</span> metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;./asset/load/03-load.csv&#x27;</span>, <span class="string">&#x27;row&#x27;</span>: 2&#125;</span><br><span class="line">page_content=<span class="string">&#x27;id: 4</span></span><br><span class="line"><span class="string">title: Artificial Intelligence</span></span><br><span class="line"><span class="string">content: AI is transforming many industries.</span></span><br><span class="line"><span class="string">author: Sarah Williams&#x27;</span> metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;./asset/load/03-load.csv&#x27;</span>, <span class="string">&#x27;row&#x27;</span>: 3&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="举例2：加载指定列"><a href="#举例2：加载指定列" class="headerlink" title="举例2：加载指定列"></a>举例2：加载指定列</h3><p>使用 source_column 参数指定文件加载的列，保存在source变量中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> CSVLoader  </span><br><span class="line">  </span><br><span class="line">csv_loader = CSVLoader(  </span><br><span class="line">    file_path=<span class="string">&quot;./asset/load/03-load.csv&quot;</span>,  </span><br><span class="line">    source_column=<span class="string">&quot;author&quot;</span>  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line">docs = csv_loader.load()  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(docs)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Document(metadata=&#123;<span class="built_in">source</span>: John Doe, row: 0&#125;, page_content=<span class="built_in">id</span>: 1\ntitle: Introduction to Python\ncontent: Python is a popular programming language.\nauthor: John Doe), Document(metadata=&#123;<span class="built_in">source</span>: Jane Smith, row: 1&#125;, page_content=<span class="built_in">id</span>: 2\ntitle: Data Science Basics\ncontent: Data science involves statistics and machine learning.\nauthor: Jane Smith), Document(metadata=&#123;<span class="built_in">source</span>: Mike Johnson, row: 2&#125;, page_content=<span class="built_in">id</span>: 3\ntitle: Web Development\ncontent: HTML, CSS and JavaScript are core web technologies.\nauthor: Mike Johnson), Document(metadata=&#123;<span class="built_in">source</span>: Sarah Williams, row: 3&#125;, page_content=<span class="built_in">id</span>: 4\ntitle: Artificial Intelligence\ncontent: AI is transforming many industries.\nauthor: Sarah Williams)]</span><br></pre></td></tr></table></figure><h2 id="加载JSON"><a href="#加载JSON" class="headerlink" title="加载JSON"></a>加载JSON</h2><p>LangChain提供的JSON格式的文档加载器是<strong>JSONLoader</strong>。在实际应用场景中，JSON格式的数据占有 很大比例，而且JSON的形式也是多样的。我们需要特别关注。 </p><p>JSONLoader 使用指定的 jq结构来解析 JSON 文件。jq是一个轻量级的命令行 JSON 处理器 ，可以对 JSON 格式的数据进行各种复杂的处理，包括数据过滤、映射、减少和转换，是处理 JSON 数据的首选 工具之一。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jq</span><br></pre></td></tr></table></figure><h3 id="举例1：使用JSONLoader文档加载器加载"><a href="#举例1：使用JSONLoader文档加载器加载" class="headerlink" title="举例1：使用JSONLoader文档加载器加载"></a>举例1：使用JSONLoader文档加载器加载</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> JSONLoader  </span><br><span class="line">  </span><br><span class="line">json_loader = JSONLoader(  </span><br><span class="line">    file_path=<span class="string">&quot;./asset/load/04-load.json&quot;</span>,  </span><br><span class="line">    jq_schema=<span class="string">&quot;.&quot;</span>, <span class="comment">#表示加载所有的字段  </span></span><br><span class="line">    text_content=<span class="literal">False</span>, <span class="comment">#将加载的json对象转换为json字符串  </span></span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line">docs = json_loader.load()  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(docs)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;E:\\myjupyte\\尚硅谷LangChain\\chapter07-RAG\\asset\\load\\04-load.json&#x27;</span>, <span class="string">&#x27;seq_num&#x27;</span>: 1&#125;, page_content=<span class="string">&#x27;&#123;&quot;messages&quot;: [&#123;&quot;sender&quot;: &quot;Alice&quot;, &quot;content&quot;: &quot;Hello, how are you today?&quot;, &quot;timestamp&quot;: &quot;2023-05-15T10:00:00&quot;&#125;, &#123;&quot;sender&quot;: &quot;Bob&quot;, &quot;content&quot;: &quot;I\&#x27;</span>m doing well, thanks <span class="keyword">for</span> asking!<span class="string">&quot;, &quot;</span>timestamp<span class="string">&quot;: &quot;</span>2023-05-15T10:02:00<span class="string">&quot;&#125;, &#123;&quot;</span>sender<span class="string">&quot;: &quot;</span>Alice<span class="string">&quot;, &quot;</span>content<span class="string">&quot;: &quot;</span>Would you like to meet <span class="keyword">for</span> lunch?<span class="string">&quot;, &quot;</span>timestamp<span class="string">&quot;: &quot;</span>2023-05-15T10:05:00<span class="string">&quot;&#125;, &#123;&quot;</span>sender<span class="string">&quot;: &quot;</span>Bob<span class="string">&quot;, &quot;</span>content<span class="string">&quot;: &quot;</span>Sure, that sounds great!<span class="string">&quot;, &quot;</span>timestamp<span class="string">&quot;: &quot;</span>2023-05-15T10:07:00<span class="string">&quot;&#125;], &quot;</span>conversation_id<span class="string">&quot;: &quot;</span>conv_12345<span class="string">&quot;, &quot;</span>participants<span class="string">&quot;: [&quot;</span>Alice<span class="string">&quot;, &quot;</span>Bob<span class="string">&quot;]&#125;&#x27;)]</span></span><br></pre></td></tr></table></figure><h3 id="举例2：加载json文件中messages-中的所有的content字段"><a href="#举例2：加载json文件中messages-中的所有的content字段" class="headerlink" title="举例2：加载json文件中messages[]中的所有的content字段"></a>举例2：加载json文件中messages[]中的所有的content字段</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> JSONLoader  </span><br><span class="line">  </span><br><span class="line">json_loader = JSONLoader(  </span><br><span class="line">    file_path=<span class="string">&quot;./asset/load/04-load.json&quot;</span>,  </span><br><span class="line">    jq_schema=<span class="string">&quot;.messages[].content&quot;</span>, <span class="comment">#加载messages[]的所有的content字段  </span></span><br><span class="line">    <span class="comment">#text_content=False, #将加载的json对象转换为json字符串  </span></span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line">docs = json_loader.load()  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> docs:  </span><br><span class="line">    <span class="built_in">print</span>(doc.page_content)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello, how are you today?</span><br><span class="line">I&#x27;m doing well, thanks for asking!</span><br><span class="line">Would you like to meet for lunch?</span><br><span class="line">Sure, that sounds great!</span><br></pre></td></tr></table></figure><h3 id="举例3：提取04-response-json文件中嵌套在-data-items-content-的文本"><a href="#举例3：提取04-response-json文件中嵌套在-data-items-content-的文本" class="headerlink" title="举例3：提取04-response.json文件中嵌套在 data.items[].content 的文本"></a>举例3：提取04-response.json文件中嵌套在 data.items[].content 的文本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> JSONLoader  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 方式1：  </span></span><br><span class="line"><span class="comment"># json_loader = JSONLoader(  </span></span><br><span class="line"><span class="comment">#     file_path=&quot;./asset/load/04-response.json&quot;,  </span></span><br><span class="line"><span class="comment">#     jq_schema=&quot;.data.items[].content&quot;, #data.items[].content  </span></span><br><span class="line"><span class="comment"># )  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 方式2：  </span></span><br><span class="line">json_loader = JSONLoader(  </span><br><span class="line">    file_path=<span class="string">&quot;./asset/load/04-response.json&quot;</span>,  </span><br><span class="line">    jq_schema=<span class="string">&quot;.data.items[]&quot;</span>, <span class="comment">#data.items[].content  </span></span><br><span class="line">    content_key=<span class="string">&quot;.content&quot;</span>,  </span><br><span class="line">    is_content_key_jq_parsable=<span class="literal">True</span>, <span class="comment">#用jq解析content_key  </span></span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line">docs = json_loader.load()  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> docs:  </span><br><span class="line">    <span class="built_in">print</span>(doc.page_content)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This article explains how to parse API responses...</span><br><span class="line">Learn to handle nested structures with...</span><br><span class="line">Best practices <span class="keyword">for</span> preserving metadata...</span><br></pre></td></tr></table></figure><h3 id="举例4：提取04-response-json文件中嵌套在-data-items-里的-title、content-和-其文本"><a href="#举例4：提取04-response-json文件中嵌套在-data-items-里的-title、content-和-其文本" class="headerlink" title="举例4：提取04-response.json文件中嵌套在 data.items[] 里的 title、content 和 其文本"></a>举例4：提取04-response.json文件中嵌套在 data.items[] 里的 title、content 和 其文本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入相关依赖  </span></span><br><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> JSONLoader  </span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 2.定义json文件的路径  </span></span><br><span class="line">file_path = <span class="string">&#x27;asset/load/04-response.json&#x27;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 3.定义JSONLoader对象  </span></span><br><span class="line"><span class="comment"># 提取嵌套在 data.items[].content 的文本，并保留其他字段作为元数据  </span></span><br><span class="line"><span class="comment"># loader = JSONLoader(  </span></span><br><span class="line"><span class="comment">#     file_path=file_path,  </span></span><br><span class="line"><span class="comment">#     # jq_schema=&quot;.data.items[] | &#123;id, author, text: (.title + &#x27;\n&#x27; + .content)&#125;&quot;,  </span></span><br><span class="line"><span class="comment">#     jq_schema=&#x27;&#x27;&#x27;.data.items[] | &#123;  </span></span><br><span class="line"><span class="comment">#     id,  </span></span><br><span class="line"><span class="comment">#     author,  </span></span><br><span class="line"><span class="comment">#     created_at,  </span></span><br><span class="line"><span class="comment">#     title, # 保留title字段  </span></span><br><span class="line"><span class="comment">#     text: (.title + &quot;\n&quot; + .content)  </span></span><br><span class="line"><span class="comment">#     &#125;&#x27;&#x27;&#x27;,  </span></span><br><span class="line"><span class="comment">#     content_key=&quot;.text&quot;,  # 再从条目中提取 content 字段  </span></span><br><span class="line"><span class="comment">#     is_content_key_jq_parsable=True  # 用jq解析content_key  </span></span><br><span class="line"><span class="comment"># )  </span></span><br><span class="line">loader = JSONLoader(  </span><br><span class="line">    file_path=file_path,  </span><br><span class="line">    <span class="comment"># jq_schema=&quot;.data.items[] | &#123;id, author, text: (.title + &#x27;\n&#x27; + .content)&#125;&quot;,  </span></span><br><span class="line">    jq_schema=<span class="string">&quot;.data.items[]&quot;</span>,  </span><br><span class="line">    content_key=<span class="string">&#x27;.title + &quot;\\n\\n&quot; + .content&#x27;</span>,  </span><br><span class="line">    is_content_key_jq_parsable=<span class="literal">True</span>  <span class="comment"># 用jq解析content_key  </span></span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># loader = JSONLoader(  </span></span><br><span class="line"><span class="comment">#     file_path=file_path,  </span></span><br><span class="line"><span class="comment">#     # jq_schema=&quot;.data.items[] | &#123;id, author, text: (.title + &#x27;\n&#x27; + .content)&#125;&quot;,  </span></span><br><span class="line"><span class="comment">#     jq_schema=&#x27;&#x27;&#x27;  </span></span><br><span class="line"><span class="comment">#         .data.items[] | &#123;  </span></span><br><span class="line"><span class="comment">#             metadata: &#123;  </span></span><br><span class="line"><span class="comment">#                 id,  </span></span><br><span class="line"><span class="comment">#                 author,  </span></span><br><span class="line"><span class="comment">#                 created_at  </span></span><br><span class="line"><span class="comment">#             &#125;,  </span></span><br><span class="line"><span class="comment">#             content: (.title + &quot;\n\n&quot; + .content)  </span></span><br><span class="line"><span class="comment">#         &#125;  </span></span><br><span class="line"><span class="comment">#     &#x27;&#x27;&#x27;,  # 构建新结构  </span></span><br><span class="line"><span class="comment">#      content_key=&#x27;.title + &quot;\\n\\n&quot; + .content&#x27;,  </span></span><br><span class="line"><span class="comment">#     is_content_key_jq_parsable=True  # 用jq解析content_key  </span></span><br><span class="line"><span class="comment"># )  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 4.加载  </span></span><br><span class="line">data = loader.load()  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> data:  </span><br><span class="line">    <span class="built_in">print</span>(doc.page_content)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Understanding JSONLoader</span><br><span class="line"></span><br><span class="line">This article explains how to parse API responses...</span><br><span class="line">Advanced jq Schema Patterns</span><br><span class="line"></span><br><span class="line">Learn to handle nested structures with...</span><br><span class="line">LangChain Metadata Handling</span><br><span class="line"></span><br><span class="line">Best practices for preserving metadata...</span><br></pre></td></tr></table></figure><h2 id="加载HTML-了解"><a href="#加载HTML-了解" class="headerlink" title="加载HTML(了解)"></a>加载HTML(了解)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install unstructured</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入相关的依赖</span></span><br><span class="line"><span class="keyword">from</span> langchain.document_loaders <span class="keyword">import</span> UnstructuredHTMLLoader </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.定义UnstructuredHTMLLoader对象 </span></span><br><span class="line"><span class="comment"># strategy: </span></span><br><span class="line"><span class="comment"># &quot;fast&quot; 解析加载html文件速度是比较快（但可能丢失部分结构或元数据） </span></span><br><span class="line"><span class="comment"># &quot;hi_res&quot;: (高分辨率解析) 解析精准（速度慢一些） </span></span><br><span class="line"><span class="comment"># &quot;ocr_only&quot; 强制使用ocr提取文本，仅仅适用于图像（对HTML无效） </span></span><br><span class="line"><span class="comment"># mode ：one of `&#123;&#x27;paged&#x27;, &#x27;elements&#x27;, &#x27;single&#x27;&#125; </span></span><br><span class="line"><span class="comment"># &quot;elements&quot; 按语义元素（标题、段落、列表、表格等）拆分成多个独立的小文档</span></span><br><span class="line"> html_loader = UnstructuredHTMLLoader( </span><br><span class="line"> file_path= <span class="string">&quot;asset/load/05-load.html&quot;</span> , </span><br><span class="line"> mode= <span class="string">&quot;elements&quot;</span> , </span><br><span class="line"> strategy= <span class="string">&quot;fast&quot;</span> ) </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3.加载</span></span><br><span class="line">docs = html_loader.load() </span><br><span class="line"><span class="built_in">print</span> ( <span class="built_in">len</span> (docs)) <span class="comment"># 16 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.打印</span></span><br><span class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> docs: </span><br><span class="line"><span class="built_in">print</span> (doc)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">16</span></span><br><span class="line">page_content=&#x27;首发于自然语言处理算法与实践&#x27; metadata=<span class="punctuation">&#123;</span>&#x27;source&#x27;<span class="punctuation">:</span> &#x27;asset/load/<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;last_modified&#x27;<span class="punctuation">:</span> &#x27;<span class="number">2025</span><span class="number">-09</span><span class="number">-24</span>T15<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">37</span>&#x27;<span class="punctuation">,</span> &#x27;languages&#x27;<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;zho&#x27;<span class="punctuation">]</span><span class="punctuation">,</span> &#x27;file_directory&#x27;<span class="punctuation">:</span> &#x27;asset/load&#x27;<span class="punctuation">,</span> &#x27;filename&#x27;<span class="punctuation">:</span> &#x27;<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;filetype&#x27;<span class="punctuation">:</span> &#x27;text/html&#x27;<span class="punctuation">,</span> &#x27;category&#x27;<span class="punctuation">:</span> &#x27;UncategorizedText&#x27;<span class="punctuation">,</span> &#x27;element_id&#x27;<span class="punctuation">:</span> &#x27;b082a3e1f4714ffa5f25741f39d82c17&#x27;<span class="punctuation">&#125;</span></span><br><span class="line">page_content=&#x27;RAG<span class="punctuation">:</span>将检索与生成方式相结合来做生成任务&#x27; metadata=<span class="punctuation">&#123;</span>&#x27;source&#x27;<span class="punctuation">:</span> &#x27;asset/load/<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;category_depth&#x27;<span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> &#x27;last_modified&#x27;<span class="punctuation">:</span> &#x27;<span class="number">2025</span><span class="number">-09</span><span class="number">-24</span>T15<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">37</span>&#x27;<span class="punctuation">,</span> &#x27;languages&#x27;<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;kor&#x27;<span class="punctuation">]</span><span class="punctuation">,</span> &#x27;file_directory&#x27;<span class="punctuation">:</span> &#x27;asset/load&#x27;<span class="punctuation">,</span> &#x27;filename&#x27;<span class="punctuation">:</span> &#x27;<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;filetype&#x27;<span class="punctuation">:</span> &#x27;text/html&#x27;<span class="punctuation">,</span> &#x27;category&#x27;<span class="punctuation">:</span> &#x27;Title&#x27;<span class="punctuation">,</span> &#x27;element_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">46103</span>fd31eae47ed36481d13185af8a9&#x27;<span class="punctuation">&#125;</span></span><br><span class="line">page_content=&#x27;烛之文&#x27; metadata=<span class="punctuation">&#123;</span>&#x27;source&#x27;<span class="punctuation">:</span> &#x27;asset/load/<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;last_modified&#x27;<span class="punctuation">:</span> &#x27;<span class="number">2025</span><span class="number">-09</span><span class="number">-24</span>T15<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">37</span>&#x27;<span class="punctuation">,</span> &#x27;languages&#x27;<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;kor&#x27;<span class="punctuation">]</span><span class="punctuation">,</span> &#x27;file_directory&#x27;<span class="punctuation">:</span> &#x27;asset/load&#x27;<span class="punctuation">,</span> &#x27;filename&#x27;<span class="punctuation">:</span> &#x27;<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;filetype&#x27;<span class="punctuation">:</span> &#x27;text/html&#x27;<span class="punctuation">,</span> &#x27;parent_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">46103</span>fd31eae47ed36481d13185af8a9&#x27;<span class="punctuation">,</span> &#x27;category&#x27;<span class="punctuation">:</span> &#x27;UncategorizedText&#x27;<span class="punctuation">,</span> &#x27;element_id&#x27;<span class="punctuation">:</span> &#x27;e02798c2e2bb964165a9e9356b82a3f6&#x27;<span class="punctuation">&#125;</span></span><br><span class="line">page_content=&#x27;<span class="number">1</span>、前言&#x27; metadata=<span class="punctuation">&#123;</span>&#x27;source&#x27;<span class="punctuation">:</span> &#x27;asset/load/<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;category_depth&#x27;<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> &#x27;last_modified&#x27;<span class="punctuation">:</span> &#x27;<span class="number">2025</span><span class="number">-09</span><span class="number">-24</span>T15<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">37</span>&#x27;<span class="punctuation">,</span> &#x27;languages&#x27;<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;zho&#x27;<span class="punctuation">]</span><span class="punctuation">,</span> &#x27;file_directory&#x27;<span class="punctuation">:</span> &#x27;asset/load&#x27;<span class="punctuation">,</span> &#x27;filename&#x27;<span class="punctuation">:</span> &#x27;<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;filetype&#x27;<span class="punctuation">:</span> &#x27;text/html&#x27;<span class="punctuation">,</span> &#x27;parent_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">46103</span>fd31eae47ed36481d13185af8a9&#x27;<span class="punctuation">,</span> &#x27;category&#x27;<span class="punctuation">:</span> &#x27;Title&#x27;<span class="punctuation">,</span> &#x27;element_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">683</span>a24e897e3a9b862ead6c7979a58dc&#x27;<span class="punctuation">&#125;</span></span><br><span class="line">page_content=&#x27;在上一篇&lt;kNN-NER：利用knn近邻算法来做命名实体识别&gt;提及到文中提出kNN-NER框架是一种检索式增强的方法（retrieval augmented methods），就去查看有关retrieval augmented的paper，了解其核心思想，觉得检索式增强的方法很适合许多业务场景使用，因其以一种简捷的方式将外部知识融于模型中去。今天就分享一篇来自Facebook AI Research的paper&lt;Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks&gt;，论文提出一种检索式增强生成方法，应用于知识密集型的NLP任务（如问答生成），该篇论文被<span class="number">2020</span>年NeurIPS 会议接收。&#x27; metadata=<span class="punctuation">&#123;</span>&#x27;source&#x27;<span class="punctuation">:</span> &#x27;asset/load/<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;last_modified&#x27;<span class="punctuation">:</span> &#x27;<span class="number">2025</span><span class="number">-09</span><span class="number">-24</span>T15<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">37</span>&#x27;<span class="punctuation">,</span> &#x27;languages&#x27;<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;nor&#x27;<span class="punctuation">]</span><span class="punctuation">,</span> &#x27;file_directory&#x27;<span class="punctuation">:</span> &#x27;asset/load&#x27;<span class="punctuation">,</span> &#x27;filename&#x27;<span class="punctuation">:</span> &#x27;<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;filetype&#x27;<span class="punctuation">:</span> &#x27;text/html&#x27;<span class="punctuation">,</span> &#x27;parent_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">683</span>a24e897e3a9b862ead6c7979a58dc&#x27;<span class="punctuation">,</span> &#x27;category&#x27;<span class="punctuation">:</span> &#x27;NarrativeText&#x27;<span class="punctuation">,</span> &#x27;element_id&#x27;<span class="punctuation">:</span> &#x27;d345b4a58c84984eb1acf1105fd9f214&#x27;<span class="punctuation">&#125;</span></span><br><span class="line">page_content=&#x27;文中说到，以BERT之类的大规模预训练模型将很多事实知识信息存入模型中，可以看着是pre-trained parametric类型，尽管以fine-tuned方式在下游任务取得显著的成效，但这类方法仍存在无法精准地获取和操作知识的缺陷。而在上述提及的问题上，传统知识检索的方法能很好的应对，这类方法可以看着是non-parametric memory类型。于是，论文提出检索式增强生成方法（retrieval-augmented generation，RAG），主要思想就是将pre-trained parametric与non-parametric memory结合起来做语言生成任务，将两类模型集成起来提高任务处理效果。&#x27; metadata=<span class="punctuation">&#123;</span>&#x27;source&#x27;<span class="punctuation">:</span> &#x27;asset/load/<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;last_modified&#x27;<span class="punctuation">:</span> &#x27;<span class="number">2025</span><span class="number">-09</span><span class="number">-24</span>T15<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">37</span>&#x27;<span class="punctuation">,</span> &#x27;languages&#x27;<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;nor&#x27;<span class="punctuation">]</span><span class="punctuation">,</span> &#x27;file_directory&#x27;<span class="punctuation">:</span> &#x27;asset/load&#x27;<span class="punctuation">,</span> &#x27;filename&#x27;<span class="punctuation">:</span> &#x27;<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;filetype&#x27;<span class="punctuation">:</span> &#x27;text/html&#x27;<span class="punctuation">,</span> &#x27;parent_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">683</span>a24e897e3a9b862ead6c7979a58dc&#x27;<span class="punctuation">,</span> &#x27;category&#x27;<span class="punctuation">:</span> &#x27;UncategorizedText&#x27;<span class="punctuation">,</span> &#x27;element_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">2</span>fe8d146b5803ec72e5173bf15599710&#x27;<span class="punctuation">&#125;</span></span><br><span class="line">page_content=&#x27;<span class="number">2</span>、RAG方法&#x27; metadata=<span class="punctuation">&#123;</span>&#x27;source&#x27;<span class="punctuation">:</span> &#x27;asset/load/<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;category_depth&#x27;<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> &#x27;last_modified&#x27;<span class="punctuation">:</span> &#x27;<span class="number">2025</span><span class="number">-09</span><span class="number">-24</span>T15<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">37</span>&#x27;<span class="punctuation">,</span> &#x27;languages&#x27;<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;zho&#x27;<span class="punctuation">]</span><span class="punctuation">,</span> &#x27;file_directory&#x27;<span class="punctuation">:</span> &#x27;asset/load&#x27;<span class="punctuation">,</span> &#x27;filename&#x27;<span class="punctuation">:</span> &#x27;<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;filetype&#x27;<span class="punctuation">:</span> &#x27;text/html&#x27;<span class="punctuation">,</span> &#x27;parent_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">46103</span>fd31eae47ed36481d13185af8a9&#x27;<span class="punctuation">,</span> &#x27;category&#x27;<span class="punctuation">:</span> &#x27;Title&#x27;<span class="punctuation">,</span> &#x27;element_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">22</span>ca96c9bf71395b8fbbf0928bd7f292&#x27;<span class="punctuation">&#125;</span></span><br><span class="line">page_content=&#x27;上图为论文提出RAG模型的整体示意图。主要包括两大模块：一个检索器（Retriever， p_\\eta(z|x) ） + 一个生成器（Generator， p_\\theta(y_i|x<span class="punctuation">,</span>z<span class="punctuation">,</span>y_<span class="punctuation">&#123;</span><span class="number">1</span><span class="punctuation">:</span>i<span class="number">-1</span><span class="punctuation">&#125;</span>) ）。前者包括query encoder和document index，分别负责query的编码和文档的索引；后者是一个seq2seq的生成模型。在检索中，使用的是最大内积搜索的方法（MIPS）来检索top-K相关文档。&#x27; metadata=<span class="punctuation">&#123;</span>&#x27;source&#x27;<span class="punctuation">:</span> &#x27;asset/load/<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;last_modified&#x27;<span class="punctuation">:</span> &#x27;<span class="number">2025</span><span class="number">-09</span><span class="number">-24</span>T15<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">37</span>&#x27;<span class="punctuation">,</span> &#x27;languages&#x27;<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;cat&#x27;<span class="punctuation">,</span> &#x27;nor&#x27;<span class="punctuation">]</span><span class="punctuation">,</span> &#x27;file_directory&#x27;<span class="punctuation">:</span> &#x27;asset/load&#x27;<span class="punctuation">,</span> &#x27;filename&#x27;<span class="punctuation">:</span> &#x27;<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;filetype&#x27;<span class="punctuation">:</span> &#x27;text/html&#x27;<span class="punctuation">,</span> &#x27;parent_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">22</span>ca96c9bf71395b8fbbf0928bd7f292&#x27;<span class="punctuation">,</span> &#x27;category&#x27;<span class="punctuation">:</span> &#x27;NarrativeText&#x27;<span class="punctuation">,</span> &#x27;element_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">6</span>bbc63aaa7b3afb8d2685e9b3de78a4c&#x27;<span class="punctuation">&#125;</span></span><br><span class="line">page_content=&#x27;<span class="number">3</span>、实验&#x27; metadata=<span class="punctuation">&#123;</span>&#x27;source&#x27;<span class="punctuation">:</span> &#x27;asset/load/<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;category_depth&#x27;<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> &#x27;last_modified&#x27;<span class="punctuation">:</span> &#x27;<span class="number">2025</span><span class="number">-09</span><span class="number">-24</span>T15<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">37</span>&#x27;<span class="punctuation">,</span> &#x27;languages&#x27;<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;zho&#x27;<span class="punctuation">]</span><span class="punctuation">,</span> &#x27;file_directory&#x27;<span class="punctuation">:</span> &#x27;asset/load&#x27;<span class="punctuation">,</span> &#x27;filename&#x27;<span class="punctuation">:</span> &#x27;<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;filetype&#x27;<span class="punctuation">:</span> &#x27;text/html&#x27;<span class="punctuation">,</span> &#x27;parent_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">46103</span>fd31eae47ed36481d13185af8a9&#x27;<span class="punctuation">,</span> &#x27;category&#x27;<span class="punctuation">:</span> &#x27;Title&#x27;<span class="punctuation">,</span> &#x27;element_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">4</span>df308cd6991fb9e3f0592371bae26be&#x27;<span class="punctuation">&#125;</span></span><br><span class="line">page_content=&#x27;论文在四类Knowledge-Intensive 任务上进行实验，具体包括开放问答（Open-domain Question Answering ）、摘要式问答（Abstractive Question Answering） 、开放问题生成（Jeopardy Question Generation）、事实判断（Fact Verification ），并使用维基百科（包含<span class="number">2100</span>万个文档）作为检索库。&#x27; metadata=<span class="punctuation">&#123;</span>&#x27;source&#x27;<span class="punctuation">:</span> &#x27;asset/load/<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;last_modified&#x27;<span class="punctuation">:</span> &#x27;<span class="number">2025</span><span class="number">-09</span><span class="number">-24</span>T15<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">37</span>&#x27;<span class="punctuation">,</span> &#x27;languages&#x27;<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;eng&#x27;<span class="punctuation">]</span><span class="punctuation">,</span> &#x27;file_directory&#x27;<span class="punctuation">:</span> &#x27;asset/load&#x27;<span class="punctuation">,</span> &#x27;filename&#x27;<span class="punctuation">:</span> &#x27;<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;filetype&#x27;<span class="punctuation">:</span> &#x27;text/html&#x27;<span class="punctuation">,</span> &#x27;parent_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">4</span>df308cd6991fb9e3f0592371bae26be&#x27;<span class="punctuation">,</span> &#x27;category&#x27;<span class="punctuation">:</span> &#x27;UncategorizedText&#x27;<span class="punctuation">,</span> &#x27;element_id&#x27;<span class="punctuation">:</span> &#x27;ed6e043c7fd99ec0824b91725c66e0ba&#x27;<span class="punctuation">&#125;</span></span><br><span class="line">page_content=&#x27;<span class="number">4</span>、结语&#x27; metadata=<span class="punctuation">&#123;</span>&#x27;source&#x27;<span class="punctuation">:</span> &#x27;asset/load/<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;category_depth&#x27;<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> &#x27;last_modified&#x27;<span class="punctuation">:</span> &#x27;<span class="number">2025</span><span class="number">-09</span><span class="number">-24</span>T15<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">37</span>&#x27;<span class="punctuation">,</span> &#x27;languages&#x27;<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;zho&#x27;<span class="punctuation">]</span><span class="punctuation">,</span> &#x27;file_directory&#x27;<span class="punctuation">:</span> &#x27;asset/load&#x27;<span class="punctuation">,</span> &#x27;filename&#x27;<span class="punctuation">:</span> &#x27;<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;filetype&#x27;<span class="punctuation">:</span> &#x27;text/html&#x27;<span class="punctuation">,</span> &#x27;parent_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">46103</span>fd31eae47ed36481d13185af8a9&#x27;<span class="punctuation">,</span> &#x27;category&#x27;<span class="punctuation">:</span> &#x27;Title&#x27;<span class="punctuation">,</span> &#x27;element_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">95</span>bc5bffaa5cfd41f5242f9f8b330761&#x27;<span class="punctuation">&#125;</span></span><br><span class="line">page_content=&#x27;本次分享基于检索增强方式将外部知识融于生成任务中一个新的框架――RAG。对比T5 和 BART这类擅长处理生成任务的模型来说，RAG更新外部知识是不需要重新预训练，成本低；而对比pipeline方法，RAG利用外部知识并不需要构造负责的特征工程。总的来说，RAG方法可作为外部知识融合框架的一种有效实例。&#x27; metadata=<span class="punctuation">&#123;</span>&#x27;source&#x27;<span class="punctuation">:</span> &#x27;asset/load/<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;last_modified&#x27;<span class="punctuation">:</span> &#x27;<span class="number">2025</span><span class="number">-09</span><span class="number">-24</span>T15<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">37</span>&#x27;<span class="punctuation">,</span> &#x27;languages&#x27;<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;zho&#x27;<span class="punctuation">,</span> &#x27;kor&#x27;<span class="punctuation">]</span><span class="punctuation">,</span> &#x27;file_directory&#x27;<span class="punctuation">:</span> &#x27;asset/load&#x27;<span class="punctuation">,</span> &#x27;filename&#x27;<span class="punctuation">:</span> &#x27;<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;filetype&#x27;<span class="punctuation">:</span> &#x27;text/html&#x27;<span class="punctuation">,</span> &#x27;parent_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">95</span>bc5bffaa5cfd41f5242f9f8b330761&#x27;<span class="punctuation">,</span> &#x27;category&#x27;<span class="punctuation">:</span> &#x27;UncategorizedText&#x27;<span class="punctuation">,</span> &#x27;element_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">232</span>dc4ae399e0a8847bfcdeb2e64e215&#x27;<span class="punctuation">&#125;</span></span><br><span class="line">page_content=&#x27;有兴趣可关注笔者公众号：自然语言处理算法与实践&#x27; metadata=<span class="punctuation">&#123;</span>&#x27;source&#x27;<span class="punctuation">:</span> &#x27;asset/load/<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;last_modified&#x27;<span class="punctuation">:</span> &#x27;<span class="number">2025</span><span class="number">-09</span><span class="number">-24</span>T15<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">37</span>&#x27;<span class="punctuation">,</span> &#x27;languages&#x27;<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;zho&#x27;<span class="punctuation">,</span> &#x27;kor&#x27;<span class="punctuation">]</span><span class="punctuation">,</span> &#x27;file_directory&#x27;<span class="punctuation">:</span> &#x27;asset/load&#x27;<span class="punctuation">,</span> &#x27;filename&#x27;<span class="punctuation">:</span> &#x27;<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;filetype&#x27;<span class="punctuation">:</span> &#x27;text/html&#x27;<span class="punctuation">,</span> &#x27;parent_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">95</span>bc5bffaa5cfd41f5242f9f8b330761&#x27;<span class="punctuation">,</span> &#x27;category&#x27;<span class="punctuation">:</span> &#x27;UncategorizedText&#x27;<span class="punctuation">,</span> &#x27;element_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">41</span>f28a1034fdc4291daf652054c20bd2&#x27;<span class="punctuation">&#125;</span></span><br><span class="line">page_content=&#x27;编辑于 <span class="number">2022</span><span class="number">-04</span><span class="number">-06</span> <span class="number">10</span><span class="punctuation">:</span><span class="number">47</span>&#x27; metadata=<span class="punctuation">&#123;</span>&#x27;source&#x27;<span class="punctuation">:</span> &#x27;asset/load/<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;last_modified&#x27;<span class="punctuation">:</span> &#x27;<span class="number">2025</span><span class="number">-09</span><span class="number">-24</span>T15<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">37</span>&#x27;<span class="punctuation">,</span> &#x27;languages&#x27;<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;zho&#x27;<span class="punctuation">]</span><span class="punctuation">,</span> &#x27;file_directory&#x27;<span class="punctuation">:</span> &#x27;asset/load&#x27;<span class="punctuation">,</span> &#x27;filename&#x27;<span class="punctuation">:</span> &#x27;<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;filetype&#x27;<span class="punctuation">:</span> &#x27;text/html&#x27;<span class="punctuation">,</span> &#x27;parent_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">95</span>bc5bffaa5cfd41f5242f9f8b330761&#x27;<span class="punctuation">,</span> &#x27;category&#x27;<span class="punctuation">:</span> &#x27;UncategorizedText&#x27;<span class="punctuation">,</span> &#x27;element_id&#x27;<span class="punctuation">:</span> &#x27;f70255f8bf13d39885508fd845c22382&#x27;<span class="punctuation">&#125;</span></span><br><span class="line">page_content=&#x27;深度学习（Deep Learning）&#x27; metadata=<span class="punctuation">&#123;</span>&#x27;source&#x27;<span class="punctuation">:</span> &#x27;asset/load/<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;last_modified&#x27;<span class="punctuation">:</span> &#x27;<span class="number">2025</span><span class="number">-09</span><span class="number">-24</span>T15<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">37</span>&#x27;<span class="punctuation">,</span> &#x27;languages&#x27;<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;nld&#x27;<span class="punctuation">,</span> &#x27;eng&#x27;<span class="punctuation">]</span><span class="punctuation">,</span> &#x27;file_directory&#x27;<span class="punctuation">:</span> &#x27;asset/load&#x27;<span class="punctuation">,</span> &#x27;filename&#x27;<span class="punctuation">:</span> &#x27;<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;filetype&#x27;<span class="punctuation">:</span> &#x27;text/html&#x27;<span class="punctuation">,</span> &#x27;parent_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">95</span>bc5bffaa5cfd41f5242f9f8b330761&#x27;<span class="punctuation">,</span> &#x27;category&#x27;<span class="punctuation">:</span> &#x27;UncategorizedText&#x27;<span class="punctuation">,</span> &#x27;element_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">1818</span>d3e8e3a4ce395732bba3428a111d&#x27;<span class="punctuation">&#125;</span></span><br><span class="line">page_content=&#x27;自然语言处理算法与实践&#x27; metadata=<span class="punctuation">&#123;</span>&#x27;source&#x27;<span class="punctuation">:</span> &#x27;asset/load/<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;category_depth&#x27;<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> &#x27;last_modified&#x27;<span class="punctuation">:</span> &#x27;<span class="number">2025</span><span class="number">-09</span><span class="number">-24</span>T15<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">37</span>&#x27;<span class="punctuation">,</span> &#x27;languages&#x27;<span class="punctuation">:</span> <span class="punctuation">[</span>&#x27;kor&#x27;<span class="punctuation">,</span> &#x27;zho&#x27;<span class="punctuation">]</span><span class="punctuation">,</span> &#x27;file_directory&#x27;<span class="punctuation">:</span> &#x27;asset/load&#x27;<span class="punctuation">,</span> &#x27;filename&#x27;<span class="punctuation">:</span> &#x27;<span class="number">05</span>-load.html&#x27;<span class="punctuation">,</span> &#x27;filetype&#x27;<span class="punctuation">:</span> &#x27;text/html&#x27;<span class="punctuation">,</span> &#x27;parent_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">95</span>bc5bffaa5cfd41f5242f9f8b330761&#x27;<span class="punctuation">,</span> &#x27;category&#x27;<span class="punctuation">:</span> &#x27;Title&#x27;<span class="punctuation">,</span> &#x27;element_id&#x27;<span class="punctuation">:</span> &#x27;<span class="number">95058</span>f2148219d97462c5c4bfe175502&#x27;<span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="加载Markdown-了解"><a href="#加载Markdown-了解" class="headerlink" title="加载Markdown(了解)"></a>加载Markdown(了解)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install markdown </span><br><span class="line">pip install unstructured</span><br></pre></td></tr></table></figure><h3 id="举例1：使用MarkDownLoader加载md文件"><a href="#举例1：使用MarkDownLoader加载md文件" class="headerlink" title="举例1：使用MarkDownLoader加载md文件"></a>举例1：使用MarkDownLoader加载md文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入相关的依赖</span></span><br><span class="line"><span class="keyword">from</span> langchain.document_loaders <span class="keyword">import</span> UnstructuredMarkdownLoader </span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.定义UnstructuredMarkdownLoader对象</span></span><br><span class="line">md_loader = UnstructuredMarkdownLoader( file_path= <span class="string">&quot;asset/load/06-load.md&quot;</span> , strategy= <span class="string">&quot;fast&quot;</span> ) </span><br><span class="line"><span class="comment"># 3.加载</span></span><br><span class="line">docs = md_loader.load() </span><br><span class="line"><span class="built_in">print</span> ( <span class="built_in">len</span> (docs)) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.打印</span></span><br><span class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> docs: </span><br><span class="line">pprint(doc)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">Document(metadata=&#123;&#x27;source&#x27;: &#x27;asset/load/06-load.md&#x27;&#125;, page_content=&#x27;自然语言处理技术文档\n\n本文档用于测试UnstructuredMarkdownLoader的中文处理能力。\n\n第一章：简介\n\n自然语言处理(NLP)是人工智能的重要分支，主要技术包括：\n\n文本分类\n\n命名实体识别\n\n机器翻译\n\n情感分析\n\n问答系统\n\n第二章：关键技术\n\n2.1 预训练模型\n\nBERT：双向Transformer编码器\n\nGPT：自回归语言模型\n\nT5：文本到文本转换框架\n\n2.2 代码示例\n\n```python from transformers import pipeline\n\n创建文本分类管道\n\nclassifier = pipeline(&quot;text-classification&quot;, model=&quot;bert-base-chinese&quot;)\n\nresult = classifier(&quot;这家餐厅的服务很棒！&quot;) print(result)&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="举例2：精细分割文档，保留结构信息"><a href="#举例2：精细分割文档，保留结构信息" class="headerlink" title="举例2：精细分割文档，保留结构信息"></a>举例2：精细分割文档，保留结构信息</h3><p>将Markdown文档按语义元素（标题、段落、列表、表格等）拆分成多个独立的小文档（Element对 象），而不是返回单个大文档。通过指定mode&#x3D;”elements”轻松保持这种分离。<br>每个分割后的元素会包含元数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入相关的依赖</span></span><br><span class="line"><span class="keyword">from</span> langchain.document_loaders <span class="keyword">import</span> UnstructuredMarkdownLoader </span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.定义UnstructuredMarkdownLoader对象</span></span><br><span class="line">md_loader = UnstructuredMarkdownLoader( </span><br><span class="line">file_path= <span class="string">&quot;./asset/load/06-load.md&quot;</span> ,</span><br><span class="line">mode= <span class="string">&quot;elements&quot;</span> ,</span><br><span class="line">strategy= <span class="string">&quot;fast&quot;</span> ) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.加载</span></span><br><span class="line">docs = md_loader.load() </span><br><span class="line"><span class="built_in">print</span> ( <span class="built_in">len</span> (docs)) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.打印</span></span><br><span class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> docs: </span><br><span class="line"><span class="comment"># pprint(doc) </span></span><br><span class="line">pprint(doc.page_content)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">19</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset/load/06-load.md&#x27;</span>, <span class="string">&#x27;category_depth&#x27;</span>: 0, <span class="string">&#x27;languages&#x27;</span>: [<span class="string">&#x27;eng&#x27;</span>], <span class="string">&#x27;file_directory&#x27;</span>: <span class="string">&#x27;asset/load&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;06-load.md&#x27;</span>, <span class="string">&#x27;filetype&#x27;</span>: <span class="string">&#x27;text/markdown&#x27;</span>, <span class="string">&#x27;last_modified&#x27;</span>: <span class="string">&#x27;2025-09-24T15:26:39&#x27;</span>, <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;Title&#x27;</span>, <span class="string">&#x27;element_id&#x27;</span>: <span class="string">&#x27;184afae73069130590c7608c471f63f4&#x27;</span>&#125;, page_content=<span class="string">&#x27;自然语言处理技术文档&#x27;</span>)</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset/load/06-load.md&#x27;</span>, <span class="string">&#x27;languages&#x27;</span>: [<span class="string">&#x27;eng&#x27;</span>], <span class="string">&#x27;file_directory&#x27;</span>: <span class="string">&#x27;asset/load&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;06-load.md&#x27;</span>, <span class="string">&#x27;filetype&#x27;</span>: <span class="string">&#x27;text/markdown&#x27;</span>, <span class="string">&#x27;last_modified&#x27;</span>: <span class="string">&#x27;2025-09-24T15:26:39&#x27;</span>, <span class="string">&#x27;parent_id&#x27;</span>: <span class="string">&#x27;184afae73069130590c7608c471f63f4&#x27;</span>, <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;UncategorizedText&#x27;</span>, <span class="string">&#x27;element_id&#x27;</span>: <span class="string">&#x27;18f55c7a014f88171f86dc848b58a83b&#x27;</span>&#125;, page_content=<span class="string">&#x27;本文档用于测试UnstructuredMarkdownLoader的中文处理能力。&#x27;</span>)</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset/load/06-load.md&#x27;</span>, <span class="string">&#x27;category_depth&#x27;</span>: 1, <span class="string">&#x27;languages&#x27;</span>: [<span class="string">&#x27;eng&#x27;</span>], <span class="string">&#x27;file_directory&#x27;</span>: <span class="string">&#x27;asset/load&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;06-load.md&#x27;</span>, <span class="string">&#x27;filetype&#x27;</span>: <span class="string">&#x27;text/markdown&#x27;</span>, <span class="string">&#x27;last_modified&#x27;</span>: <span class="string">&#x27;2025-09-24T15:26:39&#x27;</span>, <span class="string">&#x27;parent_id&#x27;</span>: <span class="string">&#x27;184afae73069130590c7608c471f63f4&#x27;</span>, <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;Title&#x27;</span>, <span class="string">&#x27;element_id&#x27;</span>: <span class="string">&#x27;6a6844d806798af924a74eecc9bf3c1f&#x27;</span>&#125;, page_content=<span class="string">&#x27;第一章：简介&#x27;</span>)</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset/load/06-load.md&#x27;</span>, <span class="string">&#x27;languages&#x27;</span>: [<span class="string">&#x27;eng&#x27;</span>], <span class="string">&#x27;file_directory&#x27;</span>: <span class="string">&#x27;asset/load&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;06-load.md&#x27;</span>, <span class="string">&#x27;filetype&#x27;</span>: <span class="string">&#x27;text/markdown&#x27;</span>, <span class="string">&#x27;last_modified&#x27;</span>: <span class="string">&#x27;2025-09-24T15:26:39&#x27;</span>, <span class="string">&#x27;parent_id&#x27;</span>: <span class="string">&#x27;6a6844d806798af924a74eecc9bf3c1f&#x27;</span>, <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;UncategorizedText&#x27;</span>, <span class="string">&#x27;element_id&#x27;</span>: <span class="string">&#x27;e7b3e94da2b42ec341e42747172c2fb1&#x27;</span>&#125;, page_content=<span class="string">&#x27;自然语言处理(NLP)是人工智能的重要分支，主要技术包括：&#x27;</span>)</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset/load/06-load.md&#x27;</span>, <span class="string">&#x27;category_depth&#x27;</span>: 1, <span class="string">&#x27;languages&#x27;</span>: [<span class="string">&#x27;eng&#x27;</span>], <span class="string">&#x27;file_directory&#x27;</span>: <span class="string">&#x27;asset/load&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;06-load.md&#x27;</span>, <span class="string">&#x27;filetype&#x27;</span>: <span class="string">&#x27;text/markdown&#x27;</span>, <span class="string">&#x27;last_modified&#x27;</span>: <span class="string">&#x27;2025-09-24T15:26:39&#x27;</span>, <span class="string">&#x27;parent_id&#x27;</span>: <span class="string">&#x27;6a6844d806798af924a74eecc9bf3c1f&#x27;</span>, <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;ListItem&#x27;</span>, <span class="string">&#x27;element_id&#x27;</span>: <span class="string">&#x27;eb53d308db7e96fa7bf107143411c209&#x27;</span>&#125;, page_content=<span class="string">&#x27;文本分类&#x27;</span>)</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset/load/06-load.md&#x27;</span>, <span class="string">&#x27;category_depth&#x27;</span>: 1, <span class="string">&#x27;languages&#x27;</span>: [<span class="string">&#x27;eng&#x27;</span>], <span class="string">&#x27;file_directory&#x27;</span>: <span class="string">&#x27;asset/load&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;06-load.md&#x27;</span>, <span class="string">&#x27;filetype&#x27;</span>: <span class="string">&#x27;text/markdown&#x27;</span>, <span class="string">&#x27;last_modified&#x27;</span>: <span class="string">&#x27;2025-09-24T15:26:39&#x27;</span>, <span class="string">&#x27;parent_id&#x27;</span>: <span class="string">&#x27;6a6844d806798af924a74eecc9bf3c1f&#x27;</span>, <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;ListItem&#x27;</span>, <span class="string">&#x27;element_id&#x27;</span>: <span class="string">&#x27;d3cd19f3de6c7be342b6d45249ed5936&#x27;</span>&#125;, page_content=<span class="string">&#x27;命名实体识别&#x27;</span>)</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset/load/06-load.md&#x27;</span>, <span class="string">&#x27;category_depth&#x27;</span>: 1, <span class="string">&#x27;languages&#x27;</span>: [<span class="string">&#x27;eng&#x27;</span>], <span class="string">&#x27;file_directory&#x27;</span>: <span class="string">&#x27;asset/load&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;06-load.md&#x27;</span>, <span class="string">&#x27;filetype&#x27;</span>: <span class="string">&#x27;text/markdown&#x27;</span>, <span class="string">&#x27;last_modified&#x27;</span>: <span class="string">&#x27;2025-09-24T15:26:39&#x27;</span>, <span class="string">&#x27;parent_id&#x27;</span>: <span class="string">&#x27;6a6844d806798af924a74eecc9bf3c1f&#x27;</span>, <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;ListItem&#x27;</span>, <span class="string">&#x27;element_id&#x27;</span>: <span class="string">&#x27;4af0dd9da13771840a9696cdcbb502e1&#x27;</span>&#125;, page_content=<span class="string">&#x27;机器翻译&#x27;</span>)</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset/load/06-load.md&#x27;</span>, <span class="string">&#x27;category_depth&#x27;</span>: 1, <span class="string">&#x27;languages&#x27;</span>: [<span class="string">&#x27;eng&#x27;</span>], <span class="string">&#x27;file_directory&#x27;</span>: <span class="string">&#x27;asset/load&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;06-load.md&#x27;</span>, <span class="string">&#x27;filetype&#x27;</span>: <span class="string">&#x27;text/markdown&#x27;</span>, <span class="string">&#x27;last_modified&#x27;</span>: <span class="string">&#x27;2025-09-24T15:26:39&#x27;</span>, <span class="string">&#x27;parent_id&#x27;</span>: <span class="string">&#x27;6a6844d806798af924a74eecc9bf3c1f&#x27;</span>, <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;ListItem&#x27;</span>, <span class="string">&#x27;element_id&#x27;</span>: <span class="string">&#x27;862050b1daeb945947f4c00587f16954&#x27;</span>&#125;, page_content=<span class="string">&#x27;情感分析&#x27;</span>)</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset/load/06-load.md&#x27;</span>, <span class="string">&#x27;category_depth&#x27;</span>: 1, <span class="string">&#x27;languages&#x27;</span>: [<span class="string">&#x27;eng&#x27;</span>], <span class="string">&#x27;file_directory&#x27;</span>: <span class="string">&#x27;asset/load&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;06-load.md&#x27;</span>, <span class="string">&#x27;filetype&#x27;</span>: <span class="string">&#x27;text/markdown&#x27;</span>, <span class="string">&#x27;last_modified&#x27;</span>: <span class="string">&#x27;2025-09-24T15:26:39&#x27;</span>, <span class="string">&#x27;parent_id&#x27;</span>: <span class="string">&#x27;6a6844d806798af924a74eecc9bf3c1f&#x27;</span>, <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;ListItem&#x27;</span>, <span class="string">&#x27;element_id&#x27;</span>: <span class="string">&#x27;7f221beeb60cc8089f9878c70230b9a5&#x27;</span>&#125;, page_content=<span class="string">&#x27;问答系统&#x27;</span>)</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset/load/06-load.md&#x27;</span>, <span class="string">&#x27;category_depth&#x27;</span>: 1, <span class="string">&#x27;languages&#x27;</span>: [<span class="string">&#x27;eng&#x27;</span>], <span class="string">&#x27;file_directory&#x27;</span>: <span class="string">&#x27;asset/load&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;06-load.md&#x27;</span>, <span class="string">&#x27;filetype&#x27;</span>: <span class="string">&#x27;text/markdown&#x27;</span>, <span class="string">&#x27;last_modified&#x27;</span>: <span class="string">&#x27;2025-09-24T15:26:39&#x27;</span>, <span class="string">&#x27;parent_id&#x27;</span>: <span class="string">&#x27;184afae73069130590c7608c471f63f4&#x27;</span>, <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;Title&#x27;</span>, <span class="string">&#x27;element_id&#x27;</span>: <span class="string">&#x27;c2bf8c7c4e88556b7afb7b5407d4fbf2&#x27;</span>&#125;, page_content=<span class="string">&#x27;第二章：关键技术&#x27;</span>)</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset/load/06-load.md&#x27;</span>, <span class="string">&#x27;category_depth&#x27;</span>: 2, <span class="string">&#x27;languages&#x27;</span>: [<span class="string">&#x27;eng&#x27;</span>], <span class="string">&#x27;file_directory&#x27;</span>: <span class="string">&#x27;asset/load&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;06-load.md&#x27;</span>, <span class="string">&#x27;filetype&#x27;</span>: <span class="string">&#x27;text/markdown&#x27;</span>, <span class="string">&#x27;last_modified&#x27;</span>: <span class="string">&#x27;2025-09-24T15:26:39&#x27;</span>, <span class="string">&#x27;parent_id&#x27;</span>: <span class="string">&#x27;c2bf8c7c4e88556b7afb7b5407d4fbf2&#x27;</span>, <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;Title&#x27;</span>, <span class="string">&#x27;element_id&#x27;</span>: <span class="string">&#x27;d32a685b6777cb3277c7732ca2603203&#x27;</span>&#125;, page_content=<span class="string">&#x27;2.1 预训练模型&#x27;</span>)</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset/load/06-load.md&#x27;</span>, <span class="string">&#x27;category_depth&#x27;</span>: 1, <span class="string">&#x27;emphasized_text_contents&#x27;</span>: [<span class="string">&#x27;BERT&#x27;</span>], <span class="string">&#x27;emphasized_text_tags&#x27;</span>: [<span class="string">&#x27;b&#x27;</span>], <span class="string">&#x27;languages&#x27;</span>: [<span class="string">&#x27;eng&#x27;</span>], <span class="string">&#x27;file_directory&#x27;</span>: <span class="string">&#x27;asset/load&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;06-load.md&#x27;</span>, <span class="string">&#x27;filetype&#x27;</span>: <span class="string">&#x27;text/markdown&#x27;</span>, <span class="string">&#x27;last_modified&#x27;</span>: <span class="string">&#x27;2025-09-24T15:26:39&#x27;</span>, <span class="string">&#x27;parent_id&#x27;</span>: <span class="string">&#x27;d32a685b6777cb3277c7732ca2603203&#x27;</span>, <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;ListItem&#x27;</span>, <span class="string">&#x27;element_id&#x27;</span>: <span class="string">&#x27;3efd83a33d46349a06c9489309f23af0&#x27;</span>&#125;, page_content=<span class="string">&#x27;BERT：双向Transformer编码器&#x27;</span>)</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset/load/06-load.md&#x27;</span>, <span class="string">&#x27;category_depth&#x27;</span>: 1, <span class="string">&#x27;emphasized_text_contents&#x27;</span>: [<span class="string">&#x27;GPT&#x27;</span>], <span class="string">&#x27;emphasized_text_tags&#x27;</span>: [<span class="string">&#x27;b&#x27;</span>], <span class="string">&#x27;languages&#x27;</span>: [<span class="string">&#x27;eng&#x27;</span>], <span class="string">&#x27;file_directory&#x27;</span>: <span class="string">&#x27;asset/load&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;06-load.md&#x27;</span>, <span class="string">&#x27;filetype&#x27;</span>: <span class="string">&#x27;text/markdown&#x27;</span>, <span class="string">&#x27;last_modified&#x27;</span>: <span class="string">&#x27;2025-09-24T15:26:39&#x27;</span>, <span class="string">&#x27;parent_id&#x27;</span>: <span class="string">&#x27;d32a685b6777cb3277c7732ca2603203&#x27;</span>, <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;ListItem&#x27;</span>, <span class="string">&#x27;element_id&#x27;</span>: <span class="string">&#x27;042b24863d1db56d10e6222413089a30&#x27;</span>&#125;, page_content=<span class="string">&#x27;GPT：自回归语言模型&#x27;</span>)</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset/load/06-load.md&#x27;</span>, <span class="string">&#x27;category_depth&#x27;</span>: 1, <span class="string">&#x27;emphasized_text_contents&#x27;</span>: [<span class="string">&#x27;T5&#x27;</span>], <span class="string">&#x27;emphasized_text_tags&#x27;</span>: [<span class="string">&#x27;b&#x27;</span>], <span class="string">&#x27;languages&#x27;</span>: [<span class="string">&#x27;eng&#x27;</span>], <span class="string">&#x27;file_directory&#x27;</span>: <span class="string">&#x27;asset/load&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;06-load.md&#x27;</span>, <span class="string">&#x27;filetype&#x27;</span>: <span class="string">&#x27;text/markdown&#x27;</span>, <span class="string">&#x27;last_modified&#x27;</span>: <span class="string">&#x27;2025-09-24T15:26:39&#x27;</span>, <span class="string">&#x27;parent_id&#x27;</span>: <span class="string">&#x27;d32a685b6777cb3277c7732ca2603203&#x27;</span>, <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;ListItem&#x27;</span>, <span class="string">&#x27;element_id&#x27;</span>: <span class="string">&#x27;7da9d82f5274c3edb7ae917995c08db2&#x27;</span>&#125;, page_content=<span class="string">&#x27;T5：文本到文本转换框架&#x27;</span>)</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset/load/06-load.md&#x27;</span>, <span class="string">&#x27;category_depth&#x27;</span>: 2, <span class="string">&#x27;languages&#x27;</span>: [<span class="string">&#x27;eng&#x27;</span>], <span class="string">&#x27;file_directory&#x27;</span>: <span class="string">&#x27;asset/load&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;06-load.md&#x27;</span>, <span class="string">&#x27;filetype&#x27;</span>: <span class="string">&#x27;text/markdown&#x27;</span>, <span class="string">&#x27;last_modified&#x27;</span>: <span class="string">&#x27;2025-09-24T15:26:39&#x27;</span>, <span class="string">&#x27;parent_id&#x27;</span>: <span class="string">&#x27;c2bf8c7c4e88556b7afb7b5407d4fbf2&#x27;</span>, <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;Title&#x27;</span>, <span class="string">&#x27;element_id&#x27;</span>: <span class="string">&#x27;58fa664fefbefa6e86ee4fc8dd128878&#x27;</span>&#125;, page_content=<span class="string">&#x27;2.2 代码示例&#x27;</span>)</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset/load/06-load.md&#x27;</span>, <span class="string">&#x27;languages&#x27;</span>: [<span class="string">&#x27;eng&#x27;</span>], <span class="string">&#x27;file_directory&#x27;</span>: <span class="string">&#x27;asset/load&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;06-load.md&#x27;</span>, <span class="string">&#x27;filetype&#x27;</span>: <span class="string">&#x27;text/markdown&#x27;</span>, <span class="string">&#x27;last_modified&#x27;</span>: <span class="string">&#x27;2025-09-24T15:26:39&#x27;</span>, <span class="string">&#x27;parent_id&#x27;</span>: <span class="string">&#x27;58fa664fefbefa6e86ee4fc8dd128878&#x27;</span>, <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;NarrativeText&#x27;</span>, <span class="string">&#x27;element_id&#x27;</span>: <span class="string">&#x27;2d72807f991457ffe38dad8b46480b0b&#x27;</span>&#125;, page_content=<span class="string">&#x27;```python from transformers import pipeline&#x27;</span>)</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset/load/06-load.md&#x27;</span>, <span class="string">&#x27;category_depth&#x27;</span>: 0, <span class="string">&#x27;languages&#x27;</span>: [<span class="string">&#x27;eng&#x27;</span>], <span class="string">&#x27;file_directory&#x27;</span>: <span class="string">&#x27;asset/load&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;06-load.md&#x27;</span>, <span class="string">&#x27;filetype&#x27;</span>: <span class="string">&#x27;text/markdown&#x27;</span>, <span class="string">&#x27;last_modified&#x27;</span>: <span class="string">&#x27;2025-09-24T15:26:39&#x27;</span>, <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;Title&#x27;</span>, <span class="string">&#x27;element_id&#x27;</span>: <span class="string">&#x27;f5a25376ceb9e9392b4e0b2b60153cca&#x27;</span>&#125;, page_content=<span class="string">&#x27;创建文本分类管道&#x27;</span>)</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset/load/06-load.md&#x27;</span>, <span class="string">&#x27;languages&#x27;</span>: [<span class="string">&#x27;eng&#x27;</span>], <span class="string">&#x27;file_directory&#x27;</span>: <span class="string">&#x27;asset/load&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;06-load.md&#x27;</span>, <span class="string">&#x27;filetype&#x27;</span>: <span class="string">&#x27;text/markdown&#x27;</span>, <span class="string">&#x27;last_modified&#x27;</span>: <span class="string">&#x27;2025-09-24T15:26:39&#x27;</span>, <span class="string">&#x27;parent_id&#x27;</span>: <span class="string">&#x27;f5a25376ceb9e9392b4e0b2b60153cca&#x27;</span>, <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;UncategorizedText&#x27;</span>, <span class="string">&#x27;element_id&#x27;</span>: <span class="string">&#x27;9745c5d59a60933121ca91a9b71e6acf&#x27;</span>&#125;, page_content=<span class="string">&#x27;classifier = pipeline(&quot;text-classification&quot;, model=&quot;bert-base-chinese&quot;)&#x27;</span>)</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset/load/06-load.md&#x27;</span>, <span class="string">&#x27;languages&#x27;</span>: [<span class="string">&#x27;eng&#x27;</span>], <span class="string">&#x27;file_directory&#x27;</span>: <span class="string">&#x27;asset/load&#x27;</span>, <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;06-load.md&#x27;</span>, <span class="string">&#x27;filetype&#x27;</span>: <span class="string">&#x27;text/markdown&#x27;</span>, <span class="string">&#x27;last_modified&#x27;</span>: <span class="string">&#x27;2025-09-24T15:26:39&#x27;</span>, <span class="string">&#x27;parent_id&#x27;</span>: <span class="string">&#x27;f5a25376ceb9e9392b4e0b2b60153cca&#x27;</span>, <span class="string">&#x27;category&#x27;</span>: <span class="string">&#x27;UncategorizedText&#x27;</span>, <span class="string">&#x27;element_id&#x27;</span>: <span class="string">&#x27;7ebd846af465424c8c01cb58cfa79c86&#x27;</span>&#125;, page_content=<span class="string">&#x27;result = classifier(&quot;这家餐厅的服务很棒！&quot;) print(result)&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="加载File-Directory-了解"><a href="#加载File-Directory-了解" class="headerlink" title="加载File Directory(了解)"></a>加载File Directory(了解)</h2><p>除了上述的单个文件加载，我们也可以批量加载一个文件夹内的所有文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install unstructured</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入相关的依赖  </span></span><br><span class="line"><span class="keyword">from</span> langchain.document_loaders <span class="keyword">import</span> DirectoryLoader  </span><br><span class="line"><span class="keyword">from</span> langchain.document_loaders <span class="keyword">import</span> PythonLoader  </span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 2.定义DirectoryLoader对象,指定要加载的文件夹路径、要加载的文件类型和是否使用多线程  </span></span><br><span class="line">directory_loader = DirectoryLoader(  </span><br><span class="line">    path=<span class="string">&quot;./asset/load&quot;</span>,  </span><br><span class="line">    glob=<span class="string">&quot;*.py&quot;</span>,  </span><br><span class="line">    use_multithreading=<span class="literal">True</span>,  </span><br><span class="line">    show_progress=<span class="literal">True</span>,  </span><br><span class="line">    loader_cls=PythonLoader  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 3.加载  </span></span><br><span class="line">docs = directory_loader.load()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 4.打印  </span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(docs))  </span><br><span class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> docs:  </span><br><span class="line">    pprint(doc)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00&lt;00:00, 227.64it/s]</span><br><span class="line">4</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset\\load\\07-fun_retun.py&#x27;</span>&#125;, page_content=<span class="string">&#x27;&quot;&quot;&quot;\n四 函数的返回值\n&quot;&quot;&quot;\n# 1.返回表达式\n# 2.不带表达式的 return 语句，返回 None。\n# 3.函数中如果没有 return 语句，在函数运行结束后也会返回 None。\n# 4.用变量接收返回结果\n# 5.return 语句可以返回多个值，多个值会放在一个元组中。\n\ndef f(a, b, c):\n    return a, b, c, [a, b, c]\nprint(f(1, 2, 3))  # (1, 2, 3, [1, 2, 3])\n&#x27;</span>)</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset\\load\\07-param_form.py&#x27;</span>&#125;, page_content=<span class="string">&#x27;&quot;&quot;&quot;\n三 函数参数形式\n&quot;&quot;&quot;\n# 1.位置参数\n# 2.关键字参数\n# 3.默认参数\n# 4.不定长参数\n# 4.1 带一个*\ndef printInfo(num,*vartuple):\n    print(num)\n    print(vartuple)\n\nprintInfo(70,60,50)\n\nprint(&quot;-&quot; * 20)\n# 如果不定长的参数后面还有参数,必须通过关键字参数传参\ndef printInfo1(num1,*vartuple,num) :\n    print(num)\n    print(num1)\n    print(vartuple)\n\nprintInfo1(10,20,num = 40)\n\nprint(&quot;-&quot; * 20)\n# 如果没有给不定长的参数传参,那么得到的是空元组\nprintInfo1(70,num = 60)\n# 4.2 带二个*\ndef printInfo(num,**vardict):\n    print(num)\n    print(vardict)\n    # return\n\nprintInfo(10,key1 = 20,key2 = 30)&#x27;</span>)</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset\\load\\07-fun.py&#x27;</span>&#125;, page_content=<span class="string">&#x27;&quot;&quot;&quot;\n一 函数入门\n&quot;&quot;&quot;\n# 1.不使用函数\n# 打印欢迎信息1\nprint(&quot;********************************&quot;)\nprint(&quot;*                              *&quot;)\nprint(&quot;*     欢迎来到Python世界       *&quot;)\nprint(&quot;*                              *&quot;)\nprint(&quot;********************************&quot;)\n\n# 打印欢迎信息2\nprint(&quot;********************************&quot;)\nprint(&quot;*                              *&quot;)\nprint(&quot;*     欢迎来到Python世界       *&quot;)\nprint(&quot;*                              *&quot;)\nprint(&quot;********************************&quot;)\n\n# 打印欢迎信息3\nprint(&quot;********************************&quot;)\nprint(&quot;*                              *&quot;)\nprint(&quot;*     欢迎来到Python世界       *&quot;)\nprint(&quot;*                              *&quot;)\nprint(&quot;********************************&quot;)\n\n# 2.使用函数\ndef print_welcome():\n    &quot;&quot;&quot;打印欢迎信息&quot;&quot;&quot;\n    print(&quot;********************************&quot;)\n    print(&quot;*                              *&quot;)\n    print(&quot;*     欢迎来到Python世界       *&quot;)\n    print(&quot;*                              *&quot;)\n    print(&quot;********************************&quot;)\n\n# 多次调用函数打印欢迎信息\nprint_welcome()\nprint_welcome()\nprint_welcome()&#x27;</span>)</span><br><span class="line">Document(metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;asset\\load\\07-fun_param.py&#x27;</span>&#125;, page_content=<span class="string">&#x27;&quot;&quot;&quot;\n二 函数参数\n&quot;&quot;&quot;\n\n\n# 1. 无参数版本 - 只能计算固定的购物车\ndef calculate_total_no_params():\n    &quot;&quot;&quot;计算固定购物车总价&quot;&quot;&quot;\n    prices = [100, 50, 30]  # 商品价格固定写死在函数内\n    total = 0\n    for price in prices:\n        total += price\n    return total\n\n# 只能计算一个固定的购物车\nprint(f&quot;购物车总价:&#123;calculate_total_no_params()&#125;&quot;)\n\n# 2.有参数版本 - 可以计算任意购物车\ndef calculate_total(prices):\n    &quot;&quot;&quot;计算任意购物车总价&quot;&quot;&quot;\n    total = 0\n    for price in prices:\n        total += price\n    return total\n\n# 可以计算任意购物车\ncart1 = [100, 50, 30]\ncart2 = [200, 80, 45, 60]\ncart3 = [75, 90, 120]\n\nprint(&quot;第一个购物车总价:&#123;calculate_total(cart1)&#125;:&quot;)\nprint(&quot;第二个购物车总价:&#123;calculate_total(cart2)&#125;&quot;)\nprint(f&quot;第三个购物车总价:&#123;calculate_total(cart3)&#125;&quot;)\n\n\n# 3.参数传递\n# 3.1 不可变类型 函数传递不可变对象\n\ndef changeInt(a) :\n    print(&quot;函数体中未改变前a的内存地址&quot;,id(a))\n    a = 10   #底层会创建一个新对象 然后给新对象一个新值\n    print(&quot;函数体中改变后a的内存地址&quot;,id(a))\n\na = 2 # 创建一个对象 然后给这个对象一个值\nchangeInt(a)\nprint(a)\nprint(&quot;函数外b的内存地址&quot;,id(a))\n\n\n\n# 输出结果\n# 函数体中未改变前a的内存地址 140729722661336\n# 函数体中改变后a的内存地址 140729722661592\n# 2\n# 函数外b的内存地址 140729722661336\n\n\n# 3.2 可变类型 函数传递不可变对象\n\ndef changeList(myList) :\n    myList[1] = 50\n    print(&quot;函数内的值&quot;,myList) # [1,50,3]\n    print(&quot;函数内列表的内存&quot;,id(myList)) # 0111111\n\nmlist = [1,2,3]  # 底层创建一个对象 地址0111111\nchangeList(mlist)\nprint(&quot;函数外的值&quot;,mlist) # # [1,50,3]\nprint(&quot;函数外列表的内存&quot;,id(mlist))\n\n# 输出结果\n# 函数内的值 [1, 50, 3]\n# 函数内列表的内存 1380193079680\n# 函数外的值 [1, 50, 3]\n# 函数外列表的内存 1380193079680\n\n&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="文档拆分器-Text-Splitters"><a href="#文档拆分器-Text-Splitters" class="headerlink" title="文档拆分器 Text Splitters"></a>文档拆分器 Text Splitters</h1><h2 id="为什么要拆分-分块-切分"><a href="#为什么要拆分-分块-切分" class="headerlink" title="为什么要拆分&#x2F;分块&#x2F;切分"></a>为什么要拆分&#x2F;分块&#x2F;切分</h2><p>当拿到统一的一个Document对象后，接下来需要切分成Chunks。如果不切分，而是考虑作为一个整体 的Document对象，会存在两点问题： </p><ol><li>假设提问的Query的答案出现在某一个Document对象中，那么将检索到的整个Document对象 直接放入Prompt中并不是最优的选择，因为其中一定会包含非常多无关的信息，而无效信息越 多，对大模型后续的推理影响越大。 </li><li>任何一个大模型都存在最大输入的<strong>Token限制</strong>，如果一个Document非常大，比如一个几百兆的 PDF，那么大模型肯定无法容纳如此多的信息。</li></ol><p>基于此，一个有效的解决方案就是将完整的Document对象进行<strong>分块处理（Chunking)<strong>。无论是在存储 还是检索过程中，都将以这些</strong>块(chunks)</strong> 为基本单位，这样有效地避免内容不相关性问题和超出最大输 入限制的问题。</p><h2 id="Chunking拆分的策略"><a href="#Chunking拆分的策略" class="headerlink" title="Chunking拆分的策略"></a>Chunking拆分的策略</h2><p><strong>方法1：根据句子切分</strong>：这种方法按照自然句子边界进行切分，以保持语义完整性。 </p><p><strong>方法2：按照固定字符数来切分</strong>：这种策略根据特定的字符数量来划分文本，但可能会在不适当的位置 切断句子。 </p><p><strong>方法3：按固定字符数来切分，结合重叠窗口（overlapping windows）</strong>：此方法与按字符数切分相 似，但通过重叠窗口技术避免切分关键内容，确保信息连贯性。</p><p><strong>方法4：递归字符切分方法</strong>：通过递归字符方式动态确定切分点，这种方法可以根据文档的复杂性和内 容密度来调整块的大小。 </p><p><strong>方法5：根据语义内容切分</strong>：这种 <strong>高级策略</strong>依据文本的语义内容来划分块，旨在保持相关信息的集中和 完整，适用于需要高度语义保持的应用场景。</p><blockquote><p>[!tip]<br>第2种⽅法（按照字符数切分）和第3种⽅法（按固定字符数切分结合重叠窗口）主要基于字符进⾏ ⽂本的切分，而不考虑⽂章的实际内容和语义。这种⽅式虽简单，但可能会导致 <strong>主题或语义上的断 裂</strong> 。 </p><p>相对而⾔，第4种递归⽅法更加灵活和⾼效，它结合了固定⻓度切分和语义分析。通常是 <strong>首选策 略</strong> ，因为它能够更好地确保每个段落包含⼀个完整的主题。 </p><p>而第5种⽅法，基于语义的分割虽然能精确地切分出完整的主题段落，但这种⽅法效率较低。它需 要运⾏复杂的分段算法（segmentation algorithm）， <strong>处理速度较慢</strong> ，并且 <strong>段落长度可能极不均 匀</strong> （有的主题段落可能很⻓，而有的则较短）。因此，尽管它在某些需要⾼精度语义保持的场景 下有其应⽤价值，但并 <strong>不适合所有情况</strong> 。</p></blockquote><p>这些方法各有优势和局限，选择适当的分块策略取决于具体的应用需求和预期的检索效果。接下来我们 依次尝试用常规手段应该如何实现上述几种方法的文本切分</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>LangChain提供了许多不同类型的文档切分器</p><p><a href="https://python.langchain.com/api_reference/text_splitters/index.html">官网地址：https://python.langchain.com/api_reference&#x2F;text_splitters&#x2F;index.html</a></p><p>使用细节：</p><p>① TextSplitter作为各种具体的文档拆分器的父类</p><p>② 内部定义了一些常用的属性：</p><p>chunk_size: 返回块的最大尺寸，单位是字符数。默认值为4000（由长度函数测量）</p><p>chunk_overlap: 相邻两个块之间的字符重叠数,避免信息在边界处被切断而丢失。默认值为200,通常会设置为chunk_size的10% - 20%。</p><p>length_function: 用于测量给定块字符数的函数。默认赋值为len函数。len函数在Python中按Unicode字符计数，所以一个汉字、一个英文字母、一个符号都算一个字符。</p><p>keep_separator: 是否在块中保留分隔符，默认值为False</p><p>add_start_index: 如果为 <code>True</code>，则在元数据中包含块的起始索引。默认值为False</p><p>strip_whitespace: 如果为 <code>True</code>，则从每个文档的开始和结束处去除空白字符。默认值为True</p><p>② 内部定义的常用的方法：</p><p>情况1：按照字符串进行拆分：</p><p>split_text(xxx) : 传入的参数类型：字符串 ; 返回值的类型：List[str]</p><p>create_documents(xxx) : 传入的参数类型：List[str] ; 返回值的类型：List[Document]。底层调用了split_text(xxx)</p><p>情况2：按照Document对象进行拆分：</p><p>split_documents(xxx) : 传入的参数类型：List[Document] ; 返回值的类型：List[Document]。底层调用了create_documents(xxx)</p><p>2、Document对象 与 Str 是什么关系？</p><p>文档切分器可以按照字符进行切分，也可以按照Document进行切分。其中，Str 可以理解为是Document对象的page_content属性。</p><h3 id="CharacterTextSplitter：Split-by-character"><a href="#CharacterTextSplitter：Split-by-character" class="headerlink" title="CharacterTextSplitter：Split by character"></a>CharacterTextSplitter：Split by character</h3><p>参数情况说明： </p><ul><li>chunk_size ：每个切块的最大token数量，默认值为4000。 </li><li>chunk_overlap ：相邻两个切块之间的最大重叠token数量，默认值为200。 </li><li>separator ：分割使用的分隔符，默认值为”\n\n”。 </li><li>length_function ：用于计算切块长度的方法。默认赋值为父类TextSplitter的len函数。</li></ul><h4 id="举例1：字符串文本的分割"><a href="#举例1：字符串文本的分割" class="headerlink" title="举例1：字符串文本的分割"></a>举例1：字符串文本的分割</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入相关依赖  </span></span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> CharacterTextSplitter  </span><br><span class="line"><span class="keyword">from</span> zipp.glob <span class="keyword">import</span> separate  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 2.示例文本  </span></span><br><span class="line">text = <span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">LangChain 是一个用于开发由语言模型驱动的应用程序的框架的。它提供了一套工具和抽象，使开发者能够更容易地构建复杂的应用程序。  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 3.定义字符分割器  </span></span><br><span class="line">splitter = CharacterTextSplitter(  </span><br><span class="line">    chunk_size=<span class="number">51</span>, <span class="comment"># 每块大小  </span></span><br><span class="line">    chunk_overlap=<span class="number">7</span>,<span class="comment"># 块与块之间的重复字符数  </span></span><br><span class="line">    <span class="comment">#length_function=len,  </span></span><br><span class="line">    separator=<span class="string">&quot;&quot;</span>   <span class="comment"># 设置为空字符串时，表示禁用分隔符  </span></span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 4.分割文本  </span></span><br><span class="line">texts = splitter.split_text(text)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 5.打印结果  </span></span><br><span class="line"><span class="keyword">for</span> i, chunk <span class="keyword">in</span> <span class="built_in">enumerate</span>(texts):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;块 <span class="subst">&#123;i+<span class="number">1</span>&#125;</span>:长度：<span class="subst">&#123;<span class="built_in">len</span>(chunk)&#125;</span>&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(chunk)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">块 1:长度：50</span><br><span class="line">LangChain 是一个用于开发由语言模型驱动的应用程序的框架的。它提供了一套工具和抽象，使开发者</span><br><span class="line">--------------------------------------------------</span><br><span class="line">块 2:长度：23</span><br><span class="line">抽象，使开发者能够更容易地构建复杂的应用程序。</span><br><span class="line">--------------------------------------------------</span><br></pre></td></tr></table></figure><p>说明：若必须禁用分隔符（如处理无空格文本），需<strong>容忍实际块长略小于 chunk_size</strong> （尤其对中文）</p><h4 id="举例2：指定分割符"><a href="#举例2：指定分割符" class="headerlink" title="举例2：指定分割符"></a>举例2：指定分割符</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入相关依赖  </span></span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> CharacterTextSplitter  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 2.定义要分割的文本  </span></span><br><span class="line">text = <span class="string">&quot;这是一个示例文本啊。我们将使用CharacterTextSplitter将其分割成小块。分割基于字符数。&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># text = &quot;&quot;&quot;  </span></span><br><span class="line"><span class="comment"># LangChain 是一个用于开发由语言模型。驱动的应用程序的框架的。它提供了一套工具和抽象。使开发者能够更容易地构建复杂的应用程序。  </span></span><br><span class="line"><span class="comment"># &quot;&quot;&quot;  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 3.定义分割器实例  </span></span><br><span class="line">text_splitter = CharacterTextSplitter(  </span><br><span class="line">    chunk_size=<span class="number">30</span>,   <span class="comment"># 每个块的最大字符数  </span></span><br><span class="line">    <span class="comment"># chunk_size=43,   # 每个块的最大字符数  </span></span><br><span class="line">    chunk_overlap=<span class="number">0</span>, <span class="comment"># 块之间的重叠字符数  </span></span><br><span class="line">    separator=<span class="string">&quot;。&quot;</span>,  <span class="comment"># 按句号分割 （分隔符优先）  </span></span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 4.开始分割  </span></span><br><span class="line">chunks = text_splitter.split_text(text)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 5.打印效果  </span></span><br><span class="line"><span class="keyword">for</span>  i,chunk <span class="keyword">in</span> <span class="built_in">enumerate</span>(chunks):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;块 <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>:长度：<span class="subst">&#123;<span class="built_in">len</span>(chunk)&#125;</span>&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(chunk)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Created a chunk of size 33, <span class="built_in">which</span> is longer than the specified 30</span><br><span class="line"></span><br><span class="line">块 1:长度：9</span><br><span class="line">这是一个示例文本啊</span><br><span class="line">--------------------------------------------------</span><br><span class="line">块 2:长度：33</span><br><span class="line">我们将使用CharacterTextSplitter将其分割成小块</span><br><span class="line">--------------------------------------------------</span><br><span class="line">块 3:长度：7</span><br><span class="line">分割基于字符数</span><br><span class="line">--------------------------------------------------</span><br></pre></td></tr></table></figure><p><strong>注意：无重叠。</strong></p><p><strong>separator优先原则</strong>：当设置了 <strong>separator</strong> （如”。”），分割器会首先尝试在分隔符处分割，然后再考 虑 chunk_size。这是为了避免在句子中间硬性切断。这种设计是为了： </p><ol><li>优先保持语义完整性（不切断句子）</li><li>避免产生无意义的碎片（如半个单词&#x2F;不完整句子）</li><li>如果 <strong>chunk_size</strong> 比片段小，无法拆分片段，导致 overlap失效。</li><li>chunk_overlap仅在合并后的片段之间生效（如果 <strong>chunk_size</strong> 足够大）。如果没有合并的片 段，则 overlap失效。见举例3。</li></ol><h4 id="举例3：指定分割符"><a href="#举例3：指定分割符" class="headerlink" title="举例3：指定分割符"></a>举例3：指定分割符</h4><p>注意：<strong>有重叠</strong>。此时，文本“这是第二段内容。”的token正好就是8。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入相关依赖  </span></span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> CharacterTextSplitter  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 2.定义要分割的文本  </span></span><br><span class="line">text = <span class="string">&quot;这是第一段文本。这是第二段内容。最后一段结束。&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 3.定义字符分割器  </span></span><br><span class="line">text_splitter = CharacterTextSplitter(  </span><br><span class="line">    separator=<span class="string">&quot;。&quot;</span>,  </span><br><span class="line">    chunk_size=<span class="number">20</span>,  </span><br><span class="line">    chunk_overlap=<span class="number">8</span>,  </span><br><span class="line">    keep_separator=<span class="literal">True</span> <span class="comment">#chunk中是否保留切割符  </span></span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 4.分割文本  </span></span><br><span class="line">chunks = text_splitter.split_text(text)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 5.打印结果  </span></span><br><span class="line"><span class="keyword">for</span>  i,chunk <span class="keyword">in</span> <span class="built_in">enumerate</span>(chunks):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;块 <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>:长度：<span class="subst">&#123;<span class="built_in">len</span>(chunk)&#125;</span>&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(chunk)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">块 1:长度：15</span><br><span class="line">这是第一段文本。这是第二段内容</span><br><span class="line">--------------------------------------------------</span><br><span class="line">块 2:长度：16</span><br><span class="line">。这是第二段内容。最后一段结束。</span><br><span class="line">--------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="RecursiveCharacterTextSplitter：最常用"><a href="#RecursiveCharacterTextSplitter：最常用" class="headerlink" title="RecursiveCharacterTextSplitter：最常用"></a>RecursiveCharacterTextSplitter：最常用</h3><p>文档切分器中较常用的是 <strong>RecursiveCharacterTextSplitter (递归字符文本切分器)</strong> ，遇<strong>特定字符</strong>时进行分割。默认情况下，它尝试进行切割的字符包括[“\n\n”, “\n”, “ “, “”] 。 </p><p>具体为：根据第一个字符进行切块，但如果任何切块太大，则会继续移动到下一个字符继续切块，以此 类推。<br>此外，还可以考虑添加，。等分割字符。<br><strong>特点</strong>： </p><ul><li><strong>保留上下文</strong>：优先在自然语言边界（如段落、句子结尾）处分割， <strong>减少信息碎片化</strong>。</li><li><strong>智能分段</strong>：通过递归尝试多种分隔符，将文本分割为大小接近chunk_size的片段。 </li><li><strong>灵活适配</strong>：适用于多种文本类型（代码、Markdown、普通文本等），是LangChain中最通用的 文本拆分器。</li></ul><p>此外，还可以指定的参数包括：</p><ul><li>chunk_size：同TextSplitter（父类） 。 </li><li>chunk_overlap：同TextSplitter（父类） 。 </li><li>length_function：同TextSplitter（父类） 。 </li><li>add_start_index：同TextSplitter（父类） 。</li></ul><h4 id="举例1：使用split-text-方法演示"><a href="#举例1：使用split-text-方法演示" class="headerlink" title="举例1：使用split_text()方法演示"></a>举例1：使用split_text()方法演示</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入相关依赖  </span></span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> RecursiveCharacterTextSplitter  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 2.定义RecursiveCharacterTextSplitter分割器对象  </span></span><br><span class="line">text_splitter = RecursiveCharacterTextSplitter(  </span><br><span class="line">    chunk_size=<span class="number">10</span>,  </span><br><span class="line">    chunk_overlap=<span class="number">0</span>,  </span><br><span class="line">    <span class="comment">#add_start_index=True,  </span></span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 3.定义拆分的内容  </span></span><br><span class="line">text=<span class="string">&quot;LangChain框架特性\n\n多模型集成(GPT/Claude)\n记忆管理功能\n链式调用设计。文档分析场景示例：需要处理PDF/Word等格式。&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 4.拆分器分割  </span></span><br><span class="line">paragraphs = text_splitter.split_text(text)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> para <span class="keyword">in</span> paragraphs:  </span><br><span class="line">    <span class="built_in">print</span>(para)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">LangChain框</span><br><span class="line">-------</span><br><span class="line">架特性</span><br><span class="line">-------</span><br><span class="line">多模型集成(GPT</span><br><span class="line">-------</span><br><span class="line">/Claude)</span><br><span class="line">-------</span><br><span class="line">记忆管理功能</span><br><span class="line">-------</span><br><span class="line">链式调用设计。文档</span><br><span class="line">-------</span><br><span class="line">分析场景示例：需要处</span><br><span class="line">-------</span><br><span class="line">理PDF/Word等</span><br><span class="line">-------</span><br><span class="line">格式。</span><br><span class="line">-------</span><br></pre></td></tr></table></figure><h4 id="举例2：使用create-documents-方法演示，传入字符串列表，返回Document对象列表"><a href="#举例2：使用create-documents-方法演示，传入字符串列表，返回Document对象列表" class="headerlink" title="举例2：使用create_documents()方法演示，传入字符串列表，返回Document对象列表"></a>举例2：使用create_documents()方法演示，传入字符串列表，返回Document对象列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入相关依赖  </span></span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> RecursiveCharacterTextSplitter  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 2.定义RecursiveCharacterTextSplitter分割器对象  </span></span><br><span class="line">text_splitter = RecursiveCharacterTextSplitter(  </span><br><span class="line">    chunk_size=<span class="number">10</span>,  </span><br><span class="line">    chunk_overlap=<span class="number">0</span>,  </span><br><span class="line">    add_start_index=<span class="literal">True</span>,  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 3.定义拆分的内容  </span></span><br><span class="line">text_list = [<span class="string">&quot;LangChain框架特性\n\n多模型集成(GPT/Claude)\n记忆管理功能\n链式调用设计。文档分析场景示例：需要处理PDF/Word等格式。&quot;</span>]  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 4.拆分器分割  </span></span><br><span class="line">paragraphs = text_splitter.create_documents(text_list)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> para <span class="keyword">in</span> paragraphs:  </span><br><span class="line">    <span class="built_in">print</span>(para)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">page_content=<span class="string">&#x27;LangChain框&#x27;</span> metadata=&#123;<span class="string">&#x27;start_index&#x27;</span>: 0&#125;</span><br><span class="line">-------</span><br><span class="line">page_content=<span class="string">&#x27;架特性&#x27;</span> metadata=&#123;<span class="string">&#x27;start_index&#x27;</span>: 10&#125;</span><br><span class="line">-------</span><br><span class="line">page_content=<span class="string">&#x27;多模型集成(GPT&#x27;</span> metadata=&#123;<span class="string">&#x27;start_index&#x27;</span>: 15&#125;</span><br><span class="line">-------</span><br><span class="line">page_content=<span class="string">&#x27;/Claude)&#x27;</span> metadata=&#123;<span class="string">&#x27;start_index&#x27;</span>: 24&#125;</span><br><span class="line">-------</span><br><span class="line">page_content=<span class="string">&#x27;记忆管理功能&#x27;</span> metadata=&#123;<span class="string">&#x27;start_index&#x27;</span>: 33&#125;</span><br><span class="line">-------</span><br><span class="line">page_content=<span class="string">&#x27;链式调用设计。文档&#x27;</span> metadata=&#123;<span class="string">&#x27;start_index&#x27;</span>: 40&#125;</span><br><span class="line">-------</span><br><span class="line">page_content=<span class="string">&#x27;分析场景示例：需要处&#x27;</span> metadata=&#123;<span class="string">&#x27;start_index&#x27;</span>: 49&#125;</span><br><span class="line">-------</span><br><span class="line">page_content=<span class="string">&#x27;理PDF/Word等&#x27;</span> metadata=&#123;<span class="string">&#x27;start_index&#x27;</span>: 59&#125;</span><br><span class="line">-------</span><br><span class="line">page_content=<span class="string">&#x27;格式。&#x27;</span> metadata=&#123;<span class="string">&#x27;start_index&#x27;</span>: 69&#125;</span><br><span class="line">-------</span><br></pre></td></tr></table></figure><p><strong>逐步分割过程</strong></p><p><strong>第一阶段：顶级分割（按\n\n）</strong></p><ol><li>首次分割： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text.split( <span class="string">&quot;\n\n&quot;</span> ) → </span><br><span class="line">[ <span class="string">&quot;LangChain框架特性&quot;</span> ,</span><br><span class="line"> <span class="string">&quot;多模型集成(GPT/Claude)\n记忆管理功能\n链式调用设计。文档分析场景示例：需要处理 PDF/Word等格式。&quot;</span> ]</span><br></pre></td></tr></table></figure></li></ol><ul><li>第一部分长度：13字符 &gt; 10 → 需要继续分割 </li><li>第二部分长度：79字符 &gt; 10 → 需要继续分割</li></ul><p><strong>第二阶段：递归分割第一部分 “LangChain框架特性”</strong></p><ol><li>尝试 \n ：无匹配 </li><li>尝试（空格）：<ul><li>检查字符串： “LangChain框架特性” （无空格）</li></ul></li><li>回退到””（字符级分割）： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> ( <span class="string">&quot;LangChain框架特性&quot;</span> ) → </span><br><span class="line">[ <span class="string">&#x27;L&#x27;</span> , <span class="string">&#x27;a&#x27;</span> , <span class="string">&#x27;n&#x27;</span> , <span class="string">&#x27;g&#x27;</span> , <span class="string">&#x27;C&#x27;</span> , <span class="string">&#x27;h&#x27;</span> , <span class="string">&#x27;a&#x27;</span> , <span class="string">&#x27;i&#x27;</span> , <span class="string">&#x27;n&#x27;</span> , <span class="string">&#x27;框&#x27;</span> , <span class="string">&#x27;架&#x27;</span> , <span class="string">&#x27;特&#x27;</span> , <span class="string">&#x27;性&#x27;</span> ]</span><br></pre></td></tr></table></figure><ul><li>前10字符： “LangChain框” </li><li>剩余部分： “架特性”</li></ul></li></ol><p><strong>第三阶段：递归分割第二部分（长段落）</strong></p><ol><li>按 \n 分割：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;多模型集成(GPT/Claude)\n记忆管理功能\n链式调用设计。文档...&quot;</span> .split( <span class="string">&quot;\n&quot;</span> ) → </span><br><span class="line">[ <span class="string">&quot;多模型集成(GPT/Claude)&quot;</span> , <span class="comment"># 17字符 </span></span><br><span class="line"><span class="string">&quot;记忆管理功能&quot;</span> , <span class="comment"># 6字符</span></span><br><span class="line"><span class="string">&quot;链式调用设计。文档分析场景示例：需要处理PDF/Word等格式。&quot;</span> <span class="comment"># 36字符</span></span><br><span class="line">] </span><br></pre></td></tr></table></figure></li></ol><ul><li>第1块：17字符 &gt; 10 → 继续分割 </li><li>第2块：6字符 ≤ 10 → 直接保留 </li><li>第3块：36字符 &gt; 10 → 继续分割</li></ul><ol start="2"><li>分割 “多模型集成(GPT&#x2F;Claude)” ：<ul><li>尝试：无空格 </li><li>回退到””： <ul><li>前10字符： “多模型集成(GPT” </li><li>剩余7字符： “&#x2F;Claude)”</li></ul></li></ul></li><li>分割 <strong>“链式调用设计。文档分析场景示例：需要处理PDF&#x2F;Word等格式</strong>。”：<ul><li>尝试：无空格 </li><li>回退到””:<ul><li>按10字符分段：  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;链式调用设计。文档分析场景示例：需要处理PDF/Word等格式。&quot;</span> → </span><br><span class="line">[</span><br><span class="line"><span class="string">&quot;链式调用设计。文档&quot;</span> , </span><br><span class="line"><span class="string">&quot;分析场景示例：需要处&quot;</span> , </span><br><span class="line"><span class="string">&quot;理PDF/Word等&quot;</span> , </span><br><span class="line"><span class="string">&quot;格式。&quot;</span></span><br><span class="line"> ]</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h4 id="举例3：使用create-documents-方法演示，将本地文件内容加载成字符串，进行拆分"><a href="#举例3：使用create-documents-方法演示，将本地文件内容加载成字符串，进行拆分" class="headerlink" title="举例3：使用create_documents()方法演示，将本地文件内容加载成字符串，进行拆分"></a>举例3：使用create_documents()方法演示，将本地文件内容加载成字符串，进行拆分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入相关依赖  </span></span><br><span class="line"><span class="keyword">from</span> langchain_text_splitters <span class="keyword">import</span> RecursiveCharacterTextSplitter  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 2.打开.txt文件  </span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;asset/load/08-ai.txt&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    state_of_the_union = f.read()  <span class="comment">#返回的是字符串  </span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(state_of_the_union))  <span class="comment"># &lt;class &#x27;str&#x27;&gt;  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 3.定义RecursiveCharacterTextSplitter（递归字符分割器）  </span></span><br><span class="line">text_splitter = RecursiveCharacterTextSplitter(  </span><br><span class="line">    chunk_size=<span class="number">100</span>,  </span><br><span class="line">    chunk_overlap=<span class="number">20</span>,  </span><br><span class="line">    <span class="comment">#chunk_overlap=0,  </span></span><br><span class="line">    length_function=<span class="built_in">len</span>  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 4.分割文本  </span></span><br><span class="line">texts = text_splitter.create_documents([state_of_the_union])  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 5.打印分割文本  </span></span><br><span class="line"><span class="keyword">for</span> document <span class="keyword">in</span> texts:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;🔥<span class="subst">&#123;document.page_content&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;class <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line">🔥人工智能（AI）是什么？</span><br><span class="line">🔥人工智能（Artificial</span><br><span class="line">🔥Intelligence，简称AI）是指由计算机系统模拟人类智能的技术，使其能够执行通常需要人类认知能力的任务，如学习、推理、决策和语言理解。AI的核心目标是让机器具备感知环境、处理信息并自主行动的</span><br><span class="line">🔥让机器具备感知环境、处理信息并自主行动的能力。</span><br><span class="line">🔥1. AI的技术基础</span><br><span class="line">AI依赖多种关键技术：</span><br><span class="line"></span><br><span class="line">机器学习（ML）：通过算法让计算机从数据中学习规律，无需显式编程。例如，推荐系统通过用户历史行为预测偏好。</span><br><span class="line">🔥深度学习：基于神经网络的机器学习分支，擅长处理图像、语音等复杂数据。AlphaGo击败围棋冠军便是典型案例。</span><br><span class="line"></span><br><span class="line">自然语言处理（NLP）：使计算机理解、生成人类语言，如ChatGPT的对话能力。</span><br><span class="line">🔥2. AI的应用场景</span><br><span class="line">AI已渗透到日常生活和各行各业：</span><br><span class="line"></span><br><span class="line">医疗：辅助诊断（如AI分析医学影像）、药物研发加速。</span><br><span class="line"></span><br><span class="line">交通：自动驾驶汽车通过传感器和AI算法实现安全导航。</span><br><span class="line">🔥金融：欺诈检测、智能投顾（如风险评估模型）。</span><br><span class="line"></span><br><span class="line">教育：个性化学习平台根据学生表现调整教学内容。</span><br><span class="line"></span><br><span class="line">3. AI的挑战与未来</span><br><span class="line">尽管前景广阔，AI仍面临问题：</span><br><span class="line">🔥伦理争议：数据隐私、算法偏见（如招聘AI歧视特定群体）。</span><br><span class="line"></span><br><span class="line">就业影响：自动化可能取代部分人工岗位，但也会创造新职业。</span><br><span class="line"></span><br><span class="line">技术瓶颈：通用人工智能（AGI）尚未实现，当前AI仅擅长特定任务。</span><br><span class="line">🔥未来，AI将与人类协作而非替代：医生借助AI提高诊断效率，教师利用AI定制课程。其发展需平衡技术创新与社会责任，确保技术造福全人类。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="举例4：使用split-documents-方法演示，利用PDFLoader加载文档，对文档的内容用递归切割器切割"><a href="#举例4：使用split-documents-方法演示，利用PDFLoader加载文档，对文档的内容用递归切割器切割" class="headerlink" title="举例4：使用split_documents()方法演示，利用PDFLoader加载文档，对文档的内容用递归切割器切割"></a>举例4：使用split_documents()方法演示，利用PDFLoader加载文档，对文档的内容用递归切割器切割</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入相关依赖  </span></span><br><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> PyPDFLoader  </span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> RecursiveCharacterTextSplitter  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 2.定义PyPDFLoader加载器  </span></span><br><span class="line">loader = PyPDFLoader(<span class="string">&quot;./asset/load/02-load.pdf&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 3.加载和切割文档对象  </span></span><br><span class="line">docs = loader.load()   <span class="comment"># 返回Document对象构成的list  </span></span><br><span class="line"><span class="comment"># print(f&quot;第0页：\n&#123;docs[0]&#125;&quot;)  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 4.定义切割器  </span></span><br><span class="line">text_splitter = RecursiveCharacterTextSplitter(  </span><br><span class="line">    chunk_size=<span class="number">200</span>,  </span><br><span class="line">    <span class="comment">#chunk_size=120,  </span></span><br><span class="line">    chunk_overlap=<span class="number">0</span>,  </span><br><span class="line">    <span class="comment"># chunk_overlap=100,  </span></span><br><span class="line">    length_function=<span class="built_in">len</span>,  </span><br><span class="line">    add_start_index=<span class="literal">True</span>,  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 5.对pdf内容进行切割得到文档对象  </span></span><br><span class="line">paragraphs = text_splitter.split_documents(docs)  </span><br><span class="line"><span class="comment">#paragraphs = text_splitter.create_documents([text])  </span></span><br><span class="line"><span class="keyword">for</span> para <span class="keyword">in</span> paragraphs:  </span><br><span class="line">    <span class="built_in">print</span>(para.page_content)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;他的车，他的命！ 他忽然想起来，一年，二年，至少有三四年；一滴汗，两滴汗，不</span></span><br><span class="line"><span class="string">知道多少万滴汗，才挣出那辆车。从风里雨里的咬牙，从饭里茶里的自苦，才赚出那辆车。</span></span><br><span class="line"><span class="string">那辆车是他的一切挣扎与困苦的总结果与报酬，像身经百战的武士的一颗徽章。……他老想</span></span><br><span class="line"><span class="string">着远远的一辆车，可以使他自由，独立，像自己的手脚的那么一辆车。&quot;</span> </span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;他吃，他喝，他嫖，他赌，他懒，他狡猾， 因为他没了心，他的心被人家摘了去。他</span></span><br><span class="line"><span class="string">-------</span></span><br><span class="line"><span class="string">只剩下那个高大的肉架子，等着溃烂，预备着到乱死岗子去。……体面的、要强的、好梦想</span></span><br><span class="line"><span class="string">的、利己的、个人的、健壮的、伟大的祥子，不知陪着人家送了多少回殡；不知道何时何地</span></span><br><span class="line"><span class="string">会埋起他自己来， 埋起这堕落的、 自私的、 不幸的、 社会病胎里的产儿， 个人主义的末路鬼！</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line">-------</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="举例5：自定义分隔符"><a href="#举例5：自定义分隔符" class="headerlink" title="举例5：自定义分隔符"></a>举例5：自定义分隔符</h4><p>有些书写系统没有单词边界，例如中文、日文和泰文。使用默认分隔符列表[“\n\n”, “\n”, “ “, “”]分割文 本可能导致单词错误的分割。为了保持单词在一起，你可以自定义分割字符，覆盖分隔符列表以包含额 外的标点符号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text_splitter = RecursiveCharacterTextSplitter( chunk_size=<span class="number">200</span>, chunk_overlap=<span class="number">20</span>, <span class="comment"># 增加重叠字符 </span></span><br><span class="line">separators=[ <span class="string">&quot;\n\n&quot;</span> , <span class="string">&quot;\n&quot;</span> , <span class="string">&quot;。&quot;</span> , <span class="string">&quot;！&quot;</span> , <span class="string">&quot;？&quot;</span> , <span class="string">&quot;……&quot;</span> , <span class="string">&quot;，&quot;</span> , <span class="string">&quot;&quot;</span> ], <span class="comment"># 添加中文标点 </span></span><br><span class="line">length_function= <span class="built_in">len</span> , keep_separator=<span class="literal">True</span> <span class="comment">#保留句尾标点（如 ……），避免切割后丢失语气和逻辑 </span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="TokenTextSplitter-CharacterTextSplitter：Split-by-tokens"><a href="#TokenTextSplitter-CharacterTextSplitter：Split-by-tokens" class="headerlink" title="TokenTextSplitter&#x2F;CharacterTextSplitter：Split by tokens"></a>TokenTextSplitter&#x2F;CharacterTextSplitter：Split by tokens</h3><p>当我们将文本拆分为块时，除了字符以外，还可以： <strong>按Token的数量分割</strong> （而非字符或单词数），将长 文本切分成多个小块。</p><p><strong>什么是Token？</strong> </p><ul><li>对模型而言，Token是文本的最小处理单位。例如： <ul><li>英文： “hello” → 1个Token， </li><li>中文： “ChatGPT” → 2个Token（ “Chat” + “GPT” ）。 “人工智能” → 可能拆分为2-3个Token（取决于分词器）。</li></ul></li></ul><p> <strong>为什么按Token分割？</strong> </p><ul><li>语言模型对输入长度的限制是基于Token数（如GPT-4的8k&#x2F;32k Token上限），直接按字符或单 词分割可能导致实际Token数超限。（确保每个文本块不超过模型的Token上限） </li><li>大语言模型(LLM)通常是以token的数量作为其计量(或收费)的依据，所以采用token分割也有助于 我们在使用时更方便的控制成本。</li></ul><p><strong>TokenTextSplitter 使用说明</strong>： </p><ul><li>核心依据：Token数量 + 自然边界。（TokenTextSplitter 严格按照 token 数量进行分割，但同时 会优先在自然边界（如句尾）处切断，以尽量保证语义的完整性。）</li><li>优点：与LLM的Token计数逻辑一致，能尽量保持语义完整 </li><li>缺点：对非英语或特定领域文本，Token化效果可能不佳 </li><li>典型场景：需要精确控制Token数输入LLM的场景</li></ul><h4 id="举例1：使用TokenTextSplitter"><a href="#举例1：使用TokenTextSplitter" class="headerlink" title="举例1：使用TokenTextSplitter"></a>举例1：使用TokenTextSplitter</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入相关依赖  </span></span><br><span class="line"><span class="keyword">from</span> langchain_text_splitters <span class="keyword">import</span> TokenTextSplitter  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 2.初始化 TokenTextSplittertext_splitter = TokenTextSplitter(  </span></span><br><span class="line">    chunk_size=<span class="number">33</span>,  <span class="comment">#最大 token 数为 32    chunk_overlap=0, #重叠 token 数为 0    encoding_name=&quot;cl100k_base&quot;,  # 使用 OpenAI 的编码器,将文本转换为 token 序列  </span></span><br><span class="line">  </span><br><span class="line">)  </span><br><span class="line"><span class="comment"># 3.定义文本  </span></span><br><span class="line">text = <span class="string">&quot;人工智能是一个强大的开发框架。它支持多种语言模型和工具链。人工智能是指通过计算机程序模拟人类智能的一门科学。自20世纪50年代诞生以来，人工智能经历了多次起伏。&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 4.开始切割  </span></span><br><span class="line">texts = text_splitter.split_text(text)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 打印分割结果  </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;原始文本被分割成了 <span class="subst">&#123;<span class="built_in">len</span>(texts)&#125;</span> 个块:&quot;</span>)  </span><br><span class="line"><span class="keyword">for</span> i, chunk <span class="keyword">in</span> <span class="built_in">enumerate</span>(texts):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;块 <span class="subst">&#123;i+<span class="number">1</span>&#125;</span>: 长度：<span class="subst">&#123;<span class="built_in">len</span>(chunk)&#125;</span> 内容：<span class="subst">&#123;chunk&#125;</span>&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">原始文本被分割成了 3 个块:</span><br><span class="line">块 1: 长度：29 内容：人工智能是一个强大的开发框架。它支持多种语言模型和工具链。</span><br><span class="line">--------------------------------------------------</span><br><span class="line">块 2: 长度：32 内容：人工智能是指通过计算机程序模拟人类智能的一门科学。自20世纪50</span><br><span class="line">--------------------------------------------------</span><br><span class="line">块 3: 长度：19 内容：年代诞生以来，人工智能经历了多次起伏。</span><br><span class="line">--------------------------------------------------</span><br></pre></td></tr></table></figure><p><strong>为什么会出现这样的分割？</strong><br>1、<strong>第一块 (29字符)</strong> ：内容是一个完整的句子，以句号结尾。TokenTextSplitter识别到这是一个自然的 语义边界，即使这里的 token 数量可能尚未达到 33，它也选择在此处切割，以保证第一块语义的完整 性。 </p><p>2、<strong>第二块 (32字符)</strong> ：内容包含了另一个完整句子 “<strong>人工智能是指…一门科学</strong>。”以及下一句的开头 20世纪50” 。分割器在处理完第一个句子的 token 后，可能 token 数量已经接近 “自 chunk_size ，于是 在下一个自然边界（这里是句号）之后继续读取了少量 token（“自20世纪50”），直到非常接近 33 token 的限制。 </p><p><strong>注意</strong>：“50” 之后被切断，是因为编码器很可能将“50”识别为一个独立的 token，而“年代”是另 一个 token。为了保证 token 的完整性，它不会在“50”字符中间切断。</p><p>3、<strong>第三块 (19字符)</strong> ：是第二块中断内容的剩余部分，形成了一个较短的块。这是因为剩余内容本身的 token 数量就较少。<br><strong>特别注意：字符长度不等于 Token 数量</strong>。</p><h4 id="举例2：使用CharacterTextSplitter"><a href="#举例2：使用CharacterTextSplitter" class="headerlink" title="举例2：使用CharacterTextSplitter"></a>举例2：使用CharacterTextSplitter</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入相关依赖  </span></span><br><span class="line"><span class="keyword">from</span> langchain_text_splitters <span class="keyword">import</span> CharacterTextSplitter  </span><br><span class="line"><span class="keyword">import</span> tiktoken  <span class="comment"># 用于计算Token数量  </span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 2.定义通过Token切割器  </span></span><br><span class="line">text_splitter = CharacterTextSplitter.from_tiktoken_encoder(  </span><br><span class="line">    encoding_name=<span class="string">&quot;cl100k_base&quot;</span>, <span class="comment"># 使用 OpenAI 的编码器  </span></span><br><span class="line">    chunk_size=<span class="number">18</span>, <span class="comment">#设置最大的token数  </span></span><br><span class="line">    chunk_overlap=<span class="number">0</span>,  </span><br><span class="line">    separator=<span class="string">&quot;。&quot;</span>,  <span class="comment"># 指定中文句号为分隔符  </span></span><br><span class="line">    keep_separator=<span class="literal">False</span>,  <span class="comment"># chunk中是否保留分隔符  </span></span><br><span class="line">)  </span><br><span class="line"><span class="comment"># 3.定义文本  </span></span><br><span class="line">text = <span class="string">&quot;人工智能是一个强大的开发框架。它支持多种语言模型和工具链。今天天气很好，想出去踏青。但是又比较懒不想出去，怎么办&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 4.开始切割  </span></span><br><span class="line">texts = text_splitter.split_text(text)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;分割后的块数: <span class="subst">&#123;<span class="built_in">len</span>(texts)&#125;</span>&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 5.初始化tiktoken编码器（用于Token计数）  </span></span><br><span class="line">encoder = tiktoken.get_encoding(<span class="string">&quot;cl100k_base&quot;</span>)  <span class="comment"># 确保与CharacterTextSplitter的encoding_name一致  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 6.打印每个块的Token数和内容  </span></span><br><span class="line"><span class="keyword">for</span> i, chunk <span class="keyword">in</span> <span class="built_in">enumerate</span>(texts):  </span><br><span class="line">    tokens = encoder.encode(chunk)  <span class="comment"># 现在encoder已定义  </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;块 <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>: <span class="subst">&#123;<span class="built_in">len</span>(tokens)&#125;</span> Token\n内容: <span class="subst">&#123;chunk&#125;</span>\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">分割后的块数: 4</span><br><span class="line">块 1: 17 Token</span><br><span class="line">内容: 人工智能是一个强大的开发框架</span><br><span class="line"></span><br><span class="line">块 2: 14 Token</span><br><span class="line">内容: 它支持多种语言模型和工具链</span><br><span class="line"></span><br><span class="line">块 3: 18 Token</span><br><span class="line">内容: 今天天气很好，想出去踏青</span><br><span class="line"></span><br><span class="line">块 4: 21 Token</span><br><span class="line">内容: 但是又比较懒不想出去，怎么办</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="SemanticChunker：语义分块"><a href="#SemanticChunker：语义分块" class="headerlink" title="SemanticChunker：语义分块"></a>SemanticChunker：语义分块</h3><p>SemanticChunking（语义分块）是 LangChain 中一种更高级的文本分割方法，它超越了传统的基于字 符或固定大小的分块方式，而是根据<strong>文本的语义结构</strong>进行智能分块，使每个分块保持<strong>语义完整性</strong>，从而 提高检索增强生成(RAG)等应用的效果。</p><p><strong>语义分割 vs 传统分割</strong></p><table><thead><tr><th>特性</th><th>语义分割（SemanticChunker）</th><th>传统字符分割（RecursiveCharacter）</th></tr></thead><tbody><tr><td>分割依据</td><td>嵌入向量相似度</td><td>固定字符&#x2F;换行符</td></tr><tr><td>语义完整性</td><td>✅ 保持主题连贯</td><td>❌ 可能切断句子逻辑</td></tr><tr><td>计算成本</td><td>❌ 高（需嵌入模型）</td><td>✅ 低</td></tr><tr><td>适用场景</td><td>需要高语义一致性的任务</td><td>简单文本预处理</td></tr></tbody></table><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_experimental.text_splitter <span class="keyword">import</span> SemanticChunker  </span><br><span class="line"><span class="keyword">from</span> langchain_openai.embeddings <span class="keyword">import</span> OpenAIEmbeddings  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">import</span> dotenv  </span><br><span class="line">  </span><br><span class="line">dotenv.load_dotenv()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 加载文本  </span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;asset/load/09-ai1.txt&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">    state_of_the_union = f.read()  <span class="comment">#返回字符串  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 获取嵌入模型  </span></span><br><span class="line">os.environ[<span class="string">&#x27;OPENAI_API_KEY&#x27;</span>] = <span class="string">&quot;sk-jdwjsxnkyahrzybuiorfenmjmvaakupdxxxxxxxxx&quot;</span>  </span><br><span class="line">os.environ[<span class="string">&#x27;OPENAI_BASE_URL&#x27;</span>] = <span class="string">&quot;https://api.siliconflow.cn/v1&quot;</span>  </span><br><span class="line">embed_model = OpenAIEmbeddings(  </span><br><span class="line">    model=<span class="string">&quot;Qwen/Qwen3-Embedding-0.6B&quot;</span>  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 获取切割器  </span></span><br><span class="line">text_splitter = SemanticChunker(  </span><br><span class="line">    embeddings=embed_model,  </span><br><span class="line">    breakpoint_threshold_type=<span class="string">&quot;percentile&quot;</span>,<span class="comment">#断点阈值类型：字面值[&quot;百分位数&quot;, &quot;标准差&quot;, &quot;四分位距&quot;, &quot;梯度&quot;] 选其一  </span></span><br><span class="line">    breakpoint_threshold_amount=<span class="number">65.0</span> <span class="comment">#断点阈值数量 (极低阈值 → 高分割敏感度)  </span></span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 切分文档  </span></span><br><span class="line">docs = text_splitter.create_documents(texts = [state_of_the_union])  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(docs))  </span><br><span class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> docs:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;🔍 文档 <span class="subst">&#123;doc&#125;</span>:&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">🔍 文档 page_content=<span class="string">&#x27;人工智能综述：发展、应用与未来展望</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">摘要</span></span><br><span class="line"><span class="string">人工智能（Artificial Intelligence，AI）作为计算机科学的一个重要分支，近年来取得了突飞猛进的发展。本文综述了人工智能的发展历程、核心技术、应用领域以及未来发展趋势。通过对人工智能的定义、历史背景、主要技术（如机器学习、深度学习、自然语言处理等）的详细介绍，探讨了人工智能在医疗、金融、教育、交通等领域的应用，并分析了人工智能发展过程中面临的挑战与机遇。最后，本文对人工智能的未来发展进行了展望，提出了可能的突破方向。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1.&#x27;</span>:</span><br><span class="line">🔍 文档 page_content=<span class="string">&#x27;引言</span></span><br><span class="line"><span class="string">人工智能是指通过计算机程序模拟人类智能的一门科学。自20世纪50年代诞生以来，人工智能经历了多次起伏，近年来随着计算能力的提升和大数据的普及，人工智能技术取得了显著的进展。人工智能的应用已经渗透到日常生活的方方面面，从智能手机的语音助手到自动驾驶汽车，从医疗诊断到金融分析，人工智能正在改变着人类社会的运行方式。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 人工智能的发展历程</span></span><br><span class="line"><span class="string">2.1 早期发展</span></span><br><span class="line"><span class="string">人工智能的概念最早可以追溯到20世纪50年代。1956年，达特茅斯会议（Dartmouth Conference）被认为是人工智能研究的正式开端。在随后的几十年里，人工智能研究经历了多次高潮与低谷。早期的研究主要集中在符号逻辑和专家系统上，但由于计算能力的限制和算法的不足，进展缓慢。</span></span><br><span class="line"><span class="string">2.2 机器学习的兴起</span></span><br><span class="line"><span class="string">20世纪90年代，随着统计学习方法的引入，机器学习逐渐成为人工智能研究的主流。支持向量机（SVM）、决策树、随机森林等算法在分类和回归任务中取得了良好的效果。这一时期，机器学习开始应用于数据挖掘、模式识别等领域。</span></span><br><span class="line"><span class="string">2.3 深度学习的突破</span></span><br><span class="line"><span class="string">2012年，深度学习在图像识别领域取得了突破性进展，标志着人工智能进入了一个新的阶段。深度学习通过多层神经网络模拟人脑的工作方式，能够自动提取特征并进行复杂的模式识别。卷积神经网络（CNN）、循环神经网络（RNN）和长短期记忆网络（LSTM）等深度学习模型在图像处理、自然语言处理、语音识别等领域取得了显著成果。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3.&#x27;</span>:</span><br><span class="line">🔍 文档 page_content=<span class="string">&#x27;人工智能的核心技术</span></span><br><span class="line"><span class="string">3.1 机器学习</span></span><br><span class="line"><span class="string">机器学习是人工智能的核心技术之一，通过算法使计算机从数据中学习并做出决策。常见的机器学习算法包括监督学习、无监督学习和强化学习。监督学习通过标记数据进行训练，无监督学习则从未标记数据中寻找模式，强化学习则通过与环境交互来优化决策。</span></span><br><span class="line"><span class="string">3.2 深度学习</span></span><br><span class="line"><span class="string">深度学习是机器学习的一个子领域，通过多层神经网络进行特征提取和模式识别。深度学习在图像识别、自然语言处理、语音识别等领域取得了显著成果。常见的深度学习模型包括卷积神经网络（CNN）、循环神经网络（RNN）和长短期记忆网络（LSTM）。</span></span><br><span class="line"><span class="string">3.3 自然语言处理</span></span><br><span class="line"><span class="string">自然语言处理（NLP）是人工智能的一个重要分支，致力于使计算机能够理解和生成人类语言。NLP技术广泛应用于机器翻译、情感分析、文本分类等领域。近年来，基于深度学习的NLP模型（如BERT、GPT）在语言理解任务中取得了突破性进展。</span></span><br><span class="line"><span class="string">3.4 计算机视觉</span></span><br><span class="line"><span class="string">计算机视觉是人工智能的另一个重要分支，致力于使计算机能够理解和处理图像和视频。计算机视觉技术广泛应用于图像识别、目标检测、人脸识别等领域。深度学习模型（如CNN）在计算机视觉任务中取得了显著成果。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4. 人工智能的应用领域</span></span><br><span class="line"><span class="string">4.1 医疗健康</span></span><br><span class="line"><span class="string">人工智能在医疗健康领域的应用包括疾病诊断、药物研发、个性化医疗等。通过分析医学影像和患者数据，人工智能可以帮助医生更准确地诊断疾病，提高治疗效果。</span></span><br><span class="line"><span class="string">4.2 金融</span></span><br><span class="line"><span class="string">人工智能在金融领域的应用包括风险评估、欺诈检测、算法交易等。通过分析市场数据和交易记录，人工智能可以帮助金融机构做出更明智的决策，提高运营效率。</span></span><br><span class="line"><span class="string">4.3 教育</span></span><br><span class="line"><span class="string">人工智能在教育领域的应用包括个性化学习、智能辅导、自动评分等。通过分析学生的学习数据，人工智能可以为学生提供个性化的学习建议，提高学习效果。</span></span><br><span class="line"><span class="string">4.4 交通</span></span><br><span class="line"><span class="string">人工智能在交通领域的应用包括自动驾驶、交通管理、智能导航等。通过分析交通数据和路况信息，人工智能可以帮助优化交通流量，提高交通安全。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5. 人工智能的挑战与机遇</span></span><br><span class="line"><span class="string">5.1 挑战</span></span><br><span class="line"><span class="string">人工智能发展过程中面临的主要挑战包括数据隐私、算法偏见、安全性问题等。数据隐私问题涉及到个人数据的收集和使用，算法偏见问题则涉及到算法的公平性和透明度，安全性问题则涉及到人工智能系统的可靠性和稳定性。</span></span><br><span class="line"><span class="string">5.2 机遇</span></span><br><span class="line"><span class="string">尽管面临挑战，人工智能的发展也带来了巨大的机遇。人工智能技术的进步将推动各行各业的创新，提高生产效率，改善生活质量。未来，人工智能有望在更多领域取得突破，为人类社会带来更多的便利和福祉。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">6.&#x27;</span>:</span><br><span class="line">🔍 文档 page_content=<span class="string">&#x27;未来展望</span></span><br><span class="line"><span class="string">6.1 技术突破</span></span><br><span class="line"><span class="string">未来，人工智能技术有望在以下几个方面取得突破：一是算法的优化和创新，提高模型的效率和准确性；二是计算能力的提升，支持更复杂的模型和更大规模的数据处理；三是跨学科研究的深入，推动人工智能与其他领域的融合。</span></span><br><span class="line"><span class="string">6.2 应用拓展</span></span><br><span class="line"><span class="string">随着技术的进步，人工智能的应用领域将进一步拓展。未来，人工智能有望在更多领域发挥重要作用，如环境保护、能源管理、智能制造等。人工智能将成为推动社会进步的重要力量。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">7. 结论</span></span><br><span class="line"><span class="string">人工智能作为一门快速发展的科学，正在改变着人类社会的运行方式。通过不断的技术创新和应用拓展，人工智能将为人类社会带来更多的便利和福祉。然而，人工智能的发展也面临着诸多挑战，需要社会各界共同努力，推动人工智能的健康发展。&#x27;</span>:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>关于参数的说明：</strong></p><ol><li>breakpoint_threshold_type （断点阈值类型）</li></ol><ul><li>作用：定义文本语义边界的检测算法，决定何时分割文本块。 </li><li>可选值及原理：</li></ul><table><thead><tr><th>类型</th><th>原理说明</th><th>适用场景</th></tr></thead><tbody><tr><td>percentile</td><td>计算相邻句子嵌入向量的余弦距离，取<strong>距离分 布的第N百分位</strong>值作为阈值，高于此值则分割</td><td>常规文本（如文 章、报告）</td></tr><tr><td>standard_deviation</td><td>以<strong>均值 + N倍</strong>标准差为阈值，识别语义突变 点</td><td>语义变化剧烈的 文档（如技术手 册）</td></tr><tr><td>interquartile</td><td>用<strong>四分位距（IQR）</strong> 定义异常值边界，超过则 分割</td><td>长文档（如书 籍）</td></tr><tr><td>gradient</td><td>基于<strong>嵌入向量变化的梯度</strong>检测分割点（需自定 义实现）</td><td>实验性需求</td></tr><tr><td></td><td></td><td></td></tr><tr><td>2. breakpoint_threshold_amount （断点阈值量）</td><td></td><td></td></tr></tbody></table><ul><li>作用：控制分割的<strong>粒度敏感度</strong>，值越小分割越细（块越多），值越大分割越粗（块越少）。 取值范围与示例：<ul><li><strong>percentile</strong> 模式：0.0~100.0，用户代码设 65.0 表示仅当余弦距离 &gt; 所有距离中最低的 65.0%值时分割 。默认值是：95.0，兼顾语义完整性与检索效率。值过小（比如0.1），会产 生大量小文本块，过度分割可能导致上下文断裂。 </li><li><strong>standard_deviation</strong> 模式：浮点数（如  1.5 表示均值+1.5倍标准差）。 </li><li><strong>interquartile</strong> 模式：倍数（如1.5 是IQR标准值）。</li></ul></li></ul><h3 id="其它拆分器"><a href="#其它拆分器" class="headerlink" title="其它拆分器"></a>其它拆分器</h3><h4 id="类型1：HTMLHeaderTextSplitter：Split-by-HTML-header"><a href="#类型1：HTMLHeaderTextSplitter：Split-by-HTML-header" class="headerlink" title="类型1：HTMLHeaderTextSplitter：Split by HTML header"></a>类型1：HTMLHeaderTextSplitter：Split by HTML header</h4><p>HTMLHeaderTextSplitter是一种专门用于处理HTML文档的文本分割方法，它根据HTML的<strong>标题标签（如&lt;h1&gt;,&lt;h2&gt;等）</strong>  将文档划分为逻辑分块，同时保留标题的层级结构信息。<br>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入相关依赖 </span></span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> HTMLHeaderTextSplitter </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.定义HTML文件 </span></span><br><span class="line">html_string = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">次处是html文件内容</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 4.用于指定要根据哪些HTML标签来分割文本 </span></span><br><span class="line">headers_to_split_on = [ </span><br><span class="line">(  <span class="string">&quot;h1&quot;</span> , <span class="string">&quot;标题1&quot;</span> ),</span><br><span class="line">(  <span class="string">&quot;h2&quot;</span> , <span class="string">&quot;标题2&quot;</span> ), </span><br><span class="line">( <span class="string">&quot;h3&quot;</span> , <span class="string">&quot;标题3&quot;</span> ),</span><br><span class="line">] </span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.定义HTMLHeaderTextSplitter分割器 </span></span><br><span class="line">html_splitter = HTMLHeaderTextSplitter(headers_to_split_on=headers_to_split_on) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.分割器分割 </span></span><br><span class="line">html_header_splits = html_splitter.split_text(html_string) </span><br><span class="line">html_header_splits</span><br></pre></td></tr></table></figure><p>说明： </p><ul><li>标题下文本内容所属标题的层级信息保存在元数据中。 </li><li>每个分块会自动继承父级标题的上下文，避免信息割裂。</li></ul><h4 id="类型2：CodeTextSplitter：Split-code"><a href="#类型2：CodeTextSplitter：Split-code" class="headerlink" title="类型2：CodeTextSplitter：Split code"></a>类型2：CodeTextSplitter：Split code</h4><p>CodeTextSplitter是一个 专为代码文件设计的文本分割器（Text Splitter），支持代码的语言包括[‘cpp’, ‘go’, ‘java’, ‘js’, ‘php’, ‘proto’, ‘python’, ‘rst’, ‘ruby’, ‘rust’, ‘scala’, ‘swift’, ‘markdown’, ‘latex’, ‘html’, ‘sol’]。它能够根据编程语言的语法结构（如函数、类、代码块等）智能地拆分代码，保持代码逻辑的完 整性。</p><p>与递归文本分割器（如RecursiveCharacterTextSplitter）不同，CodeTextSplitter 针对代码的特性进 行了优化， <strong>避免在函数或类的中间截断</strong>。</p><p>举例1：支持的语言</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install langchain-text-splitters</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="string">&#x27;</span></span><br><span class="line"><span class="string">import Language </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 支持分割语言类型 </span></span><br><span class="line"><span class="string"># Full list of supported languages &#x27;</span></span><br><span class="line"></span><br><span class="line">langs = [e.value <span class="keyword">for</span> e <span class="keyword">in</span> Language] </span><br><span class="line"><span class="built_in">print</span> (langs)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[cpp, go, java, kotlin, js, ts, php, proto, python, rst, ruby, rust, scala, swift, markdown, latex, html, sol, csharp, cobol, c, lua, perl, haskell, elixir, powershell]</span><br></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 1.导入相关依赖  </span></span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> (  </span><br><span class="line">    Language,  </span><br><span class="line">    RecursiveCharacterTextSplitter,  </span><br><span class="line"> )  </span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint  </span><br><span class="line"> <span class="comment"># 2.定义要分割的python代码片段  </span></span><br><span class="line">PYTHON_CODE = <span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string"> def hello_world():    </span></span><br><span class="line"><span class="string"> print(&quot;Hello, World!&quot;) </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">def hello_world1():    </span></span><br><span class="line"><span class="string">print(&quot;Hello, World1!&quot;) &quot;&quot;&quot;</span> <span class="comment"># 3.定义递归字符切分器  </span></span><br><span class="line">python_splitter = RecursiveCharacterTextSplitter.from_language(  </span><br><span class="line">    language=Language.PYTHON,  </span><br><span class="line">    chunk_size=<span class="number">50</span>,  </span><br><span class="line">    chunk_overlap=<span class="number">0</span>  </span><br><span class="line"> )  </span><br><span class="line"> <span class="comment"># 4.文档切分  </span></span><br><span class="line">python_docs = python_splitter.create_documents(texts=[PYTHON_CODE])  </span><br><span class="line">pprint(python_docs)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Document(metadata=&#123;&#125;, page_content=<span class="string">&#x27;def hello_world():\n   print(&quot;Hello, World!&quot;)&#x27;</span>),</span><br><span class="line"> Document(metadata=&#123;&#125;, page_content=<span class="string">&#x27;def hello_world1():\n   print(&quot;Hello, World1!&quot;)&#x27;</span>)]</span><br></pre></td></tr></table></figure><h4 id="类型3：MarkdownTextSplitter：md数据类型"><a href="#类型3：MarkdownTextSplitter：md数据类型" class="headerlink" title="类型3：MarkdownTextSplitter：md数据类型"></a>类型3：MarkdownTextSplitter：md数据类型</h4><p>因为Markdown格式有特定的语法，一般整体内容由 <strong>h1、h2、h3</strong> 等多级标题组织，所以 MarkdownHeaderTextSplitter的切分策略就是根据 <strong>标题来分割文本内容</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> MarkdownTextSplitter  </span><br><span class="line">markdown_text = <span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string"> # 一级标题\n  </span></span><br><span class="line"><span class="string">这是一级标题下的内容\n\n  </span></span><br><span class="line"><span class="string"> ## 二级标题\n- 二级下列表项1\n- 二级下列表项2\n  </span></span><br><span class="line"><span class="string"> &quot;&quot;&quot;</span> <span class="comment"># 关键步骤：直接修改实例属性  </span></span><br><span class="line">splitter = MarkdownTextSplitter(chunk_size=<span class="number">30</span>, chunk_overlap=<span class="number">0</span>)  </span><br><span class="line">splitter._is_separator_regex = <span class="literal">True</span>  <span class="comment">#  强制将分隔符视为正则表达式  </span></span><br><span class="line"><span class="comment"># print(len(docs))  </span></span><br><span class="line"><span class="comment"># 执行分割  </span></span><br><span class="line">docs = splitter.create_documents(texts = [markdown_text])  </span><br><span class="line"><span class="keyword">for</span> i, doc <span class="keyword">in</span> <span class="built_in">enumerate</span>(docs):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n🔍 分块 <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>:&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(doc.page_content)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">🔍 分块 1:</span><br><span class="line"><span class="comment"># 一级标题</span></span><br><span class="line"></span><br><span class="line">这是一级标题下的内容</span><br><span class="line"></span><br><span class="line">🔍 分块 2:</span><br><span class="line"><span class="comment">## 二级标题</span></span><br><span class="line">- 二级下列表项1</span><br><span class="line"></span><br><span class="line">🔍 分块 3:</span><br><span class="line">- 二级下列表项2</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="文档嵌入模型-Text-Embedding-Models"><a href="#文档嵌入模型-Text-Embedding-Models" class="headerlink" title="文档嵌入模型 Text Embedding Models"></a>文档嵌入模型 Text Embedding Models</h1><h2 id="嵌入模型概述"><a href="#嵌入模型概述" class="headerlink" title="嵌入模型概述"></a>嵌入模型概述</h2><p><strong>Text Embedding Models</strong>：文档嵌入模型，提供将文本编码为向量的能力，即<strong>文档向量化</strong> ，<strong>文档写入</strong>和<strong>用户 查询匹配</strong>前都会先执行文档嵌入编码，即向量化。<br><img src="/2025/09/28/LangChain%E4%BD%BF%E7%94%A8%E4%B9%8BRetrieval/file-20250928094827404.png" alt="500"></p><p>LangChain中针对向量化模型的封装提供了两种接口，一种针对<strong>文档的向量化(embed_documents)<strong>，一 种针对</strong>句子的向量化embed_query。</strong></p><h2 id="句子的向量化（embed-query）"><a href="#句子的向量化（embed-query）" class="headerlink" title="句子的向量化（embed_query）"></a>句子的向量化（embed_query）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> OpenAIEmbeddings  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">import</span> dotenv  </span><br><span class="line">  </span><br><span class="line">dotenv.load_dotenv()  </span><br><span class="line">  </span><br><span class="line">os.environ[<span class="string">&#x27;OPENAI_API_KEY&#x27;</span>] = os.getenv(<span class="string">&quot;SILICONFLOW_API_KEY&quot;</span>)  </span><br><span class="line">os.environ[<span class="string">&#x27;OPENAI_BASE_URL&#x27;</span>] = os.getenv(<span class="string">&quot;BASE_URL&quot;</span>)  </span><br><span class="line">  </span><br><span class="line">embedding_model = OpenAIEmbeddings(  </span><br><span class="line">    <span class="comment"># model=&quot;text-embedding-ada-002&quot;  </span></span><br><span class="line">    model = <span class="string">&quot;Qwen/Qwen3-Embedding-0.6B&quot;</span>  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line">text = <span class="string">&quot;Nice to meet you!&quot;</span>  </span><br><span class="line">  </span><br><span class="line">embed_query = embedding_model.embed_query(text = text,)  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(embed_query))  <span class="comment"># 1536 --&gt; 3072  </span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(embed_query[:<span class="number">10</span>])</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1024</span><br><span class="line">[-0.014332670718431473, -0.02295164205133915, -0.01733478531241417, -0.006827387027442455, 0.04202958941459656, -0.028665341436862946, -0.023823224008083344, -0.031376928091049194, -0.09374341368675232, 0.08986972272396088]</span><br></pre></td></tr></table></figure><h2 id="文档的向量化（embed-documents）"><a href="#文档的向量化（embed-documents）" class="headerlink" title="文档的向量化（embed_documents）"></a>文档的向量化（embed_documents）</h2><p>文档的向量化，接收的参数是字符串数组。</p><h3 id="举例1"><a href="#举例1" class="headerlink" title="举例1"></a>举例1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> OpenAIEmbeddings  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">import</span> dotenv  </span><br><span class="line">  </span><br><span class="line">dotenv.load_dotenv()  </span><br><span class="line">  </span><br><span class="line">os.environ[<span class="string">&#x27;OPENAI_API_KEY&#x27;</span>] = os.getenv(<span class="string">&quot;SILICONFLOW_API_KEY&quot;</span>)  </span><br><span class="line">os.environ[<span class="string">&#x27;OPENAI_BASE_URL&#x27;</span>] = os.getenv(<span class="string">&quot;BASE_URL&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 初始化嵌入模型  </span></span><br><span class="line">embeddings_model = OpenAIEmbeddings(model=<span class="string">&quot;Qwen/Qwen3-Embedding-0.6B&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 待嵌入的文本列表  </span></span><br><span class="line">texts = [  </span><br><span class="line">    <span class="string">&quot;Hi there!&quot;</span>,  </span><br><span class="line">    <span class="string">&quot;Oh, hello!&quot;</span>,  </span><br><span class="line">    <span class="string">&quot;What&#x27;s your name?&quot;</span>,  </span><br><span class="line">    <span class="string">&quot;My friends call me World&quot;</span>,  </span><br><span class="line">    <span class="string">&quot;Hello World!&quot;</span>  </span><br><span class="line">]  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 生成嵌入向量  </span></span><br><span class="line">embeddings = embeddings_model.embed_documents(texts)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(texts)):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;texts[i]&#125;</span>:<span class="subst">&#123;embeddings[i][:<span class="number">3</span>]&#125;</span>&quot;</span>,end=<span class="string">&quot;\n\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Hi there!:[-0.005018789321184158, -0.02362913265824318, -0.015080382116138935]</span><br><span class="line"></span><br><span class="line">Oh, hello!:[-0.016794802621006966, 0.0015314100310206413, -0.013306026346981525]</span><br><span class="line"></span><br><span class="line">What<span class="string">&#x27;s your name?:[-0.0057384539395570755, -0.011427008546888828, -0.018862050026655197]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">My friends call me World:[0.01912776567041874, 0.0315045565366745, -0.013761605136096478]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Hello World!:[0.0033330952282994986, 0.017623262479901314, -0.011646676808595657]</span></span><br></pre></td></tr></table></figure><h3 id="举例2"><a href="#举例2" class="headerlink" title="举例2"></a>举例2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv  </span><br><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> CSVLoader  </span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> OpenAIEmbeddings  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">embeddings_model = OpenAIEmbeddings(  </span><br><span class="line">    model=<span class="string">&quot;Qwen/Qwen3-Embedding-0.6B&quot;</span>,  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 情况1：  </span></span><br><span class="line">loader = CSVLoader(<span class="string">&quot;./asset/load/03-load.csv&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)  </span><br><span class="line">docs = loader.load_and_split()  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#print(len(docs))  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 存放的是每一个chrunk的embedding。  </span></span><br><span class="line">embeded_docs = embeddings_model.embed_documents([doc.page_content <span class="keyword">for</span> doc <span class="keyword">in</span> docs])  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(embeded_docs))  </span><br><span class="line"><span class="comment"># 表示的是每一个chrunk的embedding的维度  </span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(embeded_docs[<span class="number">0</span>]))  </span><br><span class="line"><span class="built_in">print</span>(embeded_docs[<span class="number">0</span>][:<span class="number">10</span>])</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1024</span><br><span class="line">[0.020796308293938637, -0.06914985924959183, -0.016174905002117157, -0.02148095890879631, 0.004043726250529289, 0.018742350861430168, 0.04381773620843887, 0.07394243031740189, -0.06641125679016113, 0.03834051638841629]</span><br></pre></td></tr></table></figure><h1 id="向量存储-Vector-Stores"><a href="#向量存储-Vector-Stores" class="headerlink" title="向量存储(Vector Stores)"></a>向量存储(Vector Stores)</h1><h2 id="理解向量存储"><a href="#理解向量存储" class="headerlink" title="理解向量存储"></a>理解向量存储</h2><p>将文本向量化之后，下一步就是进行向量的存储。这部分包含两块： </p><ul><li><strong>向量的存储</strong>：将非结构化数据向量化后，完成存储 </li><li><strong>向量的查询</strong>：查询时，嵌入非结构化查询并检索与嵌入查询“最相似”的嵌入向量。即具有相似性 检索能力</li></ul><p><img src="/2025/09/28/LangChain%E4%BD%BF%E7%94%A8%E4%B9%8BRetrieval/file-20250928095510561.png" alt="500"></p><h2 id="常用的向量数据库"><a href="#常用的向量数据库" class="headerlink" title="常用的向量数据库"></a>常用的向量数据库</h2><p>LangChain提供了超过 50种 不同向量存储（Vector Stores）的集成，从开源的 本地向量存储到 云托管的私有向量存储，允许你选择最适合需求的向量存储。<br>LangChain支持的向量存储参考 VectorStore 接口和实现。<br><img src="/2025/09/28/LangChain%E4%BD%BF%E7%94%A8%E4%B9%8BRetrieval/file-20250928095622717.png" alt="500"></p><p>典型的介绍如下：</p><table><thead><tr><th>向量数据库</th><th>描述</th></tr></thead><tbody><tr><td><strong>Chroma</strong></td><td>开源、免费的嵌入式数据库</td></tr><tr><td>FAISS</td><td>Meta出品，开源、免费，Facebook AI相似性搜索服务。（Facebook AI Similarity Search，Facebook AI 相似性搜索库） &#x2F;fæs&#x2F;</td></tr><tr><td>Milvus</td><td>用于存储、索引和管理由深度神经网络和其他ML模型产生的大量嵌入向量的数据库</td></tr><tr><td>Pinecone</td><td>具有广泛功能的向量数据库</td></tr><tr><td>Redis</td><td>基于Redis的检索器</td></tr></tbody></table><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>使用向量数据库组件时需要同时传入包含<strong>文本块的Document类对象</strong>以及<strong>文本向量化组件</strong>，向量数据库组 件会自动完成将文本向量化的工作，并写入数据库中。</p><h3 id="数据的存储"><a href="#数据的存储" class="headerlink" title="数据的存储"></a>数据的存储</h3><h4 id="举例1：从TXT文档中加载数据，向量化后存储到Chroma数据库"><a href="#举例1：从TXT文档中加载数据，向量化后存储到Chroma数据库" class="headerlink" title="举例1：从TXT文档中加载数据，向量化后存储到Chroma数据库"></a>举例1：从TXT文档中加载数据，向量化后存储到Chroma数据库</h4><p>安装模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install chromadb </span><br><span class="line">pip install langchain-chroma</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_chroma <span class="keyword">import</span> Chroma  </span><br><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> TextLoader  </span><br><span class="line"><span class="keyword">from</span> langchain_text_splitters <span class="keyword">import</span> CharacterTextSplitter  </span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> OpenAIEmbeddings  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">import</span> dotenv  </span><br><span class="line">  </span><br><span class="line">dotenv.load_dotenv()  </span><br><span class="line">  </span><br><span class="line">os.environ[<span class="string">&#x27;OPENAI_API_KEY&#x27;</span>] = os.getenv(<span class="string">&quot;SILICONFLOW_API_KEY&quot;</span>)  </span><br><span class="line">os.environ[<span class="string">&#x27;OPENAI_BASE_URL&#x27;</span>] = os.getenv(<span class="string">&quot;BASE_URL&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 步骤1：创建一个TextLoader的实例，并将指定的文档加载  </span></span><br><span class="line">loader = TextLoader(  </span><br><span class="line">    file_path=<span class="string">&quot;./asset/load/09-ai1.txt&quot;</span>,  </span><br><span class="line">    encoding=<span class="string">&quot;utf-8&quot;</span>,  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line">docs = loader.load()  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 步骤2：创建文本拆分器，并拆分文档  </span></span><br><span class="line">text_splitter = CharacterTextSplitter(  </span><br><span class="line">    chunk_size=<span class="number">1000</span>,  </span><br><span class="line">    chunk_overlap=<span class="number">100</span>,  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line">splitter_docs = text_splitter.split_documents(docs)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># print(len(splitter_docs))  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 步骤3：创建嵌入模型  </span></span><br><span class="line">embedding_model = OpenAIEmbeddings(model=<span class="string">&quot;Qwen/Qwen3-Embedding-0.6B&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 步骤4：将文档及嵌入模型传入到Chroma相关的结构中，进行数据的存储  </span></span><br><span class="line">db = Chroma.from_documents(  </span><br><span class="line">    documents=splitter_docs,  </span><br><span class="line">    embedding=embedding_model,  </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>思考：此时数据存储在哪里呢？</strong><br>注意：Chroma主要有两种存储模式：<strong>内存模式</strong>和<strong>持久化模式</strong>。当使用persist_directory参数时，数据 会保存到指定目录；如果没有指定，则默认使用内存存储。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db1 = Chroma.from_documents(  </span><br><span class="line">    documents=splitter_docs,  </span><br><span class="line">    embedding=embedding_model,  </span><br><span class="line">    persist_directory=<span class="string">&quot;./asset/chroma-1&quot;</span>,  </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>2、需要明确，在向量数据库中，不仅存储了数据（或文档）的向量，而且还存储了数据（或文档）本身。</p><hr><p>演示一下：检索的需求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">query = <span class="string">&quot;人工智能的核心技术有哪些呢？&quot;</span>  </span><br><span class="line">  </span><br><span class="line">docs = db.similarity_search(query)  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(docs[<span class="number">0</span>].page_content)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">5. 人工智能的挑战与机遇</span><br><span class="line">5.1 挑战</span><br><span class="line">人工智能发展过程中面临的主要挑战包括数据隐私、算法偏见、安全性问题等。数据隐私问题涉及到个人数据的收集和使用，算法偏见问题则涉及到算法的公平性和透明度，安全性问题则涉及到人工智能系统的可靠性和稳定性。</span><br><span class="line">5.2 机遇</span><br><span class="line">尽管面临挑战，人工智能的发展也带来了巨大的机遇。人工智能技术的进步将推动各行各业的创新，提高生产效率，改善生活质量。未来，人工智能有望在更多领域取得突破，为人类社会带来更多的便利和福祉。</span><br><span class="line"></span><br><span class="line">6. 未来展望</span><br><span class="line">6.1 技术突破</span><br><span class="line">未来，人工智能技术有望在以下几个方面取得突破：一是算法的优化和创新，提高模型的效率和准确性；二是计算能力的提升，支持更复杂的模型和更大规模的数据处理；三是跨学科研究的深入，推动人工智能与其他领域的融合。</span><br><span class="line">6.2 应用拓展</span><br><span class="line">随着技术的进步，人工智能的应用领域将进一步拓展。未来，人工智能有望在更多领域发挥重要作用，如环境保护、能源管理、智能制造等。人工智能将成为推动社会进步的重要力量。</span><br><span class="line"></span><br><span class="line">7. 结论</span><br><span class="line">人工智能作为一门快速发展的科学，正在改变着人类社会的运行方式。通过不断的技术创新和应用拓展，人工智能将为人类社会带来更多的便利和福祉。然而，人工智能的发展也面临着诸多挑战，需要社会各界共同努力，推动人工智能的健康发展。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="举例2：操作csv文档，并向量化"><a href="#举例2：操作csv文档，并向量化" class="headerlink" title="举例2：操作csv文档，并向量化"></a>举例2：操作csv文档，并向量化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> CharacterTextSplitter  </span><br><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> CSVLoader  </span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> OpenAIEmbeddings  </span><br><span class="line"><span class="keyword">from</span> langchain_chroma <span class="keyword">import</span> Chroma  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">import</span> dotenv  </span><br><span class="line">  </span><br><span class="line">dotenv.load_dotenv()  </span><br><span class="line">os.environ[<span class="string">&#x27;OPENAI_API_KEY&#x27;</span>] = os.getenv(<span class="string">&quot;SILICONFLOW_API_KEY&quot;</span>)  </span><br><span class="line">os.environ[<span class="string">&#x27;OPENAI_BASE_URL&#x27;</span>] = os.getenv(<span class="string">&quot;BASE_URL&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 获取嵌入模型  </span></span><br><span class="line">embeddings = OpenAIEmbeddings(model=<span class="string">&quot;Qwen/Qwen3-Embedding-0.6B&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 加载文档并拆分（第1次拆分）  </span></span><br><span class="line">loader = CSVLoader(<span class="string">&quot;./asset/load/03-load.csv&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)  </span><br><span class="line">pages = loader.load_and_split()  </span><br><span class="line"><span class="comment">#print(len(pages))  # 4  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 文本拆分（第2次拆分）  </span></span><br><span class="line">text_spliter = CharacterTextSplitter.from_tiktoken_encoder(chunk_size=<span class="number">500</span>)  </span><br><span class="line">docs = text_spliter.split_documents(pages)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 向量存储  </span></span><br><span class="line">db_path = <span class="string">&#x27;./asset/chroma-2&#x27;</span>  </span><br><span class="line">db = Chroma.from_documents(docs, embeddings, persist_directory=db_path)</span><br></pre></td></tr></table></figure><h3 id="数据的检索"><a href="#数据的检索" class="headerlink" title="数据的检索"></a>数据的检索</h3><p>举例：一个包含构建Chroma向量数据库以及向量检索的代码<br>前置代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入相关依赖  </span></span><br><span class="line"><span class="keyword">from</span> langchain_chroma <span class="keyword">import</span> Chroma  </span><br><span class="line"><span class="keyword">from</span> langchain_core.documents <span class="keyword">import</span> Document  </span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> OpenAIEmbeddings  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 2.定义文档  </span></span><br><span class="line">raw_documents = [  </span><br><span class="line">    Document(  </span><br><span class="line">        page_content=<span class="string">&quot;葡萄是一种常见的水果，属于葡萄科葡萄属植物。它的果实呈圆形或椭圆形，颜色有绿色、紫色、红色等多种。葡萄富含维生素C和抗氧化物质，可以直接食用或酿造成葡萄酒。&quot;</span>,  </span><br><span class="line">        metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;水果&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;植物&quot;</span>&#125;  </span><br><span class="line">    ),  </span><br><span class="line">    Document(  </span><br><span class="line">        page_content=<span class="string">&quot;白菜是十字花科蔬菜，原产于中国北方。它的叶片层层包裹形成紧密的球状，口感清脆微甜。白菜富含膳食纤维和维生素K，常用于制作泡菜、炒菜或煮汤。&quot;</span>,  </span><br><span class="line">        metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;蔬菜&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;植物&quot;</span>&#125;  </span><br><span class="line">    ),  </span><br><span class="line">    Document(  </span><br><span class="line">        page_content=<span class="string">&quot;狗是人类最早驯化的动物之一，属于犬科。它们具有高度社会性，能理解人类情绪，常被用作宠物、导盲犬或警犬。不同品种的狗在体型、毛色和性格上有很大差异。&quot;</span>,  </span><br><span class="line">        metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;动物&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;哺乳动物&quot;</span>&#125;  </span><br><span class="line">    ),  </span><br><span class="line">    Document(  </span><br><span class="line">        page_content=<span class="string">&quot;猫是小型肉食性哺乳动物，性格独立但也能与人类建立亲密关系。它们夜视能力极强，擅长捕猎老鼠。家猫的品种包括波斯猫、暹罗猫等，毛色和花纹多样。&quot;</span>,  </span><br><span class="line">        metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;动物&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;哺乳动物&quot;</span>&#125;  </span><br><span class="line">    ),  </span><br><span class="line">    Document(  </span><br><span class="line">        page_content=<span class="string">&quot;人类是地球上最具智慧的生物，属于灵长目人科。现代人类（智人）拥有高度发达的大脑，创造了语言、工具和文明。人类的平均寿命约70-80年，分布在全球各地。&quot;</span>,  </span><br><span class="line">        metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;生物&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;灵长类&quot;</span>&#125;  </span><br><span class="line">    ),  </span><br><span class="line">    Document(  </span><br><span class="line">        page_content=<span class="string">&quot;太阳是太阳系的中心恒星，直径约139万公里，主要由氢和氦组成。它通过核聚变反应产生能量，为地球提供光和热。太阳活动周期约为11年，会影响地球气候。&quot;</span>,  </span><br><span class="line">        metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;天文&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;恒星&quot;</span>&#125;  </span><br><span class="line">    ),  </span><br><span class="line">    Document(  </span><br><span class="line">        page_content=<span class="string">&quot;长城是中国古代的军事防御工程，总长度超过2万公里。它始建于春秋战国时期，秦朝连接各段，明朝大规模重修。长城是世界文化遗产和人类建筑奇迹。&quot;</span>,  </span><br><span class="line">        metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;历史&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;建筑&quot;</span>&#125;  </span><br><span class="line">    ),  </span><br><span class="line">    Document(  </span><br><span class="line">        page_content=<span class="string">&quot;量子力学是研究微观粒子运动规律的物理学分支。它提出了波粒二象性、测不准原理等概念，彻底改变了人类对物质世界的认知。量子计算机正是基于这一理论发展而来。&quot;</span>,  </span><br><span class="line">        metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;物理&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;科学&quot;</span>&#125;  </span><br><span class="line">    ),  </span><br><span class="line">    Document(  </span><br><span class="line">        page_content=<span class="string">&quot;《红楼梦》是中国古典文学四大名著之一，作者曹雪芹。小说以贾、史、王、薛四大家族的兴衰为背景，描绘了贾宝玉与林黛玉的爱情悲剧，反映了封建社会的种种矛盾。&quot;</span>,  </span><br><span class="line">        metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;文学&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;小说&quot;</span>&#125;  </span><br><span class="line">    ),  </span><br><span class="line">    Document(  </span><br><span class="line">        page_content=<span class="string">&quot;新冠病毒（SARS-CoV-2）是一种可引起呼吸道疾病的冠状病毒。它通过飞沫传播，主要症状包括发热、咳嗽、乏力。疫苗和戴口罩是有效的预防措施。&quot;</span>,  </span><br><span class="line">        metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;医学&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;病毒&quot;</span>&#125;  </span><br><span class="line">    )  </span><br><span class="line">]  </span><br><span class="line"><span class="comment"># 3. 创建嵌入模型  </span></span><br><span class="line">embedding = OpenAIEmbeddings(model=<span class="string">&quot;Qwen/Qwen3-Embedding-0.6B&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 4.创建向量数据库  </span></span><br><span class="line">db = Chroma.from_documents(  </span><br><span class="line">    documents=raw_documents,  </span><br><span class="line">    embedding=embedding,  </span><br><span class="line">    persist_directory=<span class="string">&quot;./asset/chroma-3&quot;</span>,  </span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="①-相似性检索（similarity-search）"><a href="#①-相似性检索（similarity-search）" class="headerlink" title="① 相似性检索（similarity_search）"></a>① 相似性检索（similarity_search）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5. 检索示例（返回前3个最相关结果）  </span></span><br><span class="line">query = <span class="string">&quot;哺乳动物&quot;</span>  </span><br><span class="line">docs = db.similarity_search(query, k=<span class="number">3</span>)  <span class="comment"># k=3表示返回3个最相关文档  </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;查询: &#x27;<span class="subst">&#123;query&#125;</span>&#x27; 的结果:&quot;</span>)  </span><br><span class="line"><span class="keyword">for</span> i, doc <span class="keyword">in</span> <span class="built_in">enumerate</span>(docs, <span class="number">1</span>):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n结果 <span class="subst">&#123;i&#125;</span>:&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;内容: <span class="subst">&#123;doc.page_content&#125;</span>&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;元数据: <span class="subst">&#123;doc.metadata&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">查询: <span class="string">&#x27;哺乳动物&#x27;</span> 的结果:</span><br><span class="line"></span><br><span class="line">结果 1:</span><br><span class="line">内容: 狗是人类最早驯化的动物之一，属于犬科。它们具有高度社会性，能理解人类情绪，常被用作宠物、导盲犬或警犬。不同品种的狗在体型、毛色和性格上有很大差异。</span><br><span class="line">元数据: &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;哺乳动物&#x27;</span>, <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;动物&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">结果 2:</span><br><span class="line">内容: 狗是人类最早驯化的动物之一，属于犬科。它们具有高度社会性，能理解人类情绪，常被用作宠物、导盲犬或警犬。不同品种的狗在体型、毛色和性格上有很大差异。</span><br><span class="line">元数据: &#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;动物&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;哺乳动物&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">结果 3:</span><br><span class="line">内容: 狗是人类最早驯化的动物之一，属于犬科。它们具有高度社会性，能理解人类情绪，常被用作宠物、导盲犬或警犬。不同品种的狗在体型、毛色和性格上有很大差异。</span><br><span class="line">元数据: &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;哺乳动物&#x27;</span>, <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;动物&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="②-支持直接对问题向量查询（similarity-search-by-vector）"><a href="#②-支持直接对问题向量查询（similarity-search-by-vector）" class="headerlink" title="② 支持直接对问题向量查询（similarity_search_by_vector）"></a>② 支持直接对问题向量查询（similarity_search_by_vector）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">query = <span class="string">&quot;哺乳动物&quot;</span>  </span><br><span class="line">embedding_vector = embedding.embed_query(query)  </span><br><span class="line">  </span><br><span class="line">docs = db.similarity_search_by_vector(embedding_vector, k=<span class="number">3</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;查询: &#x27;<span class="subst">&#123;query&#125;</span>&#x27; 的结果:&quot;</span>)  </span><br><span class="line"><span class="keyword">for</span> i, doc <span class="keyword">in</span> <span class="built_in">enumerate</span>(docs, <span class="number">1</span>):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n结果 <span class="subst">&#123;i&#125;</span>:&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;内容: <span class="subst">&#123;doc.page_content&#125;</span>&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;元数据: <span class="subst">&#123;doc.metadata&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">查询: <span class="string">&#x27;哺乳动物&#x27;</span> 的结果:</span><br><span class="line"></span><br><span class="line">结果 1:</span><br><span class="line">内容: 狗是人类最早驯化的动物之一，属于犬科。它们具有高度社会性，能理解人类情绪，常被用作宠物、导盲犬或警犬。不同品种的狗在体型、毛色和性格上有很大差异。</span><br><span class="line">元数据: &#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;动物&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;哺乳动物&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">结果 2:</span><br><span class="line">内容: 狗是人类最早驯化的动物之一，属于犬科。它们具有高度社会性，能理解人类情绪，常被用作宠物、导盲犬或警犬。不同品种的狗在体型、毛色和性格上有很大差异。</span><br><span class="line">元数据: &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;哺乳动物&#x27;</span>, <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;动物&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">结果 3:</span><br><span class="line">内容: 狗是人类最早驯化的动物之一，属于犬科。它们具有高度社会性，能理解人类情绪，常被用作宠物、导盲犬或警犬。不同品种的狗在体型、毛色和性格上有很大差异。</span><br><span class="line">元数据: &#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;动物&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;哺乳动物&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="③-相似性检索，支持过滤元数据（filter）"><a href="#③-相似性检索，支持过滤元数据（filter）" class="headerlink" title="③ 相似性检索，支持过滤元数据（filter）"></a>③ 相似性检索，支持过滤元数据（filter）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">query = <span class="string">&quot;哺乳动物&quot;</span>  </span><br><span class="line">  </span><br><span class="line">docs = db.similarity_search(  </span><br><span class="line">    query=query,  </span><br><span class="line">    k=<span class="number">3</span>,  </span><br><span class="line">    <span class="built_in">filter</span>=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;动物&quot;</span>&#125;)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i, doc <span class="keyword">in</span> <span class="built_in">enumerate</span>(docs, <span class="number">1</span>):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n结果 <span class="subst">&#123;i&#125;</span>:&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;内容: <span class="subst">&#123;doc.page_content&#125;</span>&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;元数据: <span class="subst">&#123;doc.metadata&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">结果 1:</span><br><span class="line">内容: 狗是人类最早驯化的动物之一，属于犬科。它们具有高度社会性，能理解人类情绪，常被用作宠物、导盲犬或警犬。不同品种的狗在体型、毛色和性格上有很大差异。</span><br><span class="line">元数据: &#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;动物&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;哺乳动物&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">结果 2:</span><br><span class="line">内容: 狗是人类最早驯化的动物之一，属于犬科。它们具有高度社会性，能理解人类情绪，常被用作宠物、导盲犬或警犬。不同品种的狗在体型、毛色和性格上有很大差异。</span><br><span class="line">元数据: &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;哺乳动物&#x27;</span>, <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;动物&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">结果 3:</span><br><span class="line">内容: 狗是人类最早驯化的动物之一，属于犬科。它们具有高度社会性，能理解人类情绪，常被用作宠物、导盲犬或警犬。不同品种的狗在体型、毛色和性格上有很大差异。</span><br><span class="line">元数据: &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;哺乳动物&#x27;</span>, <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;动物&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="④-通过L2距离分数进行搜索（similarity-search-with-score）"><a href="#④-通过L2距离分数进行搜索（similarity-search-with-score）" class="headerlink" title="④ 通过L2距离分数进行搜索（similarity_search_with_score）"></a>④ 通过L2距离分数进行搜索（similarity_search_with_score）</h4><p>说明：分数值越小，检索到的文档越和问题相似。分值取值范围：[0，正无穷]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docs = db.similarity_search_with_score(  </span><br><span class="line">    <span class="string">&quot;量子力学是什么?&quot;</span>  </span><br><span class="line">)  </span><br><span class="line"><span class="keyword">for</span> doc, score <span class="keyword">in</span> docs:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot; [L2距离得分=<span class="subst">&#123;score:<span class="number">.3</span>f&#125;</span>] <span class="subst">&#123;doc.page_content&#125;</span> [<span class="subst">&#123;doc.metadata&#125;</span>]&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[L2距离得分=1.055] 狗是人类最早驯化的动物之一，属于犬科。它们具有高度社会性，能理解人类情绪，常被用作宠物、导盲犬或警犬。不同品种的狗在体型、毛色和性格上有很大差异。 [&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;动物&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;哺乳动物&#x27;</span>&#125;]</span><br><span class="line">[L2距离得分=1.057] 狗是人类最早驯化的动物之一，属于犬科。它们具有高度社会性，能理解人类情绪，常被用作宠物、导盲犬或警犬。不同品种的狗在体型、毛色和性格上有很大差异。 [&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;动物&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;哺乳动物&#x27;</span>&#125;]</span><br><span class="line">[L2距离得分=1.058] 狗是人类最早驯化的动物之一，属于犬科。它们具有高度社会性，能理解人类情绪，常被用作宠物、导盲犬或警犬。不同品种的狗在体型、毛色和性格上有很大差异。 [&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;动物&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;哺乳动物&#x27;</span>&#125;]</span><br><span class="line">[L2距离得分=1.071] 人类是地球上最具智慧的生物，属于灵长目人科。现代人类（智人）拥有高度发达的大脑，创造了语言、工具和文明。人类的平均寿命约70-80年，分布在全球各地。 [&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;生物&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;灵长类&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure><h4 id="⑤-通过余弦相似度分数进行搜索（-similarity-search-with-relevance-scores）"><a href="#⑤-通过余弦相似度分数进行搜索（-similarity-search-with-relevance-scores）" class="headerlink" title="⑤ 通过余弦相似度分数进行搜索（_similarity_search_with_relevance_scores）"></a>⑤ 通过余弦相似度分数进行搜索（_similarity_search_with_relevance_scores）</h4><p>说明：分数值越接近1（上限），检索到的文档越和问题相似。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docs = db._similarity_search_with_relevance_scores(  </span><br><span class="line">    <span class="string">&quot;量子力学是什么?&quot;</span>  </span><br><span class="line">)  </span><br><span class="line"><span class="keyword">for</span> doc, score <span class="keyword">in</span> docs:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;* [余弦相似度得分=<span class="subst">&#123;score:<span class="number">.3</span>f&#125;</span>] <span class="subst">&#123;doc.page_content&#125;</span> [<span class="subst">&#123;doc.metadata&#125;</span>]&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* [余弦相似度得分=0.254] 狗是人类最早驯化的动物之一，属于犬科。它们具有高度社会性，能理解人类情绪，常被用作宠物、导盲犬或警犬。不同品种的狗在体型、毛色和性格上有很大差异。 [&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;哺乳动物&#x27;</span>, <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;动物&#x27;</span>&#125;]</span><br><span class="line">* [余弦相似度得分=0.253] 狗是人类最早驯化的动物之一，属于犬科。它们具有高度社会性，能理解人类情绪，常被用作宠物、导盲犬或警犬。不同品种的狗在体型、毛色和性格上有很大差异。 [&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;哺乳动物&#x27;</span>, <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;动物&#x27;</span>&#125;]</span><br><span class="line">* [余弦相似度得分=0.252] 狗是人类最早驯化的动物之一，属于犬科。它们具有高度社会性，能理解人类情绪，常被用作宠物、导盲犬或警犬。不同品种的狗在体型、毛色和性格上有很大差异。 [&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;动物&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;哺乳动物&#x27;</span>&#125;]</span><br><span class="line">* [余弦相似度得分=0.243] 人类是地球上最具智慧的生物，属于灵长目人科。现代人类（智人）拥有高度发达的大脑，创造了语言、工具和文明。人类的平均寿命约70-80年，分布在全球各地。 [&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;灵长类&#x27;</span>, <span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;生物&#x27;</span>&#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="⑥-MMR（最大边际相关性，max-marginal-relevance-search）"><a href="#⑥-MMR（最大边际相关性，max-marginal-relevance-search）" class="headerlink" title="⑥ MMR（最大边际相关性，max_marginal_relevance_search）"></a>⑥ MMR（最大边际相关性，max_marginal_relevance_search）</h4><p>MMR 是一种平衡<code>相关性</code> 和<code>多样性</code>的检索策略，避免返回高度相似的冗余结果。</p><p>参数说明： <strong>lambda_mult</strong> 参数值介于 0 到 1 之间，用于确定结果之间的多样性程度，其中 0 对应最大 多样性，1 对应最小多样性。默认值为 0.5。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docs = db.max_marginal_relevance_search(  </span><br><span class="line">    query=<span class="string">&quot;量子力学是什么&quot;</span>,  </span><br><span class="line">    lambda_mult=<span class="number">0.8</span>,  <span class="comment"># 侧重相似性  </span></span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;🔍 关于【量子力学是什么】的搜索结果：&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">50</span>)  </span><br><span class="line"><span class="keyword">for</span> i, doc <span class="keyword">in</span> <span class="built_in">enumerate</span>(docs):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n📖 结果 <span class="subst">&#123;i+<span class="number">1</span>&#125;</span>:&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;📌 内容: <span class="subst">&#123;doc.page_content&#125;</span>&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;🏷️ 标签: <span class="subst">&#123;<span class="string">&#x27;, &#x27;</span>.join(<span class="string">f&#x27;<span class="subst">&#123;k&#125;</span>=<span class="subst">&#123;v&#125;</span>&#x27;</span> <span class="keyword">for</span> k, v <span class="keyword">in</span> doc.metadata.items())&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">🔍 关于【量子力学是什么】的搜索结果：</span><br><span class="line">==================================================</span><br><span class="line"></span><br><span class="line">📖 结果 1:</span><br><span class="line">📌 内容: 狗是人类最早驯化的动物之一，属于犬科。它们具有高度社会性，能理解人类情绪，常被用作宠物、导盲犬或警犬。不同品种的狗在体型、毛色和性格上有很大差异。</span><br><span class="line">🏷️ 标签: <span class="built_in">type</span>=哺乳动物, <span class="built_in">source</span>=动物</span><br><span class="line"></span><br><span class="line">📖 结果 2:</span><br><span class="line">📌 内容: 狗是人类最早驯化的动物之一，属于犬科。它们具有高度社会性，能理解人类情绪，常被用作宠物、导盲犬或警犬。不同品种的狗在体型、毛色和性格上有很大差异。</span><br><span class="line">🏷️ 标签: <span class="built_in">source</span>=动物, <span class="built_in">type</span>=哺乳动物</span><br><span class="line"></span><br><span class="line">📖 结果 3:</span><br><span class="line">📌 内容: 狗是人类最早驯化的动物之一，属于犬科。它们具有高度社会性，能理解人类情绪，常被用作宠物、导盲犬或警犬。不同品种的狗在体型、毛色和性格上有很大差异。</span><br><span class="line">🏷️ 标签: <span class="built_in">type</span>=哺乳动物, <span class="built_in">source</span>=动物</span><br><span class="line"></span><br><span class="line">📖 结果 4:</span><br><span class="line">📌 内容: 人类是地球上最具智慧的生物，属于灵长目人科。现代人类（智人）拥有高度发达的大脑，创造了语言、工具和文明。人类的平均寿命约70-80年，分布在全球各地。</span><br><span class="line">🏷️ 标签: <span class="built_in">type</span>=灵长类, <span class="built_in">source</span>=生物</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="检索器-召回器-Retrievers"><a href="#检索器-召回器-Retrievers" class="headerlink" title="检索器(召回器) Retrievers"></a>检索器(召回器) Retrievers</h1><p>从“向量存储组件”的代码实现5.4.2中可以看到，向量数据库本身已经包含了实现召回功能的函数方法 (<strong>similarity_search</strong> )。该函数通过计算原始查询向量与数据库中存储向量之间的相似度来实现召回。 </p><p>LangChain还提供了 <strong>更加复杂的召回策略</strong>，这些策略被集成在Retrievers（检索器或召回器）组件中。 </p><p>Retrievers（检索器）是一种用于从大量文档中检索与给定查询相关的文档或信息片段的工具。检索器 <strong>不需要存储文档</strong>，只需要 <strong>返回（或检索）文档</strong>即可。<br><img src="/2025/09/28/LangChain%E4%BD%BF%E7%94%A8%E4%B9%8BRetrieval/file-20250928102015858.png"></p><p><strong>Retrievers 的执行步骤：</strong></p><ul><li>步骤1：将输入查询转换为向量表示。 </li><li>步骤2：在向量存储中搜索与查询向量最相似的文档向量（通常使用余弦相似度或欧几里得距离等度量方 法）。 </li><li>步骤3：返回与查询最相关的文档或文本片段，以及它们的相似度得分。</li></ul><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><p>Retriever 一般和 VectorStore 配套实现，通过as_retriever() 方法获取。<br>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入相关依赖  </span></span><br><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> TextLoader  </span><br><span class="line"><span class="keyword">from</span> langchain_community.vectorstores <span class="keyword">import</span> FAISS  </span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> OpenAIEmbeddings  </span><br><span class="line"><span class="keyword">from</span> langchain_text_splitters <span class="keyword">import</span> CharacterTextSplitter  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">import</span> dotenv  </span><br><span class="line">dotenv.load_dotenv()  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 2.定义文档加载器  </span></span><br><span class="line">loader = TextLoader(file_path=<span class="string">&#x27;./asset/load/09-ai1.txt&#x27;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 3.加载文档  </span></span><br><span class="line">documents = loader.load()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 4.定义文本切割器  </span></span><br><span class="line">text_splitter = CharacterTextSplitter(chunk_size=<span class="number">1000</span>, chunk_overlap=<span class="number">100</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 5.切割文档  </span></span><br><span class="line">docs = text_splitter.split_documents(documents)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 6.定义嵌入模型  </span></span><br><span class="line">os.environ[<span class="string">&#x27;OPENAI_API_KEY&#x27;</span>] = os.getenv(<span class="string">&quot;SILICONFLOW_API_KEY&quot;</span>)  </span><br><span class="line">os.environ[<span class="string">&#x27;OPENAI_BASE_URL&#x27;</span>] = os.getenv(<span class="string">&quot;BASE_URL&quot;</span>)  </span><br><span class="line">embeddings = OpenAIEmbeddings(  </span><br><span class="line">    model=<span class="string">&quot;Qwen/Qwen3-Embedding-0.6B&quot;</span>  </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取向量数据库  </span></span><br><span class="line">db = FAISS.from_documents(documents=docs,embedding=embeddings)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 基于向量数据库获取检索器  </span></span><br><span class="line">retriever = db.as_retriever()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 进行数据的检索  </span></span><br><span class="line">docs = retriever.invoke(<span class="built_in">input</span> = <span class="string">&quot;深度学习是什么？&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(docs))  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> docs:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;------<span class="subst">&#123;doc&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">------page_content=<span class="string">&#x27;5. 人工智能的挑战与机遇</span></span><br><span class="line"><span class="string">5.1 挑战</span></span><br><span class="line"><span class="string">人工智能发展过程中面临的主要挑战包括数据隐私、算法偏见、安全性问题等。数据隐私问题涉及到个人数据的收集和使用，算法偏见问题则涉及到算法的公平性和透明度，安全性问题则涉及到人工智能系统的可靠性和稳定性。</span></span><br><span class="line"><span class="string">5.2 机遇</span></span><br><span class="line"><span class="string">尽管面临挑战，人工智能的发展也带来了巨大的机遇。人工智能技术的进步将推动各行各业的创新，提高生产效率，改善生活质量。未来，人工智能有望在更多领域取得突破，为人类社会带来更多的便利和福祉。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">6. 未来展望</span></span><br><span class="line"><span class="string">6.1 技术突破</span></span><br><span class="line"><span class="string">未来，人工智能技术有望在以下几个方面取得突破：一是算法的优化和创新，提高模型的效率和准确性；二是计算能力的提升，支持更复杂的模型和更大规模的数据处理；三是跨学科研究的深入，推动人工智能与其他领域的融合。</span></span><br><span class="line"><span class="string">6.2 应用拓展</span></span><br><span class="line"><span class="string">随着技术的进步，人工智能的应用领域将进一步拓展。未来，人工智能有望在更多领域发挥重要作用，如环境保护、能源管理、智能制造等。人工智能将成为推动社会进步的重要力量。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">7. 结论</span></span><br><span class="line"><span class="string">人工智能作为一门快速发展的科学，正在改变着人类社会的运行方式。通过不断的技术创新和应用拓展，人工智能将为人类社会带来更多的便利和福祉。然而，人工智能的发展也面临着诸多挑战，需要社会各界共同努力，推动人工智能的健康发展。&#x27;</span> metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;./asset/load/09-ai1.txt&#x27;</span>&#125;</span><br><span class="line">------page_content=<span class="string">&#x27;3. 人工智能的核心技术</span></span><br><span class="line"><span class="string">3.1 机器学习</span></span><br><span class="line"><span class="string">机器学习是人工智能的核心技术之一，通过算法使计算机从数据中学习并做出决策。常见的机器学习算法包括监督学习、无监督学习和强化学习。监督学习通过标记数据进行训练，无监督学习则从未标记数据中寻找模式，强化学习则通过与环境交互来优化决策。</span></span><br><span class="line"><span class="string">3.2 深度学习</span></span><br><span class="line"><span class="string">深度学习是机器学习的一个子领域，通过多层神经网络进行特征提取和模式识别。深度学习在图像识别、自然语言处理、语音识别等领域取得了显著成果。常见的深度学习模型包括卷积神经网络（CNN）、循环神经网络（RNN）和长短期记忆网络（LSTM）。</span></span><br><span class="line"><span class="string">3.3 自然语言处理</span></span><br><span class="line"><span class="string">自然语言处理（NLP）是人工智能的一个重要分支，致力于使计算机能够理解和生成人类语言。NLP技术广泛应用于机器翻译、情感分析、文本分类等领域。近年来，基于深度学习的NLP模型（如BERT、GPT）在语言理解任务中取得了突破性进展。</span></span><br><span class="line"><span class="string">3.4 计算机视觉</span></span><br><span class="line"><span class="string">计算机视觉是人工智能的另一个重要分支，致力于使计算机能够理解和处理图像和视频。计算机视觉技术广泛应用于图像识别、目标检测、人脸识别等领域。深度学习模型（如CNN）在计算机视觉任务中取得了显著成果。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">8. 人工智能的应用领域</span></span><br><span class="line"><span class="string">4.1 医疗健康</span></span><br><span class="line"><span class="string">人工智能在医疗健康领域的应用包括疾病诊断、药物研发、个性化医疗等。通过分析医学影像和患者数据，人工智能可以帮助医生更准确地诊断疾病，提高治疗效果。</span></span><br><span class="line"><span class="string">4.2 金融</span></span><br><span class="line"><span class="string">人工智能在金融领域的应用包括风险评估、欺诈检测、算法交易等。通过分析市场数据和交易记录，人工智能可以帮助金融机构做出更明智的决策，提高运营效率。</span></span><br><span class="line"><span class="string">4.3 教育</span></span><br><span class="line"><span class="string">人工智能在教育领域的应用包括个性化学习、智能辅导、自动评分等。通过分析学生的学习数据，人工智能可以为学生提供个性化的学习建议，提高学习效果。</span></span><br><span class="line"><span class="string">4.4 交通</span></span><br><span class="line"><span class="string">人工智能在交通领域的应用包括自动驾驶、交通管理、智能导航等。通过分析交通数据和路况信息，人工智能可以帮助优化交通流量，提高交通安全。&#x27;</span> metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;./asset/load/09-ai1.txt&#x27;</span>&#125;</span><br><span class="line">------page_content=<span class="string">&#x27;人工智能综述：发展、应用与未来展望</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">摘要</span></span><br><span class="line"><span class="string">人工智能（Artificial Intelligence，AI）作为计算机科学的一个重要分支，近年来取得了突飞猛进的发展。本文综述了人工智能的发展历程、核心技术、应用领域以及未来发展趋势。通过对人工智能的定义、历史背景、主要技术（如机器学习、深度学习、自然语言处理等）的详细介绍，探讨了人工智能在医疗、金融、教育、交通等领域的应用，并分析了人工智能发展过程中面临的挑战与机遇。最后，本文对人工智能的未来发展进行了展望，提出了可能的突破方向。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. 引言</span></span><br><span class="line"><span class="string">人工智能是指通过计算机程序模拟人类智能的一门科学。自20世纪50年代诞生以来，人工智能经历了多次起伏，近年来随着计算能力的提升和大数据的普及，人工智能技术取得了显著的进展。人工智能的应用已经渗透到日常生活的方方面面，从智能手机的语音助手到自动驾驶汽车，从医疗诊断到金融分析，人工智能正在改变着人类社会的运行方式。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 人工智能的发展历程</span></span><br><span class="line"><span class="string">2.1 早期发展</span></span><br><span class="line"><span class="string">人工智能的概念最早可以追溯到20世纪50年代。1956年，达特茅斯会议（Dartmouth Conference）被认为是人工智能研究的正式开端。在随后的几十年里，人工智能研究经历了多次高潮与低谷。早期的研究主要集中在符号逻辑和专家系统上，但由于计算能力的限制和算法的不足，进展缓慢。</span></span><br><span class="line"><span class="string">2.2 机器学习的兴起</span></span><br><span class="line"><span class="string">20世纪90年代，随着统计学习方法的引入，机器学习逐渐成为人工智能研究的主流。支持向量机（SVM）、决策树、随机森林等算法在分类和回归任务中取得了良好的效果。这一时期，机器学习开始应用于数据挖掘、模式识别等领域。</span></span><br><span class="line"><span class="string">2.3 深度学习的突破</span></span><br><span class="line"><span class="string">2012年，深度学习在图像识别领域取得了突破性进展，标志着人工智能进入了一个新的阶段。深度学习通过多层神经网络模拟人脑的工作方式，能够自动提取特征并进行复杂的模式识别。卷积神经网络（CNN）、循环神经网络（RNN）和长短期记忆网络（LSTM）等深度学习模型在图像处理、自然语言处理、语音识别等领域取得了显著成果。&#x27;</span> metadata=&#123;<span class="string">&#x27;source&#x27;</span>: <span class="string">&#x27;./asset/load/09-ai1.txt&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="使用相关检索策"><a href="#使用相关检索策" class="headerlink" title="使用相关检索策"></a>使用相关检索策</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install faiss-cpu</span><br></pre></td></tr></table></figure><p>前置代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.导入相关依赖  </span></span><br><span class="line"><span class="keyword">from</span> langchain_community.vectorstores <span class="keyword">import</span> FAISS  </span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> OpenAIEmbeddings  </span><br><span class="line"><span class="keyword">from</span> langchain_core.documents <span class="keyword">import</span> Document  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 2.定义文档  </span></span><br><span class="line">document_1 = Document(  </span><br><span class="line">    page_content=<span class="string">&quot;经济复苏：美国经济正在从疫情中强劲复苏，失业率降至历史低点。！&quot;</span>,  </span><br><span class="line">)  </span><br><span class="line">document_2 = Document(  </span><br><span class="line">    page_content=<span class="string">&quot;基础设施：政府将投资1万亿美元用于修复道路、桥梁和宽带网络。&quot;</span>,  </span><br><span class="line">)  </span><br><span class="line">document_3 = Document(  </span><br><span class="line">    page_content=<span class="string">&quot;气候变化：承诺到2030年将温室气体排放量减少50%。&quot;</span>,  </span><br><span class="line">)  </span><br><span class="line">document_4 = Document(  </span><br><span class="line">    page_content=<span class="string">&quot; 医疗保健：降低处方药价格，扩大医疗保险覆盖范围。&quot;</span>,  </span><br><span class="line">)  </span><br><span class="line">document_5 = Document(  </span><br><span class="line">    page_content=<span class="string">&quot;教育：提供免费的社区大学教育。。&quot;</span>,  </span><br><span class="line">)  </span><br><span class="line">document_6 = Document(  </span><br><span class="line">    page_content=<span class="string">&quot;科技：增加对半导体产业的投资以减少对外国供应链的依赖。。&quot;</span>,  </span><br><span class="line">)  </span><br><span class="line">document_7 = Document(  </span><br><span class="line">    page_content=<span class="string">&quot;外交政策：继续支持乌克兰对抗俄罗斯的侵略。&quot;</span>,  </span><br><span class="line">)  </span><br><span class="line">document_8 = Document(  </span><br><span class="line">    page_content=<span class="string">&quot;枪支管制：呼吁国会通过更严格的枪支管制法律。&quot;</span>,  </span><br><span class="line">)  </span><br><span class="line">document_9 = Document(  </span><br><span class="line">    page_content=<span class="string">&quot;移民改革：提出全面的移民改革方案。&quot;</span>,  </span><br><span class="line">)  </span><br><span class="line">document_10 = Document(  </span><br><span class="line">    page_content=<span class="string">&quot;社会正义：承诺解决系统性种族歧视问题。&quot;</span>,  </span><br><span class="line">)  </span><br><span class="line">documents = [  </span><br><span class="line">    document_1,  </span><br><span class="line">    document_2,  </span><br><span class="line">    document_3,  </span><br><span class="line">    document_4,  </span><br><span class="line">    document_5,  </span><br><span class="line">    document_6,  </span><br><span class="line">    document_7,  </span><br><span class="line">    document_8,  </span><br><span class="line">    document_9,  </span><br><span class="line">    document_10,  </span><br><span class="line">]  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 3.创建向量存储  </span></span><br><span class="line">embeddings = OpenAIEmbeddings(  </span><br><span class="line">    model=<span class="string">&quot;Qwen/Qwen3-Embedding-0.6B&quot;</span>  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 4.将文档向量化，添加到向量数据库索引中，得到向量数据库对象  </span></span><br><span class="line">db = FAISS.from_documents(documents, embeddings)</span><br></pre></td></tr></table></figure><h3 id="①-默认检索器使用相似性搜索"><a href="#①-默认检索器使用相似性搜索" class="headerlink" title="① 默认检索器使用相似性搜索"></a>① 默认检索器使用相似性搜索</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取检索器  </span></span><br><span class="line">retriever = db.as_retriever(search_kwargs=&#123;<span class="string">&quot;k&quot;</span>: <span class="number">3</span>&#125;) <span class="comment">#这里设置返回的文档数  </span></span><br><span class="line">  </span><br><span class="line">docs = retriever.invoke(<span class="string">&quot;经济政策&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i, doc <span class="keyword">in</span> <span class="built_in">enumerate</span>(docs):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n结果 <span class="subst">&#123;i+<span class="number">1</span>&#125;</span>:\n<span class="subst">&#123;doc.page_content&#125;</span>\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">结果 1:</span><br><span class="line">社会正义：承诺解决系统性种族歧视问题。</span><br><span class="line"></span><br><span class="line">结果 2:</span><br><span class="line">外交政策：继续支持乌克兰对抗俄罗斯的侵略。</span><br><span class="line"></span><br><span class="line">结果 3:</span><br><span class="line">教育：提供免费的社区大学教育。。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="②-分数阈值查询"><a href="#②-分数阈值查询" class="headerlink" title="② 分数阈值查询"></a>② 分数阈值查询</h3><p>只有相似度超过这个值才会召回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">retriever = db.as_retriever(  </span><br><span class="line">    search_type=<span class="string">&quot;similarity_score_threshold&quot;</span>,  </span><br><span class="line">    search_kwargs=&#123;<span class="string">&quot;score_threshold&quot;</span>: <span class="number">0.1</span>&#125;  </span><br><span class="line">)  </span><br><span class="line">docs = retriever.invoke(<span class="string">&quot;经济政策&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> doc <span class="keyword">in</span> docs:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;📌 内容: <span class="subst">&#123;doc.page_content&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">📌 内容: 社会正义：承诺解决系统性种族歧视问题。</span><br><span class="line">📌 内容: 外交政策：继续支持乌克兰对抗俄罗斯的侵略。</span><br><span class="line">📌 内容: 教育：提供免费的社区大学教育。。</span><br><span class="line">📌 内容: 科技：增加对半导体产业的投资以减少对外国供应链的依赖。。</span><br></pre></td></tr></table></figure><p>注意只会返回满足阈值分数的文档，不会获取文档的得分。如果想查询文档的得分是否满足阈值，可以 使用向量数据库的 <strong>similarity_search_with_relevance_scores</strong> 查看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docs_with_scores = db.similarity_search_with_relevance_scores(<span class="string">&quot;经济政策&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> doc, score <span class="keyword">in</span> docs_with_scores:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n相似度分数: <span class="subst">&#123;score:<span class="number">.4</span>f&#125;</span>&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;📌 内容: <span class="subst">&#123;doc.page_content&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">相似度分数: 0.2922</span><br><span class="line">📌 内容: 社会正义：承诺解决系统性种族歧视问题。</span><br><span class="line"></span><br><span class="line">相似度分数: 0.2544</span><br><span class="line">📌 内容: 外交政策：继续支持乌克兰对抗俄罗斯的侵略。</span><br><span class="line"></span><br><span class="line">相似度分数: 0.2302</span><br><span class="line">📌 内容: 教育：提供免费的社区大学教育。。</span><br><span class="line"></span><br><span class="line">相似度分数: 0.2160</span><br><span class="line">📌 内容: 科技：增加对半导体产业的投资以减少对外国供应链的依赖。。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="③-MMR搜索"><a href="#③-MMR搜索" class="headerlink" title="③ MMR搜索"></a>③ MMR搜索</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">retriever = db.as_retriever(  </span><br><span class="line">    search_type=<span class="string">&quot;mmr&quot;</span>,  </span><br><span class="line">    search_kwargs=&#123;<span class="string">&quot;fetch_k&quot;</span>:<span class="number">2</span>&#125;  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line">docs = retriever.invoke(<span class="string">&quot;经济政策&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(docs))  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>  doc  <span class="keyword">in</span>  docs:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;📌 内容: <span class="subst">&#123;doc.page_content&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">📌 内容: 社会正义：承诺解决系统性种族歧视问题。</span><br><span class="line">📌 内容: 外交政策：继续支持乌克兰对抗俄罗斯的侵略。</span><br></pre></td></tr></table></figure><h2 id="结合大模型的使用"><a href="#结合大模型的使用" class="headerlink" title="结合大模型的使用"></a>结合大模型的使用</h2><p>举例1：通过FAISS构建一个可搜索的向量索引数据库，并结合RAG技术让LLM去回答问题。</p><h3 id="情况1：不用RAG给LLM灌输上下文数据"><a href="#情况1：不用RAG给LLM灌输上下文数据" class="headerlink" title="情况1：不用RAG给LLM灌输上下文数据"></a>情况1：不用RAG给LLM灌输上下文数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">import</span> dotenv  </span><br><span class="line">dotenv.load_dotenv()  </span><br><span class="line">  </span><br><span class="line">os.environ[<span class="string">&#x27;OPENAI_API_KEY&#x27;</span>] = os.getenv(<span class="string">&quot;SILICONFLOW_API_KEY&quot;</span>)  </span><br><span class="line">os.environ[<span class="string">&#x27;OPENAI_BASE_URL&#x27;</span>] = os.getenv(<span class="string">&quot;BASE_URL&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 创建大模型实例  </span></span><br><span class="line">llm = ChatOpenAI(model=<span class="string">&quot;deepseek-ai/DeepSeek-V3&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 调用  </span></span><br><span class="line">response = llm.invoke(<span class="string">&quot;北京有什么著名的建筑？&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">北京作为中国的首都，拥有丰富的历史和现代建筑，以下是一些著名的代表：</span><br><span class="line"></span><br><span class="line"><span class="comment">### **历史建筑**</span></span><br><span class="line">1. **故宫（紫禁城）**  </span><br><span class="line">   - 明清两代的皇家宫殿，世界文化遗产，中国现存最大、最完整的古建筑群。</span><br><span class="line"></span><br><span class="line">2. **天坛**  </span><br><span class="line">   - 明清皇帝祭天的场所，以祈年殿和圜丘坛闻名，世界文化遗产。</span><br><span class="line"></span><br><span class="line">3. **颐和园**  </span><br><span class="line">   - 清代皇家园林，以昆明湖、万寿山和长廊著称，世界文化遗产。</span><br><span class="line"></span><br><span class="line">4. **长城（八达岭、慕田峪段）**  </span><br><span class="line">   - 世界七大奇迹之一，北京周边保存完好的段落包括八达岭和慕田峪。</span><br><span class="line"></span><br><span class="line">5. **圆明园**  </span><br><span class="line">   - 曾为“万园之园”，现存遗址公园，见证近代历史。</span><br><span class="line"></span><br><span class="line">6. **雍和宫**  </span><br><span class="line">   - 北京最大的藏传佛教寺院，曾是雍正皇帝的府邸。</span><br><span class="line"></span><br><span class="line">7. **钟鼓楼**  </span><br><span class="line">   - 古代报时中心，位于中轴线北端，保留元代格局。</span><br><span class="line"></span><br><span class="line"><span class="comment">### **近现代建筑**</span></span><br><span class="line">1. **天安门广场及周边**  </span><br><span class="line">   - **人民大会堂**：国家政治活动中心。  </span><br><span class="line">   - **国家博物馆**：中国最大的综合性博物馆。  </span><br><span class="line">   - **人民英雄纪念碑**：纪念近代革命烈士的标志。  </span><br><span class="line">   - **毛主席纪念堂**：安放毛泽东遗体的纪念建筑。</span><br><span class="line"></span><br><span class="line">2. **奥林匹克公园**  </span><br><span class="line">   - **鸟巢（国家体育场）**：2008年奥运会主体育场，现代钢结构代表作。  </span><br><span class="line">   - **水立方（国家游泳中心）**：独特的膜结构设计，现为“冰立方”。</span><br><span class="line"></span><br><span class="line">3. **中央电视台总部大楼（“大裤衩”）**  </span><br><span class="line">   - 由荷兰建筑师雷姆·库哈斯设计，后现代地标建筑。</span><br><span class="line"></span><br><span class="line">4. **国家大剧院**  </span><br><span class="line">   - 法国建筑师保罗·安德鲁设计，钛金属穹顶宛如“水上明珠”。</span><br><span class="line"></span><br><span class="line">5. **北京大兴国际机场**  </span><br><span class="line">   - 扎哈·哈迪德设计，全球最大单体航站楼，以“凤凰展翅”为造型。</span><br><span class="line"></span><br><span class="line">6. **中信大厦（中国尊）**  </span><br><span class="line">   - 北京最高建筑（528米），CBD核心区的现代摩天大楼。</span><br><span class="line"></span><br><span class="line"><span class="comment">### **特色建筑**</span></span><br><span class="line">- **胡同与四合院**：如南锣鼓巷、什刹海周边，展现老北京民居风貌。  </span><br><span class="line">- **北京坊**：前门附近的现代文化街区，融合中西建筑风格。  </span><br><span class="line">- **琉璃厂文化街**：传统书画古玩街区，仿古建筑风格。</span><br><span class="line"></span><br><span class="line">这些建筑不仅代表了北京的历史底蕴，也展现了其作为国际大都市的现代活力。如果有具体兴趣方向，可以深入推荐！</span><br></pre></td></tr></table></figure><h3 id="情况2：使用RAG给LLM灌输上下文数据"><a href="#情况2：使用RAG给LLM灌输上下文数据" class="headerlink" title="情况2：使用RAG给LLM灌输上下文数据"></a>情况2：使用RAG给LLM灌输上下文数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 导入所有需要的包  </span></span><br><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> PromptTemplate  </span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI,OpenAIEmbeddings  </span><br><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> TextLoader  </span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> CharacterTextSplitter  </span><br><span class="line"><span class="keyword">from</span> langchain_community.vectorstores <span class="keyword">import</span> FAISS  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">import</span> dotenv  </span><br><span class="line">  </span><br><span class="line">dotenv.load_dotenv()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 2. 创建自定义提示词模板  </span></span><br><span class="line">prompt_template = <span class="string">&quot;&quot;&quot;请使用以下提供的文本内容来回答问题。仅使用提供的文本信息，如果文本中没有相关信息，请回答&quot;抱歉，提供的文本中没有这个信息&quot;。  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">文本内容：  </span></span><br><span class="line"><span class="string">&#123;context&#125;  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">问题：&#123;question&#125;  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">回答：  </span></span><br><span class="line"><span class="string">&quot;  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>  </span><br><span class="line">  </span><br><span class="line">prompt = PromptTemplate.from_template(prompt_template)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 3. 初始化模型  </span></span><br><span class="line">os.environ[<span class="string">&#x27;OPENAI_API_KEY&#x27;</span>] = os.getenv(<span class="string">&quot;SILICONFLOW_API_KEY&quot;</span>)  </span><br><span class="line">os.environ[<span class="string">&#x27;OPENAI_BASE_URL&#x27;</span>] = os.getenv(<span class="string">&quot;BASE_URL&quot;</span>)  </span><br><span class="line">llm = ChatOpenAI(  </span><br><span class="line">    model=<span class="string">&quot;deepseek-ai/DeepSeek-V3&quot;</span>,  </span><br><span class="line">    temperature=<span class="number">0</span>  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line">embedding_model = OpenAIEmbeddings(model=<span class="string">&quot;Qwen/Qwen3-Embedding-0.6B&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 4. 加载文档  </span></span><br><span class="line">loader = TextLoader(<span class="string">&quot;./asset/load/10-test_doc.txt&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)  </span><br><span class="line">documents = loader.load()  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 5. 分割文档  </span></span><br><span class="line">text_splitter = CharacterTextSplitter(  </span><br><span class="line">    chunk_size=<span class="number">1000</span>,  </span><br><span class="line">    chunk_overlap=<span class="number">100</span>,  </span><br><span class="line">)  </span><br><span class="line">texts = text_splitter.split_documents(documents)  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#print(f&quot;文档个数:&#123;len(texts)&#125;&quot;)  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 6. 创建向量存储  </span></span><br><span class="line">vectorstore = FAISS.from_documents(  </span><br><span class="line">    documents=texts,  </span><br><span class="line">    embedding=embedding_model  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 7.获取检索器  </span></span><br><span class="line">retriever = vectorstore.as_retriever()  </span><br><span class="line">  </span><br><span class="line">docs = retriever.invoke(<span class="string">&quot;北京有什么著名的建筑？&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 8. 创建Runnable链  </span></span><br><span class="line">chain = prompt | llm  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 9. 提问  </span></span><br><span class="line">result = chain.invoke(<span class="built_in">input</span>=&#123;<span class="string">&quot;question&quot;</span>:<span class="string">&quot;北京有什么著名的建筑？&quot;</span>,<span class="string">&quot;context&quot;</span>:docs&#125;)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n回答:&quot;</span>, result.content)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">回答: 根据提供的文本内容，北京有以下著名建筑：</span><br><span class="line"></span><br><span class="line">1. 故宫（紫禁城） - 明清皇家宫殿，世界文化遗产  </span><br><span class="line">2. 天安门 - 标志性建筑，拥有世界最大城市广场  </span><br><span class="line">3. 颐和园 - 清代皇家园林，世界文化遗产  </span><br><span class="line">4. 天坛 - 明清祭天场所，世界文化遗产  </span><br><span class="line">5. 八达岭长城 - 最著名的长城段落  </span><br><span class="line">6. 国家体育场（鸟巢） - 2008奥运主体育场  </span><br><span class="line">7. 中央电视台总部大楼（<span class="string">&quot;大裤衩&quot;</span>）  </span><br><span class="line">8. 国家大剧院（<span class="string">&quot;巨蛋&quot;</span>）  </span><br><span class="line">9. 北京大兴国际机场 - <span class="string">&quot;新世界七大奇迹&quot;</span>之一  </span><br><span class="line">10. 鼓楼和钟楼 - 古代报时中心</span><br></pre></td></tr></table></figure><h3 id="举例2：使用Chroma数据库-（与举例1类似）"><a href="#举例2：使用Chroma数据库-（与举例1类似）" class="headerlink" title="举例2：使用Chroma数据库 （与举例1类似）"></a>举例2：使用Chroma数据库 （与举例1类似）</h3><h4 id="阶段1：文档的切分"><a href="#阶段1：文档的切分" class="headerlink" title="阶段1：文档的切分"></a>阶段1：文档的切分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1. 文档加载  </span></span><br><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> UnstructuredMarkdownLoader  </span><br><span class="line"><span class="keyword">from</span> langchain.text_splitter <span class="keyword">import</span> MarkdownTextSplitter  </span><br><span class="line">markdown_path = <span class="string">&quot;asset/load/11-langchain.md&quot;</span>  </span><br><span class="line"> <span class="comment"># 2.定义UnstructuredMarkdownLoader对象  </span></span><br><span class="line">loader = UnstructuredMarkdownLoader(markdown_path)  </span><br><span class="line">   </span><br><span class="line"><span class="comment"># 3.加载  </span></span><br><span class="line">data = loader.load()  </span><br><span class="line">splitter = MarkdownTextSplitter(chunk_size=<span class="number">1000</span>, chunk_overlap=<span class="number">100</span>)  </span><br><span class="line"><span class="comment"># 4.执行分割  </span></span><br><span class="line">  </span><br><span class="line">documents = splitter.split_documents(data)  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(documents))  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i, doc <span class="keyword">in</span> <span class="built_in">enumerate</span>(documents):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n🔍 分块 <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>:&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(doc.page_content)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br></pre></td><td class="code"><pre><span class="line">13</span><br><span class="line"></span><br><span class="line">🔍 分块 1:</span><br><span class="line">How-to guides</span><br><span class="line"></span><br><span class="line">Here you’ll find answers to “How do I….?” types of questions. These guides are goal-oriented and concrete; they&#x27;re meant to help you complete a specific task. For conceptual explanations see the Conceptual guide. For end-to-end walkthroughs see Tutorials. For comprehensive descriptions of every class and function see the API Reference.</span><br><span class="line"></span><br><span class="line">Installation</span><br><span class="line"></span><br><span class="line">How to: install LangChain packages</span><br><span class="line"></span><br><span class="line">How to: use LangChain with different Pydantic versions</span><br><span class="line"></span><br><span class="line">Key features</span><br><span class="line"></span><br><span class="line">This highlights functionality that is core to using LangChain.</span><br><span class="line"></span><br><span class="line">How to: return structured data from a model</span><br><span class="line"></span><br><span class="line">How to: use a model to call tools</span><br><span class="line"></span><br><span class="line">How to: stream runnables</span><br><span class="line"></span><br><span class="line">How to: debug your LLM apps</span><br><span class="line"></span><br><span class="line">Components</span><br><span class="line"></span><br><span class="line">These are the core building blocks you can use when building applications.</span><br><span class="line"></span><br><span class="line">Chat models</span><br><span class="line"></span><br><span class="line">Chat Models are newer forms of language models that take messages in and output a message. See supported integrations for details on getting started with chat models from a specific provider.</span><br><span class="line"></span><br><span class="line">How to: do function/tool calling</span><br><span class="line"></span><br><span class="line">🔍 分块 2:</span><br><span class="line">How to: do function/tool calling</span><br><span class="line"></span><br><span class="line">How to: get models to return structured output</span><br><span class="line"></span><br><span class="line">How to: cache model responses</span><br><span class="line"></span><br><span class="line">How to: get log probabilities</span><br><span class="line"></span><br><span class="line">How to: create a custom chat model class</span><br><span class="line"></span><br><span class="line">How to: stream a response back</span><br><span class="line"></span><br><span class="line">How to: track token usage</span><br><span class="line"></span><br><span class="line">How to: track response metadata across providers</span><br><span class="line"></span><br><span class="line">How to: use chat model to call tools</span><br><span class="line"></span><br><span class="line">How to: stream tool calls</span><br><span class="line"></span><br><span class="line">How to: handle rate limits</span><br><span class="line"></span><br><span class="line">How to: few shot prompt tool behavior</span><br><span class="line"></span><br><span class="line">How to: bind model-specific formatted tools</span><br><span class="line"></span><br><span class="line">How to: force a specific tool call</span><br><span class="line"></span><br><span class="line">How to: work with local models</span><br><span class="line"></span><br><span class="line">How to: init any model in one line</span><br><span class="line"></span><br><span class="line">How to: pass multimodal data directly to models</span><br><span class="line"></span><br><span class="line">Messages</span><br><span class="line"></span><br><span class="line">Messages are the input and output of chat models. They have some content and a role, which describes the source of the message.</span><br><span class="line"></span><br><span class="line">How to: trim messages</span><br><span class="line"></span><br><span class="line">How to: filter messages</span><br><span class="line"></span><br><span class="line">How to: merge consecutive messages of the same type</span><br><span class="line"></span><br><span class="line">Prompt templates</span><br><span class="line"></span><br><span class="line">Prompt Templates are responsible for formatting user input into a format that can be passed to a language model.</span><br><span class="line"></span><br><span class="line">🔍 分块 3:</span><br><span class="line">How to: use few shot examples</span><br><span class="line"></span><br><span class="line">How to: use few shot examples in chat models</span><br><span class="line"></span><br><span class="line">How to: partially format prompt templates</span><br><span class="line"></span><br><span class="line">How to: compose prompts together</span><br><span class="line"></span><br><span class="line">How to: use multimodal prompts</span><br><span class="line"></span><br><span class="line">Example selectors</span><br><span class="line"></span><br><span class="line">Example Selectors are responsible for selecting the correct few shot examples to pass to the prompt.</span><br><span class="line"></span><br><span class="line">How to: use example selectors</span><br><span class="line"></span><br><span class="line">How to: select examples by length</span><br><span class="line"></span><br><span class="line">How to: select examples by semantic similarity</span><br><span class="line"></span><br><span class="line">How to: select examples by semantic ngram overlap</span><br><span class="line"></span><br><span class="line">How to: select examples by maximal marginal relevance</span><br><span class="line"></span><br><span class="line">How to: select examples from LangSmith few-shot datasets</span><br><span class="line"></span><br><span class="line">LLMs</span><br><span class="line"></span><br><span class="line">What LangChain calls LLMs are older forms of language models that take a string in and output a string.</span><br><span class="line"></span><br><span class="line">How to: cache model responses</span><br><span class="line"></span><br><span class="line">How to: create a custom LLM class</span><br><span class="line"></span><br><span class="line">How to: stream a response back</span><br><span class="line"></span><br><span class="line">How to: track token usage</span><br><span class="line"></span><br><span class="line">How to: work with local models</span><br><span class="line"></span><br><span class="line">Output parsers</span><br><span class="line"></span><br><span class="line">Output Parsers are responsible for taking the output of an LLM and parsing into more structured format.</span><br><span class="line"></span><br><span class="line">🔍 分块 4:</span><br><span class="line">How to: parse text from message objects</span><br><span class="line"></span><br><span class="line">How to: use output parsers to parse an LLM response into structured format</span><br><span class="line"></span><br><span class="line">How to: parse JSON output</span><br><span class="line"></span><br><span class="line">How to: parse XML output</span><br><span class="line"></span><br><span class="line">How to: parse YAML output</span><br><span class="line"></span><br><span class="line">How to: retry when output parsing errors occur</span><br><span class="line"></span><br><span class="line">How to: try to fix errors in output parsing</span><br><span class="line"></span><br><span class="line">How to: write a custom output parser class</span><br><span class="line"></span><br><span class="line">Document loaders</span><br><span class="line"></span><br><span class="line">Document Loaders are responsible for loading documents from a variety of sources.</span><br><span class="line"></span><br><span class="line">How to: load PDF files</span><br><span class="line"></span><br><span class="line">How to: load web pages</span><br><span class="line"></span><br><span class="line">How to: load CSV data</span><br><span class="line"></span><br><span class="line">How to: load data from a directory</span><br><span class="line"></span><br><span class="line">How to: load HTML data</span><br><span class="line"></span><br><span class="line">How to: load JSON data</span><br><span class="line"></span><br><span class="line">How to: load Markdown data</span><br><span class="line"></span><br><span class="line">How to: load Microsoft Office data</span><br><span class="line"></span><br><span class="line">How to: write a custom document loader</span><br><span class="line"></span><br><span class="line">Text splitters</span><br><span class="line"></span><br><span class="line">Text Splitters take a document and split into chunks that can be used for retrieval.</span><br><span class="line"></span><br><span class="line">How to: recursively split text</span><br><span class="line"></span><br><span class="line">How to: split HTML</span><br><span class="line"></span><br><span class="line">How to: split by character</span><br><span class="line"></span><br><span class="line">How to: split code</span><br><span class="line"></span><br><span class="line">How to: split Markdown by headers</span><br><span class="line"></span><br><span class="line">How to: recursively split JSON</span><br><span class="line"></span><br><span class="line">🔍 分块 5:</span><br><span class="line">How to: split code</span><br><span class="line"></span><br><span class="line">How to: split Markdown by headers</span><br><span class="line"></span><br><span class="line">How to: recursively split JSON</span><br><span class="line"></span><br><span class="line">How to: split text into semantic chunks</span><br><span class="line"></span><br><span class="line">How to: split by tokens</span><br><span class="line"></span><br><span class="line">Embedding models</span><br><span class="line"></span><br><span class="line">Embedding Models take a piece of text and create a numerical representation of it. See supported integrations for details on getting started with embedding models from a specific provider.</span><br><span class="line"></span><br><span class="line">How to: embed text data</span><br><span class="line"></span><br><span class="line">How to: cache embedding results</span><br><span class="line"></span><br><span class="line">How to: create a custom embeddings class</span><br><span class="line"></span><br><span class="line">Vector stores</span><br><span class="line"></span><br><span class="line">Vector stores are databases that can efficiently store and retrieve embeddings. See supported integrations for details on getting started with vector stores from a specific provider.</span><br><span class="line"></span><br><span class="line">How to: use a vector store to retrieve data</span><br><span class="line"></span><br><span class="line">Retrievers</span><br><span class="line"></span><br><span class="line">Retrievers are responsible for taking a query and returning relevant documents.</span><br><span class="line"></span><br><span class="line">How to: use a vector store to retrieve data</span><br><span class="line"></span><br><span class="line">How to: generate multiple queries to retrieve data for</span><br><span class="line"></span><br><span class="line">How to: use contextual compression to compress the data retrieved</span><br><span class="line"></span><br><span class="line">🔍 分块 6:</span><br><span class="line">How to: use contextual compression to compress the data retrieved</span><br><span class="line"></span><br><span class="line">How to: write a custom retriever class</span><br><span class="line"></span><br><span class="line">How to: add similarity scores to retriever results</span><br><span class="line"></span><br><span class="line">How to: combine the results from multiple retrievers</span><br><span class="line"></span><br><span class="line">How to: reorder retrieved results to mitigate the &quot;lost in the middle&quot; effect</span><br><span class="line"></span><br><span class="line">How to: generate multiple embeddings per document</span><br><span class="line"></span><br><span class="line">How to: retrieve the whole document for a chunk</span><br><span class="line"></span><br><span class="line">How to: generate metadata filters</span><br><span class="line"></span><br><span class="line">How to: create a time-weighted retriever</span><br><span class="line"></span><br><span class="line">How to: use hybrid vector and keyword retrieval</span><br><span class="line"></span><br><span class="line">Indexing</span><br><span class="line"></span><br><span class="line">Indexing is the process of keeping your vectorstore in-sync with the underlying data source.</span><br><span class="line"></span><br><span class="line">How to: reindex data to keep your vectorstore in-sync with the underlying data source</span><br><span class="line"></span><br><span class="line">Tools</span><br><span class="line"></span><br><span class="line">LangChain Tools contain a description of the tool (to pass to the language model) as well as the implementation of the function to call. Refer here for a list of pre-built tools.</span><br><span class="line"></span><br><span class="line">How to: create tools</span><br><span class="line"></span><br><span class="line">How to: use built-in tools and toolkits</span><br><span class="line"></span><br><span class="line">How to: use chat models to call tools</span><br><span class="line"></span><br><span class="line">🔍 分块 7:</span><br><span class="line">How to: use built-in tools and toolkits</span><br><span class="line"></span><br><span class="line">How to: use chat models to call tools</span><br><span class="line"></span><br><span class="line">How to: pass tool outputs to chat models</span><br><span class="line"></span><br><span class="line">How to: pass run time values to tools</span><br><span class="line"></span><br><span class="line">How to: add a human-in-the-loop for tools</span><br><span class="line"></span><br><span class="line">How to: handle tool errors</span><br><span class="line"></span><br><span class="line">How to: force models to call a tool</span><br><span class="line"></span><br><span class="line">How to: disable parallel tool calling</span><br><span class="line"></span><br><span class="line">How to: access the RunnableConfig from a tool</span><br><span class="line"></span><br><span class="line">How to: stream events from a tool</span><br><span class="line"></span><br><span class="line">How to: return artifacts from a tool</span><br><span class="line"></span><br><span class="line">How to: convert Runnables to tools</span><br><span class="line"></span><br><span class="line">How to: add ad-hoc tool calling capability to models</span><br><span class="line"></span><br><span class="line">How to: pass in runtime secrets</span><br><span class="line"></span><br><span class="line">Multimodal</span><br><span class="line"></span><br><span class="line">How to: pass multimodal data directly to models</span><br><span class="line"></span><br><span class="line">How to: use multimodal prompts</span><br><span class="line"></span><br><span class="line">Agents</span><br><span class="line"></span><br><span class="line">note</span><br><span class="line"></span><br><span class="line">For in depth how-to guides for agents, please check out LangGraph documentation.</span><br><span class="line"></span><br><span class="line">How to: use legacy LangChain Agents (AgentExecutor)</span><br><span class="line"></span><br><span class="line">How to: migrate from legacy LangChain agents to LangGraph</span><br><span class="line"></span><br><span class="line">Callbacks</span><br><span class="line"></span><br><span class="line">Callbacks allow you to hook into the various stages of your LLM application&#x27;s execution.</span><br><span class="line"></span><br><span class="line">How to: pass in callbacks at runtime</span><br><span class="line"></span><br><span class="line">🔍 分块 8:</span><br><span class="line">How to: pass in callbacks at runtime</span><br><span class="line"></span><br><span class="line">How to: attach callbacks to a module</span><br><span class="line"></span><br><span class="line">How to: pass callbacks into a module constructor</span><br><span class="line"></span><br><span class="line">How to: create custom callback handlers</span><br><span class="line"></span><br><span class="line">How to: use callbacks in async environments</span><br><span class="line"></span><br><span class="line">How to: dispatch custom callback events</span><br><span class="line"></span><br><span class="line">Custom</span><br><span class="line"></span><br><span class="line">All of LangChain components can easily be extended to support your own versions.</span><br><span class="line"></span><br><span class="line">How to: create a custom chat model class</span><br><span class="line"></span><br><span class="line">How to: create a custom LLM class</span><br><span class="line"></span><br><span class="line">How to: create a custom embeddings class</span><br><span class="line"></span><br><span class="line">How to: write a custom retriever class</span><br><span class="line"></span><br><span class="line">How to: write a custom document loader</span><br><span class="line"></span><br><span class="line">How to: write a custom output parser class</span><br><span class="line"></span><br><span class="line">How to: create custom callback handlers</span><br><span class="line"></span><br><span class="line">How to: define a custom tool</span><br><span class="line"></span><br><span class="line">How to: dispatch custom callback events</span><br><span class="line"></span><br><span class="line">Serialization</span><br><span class="line"></span><br><span class="line">How to: save and load LangChain objects</span><br><span class="line"></span><br><span class="line">Use cases</span><br><span class="line"></span><br><span class="line">These guides cover use-case specific details.</span><br><span class="line"></span><br><span class="line">Q&amp;A with RAG</span><br><span class="line"></span><br><span class="line">Retrieval Augmented Generation (RAG) is a way to connect LLMs to external sources of data. For a high-level tutorial on RAG, check out this guide.</span><br><span class="line"></span><br><span class="line">How to: add chat history</span><br><span class="line"></span><br><span class="line">🔍 分块 9:</span><br><span class="line">How to: add chat history</span><br><span class="line"></span><br><span class="line">How to: stream</span><br><span class="line"></span><br><span class="line">How to: return sources</span><br><span class="line"></span><br><span class="line">How to: return citations</span><br><span class="line"></span><br><span class="line">How to: do per-user retrieval</span><br><span class="line"></span><br><span class="line">Extraction</span><br><span class="line"></span><br><span class="line">Extraction is when you use LLMs to extract structured information from unstructured text. For a high level tutorial on extraction, check out this guide.</span><br><span class="line"></span><br><span class="line">How to: use reference examples</span><br><span class="line"></span><br><span class="line">How to: handle long text</span><br><span class="line"></span><br><span class="line">How to: do extraction without using function calling</span><br><span class="line"></span><br><span class="line">Chatbots</span><br><span class="line"></span><br><span class="line">Chatbots involve using an LLM to have a conversation. For a high-level tutorial on building chatbots, check out this guide.</span><br><span class="line"></span><br><span class="line">How to: manage memory</span><br><span class="line"></span><br><span class="line">How to: do retrieval</span><br><span class="line"></span><br><span class="line">How to: use tools</span><br><span class="line"></span><br><span class="line">How to: manage large chat history</span><br><span class="line"></span><br><span class="line">Query analysis</span><br><span class="line"></span><br><span class="line">Query Analysis is the task of using an LLM to generate a query to send to a retriever. For a high-level tutorial on query analysis, check out this guide.</span><br><span class="line"></span><br><span class="line">How to: add examples to the prompt</span><br><span class="line"></span><br><span class="line">How to: handle cases where no queries are generated</span><br><span class="line"></span><br><span class="line">How to: handle multiple queries</span><br><span class="line"></span><br><span class="line">How to: handle multiple retrievers</span><br><span class="line"></span><br><span class="line">How to: construct filters</span><br><span class="line"></span><br><span class="line">🔍 分块 10:</span><br><span class="line">How to: handle multiple queries</span><br><span class="line"></span><br><span class="line">How to: handle multiple retrievers</span><br><span class="line"></span><br><span class="line">How to: construct filters</span><br><span class="line"></span><br><span class="line">How to: deal with high cardinality categorical variables</span><br><span class="line"></span><br><span class="line">Q&amp;A over SQL + CSV</span><br><span class="line"></span><br><span class="line">You can use LLMs to do question answering over tabular data. For a high-level tutorial, check out this guide.</span><br><span class="line"></span><br><span class="line">How to: use prompting to improve results</span><br><span class="line"></span><br><span class="line">How to: do query validation</span><br><span class="line"></span><br><span class="line">How to: deal with large databases</span><br><span class="line"></span><br><span class="line">How to: deal with CSV files</span><br><span class="line"></span><br><span class="line">Q&amp;A over graph databases</span><br><span class="line"></span><br><span class="line">You can use an LLM to do question answering over graph databases. For a high-level tutorial, check out this guide.</span><br><span class="line"></span><br><span class="line">How to: add a semantic layer over the database</span><br><span class="line"></span><br><span class="line">How to: construct knowledge graphs</span><br><span class="line"></span><br><span class="line">Summarization</span><br><span class="line"></span><br><span class="line">LLMs can summarize and otherwise distill desired information from text, including large volumes of text. For a high-level tutorial, check out this guide.</span><br><span class="line"></span><br><span class="line">How to: summarize text in a single LLM call</span><br><span class="line"></span><br><span class="line">How to: summarize text through parallelization</span><br><span class="line"></span><br><span class="line">How to: summarize text through iterative refinement</span><br><span class="line"></span><br><span class="line">LangChain Expression Language (LCEL)</span><br><span class="line"></span><br><span class="line">🔍 分块 11:</span><br><span class="line">How to: summarize text through iterative refinement</span><br><span class="line"></span><br><span class="line">LangChain Expression Language (LCEL)</span><br><span class="line"></span><br><span class="line">Should I use LCEL?</span><br><span class="line"></span><br><span class="line">LCEL is an orchestration solution. See our concepts page for recommendations on when to use LCEL.</span><br><span class="line"></span><br><span class="line">LangChain Expression Language is a way to create arbitrary custom chains. It is built on the Runnable protocol.</span><br><span class="line"></span><br><span class="line">LCEL cheatsheet: For a quick overview of how to use the main LCEL primitives.</span><br><span class="line"></span><br><span class="line">Migration guide: For migrating legacy chain abstractions to LCEL.</span><br><span class="line"></span><br><span class="line">How to: chain runnables</span><br><span class="line"></span><br><span class="line">How to: stream runnables</span><br><span class="line"></span><br><span class="line">How to: invoke runnables in parallel</span><br><span class="line"></span><br><span class="line">How to: add default invocation args to runnables</span><br><span class="line"></span><br><span class="line">How to: turn any function into a runnable</span><br><span class="line"></span><br><span class="line">How to: pass through inputs from one chain step to the next</span><br><span class="line"></span><br><span class="line">How to: configure runnable behavior at runtime</span><br><span class="line"></span><br><span class="line">How to: add message history (memory) to a chain</span><br><span class="line"></span><br><span class="line">How to: route between sub-chains</span><br><span class="line"></span><br><span class="line">How to: create a dynamic (self-constructing) chain</span><br><span class="line"></span><br><span class="line">How to: inspect runnables</span><br><span class="line"></span><br><span class="line">How to: add fallbacks to a runnable</span><br><span class="line"></span><br><span class="line">🔍 分块 12:</span><br><span class="line">How to: inspect runnables</span><br><span class="line"></span><br><span class="line">How to: add fallbacks to a runnable</span><br><span class="line"></span><br><span class="line">How to: pass runtime secrets to a runnable</span><br><span class="line"></span><br><span class="line">LangGraph</span><br><span class="line"></span><br><span class="line">LangGraph is an extension of LangChain aimed at building robust and stateful multi-actor applications with LLMs by modeling steps as edges and nodes in a graph.</span><br><span class="line"></span><br><span class="line">LangGraph documentation is currently hosted on a separate site. You can peruse LangGraph how-to guides here.</span><br><span class="line"></span><br><span class="line">LangSmith</span><br><span class="line"></span><br><span class="line">LangSmith allows you to closely trace, monitor and evaluate your LLM application. It seamlessly integrates with LangChain and LangGraph, and you can use it to inspect and debug individual steps of your chains and agents as you build.</span><br><span class="line"></span><br><span class="line">LangSmith documentation is hosted on a separate site. You can peruse LangSmith how-to guides here, but we&#x27;ll highlight a few sections that are particularly relevant to LangChain below:</span><br><span class="line"></span><br><span class="line">Evaluation</span><br><span class="line"></span><br><span class="line">🔍 分块 13:</span><br><span class="line">Evaluation</span><br><span class="line"></span><br><span class="line">Evaluating performance is a vital part of building LLM-powered applications. LangSmith helps with every step of the process from creating a dataset to defining metrics to running evaluators.</span><br><span class="line"></span><br><span class="line">To learn more, check out the LangSmith evaluation how-to guides.</span><br><span class="line"></span><br><span class="line">Tracing</span><br><span class="line"></span><br><span class="line">Tracing gives you observability inside your chains and agents, and is vital in diagnosing issues.</span><br><span class="line"></span><br><span class="line">How to: trace with LangChain</span><br><span class="line"></span><br><span class="line">How to: add metadata and tags to traces</span><br><span class="line"></span><br><span class="line">You can see general tracing-related how-tos in this section of the LangSmith docs.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="阶段2：向量存储与检索"><a href="#阶段2：向量存储与检索" class="headerlink" title="阶段2：向量存储与检索"></a>阶段2：向量存储与检索</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> OpenAIEmbeddings  </span><br><span class="line"><span class="keyword">from</span> langchain_community.vectorstores <span class="keyword">import</span> Chroma  </span><br><span class="line">   </span><br><span class="line"><span class="comment"># 5. 获取嵌入模型import os  </span></span><br><span class="line"><span class="keyword">import</span> dotenv  </span><br><span class="line">dotenv.load_dotenv()  </span><br><span class="line">  </span><br><span class="line">os.environ[<span class="string">&#x27;OPENAI_API_KEY&#x27;</span>] = os.getenv(<span class="string">&quot;SILICONFLOW_API_KEY&quot;</span>)  </span><br><span class="line">os.environ[<span class="string">&#x27;OPENAI_BASE_URL&#x27;</span>] = os.getenv(<span class="string">&quot;BASE_URL&quot;</span>)  </span><br><span class="line">  </span><br><span class="line">embeddings = OpenAIEmbeddings(  </span><br><span class="line">    model=<span class="string">&quot;Qwen/Qwen3-Embedding-0.6B&quot;</span>,  </span><br><span class="line">)  </span><br><span class="line"> <span class="comment"># 6. 向量数据存储（默认存储到内存中）  </span></span><br><span class="line">db = Chroma.from_documents(documents, embeddings)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 7. 向量检索  </span></span><br><span class="line">retriever = db.as_retriever()  </span><br><span class="line">docs = retriever.invoke(<span class="string">&quot;what is Chat Models?&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> i, doc <span class="keyword">in</span> <span class="built_in">enumerate</span>(docs):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n🔍 分块 <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>:&quot;</span>)  </span><br><span class="line">    <span class="built_in">print</span>(doc.page_content)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">🔍 分块 1:</span><br><span class="line">How to: use few shot examples</span><br><span class="line"></span><br><span class="line">How to: use few shot examples <span class="keyword">in</span> chat models</span><br><span class="line"></span><br><span class="line">How to: partially format prompt templates</span><br><span class="line"></span><br><span class="line">How to: compose prompts together</span><br><span class="line"></span><br><span class="line">How to: use multimodal prompts</span><br><span class="line"></span><br><span class="line">Example selectors</span><br><span class="line"></span><br><span class="line">Example Selectors are responsible <span class="keyword">for</span> selecting the correct few shot examples to pass to the prompt.</span><br><span class="line"></span><br><span class="line">How to: use example selectors</span><br><span class="line"></span><br><span class="line">How to: <span class="keyword">select</span> examples by length</span><br><span class="line"></span><br><span class="line">How to: <span class="keyword">select</span> examples by semantic similarity</span><br><span class="line"></span><br><span class="line">How to: <span class="keyword">select</span> examples by semantic ngram overlap</span><br><span class="line"></span><br><span class="line">How to: <span class="keyword">select</span> examples by maximal marginal relevance</span><br><span class="line"></span><br><span class="line">How to: <span class="keyword">select</span> examples from LangSmith few-shot datasets</span><br><span class="line"></span><br><span class="line">LLMs</span><br><span class="line"></span><br><span class="line">What LangChain calls LLMs are older forms of language models that take a string <span class="keyword">in</span> and output a string.</span><br><span class="line"></span><br><span class="line">How to: cache model responses</span><br><span class="line"></span><br><span class="line">How to: create a custom LLM class</span><br><span class="line"></span><br><span class="line">How to: stream a response back</span><br><span class="line"></span><br><span class="line">How to: track token usage</span><br><span class="line"></span><br><span class="line">How to: work with <span class="built_in">local</span> models</span><br><span class="line"></span><br><span class="line">Output parsers</span><br><span class="line"></span><br><span class="line">Output Parsers are responsible <span class="keyword">for</span> taking the output of an LLM and parsing into more structured format.</span><br><span class="line"></span><br><span class="line">🔍 分块 2:</span><br><span class="line">How to: summarize text through iterative refinement</span><br><span class="line"></span><br><span class="line">LangChain Expression Language (LCEL)</span><br><span class="line"></span><br><span class="line">Should I use LCEL?</span><br><span class="line"></span><br><span class="line">LCEL is an orchestration solution. See our concepts page <span class="keyword">for</span> recommendations on when to use LCEL.</span><br><span class="line"></span><br><span class="line">LangChain Expression Language is a way to create arbitrary custom chains. It is built on the Runnable protocol.</span><br><span class="line"></span><br><span class="line">LCEL cheatsheet: For a quick overview of how to use the main LCEL primitives.</span><br><span class="line"></span><br><span class="line">Migration guide: For migrating legacy chain abstractions to LCEL.</span><br><span class="line"></span><br><span class="line">How to: chain runnables</span><br><span class="line"></span><br><span class="line">How to: stream runnables</span><br><span class="line"></span><br><span class="line">How to: invoke runnables <span class="keyword">in</span> parallel</span><br><span class="line"></span><br><span class="line">How to: add default invocation args to runnables</span><br><span class="line"></span><br><span class="line">How to: turn any <span class="keyword">function</span> into a runnable</span><br><span class="line"></span><br><span class="line">How to: pass through inputs from one chain step to the next</span><br><span class="line"></span><br><span class="line">How to: configure runnable behavior at runtime</span><br><span class="line"></span><br><span class="line">How to: add message <span class="built_in">history</span> (memory) to a chain</span><br><span class="line"></span><br><span class="line">How to: route between sub-chains</span><br><span class="line"></span><br><span class="line">How to: create a dynamic (self-constructing) chain</span><br><span class="line"></span><br><span class="line">How to: inspect runnables</span><br><span class="line"></span><br><span class="line">How to: add fallbacks to a runnable</span><br><span class="line"></span><br><span class="line">🔍 分块 3:</span><br><span class="line">How to: <span class="keyword">do</span> <span class="keyword">function</span>/tool calling</span><br><span class="line"></span><br><span class="line">How to: get models to <span class="built_in">return</span> structured output</span><br><span class="line"></span><br><span class="line">How to: cache model responses</span><br><span class="line"></span><br><span class="line">How to: get <span class="built_in">log</span> probabilities</span><br><span class="line"></span><br><span class="line">How to: create a custom chat model class</span><br><span class="line"></span><br><span class="line">How to: stream a response back</span><br><span class="line"></span><br><span class="line">How to: track token usage</span><br><span class="line"></span><br><span class="line">How to: track response metadata across providers</span><br><span class="line"></span><br><span class="line">How to: use chat model to call tools</span><br><span class="line"></span><br><span class="line">How to: stream tool calls</span><br><span class="line"></span><br><span class="line">How to: handle rate limits</span><br><span class="line"></span><br><span class="line">How to: few shot prompt tool behavior</span><br><span class="line"></span><br><span class="line">How to: <span class="built_in">bind</span> model-specific formatted tools</span><br><span class="line"></span><br><span class="line">How to: force a specific tool call</span><br><span class="line"></span><br><span class="line">How to: work with <span class="built_in">local</span> models</span><br><span class="line"></span><br><span class="line">How to: init any model <span class="keyword">in</span> one line</span><br><span class="line"></span><br><span class="line">How to: pass multimodal data directly to models</span><br><span class="line"></span><br><span class="line">Messages</span><br><span class="line"></span><br><span class="line">Messages are the input and output of chat models. They have some content and a role, <span class="built_in">which</span> describes the <span class="built_in">source</span> of the message.</span><br><span class="line"></span><br><span class="line">How to: trim messages</span><br><span class="line"></span><br><span class="line">How to: filter messages</span><br><span class="line"></span><br><span class="line">How to: merge consecutive messages of the same <span class="built_in">type</span></span><br><span class="line"></span><br><span class="line">Prompt templates</span><br><span class="line"></span><br><span class="line">Prompt Templates are responsible <span class="keyword">for</span> formatting user input into a format that can be passed to a language model.</span><br><span class="line"></span><br><span class="line">🔍 分块 4:</span><br><span class="line">How to: pass <span class="keyword">in</span> callbacks at runtime</span><br><span class="line"></span><br><span class="line">How to: attach callbacks to a module</span><br><span class="line"></span><br><span class="line">How to: pass callbacks into a module constructor</span><br><span class="line"></span><br><span class="line">How to: create custom callback handlers</span><br><span class="line"></span><br><span class="line">How to: use callbacks <span class="keyword">in</span> async environments</span><br><span class="line"></span><br><span class="line">How to: dispatch custom callback events</span><br><span class="line"></span><br><span class="line">Custom</span><br><span class="line"></span><br><span class="line">All of LangChain components can easily be extended to support your own versions.</span><br><span class="line"></span><br><span class="line">How to: create a custom chat model class</span><br><span class="line"></span><br><span class="line">How to: create a custom LLM class</span><br><span class="line"></span><br><span class="line">How to: create a custom embeddings class</span><br><span class="line"></span><br><span class="line">How to: write a custom retriever class</span><br><span class="line"></span><br><span class="line">How to: write a custom document loader</span><br><span class="line"></span><br><span class="line">How to: write a custom output parser class</span><br><span class="line"></span><br><span class="line">How to: create custom callback handlers</span><br><span class="line"></span><br><span class="line">How to: define a custom tool</span><br><span class="line"></span><br><span class="line">How to: dispatch custom callback events</span><br><span class="line"></span><br><span class="line">Serialization</span><br><span class="line"></span><br><span class="line">How to: save and load LangChain objects</span><br><span class="line"></span><br><span class="line">Use cases</span><br><span class="line"></span><br><span class="line">These guides cover use-case specific details.</span><br><span class="line"></span><br><span class="line">Q&amp;A with RAG</span><br><span class="line"></span><br><span class="line">Retrieval Augmented Generation (RAG) is a way to connect LLMs to external sources of data. For a high-level tutorial on RAG, check out this guide.</span><br><span class="line"></span><br><span class="line">How to: add chat <span class="built_in">history</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="阶段3"><a href="#阶段3" class="headerlink" title="阶段3"></a>阶段3</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI  </span><br><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> PromptTemplate  </span><br><span class="line">  </span><br><span class="line">llm = ChatOpenAI(model=<span class="string">&quot;deepseek-ai/DeepSeek-V3&quot;</span>)  </span><br><span class="line"><span class="comment"># 8.定义提示词模版  </span></span><br><span class="line">template = <span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">你是一个问答机器人。  </span></span><br><span class="line"><span class="string">你的任务是根据下述给定的已知信息回答用户问题。  </span></span><br><span class="line"><span class="string">确保你的回复完全依据下述已知信息。不要编造答案。  </span></span><br><span class="line"><span class="string">如果下述已知信息不足以回答用户的问题，请直接回复&quot;我无法回答您的问题&quot;。  </span></span><br><span class="line"><span class="string">已知信息:  </span></span><br><span class="line"><span class="string"> &#123;context&#125;用户问：  </span></span><br><span class="line"><span class="string">&#123;question&#125;  </span></span><br><span class="line"><span class="string">请用中文回答用户问题。  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>  </span><br><span class="line"><span class="comment"># 7.得到提示词模版对象  </span></span><br><span class="line">prompt_template = PromptTemplate.from_template(template=template)  </span><br><span class="line"><span class="comment"># 8.得到提示词对象  </span></span><br><span class="line">prompt = prompt_template.invoke(&#123;<span class="string">&quot;question&quot;</span>:<span class="string">&quot;what is Chat Models?&quot;</span>,<span class="string">&quot;context&quot;</span>:docs&#125;)  </span><br><span class="line"> <span class="comment"># 9. 调用LLM  </span></span><br><span class="line">response = llm.invoke(prompt)  </span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">根据已知信息，<span class="string">&quot;Chat Models&quot;</span>（聊天模型）是LangChain中的一个组件，它们以**消息**（Messages）作为输入和输出。每条消息包含内容（content）和角色（role），角色用于描述消息的来源（例如用户、系统等）。  </span><br><span class="line"></span><br><span class="line">已知信息中提到：  </span><br><span class="line">- 聊天模型的输入输出是结构化的消息（而非传统LLM的纯文本字符串）。  </span><br><span class="line">- 支持通过消息处理功能（如合并连续同类型消息、过滤或修剪消息）。  </span><br><span class="line">- 其他功能包括工具调用（tool calling）、流式返回响应（streaming）、跟踪令牌使用情况（token usage）等。  </span><br><span class="line"></span><br><span class="line">如果需要更具体的定义或实现细节，当前信息不足以回答。</span><br></pre></td></tr></table></figure><p>聊天模型（Chat Models）是新型的语言模型，它接收消息并输出消息。请查看特定提供者的支持集成以 了解如何开始使用聊天模型。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LangChain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LangChain使用概述</title>
      <link href="/2025/09/26/LangChain%E4%BD%BF%E7%94%A8%E6%A6%82%E8%BF%B0/"/>
      <url>/2025/09/26/LangChain%E4%BD%BF%E7%94%A8%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="LangChain使用概述"><a href="#LangChain使用概述" class="headerlink" title="LangChain使用概述"></a>LangChain使用概述</h1><h2 id="LangChain的使用场景"><a href="#LangChain的使用场景" class="headerlink" title="LangChain的使用场景"></a>LangChain的使用场景</h2><table><thead><tr><th>项目名称</th><th>技术点</th><th>难度</th></tr></thead><tbody><tr><td>文档问答助手</td><td>Prompt + Embedding + RetrievalQA</td><td>⭐⭐</td></tr><tr><td>智能日程规划助手</td><td>Agent + Tool + Memory</td><td>⭐⭐⭐</td></tr><tr><td>LLM+数据库问答</td><td>SQLDatabaseToolkit + Agent</td><td>⭐⭐⭐⭐</td></tr><tr><td>多模型路由对话系统</td><td>RouterChain + 多 LLM</td><td>⭐⭐⭐⭐</td></tr><tr><td>互联网智能客服</td><td>ConversationChain + RAG +Agent</td><td>⭐⭐⭐⭐⭐</td></tr><tr><td>企业知识库助手（RAG + 本地模 型）</td><td>VectorDB + LLM + Streamlit</td><td>⭐⭐⭐⭐⭐</td></tr></tbody></table><h2 id="LangChain资料介绍"><a href="#LangChain资料介绍" class="headerlink" title="LangChain资料介绍"></a>LangChain资料介绍</h2><ul><li><a href="https://www.langchain.com/langchain">官网地址：https://www.langchain.com/langchain </a></li><li><a href="https://python.langchain.com/docs/introduction/">官网文档：https://python.langchain.com/docs/introduction/ </a></li><li><a href="https://python.langchain.com/api_reference/">API文档：https://python.langchain.com/api_reference&#x2F; </a></li><li><a href="https://github.com/langchain-ai/langchain">github地址：https://github.com/langchain-ai/langchain</a></li></ul><h2 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h2><h3 id="总体架构图"><a href="#总体架构图" class="headerlink" title="总体架构图"></a>总体架构图</h3><p>V0.2 &#x2F; V0.3 版本<br><img src="/2025/09/26/LangChain%E4%BD%BF%E7%94%A8%E6%A6%82%E8%BF%B0/file-20250926003401794.png" alt="file-20250926003401794.png"><br>图中展示了LangChain生态系统的主要组件及其分类，分为三个层次：</p><ul><li>架构(Architecture)</li><li>组件 (Components)</li><li>部署(Deployment)。</li></ul><h3 id="内部架构详情"><a href="#内部架构详情" class="headerlink" title="内部架构详情"></a>内部架构详情</h3><p><strong>结构1：LangChain</strong> </p><p>l<strong>angchain</strong>：构成应用程序认知架构的Chains，Agents，Retrieval strategies等<br>构成应⽤程序的链、智能体、RAG。 </p><p><strong>langchain-community</strong>：第三方集成<br>⽐如：Model I&#x2F;O、Retrieval、Tool &amp; Toolkit；合作伙伴包 langchain-openai，langchain anthropic等。 </p><p><strong>langchain-Core</strong>：基础抽象和LangChain表达式语言 (LCEL) </p><p>小结：LangChain，就是AI应用组装套件，封装了一堆的API。langchain框架不大，但是里面琐碎的知 识点特别多。就像玩乐高，提供了很多标准化的乐高零件（比如，连接器、轮子等） </p><p><strong>结构2：LangGraph</strong><br>LangGraph可以看做基于LangChain的api的进一步封装，能够协调多个Chain、Agent、Tools完成更 复杂的任务，实现更高级的功能。</p><p><strong>结构3：LangSmith</strong><br><a href="https://docs.smith.langchain.com/">https://docs.smith.langchain.com/</a> </p><p><strong>链路追踪</strong>。提供了6大功能，涉及Debugging (调试)、Playground (沙盒)、Prompt Management (提 示管理)、Annotation (注释)、Testing (测试)、Monitoring (监控)等。与LangChain无缝集成，帮助你 从原型阶段过渡到生产阶段。 </p><p>正是因为LangSmith这样的⼯具出现，才使得LangChain意义更⼤，要不仅靠⼀些API（当然也 可以不⽤，⽤原⽣的API），⽀持不住LangChain的热度。 </p><p><strong>结构4：LangServe</strong><br>将LangChain的可运行项和链部署为REST API，使得它们可以通过网络进行调用。<br>Java怎么调用langchain呢？就通过这个langserve。将langchain应用包装成一个rest api，对外暴露服 务。同时，支持更高的并发，稳定性更好。</p><p><strong>总结：LangChain当中，最有前途的两个模块就是：LangGraph，LangSmith。</strong> </p><p>LangChain能做RAG，其它的⼀些框架也能做，而且做的也不错，⽐如LlamaIndex。所以这时 候LangChain要在Agent这块发⼒，那就需要LangGraph。而LangSmith，做运维、监控。故， ⼆者是LangChain⾥最有前途的。</p><h1 id="开发前的准备工作"><a href="#开发前的准备工作" class="headerlink" title="开发前的准备工作"></a>开发前的准备工作</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ol><li><strong>Python 基础语法</strong> <ul><li>变量、函数、类、装饰器、上下文管理器 </li><li>模块导入、包管理（推荐用 pip 或 conda ）</li></ul></li><li><strong>大语言模型基础</strong> <ul><li>了解什么是 LLM、Token、Prompt、Embedding </li><li>OpenAI API 或其他模型提供商，如 Anthropic、阿里云百炼、DeepSeek等 </li><li>通过浏览器或app使用过大模型（比如：豆包、DeepSeek等）</li></ul></li></ol><h2 id="相关环境安装"><a href="#相关环境安装" class="headerlink" title="相关环境安装"></a>相关环境安装</h2><h3 id="安装Python或Anaconda"><a href="#安装Python或Anaconda" class="headerlink" title="安装Python或Anaconda"></a><strong>安装Python或Anaconda</strong></h3><p>LangChain基于Python开发，因此需确保系统中安装了Python。 </p><ul><li>方式1：直接下载Python安装包。推荐版本为Python 3.10及以上</li><li>方式2：使用包管理工具（如Anaconda）进行安装。通过Anaconda可以轻松创建和管理虚拟环境，为 项目提供独立的依赖空间，避免不同项目之间的依赖冲突。</li></ul><h3 id="如何下载安装包"><a href="#如何下载安装包" class="headerlink" title="如何下载安装包"></a>如何下载安装包</h3><p>比如：安装langchain包 </p><p><strong>方式1：使用pip指令</strong><br>基础指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装包（默认最新版） </span></span><br><span class="line">pip install langchain </span><br><span class="line"><span class="comment"># 指定版本 </span></span><br><span class="line"></span><br><span class="line">pip install langchain==0.3.7 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量安装（空格分隔） </span></span><br><span class="line">pip install langchain requests numpy </span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级包 </span></span><br><span class="line">pip install --upgrade langchain </span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载包 </span></span><br><span class="line">pip uninstall langchain </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已安装包 </span></span><br><span class="line">pip list</span><br></pre></td></tr></table></figure><p>高级操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 国内镜像加速 （解决下载慢） -i：指定镜像源 </span></span><br><span class="line">pip install -i https://mirrors.aliyun.com/pypi/simple/ langchain </span><br><span class="line"></span><br><span class="line"><span class="comment"># 从本地/URL安装： </span></span><br><span class="line">pip install ./local_package.whl </span><br><span class="line">pip install https://github.com/user/repo/archive/main.zip</span><br></pre></td></tr></table></figure><p>方式2：使用conda指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装包（默认仓库） </span></span><br><span class="line">conda install langchain </span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定频道（如 conda-forge）</span></span><br><span class="line">conda install -c conda-forge langchain==0.3.7 </span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新包 </span></span><br><span class="line">conda update langchain </span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载包 </span></span><br><span class="line">conda uninstall langchain </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已安装包 </span></span><br><span class="line">conda list</span><br></pre></td></tr></table></figure><p><code>-c ：是--channel 的缩写，conda⽤于指定包的安装来源渠道。</code><br><code>conda-forge ：该源⽐官⽅默认渠道更新更快、包更全</code></p><p><strong>建议：二者最好不好混用，推荐先conda装基础包，后 pip补充的顺序。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查包来源 </span></span><br><span class="line">conda list <span class="comment"># conda 安装的包显示频道，pip安装的显示 pypi</span></span><br></pre></td></tr></table></figure><p><img src="/2025/09/26/LangChain%E4%BD%BF%E7%94%A8%E6%A6%82%E8%BF%B0/file-20250926094456875.png" alt="file-20250926094456875.png"></p><h1 id="大模型应用开发"><a href="#大模型应用开发" class="headerlink" title="大模型应用开发"></a>大模型应用开发</h1><p>大模型应用技术特点：门槛低，天花板高。 </p><h2 id="基于RAG架构的开发"><a href="#基于RAG架构的开发" class="headerlink" title="基于RAG架构的开发"></a>基于RAG架构的开发</h2><p><strong>背景</strong>： </p><ul><li>大模型的知识冻结 </li><li>大模型幻觉<br>而RAG就可以非常精准的解决这两个问题。</li></ul><h2 id="何为RAG？"><a href="#何为RAG？" class="headerlink" title="何为RAG？"></a>何为RAG？</h2><p>Retrieval-Augmented Generation（检索增强生成）<br><img src="/2025/09/26/LangChain%E4%BD%BF%E7%94%A8%E6%A6%82%E8%BF%B0/file-20250926094734403.png" alt="file-20250926094734403.png"><br><code>检索-增强-⽣成过程：检索可以理解为第10步，增强理解为第12步（这⾥的提⽰词包含检索到的数 据），⽣成理解为第15步。</code></p><p>类似的细节图：<br><img src="/2025/09/26/LangChain%E4%BD%BF%E7%94%A8%E6%A6%82%E8%BF%B0/file-20250926094911845.png" alt="file-20250926094911845.png"></p><p>强调一下难点的步骤：<br><img src="/2025/09/26/LangChain%E4%BD%BF%E7%94%A8%E6%A6%82%E8%BF%B0/file-20250926100636770.png"><br>这些过程中的难点：<br>1、文件解析<br>2、文件切割<br>3、知识检索<br>4、知识重排序</p><p><strong>Reranker的使用场景</strong>： </p><ul><li>适合：追求 回答<strong>高精度和 高相关性</strong>的场景中特别适合使用 Reranker，例如专业知识库或者客服系 统等应用。 </li><li>不适合：引入reranker会增加召回时间，增加检索延迟。服务对 响应时间要求高时，使用reranker 可能不合适。</li></ul><p><strong>这里有三个位置涉及到大模型的使用：</strong></p><ul><li>第3步向量化时，需要使用EmbeddingModels。 </li><li>第7步重排序时，需要使用RerankModels。 </li><li>第9步生成答案时，需要使用LLM。</li></ul><p>ChatGPT：⽀持约8k token的上下⽂<br>GPT4：⽀持约32k token的上下⽂ </p><p>最新的很多⼤模型：都⽀持100万、1000万 token的上下⽂ （相当于2000万字⽂本或20小时 视频）<br>⼀般情况下模型中 token 和字数的换算⽐例⼤致如下： </p><ul><li>1 个英⽂字符 ≈ 0.3 个 token。 </li><li>1 个中⽂字符 ≈ 0.6 个 token。</li></ul><h2 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h2><p>面对一个需求，如何开始，如何选择技术方案？下面是个常用思路：<br><img src="/2025/09/26/LangChain%E4%BD%BF%E7%94%A8%E6%A6%82%E8%BF%B0/file-20250926101647564.png"><br><code>注意：其中最容易被忽略的，是准备测试数据</code></p><h1 id="LangChain的核心组件"><a href="#LangChain的核心组件" class="headerlink" title="LangChain的核心组件"></a>LangChain的核心组件</h1><p>学习Langchain最简单直接的方法就是阅读官方文档。<br><a href="https://python.langchain.com/v0.1/docs/modules/">https://python.langchain.com/v0.1/docs/modules/</a></p><h2 id="一个问题引发的思考"><a href="#一个问题引发的思考" class="headerlink" title="一个问题引发的思考"></a>一个问题引发的思考</h2><p><strong>如果要组织一个AI应用，开发者一般需要什么？</strong> </p><ol><li>提示词模板的构建，不仅仅只包含用户输入。 </li><li>模型调用与返回，参数设置，返回内容的格式化输出。 </li><li>知识库查询，这里会包含文档加载，切割，以及转化为词嵌入（Embedding）向量。 </li><li>其他第三方工具调用，一般包含天气查询、Google搜索、一些自定义的接口能力调用。 </li><li>记忆获取，每一个对话都有上下文，在开启对话之前总得获取到之前的上下文吧？</li></ol><h2 id="核心组件的概述"><a href="#核心组件的概述" class="headerlink" title="核心组件的概述"></a>核心组件的概述</h2><p>LangChain的核心组件涉及六大模块，这六大模块提供了一个全面且强大的框架，使开发者能够创建复 杂、高效且用户友好的基于大模型的应用。</p><p><img src="/2025/09/26/LangChain%E4%BD%BF%E7%94%A8%E6%A6%82%E8%BF%B0/file-20250926102039819.png"></p><h2 id="核心组件的说明"><a href="#核心组件的说明" class="headerlink" title="核心组件的说明"></a>核心组件的说明</h2><h3 id="核心组件1：Model-I-O"><a href="#核心组件1：Model-I-O" class="headerlink" title="核心组件1：Model I&#x2F;O"></a>核心组件1：Model I&#x2F;O</h3><p>这个模块使⽤最多，也最简单<br>Model I&#x2F;O：标准化各个大模型的输入和输出，包含输入模版，模型本身和格式化输出。 以下是使用语言模型从输入到输出的基本流程。<br><img src="/2025/09/26/LangChain%E4%BD%BF%E7%94%A8%E6%A6%82%E8%BF%B0/file-20250926102157179.png"></p><p>以下是对每一块的总结： </p><ul><li><strong>Format(格式化)</strong> ：即指代Prompts Template，通过模板管理大模型的输入。将原始数据格式化成 模型可以处理的形式，插入到一个模板问题中，然后送入模型进行处理。</li><li><strong>Predict(预测)</strong> ：即指代Models，使用通用接口调用不同的大语言模型。接受被送进来的问题，然 后基于这个问题进行预测或生成回答。</li><li><strong>Parse(生成)</strong> ：即指代Output Parser 部分，用来从模型的推理中提取信息，并按照预先设定好的 模版来规范化输出。比如，格式化成一个结构化的JSON对象。</li></ul><h3 id="核心组件2：Chains"><a href="#核心组件2：Chains" class="headerlink" title="核心组件2：Chains"></a>核心组件2：Chains</h3><p>Chain：”链条”，用于将多个模块串联起来组成一个完整的流程，是 LangChain 框架中最重要的模块。<br>例如，一个 Chain 可能包括一个 Prompt 模板、一个语言模型和一个输出解析器，它们一起工作以处理 用户输入、生成响应并处理输出。</p><p><strong>常见的Chain类型：</strong> </p><ul><li><strong>LLMChain</strong> ：最基础的模型调用链 </li><li><strong>SequentialChain</strong> ：多个链串联执行 </li><li><strong>RouterChain</strong> ：自动分析用户的需求，引导到最适合的链 </li><li><strong>RetrievalQA</strong> ：结合向量数据库进行问答的链</li></ul><h3 id="核心组件3：Memory"><a href="#核心组件3：Memory" class="headerlink" title="核心组件3：Memory"></a>核心组件3：Memory</h3><p>Memory：记忆模块，用于保存对话历史或上下文信息，以便在后续对话中使用。<br><strong>常见的 Memory 类型：</strong> </p><ul><li><strong>ConversationBufferMemory</strong> ：保存完整的对话历史 </li><li><strong>ConversationSummaryMemory</strong> ：保存对话内容的精简摘要（适合长对话） </li><li><strong>ConversationSummaryBufferMemory</strong> ：混合型记忆机制，兼具上面两个类型的特点</li><li><strong>VectorStoreRetrieverMemory</strong> ：保存对话历史存储在向量数据库中</li></ul><h3 id="核心组件4：Agents"><a href="#核心组件4：Agents" class="headerlink" title="核心组件4：Agents"></a>核心组件4：Agents</h3><p>Agents，对应着智能体，是 LangChain 的高阶能力，它可以自主选择工具并规划执行步骤。<br><strong>Agent 的关键组成</strong>： </p><ul><li><strong>AgentType</strong> ：定义决策逻辑的工作流模式 </li><li><strong>Tool</strong> ：是一些内置的功能模块，如API调用、搜索引擎、文本处理、数据查询等工具。Agents通 过这些工具来执行特定的功能。 </li><li><strong>AgentExecutor</strong> ：用来运行智能体并执行其决策的工具，负责协调智能体的决策和实际的工具执 行。</li></ul><p><code>⽬前最热⻔的智能体开发实践，未来能够真正实现通⽤⼈⼯智能的落地⽅案。</code><br>&#96;这⾥的Agent，就会涉及到前⾯讲的memory，以及tools。</p><h3 id="核心组件5：Retrieval"><a href="#核心组件5：Retrieval" class="headerlink" title="核心组件5：Retrieval"></a>核心组件5：Retrieval</h3><p>Retrieval：对应着RAG，检索外部数据，然后在执行生成步骤时将其传递到 LLM。步骤包括文档加载、 切割、Embedding等<br><img src="/2025/09/26/LangChain%E4%BD%BF%E7%94%A8%E6%A6%82%E8%BF%B0/file-20250926102816605.png"></p><ul><li><strong>Source</strong> ：数据源，即大模型可以识别的多种类型的数据：视频、图片、文本、代码、文档等。</li><li><strong>Load</strong> ：负责将来自不同数据源的非结构化数据，加载为文档(Document)对象 </li><li><strong>Transform</strong> ：负责对加载的文档进行转换和处理，比如将文本拆分为具有语义意义的小块。</li><li><strong>Embed</strong> ：将文本编码为向量的能力。一种用于嵌入文档，另一种用于嵌入查询 </li><li><strong>Store</strong> ：将向量化后的数据进行存储 </li><li><strong>Retrieve</strong> ：从大规模文本库中检索和查询相关的文本段落</li></ul><p><code>绿⾊的是⼊库存储前的操作。</code></p><h3 id="核心组件6：Callbacks"><a href="#核心组件6：Callbacks" class="headerlink" title="核心组件6：Callbacks"></a>核心组件6：Callbacks</h3><p>Callbacks：回调机制，允许连接到 LLM 应用程序的各个阶段，可以监控和分析LangChain的运行情 况，比如日志记录、监控、流传输等，以优化性能。</p><p><code>回调函数，对于程序员们应该都不陌⽣。这个函数允许我们在LLM的各个阶段使⽤各种各样的 “钩⼦”，从而达实现⽇志的记录、监控以及流式传输等功能。</code></p><h1 id="LangChain的helloworld"><a href="#LangChain的helloworld" class="headerlink" title="LangChain的helloworld"></a>LangChain的helloworld</h1><h2 id="获取大模型"><a href="#获取大模型" class="headerlink" title="获取大模型"></a>获取大模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入 dotenv 库的 load_dotenv 函数，用于加载环境变量文件（.env）中的配置</span></span><br><span class="line"><span class="keyword">import</span> dotenv <span class="keyword">from</span> langchain_openai </span><br><span class="line"><span class="keyword">import</span> ChatOpenAI <span class="keyword">import</span> os </span><br><span class="line"></span><br><span class="line">dotenv.load_dotenv() <span class="comment">#加载当前目录下的 .env 文件 </span></span><br><span class="line"></span><br><span class="line">os.environ[ <span class="string">&#x27;OPENAI_API_KEY&#x27;</span> ] = os.getenv( <span class="string">&quot;OPENAI_API_KEY1&quot;</span> )</span><br><span class="line">os.environ[ <span class="string">&#x27;OPENAI_BASE_URL&#x27;</span> ] = os.getenv( <span class="string">&quot;OPENAI_BASE_URL&quot;</span> ) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建大模型实例 </span></span><br><span class="line">llm = ChatOpenAI(model= <span class="string">&quot;gpt-4o-mini&quot;</span> ) <span class="comment"># 默认使用 gpt-3.5-turbo </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接提供问题，并调用llm </span></span><br><span class="line">response = llm.invoke( <span class="string">&quot;什么是大模型？&quot;</span> ) </span><br><span class="line"><span class="built_in">print</span> (response)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content=⼤模型（Large Model）通常是指在深度学习和机器学习领域中，拥有⼤量参数和复杂 结构的模型。这些模型可以处理复杂的数据集，进⾏⾼级的任务，如⾃然语⾔处理、图像识别、⽣ 成对抗⽹络等。以下是⼀些关于⼤模型的关键点：\n\n1. 参数量：⼤模型通常具备数亿甚⾄数千亿 个参数，这使得它们能够学习到更加丰富的特征和关系。\n\n2. 计算需求：由于其庞⼤的规模，⼤ 模型通常需要⾼性能的计算资源，例如GPU或TPU，以及⻓时间的训练过程。\n\n3. 数据需求： 训练⼤模型通常需要⼤量的数据，以确保模型能够在各种情况下进⾏有效的学习和泛化。\n\n4. 应 ⽤⼴泛：⼤模型在许多领域都有应⽤，包括语⾔模型（如GPT-3、BERT等）、图像处理（如卷积 神经⽹络）以及⽣成模型（如GAN）。\n\n5. 转移学习：许多⼤模型允许通过转移学习的⽅式进 ⾏微调，使得它们能够在特定任务上表现良好，而⽆需从头开始训练。\n\n⼤模型的出现⼤⼤推动 了⼈⼯智能的发展，使得许多复杂的任务变得可⾏，并且在多个领域取得了显著的成果。<span class="string">&#x27; additional_kwargs=&#123;refusal: None&#125; response_metadata=&#123;token_usage: &#123;completion_tokens: 289, prompt_tokens: 12, total_tokens: 301, completion_tokens_details: &#123;accepted_prediction_tokens: 0, audio_tokens: 0, reasoning_tokens: 0, rejected_prediction_tokens: 0&#125;, prompt_tokens_details: &#123;audio_tokens: 0, cached_tokens: 0&#125;&#125;, model_name: gpt-4o-mini-2024-07-18, system_fingerprint: fp_efad92c60b, id: chatcmpl-BxO81Kq8FpSQgLyTikWfGzOlry2MF, service_tier: None, finish_reason: stop, logprobs: None&#125; id=run--134748c7-8c54-4784 8781-6ea143086285-0 usage_metadata=&#123;input_tokens: 12, output_tokens: 289, total_tokens: 301, input_token_details: &#123;audio: 0, cache_read: 0&#125;, output_token_details: &#123;audio: 0, reasoning: 0&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>其中，需要在当前工程下提供 .env 文件，文件中提供如下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OPENAI_API_KEY1= &quot;sk-cvUm8OddQbly.............AGgIHTm9kMH7Bf226G2&quot; #你自己的密钥 OPENAI_BASE_URL= &quot;https://api.siliconflow.cn/v1&quot;     #url是固定值，统一写成这样</span><br></pre></td></tr></table></figure><p>密钥来自于：<a href="https://cloud.siliconflow.cn/i/iICxcKiF">https://cloud.siliconflow.cn/i/iICxcKiF</a><br><img src="/2025/09/26/LangChain%E4%BD%BF%E7%94%A8%E6%A6%82%E8%BF%B0/file-20250926104121004.png"></p><h2 id="使用提示词模板"><a href="#使用提示词模板" class="headerlink" title="使用提示词模板"></a>使用提示词模板</h2><p>我们也可以创建prompt template, 并引入一些变量到prompt template中，这样在应用的时候更加灵 活。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate </span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要注意的一点是，这里需要指明具体的role，在这里是system和用户 </span></span><br><span class="line">prompt = ChatPromptTemplate.from_messages([</span><br><span class="line">(<span class="string">&quot;system&quot;</span>,<span class="string">&quot;你是世界级的技术文档编写者&quot;</span>),</span><br><span class="line">(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;&#123;input&#125;&quot;</span>) <span class="comment"># &#123;input&#125;为变量 </span></span><br><span class="line">]) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们可以把prompt和具体llm的调用和在一起。 </span></span><br><span class="line">chain = prompt | llm </span><br><span class="line">message = chain.invoke(&#123; <span class="string">&quot;input&quot;</span> : <span class="string">&quot;大模型中的LangChain是什么?&quot;</span> &#125;) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (message) </span><br><span class="line"><span class="comment"># print(type(message))</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">LangChain是一个开源框架，旨在简化和增强大语言模型（如GPT-3、GPT-4 等）的开发与应 用。它为开发者提供了一套工具和组件，使得在不同的用例中利用语言模型变得更加高效和灵 活。LangChain 的全名是“Language Chain”，意在强调它将多个处理步骤或组件串联在一 起，形成一个完整的处理链，以便更好地利用语言模型的能力。 </span><br><span class="line">### LangChain 的主要特性包括：</span><br><span class="line"> </span><br><span class="line"> 1. **组件化设计**：LangChain 提供了高度模块化的组件，允许开发者根据需要组合和扩展不同 的功能，比如文本生成、数据提取、工具调用等。 </span><br><span class="line">2. **链式调用**：可以将多个操作串联在一起，例如先生成文本，然后对生成的内容进行解析或处 理，使得工作流程更加流畅。 </span><br><span class="line">3. **多种后端支持**：LangChain 支持多种语言模型和生成后端，方便开发者在不同的平台和环 境下进行开发。 </span><br><span class="line">4. **集成外部工具**：LangChain 允许与外部API、数据库和其他工具集成，使得模型可以利用外 部数据源和功能，增强其智能性和实用性。</span><br><span class="line">5. **可扩展性**：开发者可以通过自定义组件和方法，扩展 LangChain 的功能，以适应特定的业 务需求。</span><br><span class="line">   </span><br><span class="line">### 应用场景： </span><br><span class="line">- **对话系统**：构建更智能的聊天机器人，能够理解上下文并进行多轮对话。</span><br><span class="line">- **内容生成**：生成文章、故事、产品描述等多种内容，并对其进行编辑和优化。</span><br><span class="line">- **数据提取和处理**：从大量文本中提取关键信息，并将其结构化。</span><br><span class="line">- **知识库查询**：结合语言模型与知识库，提供深度的知识查询和推荐。 总之，LangChain 作为大模型应用的一个助手工具，提升了开发者的生产力，使得他们可以更专 注于构建创新的应用，而不是陷入底层实现的复杂性中。</span><br><span class="line"># &lt;class &#x27;langchain_core.messages.ai.AIMessage&#x27;&gt;</span><br></pre></td></tr></table></figure><h2 id="使用输出解析器"><a href="#使用输出解析器" class="headerlink" title="使用输出解析器"></a>使用输出解析器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_openai </span><br><span class="line"><span class="keyword">import</span> ChatOpenAI </span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate </span><br><span class="line"><span class="keyword">from</span> langchain_core.output_parsers <span class="keyword">import</span> StrOutputParser,JsonOutputParser </span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化模型 </span></span><br><span class="line">llm = ChatOpenAI(model= <span class="string">&quot;gpt-4o-mini&quot;</span> ) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建提示模板 </span></span><br><span class="line">prompt = ChatPromptTemplate.from_messages([</span><br><span class="line">(<span class="string">&quot;system&quot;</span>,<span class="string">&quot;你是世界级的技术文档编写者&quot;</span>),</span><br><span class="line">(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;&#123;input&#125;&quot;</span>) <span class="comment"># &#123;input&#125;为变量 </span></span><br><span class="line">])  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用输出解析器 </span></span><br><span class="line"><span class="comment"># output_parser = StrOutputParser() </span></span><br><span class="line">output_parser = JsonOutputParser() </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将其添加到上一个链中 </span></span><br><span class="line"><span class="comment"># chain = prompt | llm </span></span><br><span class="line">chain = prompt | llm | output_parser </span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用它并提出同样的问题。答案是一个字符串，而不是ChatMessage </span></span><br><span class="line"><span class="comment"># chain.invoke(&#123;&quot;input&quot;: &quot;LangChain是什么?&quot;&#125;) </span></span><br><span class="line">chain.invoke(&#123; <span class="string">&quot;input&quot;</span> : <span class="string">&quot;LangChain是什么? 用JSON格式回复，问题用question，回答用answer&quot;</span> &#125;)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;question: LangChain是什么?&#x27;, answer: LangChain是⼀个开源框架，⽤于构建与⼤型语⾔模型（LLMs）交互的应⽤程序。它 提供了⼀个灵活的⼯具集，允许开发⼈员创建具有复杂推理能⼒、链式任务处理和上下⽂管理的智 能应⽤。LangChain⽀持多种数据源和组件，可以帮助开发者在各种环境中更⾼效地利⽤语⾔模 型。&#x27;&#125;</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI </span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate </span><br><span class="line"><span class="keyword">from</span> langchain_core.output_parsers <span class="keyword">import</span> StrOutputParser,JsonOutputParser </span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化模型 </span></span><br><span class="line">llm = ChatOpenAI(model= <span class="string">&quot;gpt-4o-mini&quot;</span> ) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建提示模板 </span></span><br><span class="line">prompt = ChatPromptTemplate.from_messages([</span><br><span class="line">(<span class="string">&quot;system&quot;</span>,<span class="string">&quot;你是世界级的技术文档编写者。输出格式要求：&#123;format_instructions&#125;&quot;</span>),</span><br><span class="line">(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;&#123;input&#125;&quot;</span>) <span class="comment"># &#123;input&#125;为变量 </span></span><br><span class="line">]) </span><br><span class="line"> <span class="comment"># 使用输出解析器</span></span><br><span class="line"> <span class="comment"># output_parser = StrOutputParser() </span></span><br><span class="line"> output_parser = JsonOutputParser() </span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 将其添加到上一个链中 </span></span><br><span class="line"> <span class="comment"># chain = prompt | llm </span></span><br><span class="line"> chain = prompt | llm | output_parser </span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 调用它并提出同样的问题。答案是一个字符串，而不是ChatMessage </span></span><br><span class="line"> <span class="comment"># chain.invoke(&#123;&quot;input&quot;: &quot;LangChain是什么?&quot;&#125;) </span></span><br><span class="line"> chain.invoke(&#123; <span class="string">&quot;input&quot;</span> : <span class="string">&quot;LangChain是什么? &quot;</span> <span class="string">&quot;format_instructions&quot;</span> :output_parser.get_format_instructions()&#125;)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;LangChain: &#123;description: LangChain是⼀个开源的框架，⽤于构建基于语⾔模型的应⽤程 序。它旨在将不同的语⾔模型、数据源和⼯具结合起来，以便于开发者创建复杂的应⽤。<span class="string">&#x27;, key_features: [&#x27;</span>模块化设计：⽀持将不同的组件组合在⼀起，如语⾔模型、数据处理和外部 API。<span class="string">&#x27;, &#x27;</span>⽀持多种语⾔模型：兼容不同类型的语⾔模型，如OpenAI的GPT系列、BERT等。<span class="string">&#x27;, &#x27;</span>内置数据连接：可以与多种数据源进⾏集成，例如数据库、⽂件和外部API。<span class="string">&#x27;, &#x27;</span>灵活的⼯作流管理：提供了多种⽅法来定义和管理任务的执⾏流程。<span class="string">&#x27;, &#x27;</span>社区⽀持：拥有活跃的社区，提供⽂档、⽰例和⽀持。<span class="string">&#x27;, &#x27;</span>可扩展性：允许开发者根据需求定制和扩展功能。<span class="string">&#x27;], use_cases: [&#x27;</span>聊天机器⼈开发<span class="string">&#x27;, &#x27;</span>⽂本⽣成和摘要<span class="string">&#x27;, &#x27;</span>内容推荐系统<span class="string">&#x27;, &#x27;</span>⾃然语⾔理解任务<span class="string">&#x27;, &#x27;</span>⾃动化⼯作 流处理<span class="string">&#x27;], getting_started: &#123;installation: &#x27;</span>使⽤pip安装：pip install langchain, documentation_link: <span class="string">&#x27;https://langchain.readthedocs.io/en/latest/&#x27;</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="使用向量存储"><a href="#使用向量存储" class="headerlink" title="使用向量存储"></a>使用向量存储</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入和使用 WebBaseLoaderfrom langchain_community.document_loaders import WebBaseLoader  </span></span><br><span class="line"><span class="keyword">import</span> bs4  </span><br><span class="line">  </span><br><span class="line">loader = WebBaseLoader(  </span><br><span class="line">        web_path=<span class="string">&quot;https://www.gov.cn/xinwen/2020-06/01/content_5516649.htm&quot;</span>,  </span><br><span class="line">        bs_kwargs=<span class="built_in">dict</span>(parse_only=bs4.SoupStrainer(<span class="built_in">id</span>=<span class="string">&quot;UCAP-CONTENT&quot;</span>))  </span><br><span class="line">    )  </span><br><span class="line">docs = loader.load()  </span><br><span class="line"><span class="comment"># print(docs)  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 对于嵌入模型，这里通过 API调用  </span></span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> OpenAIEmbeddings  </span><br><span class="line">  </span><br><span class="line">embeddings = OpenAIEmbeddings(model=<span class="string">&quot;text-embedding-ada-002&quot;</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> langchain_community.vectorstores <span class="keyword">import</span> FAISS  </span><br><span class="line"><span class="keyword">from</span> langchain_text_splitters <span class="keyword">import</span> RecursiveCharacterTextSplitter  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用分割器分割文档  </span></span><br><span class="line">text_splitter = RecursiveCharacterTextSplitter(chunk_size=<span class="number">500</span>, chunk_overlap=<span class="number">50</span>)  </span><br><span class="line">documents = text_splitter.split_documents(docs)  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(documents))  </span><br><span class="line"><span class="comment"># 向量存储  embeddings 会将 documents 中的每个文本片段转换为向量，并将这些向量存储在 FAISS 向量数据库中  </span></span><br><span class="line">vector = FAISS.from_documents(documents, embeddings)</span><br></pre></td></tr></table></figure><h2 id="RAG-检索增强生成"><a href="#RAG-检索增强生成" class="headerlink" title="RAG(检索增强生成)"></a>RAG(检索增强生成)</h2><p>基于外部知识，增强大模型回复</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> PromptTemplate </span><br><span class="line"></span><br><span class="line">retriever = vector.as_retriever() </span><br><span class="line">retriever.search_kwargs = &#123; <span class="string">&quot;k&quot;</span> : <span class="number">3</span>&#125; </span><br><span class="line">docs = retriever.invoke( <span class="string">&quot;建设用地使用权是什么？&quot;</span> ) </span><br><span class="line"></span><br><span class="line"><span class="comment"># for i,doc in enumerate(docs): </span></span><br><span class="line"><span class="comment"># print(f&quot;⭐第&#123;i+1&#125;条规定：&quot;) </span></span><br><span class="line"><span class="comment"># print(doc) </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.定义提示词模版 </span></span><br><span class="line">prompt_template = <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">你是一个问答机器人。 </span></span><br><span class="line"><span class="string">你的任务是根据下述给定的已知信息回答用户问题。 </span></span><br><span class="line"><span class="string">确保你的回复完全依据下述已知信息。不要编造答案。 </span></span><br><span class="line"><span class="string">如果下述已知信息不足以回答用户的问题，请直接回复&quot;我无法回答您的问题&quot;。 </span></span><br><span class="line"><span class="string">已知信息: </span></span><br><span class="line"><span class="string">&#123;info&#125; </span></span><br><span class="line"><span class="string">用户问： &#123;question&#125; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">请用中文回答用户问题。 &quot;&quot;&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.得到提示词模版对象 </span></span><br><span class="line">template = PromptTemplate.from_template(prompt_template) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 8.得到提示词对象 </span></span><br><span class="line">prompt = template.<span class="built_in">format</span>(info=docs, question= <span class="string">&#x27;建设用地使用权是什么？&#x27;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">## 9. 调用LLM </span></span><br><span class="line">response = llm.invoke(prompt) <span class="built_in">print</span> (response.content)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">建设⽤地使⽤权是指在法律规定的范围内，建设⽤地使⽤权⼈对特定⼟地的使⽤、建造建筑物及其 他设施的权利。根据相关法律规定，建设⽤地使⽤权可以通过出让或划拨等⽅式设⽴，并应当符合 资源节约、⽣态环境保护及⼟地⽤途的规定。建设⽤地使⽤权⼈有权转让、出资、赠与或抵押其使 ⽤权，但需遵循法律规定和合同约定。</span><br></pre></td></tr></table></figure><h2 id="使用Agent"><a href="#使用Agent" class="headerlink" title="使用Agent"></a>使用Agent</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain.tools.retriever <span class="keyword">import</span> create_retriever_tool </span><br><span class="line"></span><br><span class="line"><span class="comment"># 检索器工具 </span></span><br><span class="line">retriever_tool = create_retriever_tool( retriever, <span class="string">&quot;CivilCodeRetriever&quot;</span> , <span class="string">&quot;搜索有关中华人民共和国民法典的信息。关于中华人民共和国民法典的任何问题，您必须使用此工 具!&quot;</span> , ) tools = [retriever_tool] </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain <span class="keyword">import</span> hub </span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> create_openai_functions_agent </span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> AgentExecutor </span><br><span class="line"></span><br><span class="line"><span class="comment"># https://smith.langchain.com/hub </span></span><br><span class="line">prompt = hub.pull( <span class="string">&quot;hwchase17/openai-functions-agent&quot;</span> ) </span><br><span class="line">agent = create_openai_functions_agent(llm, tools, prompt) </span><br><span class="line">agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=<span class="literal">True</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行代理 </span></span><br><span class="line">agent_executor.invoke(&#123; <span class="string">&quot;input&quot;</span> : <span class="string">&quot;建设用地使用权是什么&quot;</span> &#125;)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&gt; Entering new AgentExecutor chain...</span><br><span class="line">Invoking: `CivilCodeRetriever` with `&#123;<span class="string">&#x27;query&#x27;</span>: <span class="string">&#x27;建设用地使用权&#x27;</span>&#125;`</span><br><span class="line"></span><br><span class="line">第三百四十五条　建设用地使用权可以在土地的地表、地上或者地下分别设立。</span><br><span class="line">第三百四十六条　设立建设用地使用权，应当符合节约资源、保护生态环境的要求，遵守法律、行政法规关于土地用途的规定，不得损害已经设立的用益物权。</span><br><span class="line">第三百四十七条　设立建设用地使用权，可以采取出让或者划拨等方式。</span><br><span class="line">工业、商业、旅游、娱乐和商品住宅等经营性用地以及同一土地有两个以上意向用地者的，应当采取招标、拍卖等公开竞价的方式出让。</span><br><span class="line">严格限制以划拨方式设立建设用地使用权。</span><br><span class="line">第三百四十八条　通过招标、拍卖、协议等出让方式设立建设用地使用权的，当事人应当采用书面形式订立建设用地使用权出让合同。</span><br><span class="line">建设用地使用权出让合同一般包括下列条款：</span><br><span class="line">（一）当事人的名称和住所；</span><br><span class="line">（二）土地界址、面积等；</span><br><span class="line">（三）建筑物、构筑物及其附属设施占用的空间；</span><br><span class="line">（四）土地用途、规划条件；</span><br><span class="line">（五）建设用地使用权期限；</span><br><span class="line">（六）出让金等费用及其支付方式；</span><br><span class="line">（七）解决争议的方法。</span><br><span class="line">第三百四十九条　设立建设用地使用权的，应当向登记机构申请建设用地使用权登记。建设用地使用权自登记时设立。登记机构应当向建设用地使用权人发放权属证书。</span><br><span class="line"></span><br><span class="line">第三百五十条　建设用地使用权人应当合理利用土地，不得改变土地用途；需要改变土地用途的，应当依法经有关行政主管部门批准。</span><br><span class="line">第三百五十一条　建设用地使用权人应当依照法律规定以及合同约定支付出让金等费用。</span><br><span class="line">第三百五十二条　建设用地使用权人建造的建筑物、构筑物及其附属设施的所有权属于建设用地使用权人，但是有相反证据证明的除外。</span><br><span class="line">第三百五十三条　建设用地使用权人有权将建设用地使用权转让、互换、出资、赠与或者抵押，但是法律另有规定的除外。</span><br><span class="line">第三百五十四条　建设用地使用权转让、互换、出资、赠与或者抵押的，当事人应当采用书面形式订立相应的合同。使用期限由当事人约定，但是不得超过建设用地使用权的剩余期限。</span><br><span class="line">第三百五十五条　建设用地使用权转让、互换、出资或者赠与的，应当向登记机构申请变更登记。</span><br><span class="line">第三百五十六条　建设用地使用权转让、互换、出资或者赠与的，附着于该土地上的建筑物、构筑物及其附属设施一并处分。</span><br><span class="line">第三百五十七条　建筑物、构筑物及其附属设施转让、互换、出资或者赠与的，该建筑物、构筑物及其附属设施占用范围内的建设用地使用权一并处分。</span><br><span class="line"></span><br><span class="line">第三百五十八条　建设用地使用权期限届满前，因公共利益需要提前收回该土地的，应当依据本法第二百四十三条的规定对该土地上的房屋以及其他不动产给予补偿，并退还相应的出让金。</span><br><span class="line">第三百五十九条　住宅建设用地使用权期限届满的，自动续期。续期费用的缴纳或者减免，依照法律、行政法规的规定办理。</span><br><span class="line">非住宅建设用地使用权期限届满后的续期，依照法律规定办理。该土地上的房屋以及其他不动产的归属，有约定的，按照约定；没有约定或者约定不明确的，依照法律、行政法规的规定办理。</span><br><span class="line">第三百六十条　建设用地使用权消灭的，出让人应当及时办理注销登记。登记机构应当收回权属证书。</span><br><span class="line">第三百六十一条　集体所有的土地作为建设用地的，应当依照土地管理的法律规定办理。</span><br><span class="line">第十三章　宅基地使用权</span><br><span class="line">第三百六十二条　宅基地使用权人依法对集体所有的土地享有占有和使用的权利，有权依法利用该土地建造住宅及其附属设施。</span><br><span class="line">第三百六十三条　宅基地使用权的取得、行使和转让，适用土地管理的法律和国家有关规定。</span><br><span class="line">第三百六十四条　宅基地因自然灾害等原因灭失的，宅基地使用权消灭。对失去宅基地的村民，应当依法重新分配宅基地。建设用地使用权是指由国家或集体出让或划拨给使用者在一定期间内对特定土地进行建设、开发和利用的权利。根据中华人民共和国民法典的相关规定，建设用地使用权的具体内容包括：</span><br><span class="line"></span><br><span class="line">1. **设立方式**：建设用地使用权可以通过出让或划拨的方式设立，且出让方式一般使用公开招标、拍卖等方式，特别是对于经营性用地。</span><br><span class="line"></span><br><span class="line">2. **合同内容**：建设用地使用权出让合同应包含当事人的信息、土地界址、面积、用途、使用权期限、出让金等费用及解决争议的方法。</span><br><span class="line"></span><br><span class="line">3. **登记**：建设用地使用权需向登记机构申请登记，登记后方可正式设立，并会发放权属证书。</span><br><span class="line"></span><br><span class="line">4. **合理利用和用途变更**：使用权人应合理利用土地，不得擅自改变土地用途，如需变更需经过相关行政部门的批准。</span><br><span class="line"></span><br><span class="line">5. **转让和抵押**：建设用地使用权人有权转让、出资、赠与或抵押该使用权，但需遵守法律规定。</span><br><span class="line"></span><br><span class="line">6. **使用权期限**：住宅建设用地使用权在期限届满后可以自动续期，而非住宅用地的续期则需依法办理。</span><br><span class="line"></span><br><span class="line">7. **补偿机制**：如因公共利益需要收回土地，建设用地使用权人有权获得相应的补偿。</span><br><span class="line"></span><br><span class="line">上述内容为建设用地使用权的基本信息和法律规定。</span><br><span class="line"></span><br><span class="line">&gt; Finished chain.</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;input&#x27;</span>: <span class="string">&#x27;建设用地使用权是什么&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;output&#x27;</span>: <span class="string">&#x27;建设用地使用权是指由国家或集体出让或划拨给使用者在一定期间内对特定土地进行建设、开发和利用的权利。根据中华人民共和国民法典的相关规定，建设用地使用权的具体内容包括：\n\n1. **设立方式**：建设用地使用权可以通过出让或划拨的方式设立，且出让方式一般使用公开招标、拍卖等方式，特别是对于经营性用地。\n\n2. **合同内容**：建设用地使用权出让合同应包含当事人的信息、土地界址、面积、用途、使用权期限、出让金等费用及解决争议的方法。\n\n3. **登记**：建设用地使用权需向登记机构申请登记，登记后方可正式设立，并会发放权属证书。\n\n4. **合理利用和用途变更**：使用权人应合理利用土地，不得擅自改变土地用途，如需变更需经过相关行政部门的批准。\n\n5. **转让和抵押**：建设用地使用权人有权转让、出资、赠与或抵押该使用权，但需遵守法律规定。\n\n6. **使用权期限**：住宅建设用地使用权在期限届满后可以自动续期，而非住宅用地的续期则需依法办理。\n\n7. **补偿机制**：如因公共利益需要收回土地，建设用地使用权人有权获得相应的补偿。\n\n上述内容为建设用地使用权的基本信息和法律规定。&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LangChain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chromadb向量数据库</title>
      <link href="/2025/09/23/chromadb%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2025/09/23/chromadb%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="https://docs.trychroma.com/docs/overview/introduction"><strong>chromadb</strong>官方地址:https://docs.trychroma.com/docs/overview/introduction</a></p></li><li><p><a href="https://blog.csdn.net/2201_75509689/article/details/148783957?ops_request_misc=&request_id=&biz_id=102&utm_term=chromadb&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-148783957.142%5Ev102%5Epc_search_result_base5&spm=1018.2226.3001.4187">本文大部分内容地址</a></p></li><li><p><strong>GitHub 仓库:</strong> <a href="https://github.com/chroma-core/chroma" title="https://github.com/chroma-core/chroma">https://github.com/chroma-core/chroma</a> 查看 Issues和Discussions。</p></li></ul><h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><h2 id="什么是矢量存储？"><a href="#什么是矢量存储？" class="headerlink" title="什么是矢量存储？"></a>什么是矢量存储？</h2><p>向量存储是专门为有效地存储和检索向量嵌入而设计的数据库。之所以需要它们，是因为像 SQL 这样的传统数据库<strong>没有针对存储和查询大型向量数据进行优化</strong>。</p><p>嵌入在高维空间中以数字向量格式表示数据（通常是非结构化数据，如文本）。传统的关系数据库不太适合存储和搜索这些向量表示。</p><p>向量存储可以<strong>使用相似性算法对相似的向量进行索引和快速搜索</strong>。它允许应用程序在给定目标向量查询的情况下查找相关向量。</p><p>在个性化聊天机器人的情况下，用户输入生成式 AI 模型的提示。然后，该模型使用相似性搜索算法在文档集合中搜索相似文本。然后，由此产生的信息用于生成高度个性化和准确的响应。这是通过在向量存储中嵌入和向量索引来实现的。</p><h2 id="什么是ChromaDB？"><a href="#什么是ChromaDB？" class="headerlink" title="什么是ChromaDB？"></a>什么是ChromaDB？</h2><p>ChromaDB是一个开源矢量存储，用于存储和检索矢量嵌入。它的主要用途是保存嵌入和元数据，以便以后由大型语言模型使用。此外，它还可用于文本数据的语义搜索引擎。</p><p>Chroma DB主要特点：</p><ul><li>支持不同的底层存储选项，例如用于独立的 DuckDB 或用于可扩展性的 ClickHouse。</li><li>提供 Python 和 JavaScript&#x2F;TypeScript 的 SDK。</li><li>专注于简单性、速度和支持性分析。</li></ul><p><img src="/2025/09/23/chromadb%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/file-20250918154240773.png"></p><h2 id="ChromaDB是如何工作的？"><a href="#ChromaDB是如何工作的？" class="headerlink" title="ChromaDB是如何工作的？"></a>ChromaDB是如何工作的？</h2><ol><li>首先，必须创建一个类似于关系数据库中的表的集合。默认情况下，Chroma 使用 将文本转换为嵌入，但您可以修改集合以使用其他嵌入模型。all-MiniLM-L6-v2</li><li>将具有元数据和唯一 ID 的文本文档添加到新创建的集合中。当您的收藏收到文本时，它会自动将其转换为嵌入。</li><li>通过文本或嵌入查询集合以接收相似的文档。您还可以根据元数据筛选出结果。</li></ol><p>在下一部分中，我们将使用 Chroma 和 OpenAI API 来创建我们自己的矢量数据库。</p><h2 id="ChromaDB-的核心概念"><a href="#ChromaDB-的核心概念" class="headerlink" title="ChromaDB 的核心概念"></a>ChromaDB 的核心概念</h2><ul><li><p><strong>客户端（Client）</strong>： 这是你与 ChromaDB 交互的接口。ChromaDB 支持多种部署模式，你可以用本地模式（数据存在本地文件）、客户端-服务器模式（连接远程服务器）或持久化模式（数据存到指定路径）。</p></li><li><p><strong>集合（Collection）</strong>： 集合是存储向量、文档和元数据的逻辑单元。你可以把它想象成关系数据库中的一个“表”，或者一个特定主题的文档库。你的所有相关数据都会放到一个集合里。</p></li><li><p><strong>文档（Document）</strong>： 这是你的原始数据，通常是文本。当你把文档添加到集合时，ChromaDB 会自动（或使用你指定的模型）将其转换为向量。</p></li><li><p><strong>嵌入（Embedding）</strong>： 文档的数字表示。这是语义搜索的基础。</p></li><li><p><strong>元数据（Metadata）</strong>： 附加到文档或向量上的描述性信息。比如，你存储了一篇文章的向量，它的元数据可以是文章的标题、作者、发布日期等。元数据对于过滤和查询结果非常有用。</p></li><li><p><strong>ID</strong>： 每个文档和其对应的向量都必须有一个唯一的 ID。（字符串或 UUID）</p></li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="安装Chromadb"><a href="#安装Chromadb" class="headerlink" title="安装Chromadb"></a>安装Chromadb</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!pip install chromadb</span><br></pre></td></tr></table></figure><h2 id="初始化Chroma客户端"><a href="#初始化Chroma客户端" class="headerlink" title="初始化Chroma客户端"></a>初始化Chroma客户端</h2><p>内存模式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chromadb</span><br><span class="line">client = chromadb.Client()  <span class="comment"># 使用默认的持久化目录，但默认是内存模式</span></span><br><span class="line"><span class="comment"># 或者显式指定</span></span><br><span class="line">client = chromadb.PersistentClient(path=<span class="string">&quot;/path/to/db&quot;</span>)  <span class="comment"># 指定持久化目录，但第一次使用前该目录通常不存在</span></span><br></pre></td></tr></table></figure><p>http客户端：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client = chromadb.HttpClient(host=<span class="string">&quot;localhost&quot;</span>, port=<span class="string">&quot;8000&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="创建-获取集合-Collection"><a href="#创建-获取集合-Collection" class="headerlink" title="创建&#x2F;获取集合 (Collection)"></a>创建&#x2F;获取集合 (Collection)</h2><p>集合(collection)是在chroma数据库的作用类似Mysql的表，存储向量数据（包括文档和其他源数据）的地方，下面创建一个集合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">collection = client.create_collection(</span><br><span class="line">    name=<span class="string">&quot;my_knowledge_base&quot;</span>,  <span class="comment"># 集合名称</span></span><br><span class="line">    embedding_function=embedding_fn,  <span class="comment"># 可选：指定自定义嵌入函数</span></span><br><span class="line">    metadata=&#123;<span class="string">&quot;hnsw:space&quot;</span>: <span class="string">&quot;cosine&quot;</span>&#125;  <span class="comment"># 可选：配置索引参数</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><p>embedding_function: 强烈建议提供！如果不提供，在添加数据时必须传入预计算好的向量 (embeddings 参数)。提供函数可以让 ChromaDB 自动为你添加的文本生成向量。</p></li><li><p>metadata: 可以配置集合的索引参数。例如 {“hnsw:space”: “cosine”} (余弦相似度) 或 {“hnsw:space”: “l2”} (欧氏距离)。默认通常是 “12”。</p></li></ul><p><strong>获取现有集合：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">collection = client.get_collection(</span><br><span class="line">    name=<span class="string">&quot;my_knowledge_base&quot;</span>,  <span class="comment"># 集合名称</span></span><br><span class="line">    embedding_function=embedding_fn  <span class="comment"># 如果创建时指定了，这里通常也需要指定相同的函数用于查询</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="向集合添加数据-Add-Upsert"><a href="#向集合添加数据-Add-Upsert" class="headerlink" title="向集合添加数据 (Add&#x2F; Upsert)"></a>向集合添加数据 (Add&#x2F; Upsert)</h2><p><strong>方式一：让 ChromaDB 自动生成向量 (推荐，需提供 <code>embedding_function</code>)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 定义或获取一个嵌入函数 (这里以 sentence-transformers 为例)</span></span><br><span class="line"><span class="keyword">from</span> sentence_transformers <span class="keyword">import</span> SentenceTransformer</span><br><span class="line">model = SentenceTransformer(<span class="string">&#x27;all-MiniLM-L6-v2&#x27;</span>)  <span class="comment"># 小型高效模型</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">embedding_fn</span>(<span class="params">texts: <span class="built_in">list</span>[<span class="built_in">str</span>]</span>) -&gt; <span class="built_in">list</span>[<span class="built_in">list</span>[<span class="built_in">float</span>]]:</span><br><span class="line">    <span class="comment"># ChromaDB 期望嵌入函数接收字符串列表，返回向量列表</span></span><br><span class="line">    <span class="keyword">return</span> model.encode(texts).tolist()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建集合时指定该函数，或者在 get_collection 时指定</span></span><br><span class="line">collection = client.get_collection(name=<span class="string">&quot;my_knowledge_base&quot;</span>, embedding_function=embedding_fn)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 添加数据</span></span><br><span class="line">collection.add(</span><br><span class="line">    documents=[  <span class="comment"># 原始文本 (强烈建议提供)</span></span><br><span class="line">        <span class="string">&quot;The cat sat on the mat.&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Dogs are great companions.&quot;</span>,</span><br><span class="line">        <span class="string">&quot;The sun rises in the east.&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    metadatas=[  <span class="comment"># 对应的元数据字典列表 (可选但推荐)</span></span><br><span class="line">        &#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;sentence1&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;example&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;sentence2&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;example&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;sentence3&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;fact&quot;</span>&#125;</span><br><span class="line">    ],</span><br><span class="line">    ids=[<span class="string">&quot;id1&quot;</span>, <span class="string">&quot;id2&quot;</span>, <span class="string">&quot;id3&quot;</span>]  <span class="comment"># 唯一 ID</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p> <strong>方式二：自己提供预计算好的向量 (如果不提供 <code>embedding_function</code> 或需要精细控制)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设你已经计算好向量了</span></span><br><span class="line">precomputed_embeddings = [</span><br><span class="line">    [<span class="number">0.1</span>, <span class="number">0.2</span>, ..., <span class="number">0.5</span>],  <span class="comment"># id1 的向量</span></span><br><span class="line">    [<span class="number">0.6</span>, -<span class="number">0.3</span>, ..., <span class="number">0.8</span>],  <span class="comment"># id2 的向量</span></span><br><span class="line">    [-<span class="number">0.2</span>, <span class="number">0.4</span>, ..., <span class="number">0.1</span>]   <span class="comment"># id3 的向量</span></span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line">collection.add(</span><br><span class="line">    embeddings=precomputed_embeddings,  <span class="comment"># 必须提供</span></span><br><span class="line">    documents=[...],  <span class="comment"># 可选</span></span><br><span class="line">    metadatas=[...],  <span class="comment"># 可选</span></span><br><span class="line">    ids=[<span class="string">&quot;id1&quot;</span>, <span class="string">&quot;id2&quot;</span>, <span class="string">&quot;id3&quot;</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong><code>upsert</code> 方法:</strong> 如果 <code>id</code> 已存在，则更新该条目；如果不存在，则添加新条目。参数与 <code>add</code> 相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">collection.upsert(...)  <span class="comment"># 参数同 add</span></span><br></pre></td></tr></table></figure><h2 id="查询集合-Query"><a href="#查询集合-Query" class="headerlink" title="查询集合 (Query)"></a>查询集合 (Query)</h2><p>这是另一个核心步骤。根据查询文本或向量，找到集合中最相似的条目。</p><p><strong>使用查询文本 (ChromaDB 自动用 <code>embedding_function</code> 转为向量):</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">results = collection.query(</span><br><span class="line">    query_texts=[<span class="string">&quot;Where does the sun rise?&quot;</span>],  <span class="comment"># 查询文本列表</span></span><br><span class="line">    n_results=<span class="number">2</span>,  <span class="comment"># 返回最相似的 2 个结果</span></span><br><span class="line">    <span class="comment"># where=&#123;&quot;metadata_field&quot;: &#123;&quot;$eq&quot;: &quot;value&quot;&#125;&#125;,  # 可选：基于元数据的过滤</span></span><br><span class="line">    <span class="comment"># where_document=&#123;&quot;$contains&quot;: &quot;keyword&quot;&#125;      # 可选：基于文档内容的过滤</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>使用查询向量 (自己提供):</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">query_vector = embedding_fn([<span class="string">&quot;Where does the sun rise?&quot;</span>])[<span class="number">0</span>]  <span class="comment"># 假设 embedding_fn 可用</span></span><br><span class="line">results = collection.query(</span><br><span class="line">    query_embeddings=[query_vector],  <span class="comment"># 查询向量列表</span></span><br><span class="line">    n_results=<span class="number">2</span></span><br><span class="line">    <span class="comment"># ... 同样可以加 where 和 where_document 过滤</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>理解返回结果 (results): results 是一个字典，包含：</p><ul><li><p>ids: 最相似条目的 ID 列表 (列表的列表，外层列表对应每个查询文本&#x2F;向量)。</p></li><li><p>distances: 对应的距离 (越小越相似)。</p></li><li><p>metadatas: 对应的元数据。</p></li><li><p>documents: 对应的原始文档文本。</p></li><li><p>embeddings (如果 include&#x3D;[‘embeddings’]): 对应的向量。</p></li><li><p>uris &#x2F; data (通常不常用)。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(results[<span class="string">&quot;ids&quot;</span>])      <span class="comment"># 输出: [[&#x27;id3&#x27;, &#x27;id1&#x27;]]  (对于单个查询)</span></span><br><span class="line"><span class="built_in">print</span>(results[<span class="string">&quot;documents&quot;</span>]) <span class="comment"># 输出: [[&#x27;The sun rises in the east.&#x27;, &#x27;The cat sat on the mat.&#x27;]]</span></span><br><span class="line"><span class="built_in">print</span>(results[<span class="string">&quot;distances&quot;</span>]) <span class="comment"># 输出: [[0.15, 0.87]]   (假设 id3 距离更小)</span></span><br></pre></td></tr></table></figure><h2 id="管理数据"><a href="#管理数据" class="headerlink" title="管理数据"></a>管理数据</h2><p><strong>获取 (Get):</strong> 根据 ID 获取条目。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">items = collection.get(</span><br><span class="line">    ids=[<span class="string">&quot;id1&quot;</span>, <span class="string">&quot;id2&quot;</span>],  <span class="comment"># 可选：指定 ID</span></span><br><span class="line">    <span class="comment"># where=&#123;...&#125;,        # 可选：元数据过滤</span></span><br><span class="line">    <span class="comment"># where_document=&#123;...&#125;, # 可选：文档内容过滤</span></span><br><span class="line">    <span class="comment"># limit=10,           # 可选：限制返回数量</span></span><br><span class="line">    <span class="comment"># offset=0,           # 可选：偏移量</span></span><br><span class="line">    <span class="comment"># include=[&quot;metadatas&quot;, &quot;documents&quot;, &quot;embeddings&quot;]  # 指定返回哪些字段</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># items 结构与 query 返回的单个查询结果类似 (ids, metadatas, documents, embeddings 都是列表)</span></span><br></pre></td></tr></table></figure><p><strong>更新 (Update):</strong> 更新指定 ID 的条目。需要提供要更新的字段 (<code>embeddings</code>, <code>metadatas</code>, <code>documents</code>)。未提供的字段保持不变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">collection.update(</span><br><span class="line">    ids=[<span class="string">&quot;id2&quot;</span>],</span><br><span class="line">    metadatas=[&#123;<span class="string">&quot;source&quot;</span>: <span class="string">&quot;updated_sentence2&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="string">&quot;example&quot;</span>&#125;],</span><br><span class="line">    documents=[<span class="string">&quot;Dogs are truly amazing companions.&quot;</span>]</span><br><span class="line">    <span class="comment"># 也可以更新 embeddings=[new_vector]</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>删除 (Delete):</strong> 删除指定 ID 或满足条件的条目。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按 ID 删除</span></span><br><span class="line">collection.delete(ids=[<span class="string">&quot;id1&quot;</span>])</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 按元数据条件删除</span></span><br><span class="line">collection.delete(where=&#123;<span class="string">&quot;type&quot;</span>: &#123;<span class="string">&quot;$eq&quot;</span>: <span class="string">&quot;example&quot;</span>&#125;&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 按文档内容条件删除 (谨慎使用!)</span></span><br><span class="line">collection.delete(where_document=&#123;<span class="string">&quot;$contains&quot;</span>: <span class="string">&quot;cat&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="持久化存储-重要！"><a href="#持久化存储-重要！" class="headerlink" title="持久化存储 (重要！)"></a>持久化存储 (重要！)</h2><p>默认的 <code>chromadb.Client()</code> 是纯内存的。重启 Python 程序数据就没了！必须配置持久化。</p><p><strong>使用 <code>PersistentClient</code>:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client = chromadb.PersistentClient(path=<span class="string">&quot;/path/to/db&quot;</span>)  <span class="comment"># 指定一个目录存放数据库文件</span></span><br><span class="line"><span class="comment"># 然后在这个 client 上创建的集合会自动持久化到该目录</span></span><br></pre></td></tr></table></figure><p>下次启动时，使用<strong>相同的</strong> <code>path</code> 创建 <code>PersistentClient</code>，然后 <code>get_collection</code> 就能恢复之前的数据。</p><h2 id="关键注意事项"><a href="#关键注意事项" class="headerlink" title="关键注意事项"></a>关键注意事项</h2><ol><li><p>务必指定 embedding_function: 除非你有特殊原因需要自己管理向量，否则在创建&#x2F;获取集合时指定嵌入函数是最高效和不易出错的方式。</p></li><li><p>务必持久化 (PersistentClient): 除非你明确只需要临时内存数据，否则一定要用 PersistentClient 并指定存储路径，否则辛苦添加的数据会丢失。</p></li><li><p>提供 documents: 强烈建议在 add 时提供原始文档 (documents)。这样在 query 时，ChromaDB 可以直接返回最相似的文本内容，无需你再根据 ID 去外部查找，非常方便。</p></li><li><p>善用 metadatas: 元数据是强大的过滤工具。提前规划好你需要哪些元数据字段（如 source, author, date, category），并在添加数据时填充。查询时用 where 参数进行过滤可以显著缩小搜索范围，提高速度和精度。</p></li><li><p>理解距离 (Distance): query 返回的 distances 值取决于集合创建时配置的 hnsw:space。”l2” 是欧氏距离 (越小越好)，”cosine” 是余弦相似度距离 (0 表示完全同向，1 表示正交，2 表示完全反向，通常也是越小表示越相似)。注意看文档确认你使用的空间和距离含义。</p></li><li><p>嵌入模型的选择至关重要: ChromaDB 只是存储和检索向量。向量的质量完全取决于你使用的嵌入模型。对于文本，像 all-MiniLM-L6-v2 (本地), text-embedding-3-small (OpenAI API) 都是不错的起点。选择适合你任务和数据量的模型。</p></li><li><p>upsert 是更新数据的好方法: 比先 delete 再 add 更简洁高效。</p></li><li><p>过滤语法: where 和 where_document 使用类似 MongoDB 的查询语法。查看 ChromaDB 文档学习具体操作符 ($eq, $ne, $gt, $gte, $lt, $lte, $in, $nin, $contains 等)。</p></li><li><p>性能考量:</p><ol><li><p>数据量很大时，查询速度会变慢。确保 n_results 设置合理。</p></li><li><p>ChromaDB 在添加数据时会自动构建索引（默认是 HNSW）。大量数据添加后，索引构建可能需要时间。</p></li><li><p>对于生产级超大向量数据集，可能需要考虑更专业的向量数据库（如 Milvus, Pinecone, Weaviate 等），但 ChromaDB 对于中小规模应用和原型开发非常出色。</p></li></ol></li></ol><h1 id="完整流程"><a href="#完整流程" class="headerlink" title="完整流程"></a>完整流程</h1><h2 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">chroma-llm-demo/</span><br><span class="line">├── main.py</span><br><span class="line">├── .env</span><br><span class="line">├── requirements.txt</span><br><span class="line">└── docs/</span><br><span class="line">    ├── biology.txt</span><br><span class="line">    ├── computer.txt</span><br><span class="line">    └── history.txt</span><br></pre></td></tr></table></figure><h2 id="biology-txt"><a href="#biology-txt" class="headerlink" title="biology.txt"></a>biology.txt</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">一、生物的基本特征  </span><br><span class="line">所有生物都具备 4 个核心特征，是区分生物与非生物的关键：  </span><br><span class="line">新陈代谢：生物与环境持续交换物质和能量的过程，分为 “同化作用”（如植物通过光合作用合成有机物）和 “异化作用”（如动物通过呼吸分解有机物释放能量），一旦停止，生命即终止。  </span><br><span class="line">繁殖能力：生物能产生后代延续物种，分无性繁殖（如细菌分裂、酵母菌出芽，后代遗传物质与亲代一致）和有性繁殖（如人类、开花植物，后代结合父母双方遗传物质，具有多样性）。  </span><br><span class="line">应激性：生物能对外界刺激作出反应，如含羞草受触碰闭合叶片（物理刺激）、植物向光生长（向光性，对光照刺激的适应）。  </span><br><span class="line">遗传与变异：遗传保证物种稳定性（如狗生狗、猫生猫），变异推动物种进化（如长颈鹿祖先因脖子长度差异，长脖子个体更易获取高处树叶，逐渐演化成现物种）。  </span><br><span class="line">二、生物的核心分类  </span><br><span class="line">根据细胞结构，生物可分为两大类，这是生物学分类的基础框架：  </span><br><span class="line">原核生物：无成形细胞核（遗传物质裸露在细胞质中），结构简单，如细菌（大肠杆菌、乳酸菌）、蓝藻（能进行光合作用的单细胞生物，是最早产生氧气的生物之一）。  </span><br><span class="line">真核生物：有成形细胞核（遗传物质被核膜包裹），结构更复杂，包含所有多细胞生物及部分单细胞生物，如动物（人类、昆虫）、植物（树木、花草）、真菌（蘑菇、酵母菌）。  </span><br><span class="line">三、生态系统的基本组成  </span><br><span class="line">生态系统是生物与环境的统一整体，核心成分包括 3 类：  </span><br><span class="line">生产者：主要是绿色植物，通过光合作用将太阳能转化为化学能，为整个生态系统提供能量基础。  </span><br><span class="line">消费者：依赖生产者获取能量，如草食动物（兔子）、肉食动物（狐狸）。  </span><br><span class="line">分解者：主要是细菌、真菌，将动植物遗体分解为无机物（如二氧化碳、无机盐），回归环境供生产者再利用，完成物质循环。</span><br></pre></td></tr></table></figure><h2 id="computer-txt"><a href="#computer-txt" class="headerlink" title="computer.txt"></a>computer.txt</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">一、计算机基础构成  </span><br><span class="line">计算机核心由 “硬件 + 软件” 组成，二者协同实现功能：  </span><br><span class="line">硬件系统：物理设备，核心部件包括：  </span><br><span class="line">CPU（中央处理器）：相当于 “大脑”，负责运算与指令控制；  </span><br><span class="line">内存（RAM）：临时存储数据，断电后数据丢失，影响运行速度；  </span><br><span class="line">存储设备（硬盘 / SSD）：长期保存数据，如文档、软件等。  </span><br><span class="line">软件系统：驱动硬件的程序，分两类：  </span><br><span class="line">系统软件（如 Windows、macOS）：管理硬件，为其他软件提供运行环境；  </span><br><span class="line">应用软件（如 Office、微信）：满足特定需求，如办公、通讯。  </span><br><span class="line">二、关键发展节点  </span><br><span class="line">计算机发展历经四次 “革命”，推动技术飞跃：  </span><br><span class="line">1946 年：首台电子计算机 ENIAC：诞生于美国，用电子管组成，体积庞大（占地 167 平方米），标志计算机时代开启；  </span><br><span class="line">1950 年代：晶体管替代电子管：计算机体积缩小、功耗降低，进入 “第二代计算机”；  </span><br><span class="line">1969 年：互联网雏形 ARPANET：美国军方研发，后演变为全球互联网，打破信息传播边界；  </span><br><span class="line">2007 年：智能手机普及：整合计算机功能（如运算、联网），推动 “移动计算” 时代到来。  </span><br><span class="line">三、核心应用领域  </span><br><span class="line">计算机已渗透多场景，改变生产生活：  </span><br><span class="line">办公自动化：通过 Office、钉钉等软件，实现文档处理、远程协作，提升工作效率；  </span><br><span class="line">人工智能（AI）：依托计算机算力，实现图像识别（如人脸识别）、语音助手（如 Siri）、自动驾驶等智能功能；  </span><br><span class="line">工业互联网：计算机与工业设备结合，实现生产线自动化控制、设备故障预警，推动 “智能制造” 升级。</span><br></pre></td></tr></table></figure><h2 id="history-txt"><a href="#history-txt" class="headerlink" title="history.txt"></a>history.txt</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">一、人类早期文明摇篮（公元前 3500 年 - 公元前 500 年）  </span><br><span class="line">四大文明古国奠定人类文明基石，均发源于大河流域：  </span><br><span class="line">古埃及（尼罗河）：发明象形文字，建造金字塔（法老陵墓，体现天文与工程智慧），创立太阳历（按尼罗河泛滥周期制定，为公历雏形）。  </span><br><span class="line">古巴比伦（两河流域）：颁布《汉谟拉比法典》（迄今已知世界最早成文法典，强调 “以眼还眼” 的司法原则），发明楔形文字。  </span><br><span class="line">古印度（印度河 - 恒河）：创立种姓制度（分婆罗门、刹帝利等四级，影响社会结构千年），诞生佛教（释迦牟尼创立，主张 “众生平等”）。  </span><br><span class="line">中国（黄河 - 长江）：夏商周三代确立分封制与宗法制，青铜文明鼎盛（如司母戊鼎），甲骨文成为最早成熟文字。  </span><br><span class="line">二、中古时期的文明交融（公元 5 世纪 - 15 世纪）  </span><br><span class="line">东西方文明通过交流互鉴发展：  </span><br><span class="line">东方：中国唐朝国力强盛，长安成为国际都会，玄奘西行取经（促进佛教中国化），鉴真东渡日本（传播唐文化，推动日本大化改新）；阿拉伯帝国崛起，成为东西方桥梁（翻译希腊典籍、传播中国造纸术与印度数字）。  </span><br><span class="line">西方：欧洲处于中世纪，基督教主导社会，庄园经济为基础；12 世纪后城市兴起（如威尼斯、佛罗伦萨），为日后文艺复兴埋下伏笔。  </span><br><span class="line">三、近代历史的转折节点（15 世纪 - 20 世纪初）  </span><br><span class="line">关键事件推动世界格局巨变：  </span><br><span class="line">新航路开辟（15 世纪末）：哥伦布发现美洲、达・伽马抵达印度，打破世界孤立状态，开启全球殖民时代。  </span><br><span class="line">工业革命（18 世纪 60 年代起）：英国率先以蒸汽机为核心，从手工生产转向机器生产，推动生产力飞跃，催生工业资产阶级与无产阶级。  </span><br><span class="line">辛亥革命（1911 年）：中国近代史上首次完全意义上的资产阶级革命，推翻清朝统治，结束两千多年君主专制，传播民主共和理念。</span><br></pre></td></tr></table></figure><h2 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chromadb  </span><br><span class="line">openai</span><br></pre></td></tr></table></figure><h2 id="env"><a href="#env" class="headerlink" title=".env"></a>.env</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 下面的api_key去硅基流动官网申请</span><br><span class="line">SILICONFLOW_API_KEY=&#x27;sk-XXXXXXpdeijbbauaaawhgjexgwxarqpymzgocwvtXXXXXXXXX&#x27;  </span><br><span class="line">BASE_URL=&#x27;https://api.siliconflow.cn/v1&#x27;</span><br></pre></td></tr></table></figure><h2 id="main-py文件"><a href="#main-py文件" class="headerlink" title="main.py文件"></a>main.py文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">import</span> requests  </span><br><span class="line"><span class="keyword">import</span> json  </span><br><span class="line"><span class="keyword">import</span> chromadb  </span><br><span class="line"><span class="keyword">from</span> chromadb <span class="keyword">import</span> PersistentClient  </span><br><span class="line">  </span><br><span class="line">PERSIST_DIR = <span class="string">&quot;chroma_db&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 初始化持久化客户端  </span></span><br><span class="line">client = PersistentClient(path=PERSIST_DIR)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 获取集合  </span></span><br><span class="line">collection = client.get_or_create_collection(name=<span class="string">&quot;documents&quot;</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> dotenv  </span><br><span class="line">dotenv.load_dotenv()  </span><br><span class="line"><span class="comment"># —— 配置 —— #</span></span><br><span class="line">SILICONFLOW_API_KEY = os.getenv(<span class="string">&#x27;SILICONFLOW_API_KEY&#x27;</span>)  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">EMBEDDING_MODEL = <span class="string">&quot;BAAI/bge-large-zh-v1.5&quot;</span>  </span><br><span class="line">SILICONFLOW_EMBED_URL = <span class="string">&quot;https://api.siliconflow.cn/v1/embeddings&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 向量数据库目录  </span></span><br><span class="line">PERSIST_DIR = <span class="string">&quot;chroma_db&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># —— 初始化 Chroma —— #</span></span><br><span class="line">client = PersistentClient(path=PERSIST_DIR)  </span><br><span class="line">collection = client.get_or_create_collection(name=<span class="string">&quot;documents&quot;</span>)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># —— 辅助函数：调用 SiliconFlow 获取 embedding —— #</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_embedding_siliconflow</span>(<span class="params">text: <span class="built_in">str</span>, model: <span class="built_in">str</span> = EMBEDDING_MODEL</span>):  </span><br><span class="line">    <span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">    调用硅基流动 API 生成一个 embedding 向量。  </span></span><br><span class="line"><span class="string">    返回一个 list[float]。  </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>    headers = &#123;  </span><br><span class="line">        <span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;Bearer <span class="subst">&#123;SILICONFLOW_API_KEY&#125;</span>&quot;</span>,  </span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>  </span><br><span class="line">    &#125;  </span><br><span class="line">    data = &#123;  </span><br><span class="line">        <span class="string">&quot;model&quot;</span>: model,  </span><br><span class="line">        <span class="string">&quot;input&quot;</span>: text  </span><br><span class="line">    &#125;  </span><br><span class="line">    resp = requests.post(SILICONFLOW_EMBED_URL, headers=headers, json=data)  </span><br><span class="line">    <span class="keyword">if</span> resp.status_code != <span class="number">200</span>:  </span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">f&quot;Embedding 请求失败，状态码: <span class="subst">&#123;resp.status_code&#125;</span>, 内容: <span class="subst">&#123;resp.text&#125;</span>&quot;</span>)  </span><br><span class="line">    resp_json = resp.json()  </span><br><span class="line">    <span class="comment"># resp_json[&quot;data&quot;] 是一个列表，每项是 &#123;&quot;object&quot;:&quot;embedding&quot;, &quot;embedding&quot;:[...], &quot;index&quot;:...&#125;    </span></span><br><span class="line">    embedding_vec = resp_json[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>][<span class="string">&quot;embedding&quot;</span>]  </span><br><span class="line">    <span class="keyword">return</span> embedding_vec  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># —— 准备文档 —— #</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_documents</span>(<span class="params">doc_paths</span>):  </span><br><span class="line">    docs = []  </span><br><span class="line">    <span class="keyword">for</span> path <span class="keyword">in</span> doc_paths:  </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">            text = f.read()  </span><br><span class="line">        source = os.path.basename(path)  </span><br><span class="line">        docs.append(&#123;<span class="string">&quot;id&quot;</span>: path, <span class="string">&quot;text&quot;</span>: text, <span class="string">&quot;source&quot;</span>: source&#125;)  </span><br><span class="line">    <span class="keyword">return</span> docs  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># —— 插入文档到 Chroma —— #</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index_documents</span>(<span class="params">documents, chunk_size=<span class="number">500</span>, overlap=<span class="number">50</span></span>):  </span><br><span class="line">    <span class="keyword">for</span> doc <span class="keyword">in</span> documents:  </span><br><span class="line">        text = doc[<span class="string">&quot;text&quot;</span>]  </span><br><span class="line">        <span class="comment"># 简单分块方式  </span></span><br><span class="line">        chunks = []  </span><br><span class="line">        i = <span class="number">0</span>  </span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(text):  </span><br><span class="line">            chunk = text[i:i + chunk_size]  </span><br><span class="line">            chunks.append(chunk)  </span><br><span class="line">            i += chunk_size - overlap  <span class="comment"># 用重叠减少断句问题  </span></span><br><span class="line">        <span class="keyword">for</span> idx, chunk <span class="keyword">in</span> <span class="built_in">enumerate</span>(chunks):  </span><br><span class="line">            embedding_vec = get_embedding_siliconflow(chunk)  </span><br><span class="line">            collection.add(  </span><br><span class="line">                documents=[chunk],  </span><br><span class="line">                metadatas=[&#123;<span class="string">&quot;source&quot;</span>: doc[<span class="string">&quot;source&quot;</span>]&#125;],  </span><br><span class="line">                ids=[<span class="string">f&quot;<span class="subst">&#123;doc[<span class="string">&#x27;id&#x27;</span>]&#125;</span>_chunk_<span class="subst">&#123;idx&#125;</span>&quot;</span>],  </span><br><span class="line">                embeddings=[embedding_vec]  </span><br><span class="line">            )  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># —— 查询与问答 —— #</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_and_answer</span>(<span class="params">question: <span class="built_in">str</span>, top_k: <span class="built_in">int</span> = <span class="number">3</span></span>):  </span><br><span class="line">    <span class="comment"># 1. 对问题做 embedding    </span></span><br><span class="line">    q_emb = get_embedding_siliconflow(question)  </span><br><span class="line">    <span class="comment"># 2. 用 Chroma 搜 nearest 文档块  </span></span><br><span class="line">    results = collection.query(  </span><br><span class="line">        query_embeddings=[q_emb],  </span><br><span class="line">        n_results=top_k  </span><br><span class="line">    )  </span><br><span class="line">    docs = results[<span class="string">&#x27;documents&#x27;</span>][<span class="number">0</span>]  <span class="comment"># top_k 文档块内容  </span></span><br><span class="line">    sources = [md[<span class="string">&quot;source&quot;</span>] <span class="keyword">for</span> md <span class="keyword">in</span> results[<span class="string">&#x27;metadatas&#x27;</span>][<span class="number">0</span>]]  </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 3. 用这些作为 context 生成 prompt 给 LLM    # 这里示例用一个伪接口，你可以换成 OpenAI 或者也可以用硅基流动的 Chat Completion 接口（如果有的话）  </span></span><br><span class="line">    prompt = <span class="string">&quot;根据以下内容回答问题：\n\n&quot;</span>  </span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> docs:  </span><br><span class="line">        prompt += d + <span class="string">&quot;\n\n&quot;</span>  </span><br><span class="line">    prompt += <span class="string">f&quot;问题：<span class="subst">&#123;question&#125;</span>\n答案：&quot;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 4. 调用某个 LLM API 返回答案  </span></span><br><span class="line">    <span class="comment"># 举例假设我们用 OpenAI 的 ChatGPT API，这里只是示例  </span></span><br><span class="line">    <span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI  </span><br><span class="line">    client = OpenAI(  </span><br><span class="line">        api_key=os.getenv(<span class="string">&#x27;SILICONFLOW_API_KEY&#x27;</span>),  </span><br><span class="line">        base_url=os.getenv(<span class="string">&#x27;BASE_URL&#x27;</span>)  </span><br><span class="line">    )  </span><br><span class="line">  </span><br><span class="line">    resp = client.chat.completions.create(  </span><br><span class="line">        model=<span class="string">&quot;deepseek-ai/DeepSeek-V3&quot;</span>,  </span><br><span class="line">        messages=[  </span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一个知识问答助手&quot;</span>&#125;,  </span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt&#125;  </span><br><span class="line">        ],  </span><br><span class="line">        temperature=<span class="number">0</span>  </span><br><span class="line">    )  </span><br><span class="line">  </span><br><span class="line">    answer = resp.choices[<span class="number">0</span>].message.content  </span><br><span class="line">    <span class="keyword">return</span> answer  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># —— 主流程 —— #if __name__ == &quot;__main__&quot;:  </span></span><br><span class="line">    <span class="comment"># 加载你的文本文件  </span></span><br><span class="line">    docs = load_documents([<span class="string">&quot;docs/biology.txt&quot;</span>, <span class="string">&quot;docs/computer.txt&quot;</span>, <span class="string">&quot;docs/history.txt&quot;</span>])  </span><br><span class="line">    <span class="comment"># 索引它们  </span></span><br><span class="line">    index_documents(docs)  </span><br><span class="line">    <span class="comment"># 测试查询  </span></span><br><span class="line">    question = <span class="string">&quot;请描述计算机是如何通过硬件与软件协同工作的。&quot;</span>  </span><br><span class="line">    answer = query_and_answer(question)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;问题：&quot;</span>, question)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;答案：&quot;</span>, answer)  </span><br><span class="line">  </span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">问题： 请描述计算机是如何通过硬件与软件协同工作的。</span><br><span class="line">答案： 计算机通过硬件与软件协同工作，实现高效的数据处理和任务执行。具体协同过程如下：</span><br><span class="line"></span><br><span class="line">1. **硬件提供基础支持**  </span><br><span class="line">   - **CPU**作为核心运算部件，执行软件指令（如数学计算、逻辑判断）；  </span><br><span class="line">   - **内存**临时存储运行中的程序和数据，供CPU快速调用；  </span><br><span class="line">   - **存储设备**（如硬盘）长期保存系统软件、应用软件及用户文件；  </span><br><span class="line">   - 输入/输出设备（如键盘、显示器）实现人机交互。</span><br><span class="line"></span><br><span class="line">2. **软件驱动硬件功能**  </span><br><span class="line">   - **系统软件**（如Windows）直接管理硬件资源：  </span><br><span class="line">     - 分配CPU任务、调度内存空间、控制外设操作；  </span><br><span class="line">     - 为应用软件提供运行环境（如调用打印机驱动）。  </span><br><span class="line">   - **应用软件**（如Office）通过系统软件间接使用硬件：  </span><br><span class="line">     - 用户编辑文档时，软件将操作转化为CPU可执行的指令；  </span><br><span class="line">     - 数据经内存暂存后，由用户选择保存至硬盘。</span><br><span class="line"></span><br><span class="line">3. **协同示例**  </span><br><span class="line">   当运行视频会议软件（如钉钉）：  </span><br><span class="line">   - 软件调用CPU处理视频编码、内存缓存实时数据；  </span><br><span class="line">   - 系统软件协调摄像头（输入）和扬声器（输出）硬件；  </span><br><span class="line">   - 网络模块通过网卡硬件传输数据，完成远程协作。</span><br><span class="line"></span><br><span class="line">这种“硬件执行底层操作+软件调度资源与应用逻辑”的协作模式，使计算机能灵活适应从办公到人工智能的多样化需求。</span><br><span class="line"></span><br><span class="line">进程已结束，退出代码为 0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> chroma </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逐层分解Transformer</title>
      <link href="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/"/>
      <url>/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/</url>
      
        <content type="html"><![CDATA[<h1 id="Transformer整体结构"><a href="#Transformer整体结构" class="headerlink" title="Transformer整体结构"></a>Transformer整体结构</h1><p>下面的<strong>Transformer</strong>的整体结构，下图是Transformer用与中英文翻译的整体结构：</p><p><img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919095616702.png"></p><blockquote><p>[!notice]<br>可以看到==Transformer==由==Encoder==和==Decoder==两个部分组成，Encoder和Decoder都包含6个==block==。</p></blockquote><ul><li>Transformer的工作流程大体如下:<ul><li><strong>第一步</strong>：获取输入句子的每一个单词的表示<strong>向量X</strong>,X由单词的 <code>Embedding</code>(Embedding就是从原始数据提取出来的<code>Feature</code>)和单词位置的<code> Embedding</code>相加得到。<br> <img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919100812182.png"></li><li><strong>第二步</strong>：将得到的单词表示<strong>向量矩阵</strong>（如上图所示，每一行是一个单词的表示）传入<code> Encoder</code>中，经过6个<code>Encoder block</code>(后可以得到句子所有单词的编码信息矩阵C,如下图。单词向量矩阵用<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="5.097ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 2253.1 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="TeXAtom" transform="translate(861,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(600,0)"><g data-mml-node="mo"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g></g><g data-mml-node="mi" transform="translate(1378,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></g></g></svg></mjx-container>表示，n是句子中单词个数，d是表示向量的维度<code>( d=512)</code>。每一个<code>Encoder block</code>输出的矩阵维度与输入完全一致。<br>  <img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919101601971.png" alt="300"></li><li><strong>第三步</strong>：将Encoder输出的<strong>编码信息矩阵C</strong>传递到<code>Decoder</code>中，<code>Decoder</code>依次会根据当前翻译过的单词<code>1~i</code>翻译下一个单词<code>i+1</code>，如下图所示。在使用的过程中，翻译到单词<code>i+1</code>的时候需要通过<code>Mask</code>(掩盖)操作遮盖住<code>i+1</code>之后的单词。<br>   <img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919101845177.png"><blockquote><p>[!note]<br>上图<code>Decoder</code>接收了 <code>Encoder</code>的<strong>编码矩阵C</strong>,然后首先输入一个翻译开始符”&lt;Begin&gt;”,预测第一个单词”I”;然后输入翻译开始符”&lt;Begin&gt;”和单词”I”预测单词”have”,以此类推。这是Transformer使用时候的大致流程，接下来是里面各个部分的细节。</p></blockquote></li></ul></li></ul><h1 id="Transformer的输入"><a href="#Transformer的输入" class="headerlink" title="Transformer的输入"></a>Transformer的输入</h1><blockquote><p>[!note]<br><strong>Transformer</strong>中单词的输入表示<strong>x</strong>由<code>单词Embedding</code>和<code>位置Embedding(Positional Encoding)</code>相加得到。</p></blockquote><p><img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919102338351.png"></p><h2 id="单词Embedding"><a href="#单词Embedding" class="headerlink" title="单词Embedding"></a>单词<code>Embedding</code></h2><p><code>单词的Embedding</code>有很多种方式可以获取，例如可以采用<strong>Word2Vec</strong>、<strong>Glove</strong>等算法预训练得到，也可以在<code>Transformer</code>中训练得到。</p><h2 id="位置Embedding"><a href="#位置Embedding" class="headerlink" title="位置Embedding"></a>位置<code>Embedding</code></h2><blockquote><p>[!notice]<br><code>Transformer</code>中除了单词的<strong>Embedding</strong>,还需要使用位置Embedding表示单词出现在句子中的位置。因为Transformer==不采用RNN的结构==，而是使用全局信息，不能利用单词的顺序信息，而这部分信息对于<strong>NLP</strong>来说非常重要。所以<strong>Transformer</strong>中使用位置 <strong>Embedding</strong>保存单词在序列中的相对或绝对位置。</p></blockquote><p>位置Embedding用<strong>PE</strong>表示，<strong>PE</strong>的维度与单词<strong>Embedding</strong>是一样的。PE可以通过训练得到，也可以使用某种公式计算得到。在Transformer中采用了后者<br>计算公式如下：</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.8ex;" xmlns="http://www.w3.org/2000/svg" width="30.16ex" height="2.934ex" role="img" focusable="false" viewBox="0 -943.3 13330.8 1296.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="msub" transform="translate(751,0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="TeXAtom" transform="translate(771,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(892,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1377,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1846,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(2124,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(2624,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2969,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4224.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(5280,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(5749,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6094,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6694,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(892,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1377,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1846,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msup" transform="translate(2346,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2000,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(2533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(845,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(1345,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6247.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.8ex;" xmlns="http://www.w3.org/2000/svg" width="32.144ex" height="2.934ex" role="img" focusable="false" viewBox="0 -943.3 14207.5 1296.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="msub" transform="translate(751,0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="TeXAtom" transform="translate(771,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(892,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1377,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1846,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(2124,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(2624,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2969,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3747,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4247,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5127.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(6183.7,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(6616.7,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(7101.7,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7570.7,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(892,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1377,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1846,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="msup" transform="translate(2346,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(2000,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(2533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(845,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(1345,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6247.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></svg></mjx-container></p><p>其中，<code>pos表示单词在句子中的位置</code>，<code>d表示PE的维度（与词Embedding一样）</code>，<code>2i表示偶数的维度</code>，<code>2i+1表示奇数维度（即21≤d,21+1≤d)</code>。使用这种公式计算PE有以下的好处：</p><blockquote><p>[!note]</p><ul><li>使<strong>PE</strong>能够适应比<strong>训练集</strong>里面所有句子更长的句子，假设训练集里面最长的句子是有20个单词，突然来了一个长度为21的句子，则使用公式计算的方法可以计算出第21位的 <strong>Embedding</strong>。</li><li><strong>可以让模型容易地计算出相对位置</strong>，对于固定长度的间距k,PE(pos+k)**可以用PE(pos)计算得到。 因为</li><li>Sin(A+B)=Sin(A)Cos(B)+Cos(A)Sin(B),</li><li>Cos(A+B)= Cos(A)Cos(B)-Sin(A)Sin(B)。</li></ul></blockquote><h1 id="Self-Attention-自注意力机制"><a href="#Self-Attention-自注意力机制" class="headerlink" title="Self-Attention(自注意力机制)"></a>Self-Attention(自注意力机制)</h1><p>Transformer的内部结构图</p><ul><li>左侧为<strong>Encoder block</strong></li><li>右侧为<strong>Decoder block</strong></li><li>红色圈中的部分为<code>Multi-Head Attention</code>,是由多个<code>Self-Attention</code>组成的<br><img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919103720183.png" alt="500"></li></ul><ol><li>可以看到Encoder block包含一个`Multi- Head Attention </li><li>而Decoder block包含两个 <code>Multi- Head Attention</code>(其中有一个用到</li><li><code>Multi--Head Attention</code>上方还包括一个<strong>Add&amp;Norm</strong>层 </li><li>Add表示残差连接<code>(Residual Connection)</code>用于防止网络退化， </li><li>Norm表示<code>Layer Normalization</code>,用于对每一层的激活值进行<strong>归一化。</strong></li></ol><p>因为<strong>Self-Attention</strong>是Transformer的重点，所以我们重点关注Multi-Head Attention以及 <strong>Self-Attention</strong>,首先详细了解一下<strong>Self-Attention</strong>的内部逻辑。</p><h2 id="self-Attention结构"><a href="#self-Attention结构" class="headerlink" title="self-Attention结构"></a>self-Attention结构</h2><p><img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919104317524.png" alt="300"><br>上图是<code>Self-Attention</code>的结构，在计算的时候需要用到矩阵<strong>Q(查询)，K(键值)，V(值)<strong>。在实际中， Self-Attention接收的是输入（单词的表示向量x组成的矩阵<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.928ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 852 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container>）或者上一个Encoder block的输出。而 <strong>Q,K,V</strong>正是通过<code>Self-Attention</code>的输入进行</strong>线性变换</strong>得到的。</p><h2 id="Q-K-V的计算"><a href="#Q-K-V的计算" class="headerlink" title="Q,K,V的计算"></a>Q,K,V的计算</h2><blockquote><p>[!note]<br>Self-Attention的输入用<strong>矩阵X</strong>进行表示，则可以使用<strong>线性变阵矩阵</strong>==WQ,WK,WV==计算得到<strong>Q,K,V</strong>。计算如下图所示，注意X,Q,K,V的每一行都表示一个单词。</p></blockquote><hr><p><img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919104701376.png" alt="300"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># self attention实现  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> torch  </span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Self_Attention</span>(nn.Module):  </span><br><span class="line">    <span class="comment"># input : batch_size * seq_len * input_dim  </span></span><br><span class="line">    <span class="comment"># q : batch_size * input_dim * dim_k    # k : batch_size * input_dim * dim_k    # v : batch_size * input_dim * dim_v  </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_dim, dim_k,dim_v</span>):  </span><br><span class="line">        <span class="built_in">super</span>(Self_Attention, <span class="variable language_">self</span>).__init__()  </span><br><span class="line">        <span class="variable language_">self</span>.q = nn.Linear(input_dim, dim_k)  </span><br><span class="line">        <span class="variable language_">self</span>.k = nn.Linear(input_dim, dim_k)  </span><br><span class="line">        <span class="variable language_">self</span>.v = nn.Linear(input_dim, dim_v)  </span><br><span class="line">        <span class="variable language_">self</span>._norm_fact = <span class="number">1</span>/sqrt(dim_k)  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):  </span><br><span class="line">        Q = <span class="variable language_">self</span>.q(x) <span class="comment"># Q : batch_size * input_dim * dim_k  </span></span><br><span class="line">        K = <span class="variable language_">self</span>.k(x) <span class="comment"># K : batch_size * input_dim * dim_k  </span></span><br><span class="line">        V = <span class="variable language_">self</span>.v(x) <span class="comment"># V : batch_size * input_dim * dim_v  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment"># Q * K.T() # batch_size * seq_len * seq_len        atten = nn.Softmax(  </span></span><br><span class="line">            dim=-<span class="number">1</span>)(torch.bmm(Q, K.permute(<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>)))*<span class="variable language_">self</span>._norm_fact  </span><br><span class="line">          </span><br><span class="line">        <span class="comment"># Q * K.T() * V # batch_size * seq_len * dim_v  </span></span><br><span class="line">        output = torch.bmm(atten, V)  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> output  </span><br><span class="line">  </span><br><span class="line">X = torch.randn(<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>)  </span><br><span class="line"><span class="built_in">print</span>(X)  </span><br><span class="line">self_attn = Self_Attention(<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>)  </span><br><span class="line">res = self_attn(X)  </span><br><span class="line"><span class="built_in">print</span>(res.shape)</span><br></pre></td></tr></table></figure><h2 id="Self-Attention的输出"><a href="#Self-Attention的输出" class="headerlink" title="Self-Attention的输出"></a>Self-Attention的输出</h2><p>得到矩阵<strong>Q,K,V</strong>之后就可以计算出<code>Self-Attention</code>的输出了，计算的公式如下：</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.308ex;" xmlns="http://www.w3.org/2000/svg" width="40.549ex" height="5.741ex" role="img" focusable="false" viewBox="0 -1517.7 17922.7 2537.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(750,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1111,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1472,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1938,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2538,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(2899,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3244,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(3729,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4329,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4718,0)"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(5509,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(5953.7,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mo" transform="translate(6842.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(7287.3,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mo" transform="translate(8056.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(8723.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(9778.9,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(10247.9,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(10732.9,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(11282.9,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(11643.9,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(12521.9,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(13050.9,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(13622.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mfrac" transform="translate(14011.9,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="msup" transform="translate(791,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(974,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g><g data-mml-node="msqrt" transform="translate(509.7,-855.6)"><g transform="translate(853,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(462,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g><g data-mml-node="mo" transform="translate(0,35.6)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="880.4" height="60" x="853" y="775.6"></rect></g><rect width="2512.8" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(16764.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(17153.7,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.198ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 971.4 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></svg></mjx-container>是Q，K矩阵的列数，即向量维度</p><blockquote><p>[!note]<br>公式中计算矩阵<strong>Q</strong>和<strong>K</strong>每一行向量的内积，为了防止内积过大，因此除以<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.198ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 971.4 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></g></svg></mjx-container>的平方根。<strong>Q乘以K</strong>的转置后，得到的矩阵行列数都为<strong>n</strong>，<strong>n</strong>为句子单词数，这个矩阵可以表示单词之间的 <strong>attention</strong>强度。下图为Q乘以KT，1234表示的是句子中的单词。</p></blockquote><p><img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919143423005.png"><br>得到<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="5.233ex" height="2.343ex" role="img" focusable="false" viewBox="0 -841.7 2312.8 1035.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="msup" transform="translate(791,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(974,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></g></svg></mjx-container>之后，使用<strong>Softmax</strong>计算每一个单词对于其他单词的<strong>attention</strong>系数，公式中的 <strong>Softmax</strong>是对矩阵的每一行进行Softmax,即每一行的和都变为1.<br><img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919143610332.png" alt="500"><br>得到<code>Softmax</code>矩阵之后可以和V相乘，得到最终的输出Z。<br><img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919152652494.png" alt="500"><br>上图中<code>Softmax</code>矩阵的第1行表示单词1与其他所有单词的<code>attention</code>系数，最终单词1的输出 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.533ex" height="1.885ex" role="img" focusable="false" viewBox="0 -683 1119.6 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mn" transform="translate(716,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container>等于所有单词i的值<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.059ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 910 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>根据<code>attention</code>系数的比例加在一起得到，如下图所示：<br><img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919152824548.png" alt="500"></p><h2 id="Muti-Head-Attention"><a href="#Muti-Head-Attention" class="headerlink" title="Muti-Head Attention"></a>Muti-Head Attention</h2><p>在上一步，我们已经知道怎么通过<code>Self-Attention</code><strong>计算得到输出矩阵Z</strong>，而<code>Multi-Head Attention</code>是由多个Self-Attention组合形成的，下图是论文中Multi-HeadAttention的结构图。<br><img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919152953287.png" alt="500"><br>从上图可以看到<code>Multi-Head Attention</code>包含多个<strong>Self-Attention</strong>层，首先将输入<strong>X</strong>分别传递到<strong>h</strong>个不同的Self-Attention中，计算得到<strong>h</strong>个输出矩阵<strong>Z</strong>。下图是<strong>h=8</strong>时候的情况，此时会得到8个输出<strong>矩阵Z</strong>。</p><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Muti-head Attention 机制的实现  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt  </span><br><span class="line"><span class="keyword">import</span> torch  </span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Self_Attention_Muti_Head</span>(nn.Module):  </span><br><span class="line">    <span class="comment"># input : batch_size * seq_len * input_dim  </span></span><br><span class="line">    <span class="comment"># q : batch_size * input_dim * dim_k    # k : batch_size  * input_dim * dim_k    # v : batch_size * input_dim * dim_v  </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,input_dim,dim_k,dim_v,nums_head</span>):  </span><br><span class="line">        <span class="built_in">super</span>(Self_Attention_Muti_Head,<span class="variable language_">self</span>).__init__()  </span><br><span class="line">        <span class="keyword">assert</span> dim_k%nums_head==<span class="number">0</span>  </span><br><span class="line">        <span class="keyword">assert</span> dim_v%nums_head==<span class="number">0</span>  </span><br><span class="line">        <span class="variable language_">self</span>.q = nn.Linear(input_dim,dim_k)  </span><br><span class="line">        <span class="variable language_">self</span>.k = nn.Linear(input_dim,dim_k)  </span><br><span class="line">        <span class="variable language_">self</span>.v = nn.Linear(input_dim,dim_v)  </span><br><span class="line">  </span><br><span class="line">        <span class="variable language_">self</span>.nums_head = nums_head  </span><br><span class="line">        <span class="variable language_">self</span>.dim_k = dim_k  </span><br><span class="line">        <span class="variable language_">self</span>.dim_v = dim_v  </span><br><span class="line">        <span class="variable language_">self</span>._norm_fact = <span class="number">1</span>/sqrt(dim_k)  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self,x</span>):  </span><br><span class="line">        Q=<span class="variable language_">self</span>.q(x).reshape(-<span class="number">1</span>,x.shape[<span class="number">0</span>],x.shape[<span class="number">1</span>],<span class="variable language_">self</span>.dim_k // <span class="variable language_">self</span>.nums_head)  </span><br><span class="line">        K=<span class="variable language_">self</span>.k(x).reshape(-<span class="number">1</span>,x.shape[<span class="number">0</span>],x.shape[<span class="number">1</span>],<span class="variable language_">self</span>.dim_k // <span class="variable language_">self</span>.nums_head)  </span><br><span class="line">        V=<span class="variable language_">self</span>.v(x).reshape(-<span class="number">1</span>,x.shape[<span class="number">0</span>],x.shape[<span class="number">1</span>],<span class="variable language_">self</span>.dim_v // <span class="variable language_">self</span>.nums_head)  </span><br><span class="line">  </span><br><span class="line">        <span class="built_in">print</span>(x.shape)  </span><br><span class="line">        <span class="built_in">print</span>(Q.size())  </span><br><span class="line">  </span><br><span class="line">        atten = nn.Softmax(dim=-<span class="number">1</span>)(torch.matmul(Q,K.permute(<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>)))  </span><br><span class="line">  </span><br><span class="line">        output = torch.matmul(atten,V).reshape(x.shape[<span class="number">0</span>],x.shape[<span class="number">1</span>],-<span class="number">1</span>)  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> output  </span><br><span class="line">  </span><br><span class="line">x = torch.rand(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>)  </span><br><span class="line"><span class="built_in">print</span>(x)  </span><br><span class="line">  </span><br><span class="line">atten = Self_Attention_Muti_Head(<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">2</span>)  </span><br><span class="line">y = atten(x)  </span><br><span class="line"><span class="built_in">print</span>(y.shape)</span><br></pre></td></tr></table></figure><p><img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919160123085.png" alt="400"><br>得到<strong>8个输出矩阵</strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.533ex" height="1.885ex" role="img" focusable="false" viewBox="0 -683 1119.6 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mn" transform="translate(716,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container>到<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.533ex" height="1.92ex" role="img" focusable="false" viewBox="0 -683 1119.6 848.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mn" transform="translate(716,-150) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g></g></g></svg></mjx-container>之后，<code>Multi-Head Attention</code>将它们拼接在一起(Concat),然后传入一个<code>Linear</code>层，得到Multi–Head Attention最终的输出Z。<br><img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919160348169.png" alt="500"></p><p>可以看到<code>Multi-Head Attention</code>输出的<strong>矩阵Z</strong>与其输入的<strong>矩阵X</strong>的维度是一样的。</p><h1 id="Encoder结构"><a href="#Encoder结构" class="headerlink" title="Encoder结构"></a>Encoder结构</h1><p>红色部分是Transformer的Encoder block结构，可以看到是由Multi-Head Attention,Add&amp;Norm,Feed Forward,Add&amp;Norm组成的。刚刚已经了解了Multi- Head Attention的计算过程，现在了解一下Add&amp;Norm和Feed Forward部分。<br><img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919160701046.png" alt="300"></p><h2 id="Add-Norm"><a href="#Add-Norm" class="headerlink" title="Add&Norm"></a>Add&amp;Norm</h2><p><strong>Add&amp;Norm</strong>层由Add和Norm两部分组成，其计算公式如下：</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="43.349ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 19160.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(681,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1210,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1700,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2166,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2617,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(3505,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(3990,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4441,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5319,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5708,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(6782.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(7782.4,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(8833.4,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(9405.4,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(9703.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(10064.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(10409.4,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(11297.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(11763.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(12292.4,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(12812.4,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(13562.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(13923.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(14284.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(14750.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(15350.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(15711.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(16056.4,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(16541.4,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(17141.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(17530.4,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(18382.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(18771.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="35.981ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 15903.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(681,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1210,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1700,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2166,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2617,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(3505,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(3990,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4441,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5319,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5708,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(6782.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(7782.4,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mi" transform="translate(8531.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(8997.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(9463.4,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(9983.4,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mi" transform="translate(10732.4,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(11217.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(11668.4,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(12384.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(12913.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(13364.4,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(13884.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(14273.4,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(15125.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(15514.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><blockquote><p>[!note]<br>其中X表示<code>Multi-Head Attention</code>或者<strong>Feed Forward</strong>的输入， <code>MultiHeadAttention(X)</code>何1<code>FeedForward(X)</code>表示输出（输出与输入<strong>X</strong>维度是一样的，所以可以相加) </p><p><strong>Add</strong>指X+MultiHeadAttention(),是一种残差连接，通常用于解决<strong>多层网络训练</strong>的问题，可以让网络只关注当前差异的部分，在<strong>ResNet</strong>中经常用到：</p></blockquote><p><img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919161439686.png" alt="500"></p><blockquote><p>[!note]<br>Norm指<code>Layer Normalization</code>,通常用于<strong>RNN</strong>结构，<code>Layer Normalization</code>会将每一层<strong>神经元</strong>的输入都转成<strong>均值方差</strong>都一样的，这样可以加快<strong>收敛</strong>。</p></blockquote><h2 id="Feed-Forward"><a href="#Feed-Forward" class="headerlink" title="Feed Forward"></a>Feed Forward</h2><p><strong>Feed Forward</strong>层比较简单，是一个两层的<strong>全连接层</strong>，第一层的<strong>激活函数</strong>为<code>Relu</code>,第二层不使用激活函数，对应的公式如下。</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="25.997ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 11490.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1407,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1979,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(2368,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(2868,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(3312.7,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="msub" transform="translate(4164.7,0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(977,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(5767.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(6767.7,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(462,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(7633.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="msub" transform="translate(8022.2,0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(977,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(9625,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(10625.2,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(462,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container><br>X是输入，<code>Feed Forward</code>最终得到的输出矩阵的维度与X一致。</p><h2 id="组成Encoder"><a href="#组成Encoder" class="headerlink" title="组成Encoder"></a>组成Encoder</h2><p>通过上面描述的<code>Multi-Head Attention</code>,<code>Feed Forward</code>,<code>Add&amp;Norm</code>就可以构造出一个<strong>Encoder block,Encoder block</strong>接收输入矩阵<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.8ex;" xmlns="http://www.w3.org/2000/svg" width="6.342ex" height="2.345ex" role="img" focusable="false" viewBox="0 -683 2803.2 1036.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="TeXAtom" transform="translate(861,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(989,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(1767,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(2287,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></g></svg></mjx-container>,并输出一个矩阵<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.8ex;" xmlns="http://www.w3.org/2000/svg" width="6.195ex" height="2.393ex" role="img" focusable="false" viewBox="0 -704 2738.2 1057.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="TeXAtom" transform="translate(796,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(989,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(1767,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(2287,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></g></svg></mjx-container>。通过多个Encoder block叠加就可以组成Encoder。<br><img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919162554263.png" alt="300"></p><ul><li>第一个<code>Encoder block</code>的输入为句子单词的表示向量矩阵，</li><li>后续 <code>Encoder block</code>的输入是前一个 Encoder block的<strong>输出</strong></li><li>最后一个<code>Encoder block</code>输出的矩阵就是<strong>编码信息矩阵C</strong>,这一矩阵后续会用到<code> Decoder</code>中。</li></ul><h1 id="Decoder结构"><a href="#Decoder结构" class="headerlink" title="Decoder结构"></a>Decoder结构</h1><p><img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919162947304.png" alt="500"><br><strong>红色部分</strong>为<strong>Transformer</strong>的<strong>Decoder block</strong>结构，与Encoder block相似，但是存在一些区别：</p><ul><li>包含两个 Multi-Head Attention。</li><li>第一个Multi-Head Attention层采用了Masked操作。</li><li>第二个Multi-Head Attention层的K, V矩阵使用Encoder的编码信息矩阵C进行计算，而Q使用上一个Decoder block的输出计算。</li><li>最后有一个Softmax层计算下一个翻译单词的概率。</li></ul><h2 id="第一个Multi-Head-Attention"><a href="#第一个Multi-Head-Attention" class="headerlink" title="第一个Multi-Head Attention"></a>第一个Multi-Head Attention</h2><blockquote><p>[!note]<br>Decoder block的第一个Multi–Head Attention采用了Masked操作，因为在翻译的过程中是顺序翻译的，即翻译完第i个单词，才可以翻译第i+1个单词。通过Masked操作可以防止第i个单词知道i+l个单词之后的信息。下面以”我有一只猫”翻译成”I have a cat”为例，了解一下Masked操作。</p></blockquote><ul><li><p>在<strong>Decoder</strong>的时候，是需要根据之前的翻译，求解当前最有可能的翻译，如下图所示。首先根据输入”&lt;Begin&gt;”预测出第一个单词为”I”,然后根据输入”&lt;Begin&gt;I”预测下一个单词”have”</p><p>  <img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919163245732.png"></p></li><li><p>Decoder可以在训练的过程中使用Teacher Forcing并且并行化训练，即将正确的单词序列(&lt;Begin&gt;I have a cat))和对应输出(I have a cat&lt;end&gt;)传递到Decoder。那么在预测第讠个输出时，就要将第1+1之后的单词掩盖住，</p></li><li><p>注意Mask操作是在Self-Attention的Softmax之前使用的，下面用012345分别表示&lt;Begin&gt;I have a cat &lt;end&gt;。</p></li></ul><p>第一步：</p><blockquote><p>[!note]<br>是Decoder的输入矩阵和Mask矩阵，输入矩阵包含”&lt;Begin&gt;I have a cat”(0,l,2,3, 4)五个单词的表示向量，Mask是一个5×5的矩阵。在Mask可以发现单词0只能使用单词0的信息，而单词1可以使用单词0,1的信息，即只能使用之前的信息。</p></blockquote><p><img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919164044604.png"><br>第二步：</p><blockquote><p>[!note]<br>‘接下来的操作和之前的Self-Attention一样，通过输入矩阵X计算得到Q,K,V矩阵。然后计算Q和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="3.443ex" height="1.904ex" role="img" focusable="false" viewBox="0 -841.7 1521.8 841.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(974,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></g></svg></mjx-container>的乘积<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="5.233ex" height="2.343ex" role="img" focusable="false" viewBox="0 -841.7 2312.8 1035.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="msup" transform="translate(791,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(974,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></g></svg></mjx-container></p></blockquote><p><img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250919164306754.png" alt="500"></p><p>第三步：</p><blockquote><p>[!note]<br>在得到<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="5.024ex" height="2.032ex" role="img" focusable="false" viewBox="0 -704 2220.8 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="msub" transform="translate(791,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(882,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></g></svg></mjx-container>之后需要进行Softmax,计算attention score,我们在Softmax之前需要使用Mask矩阵遮挡住每一个单词之后的信息，遮挡操作如下：</p></blockquote><p><img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250921134747641.png"><br>得到Mask <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="5.024ex" height="2.032ex" role="img" focusable="false" viewBox="0 -704 2220.8 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="msub" transform="translate(791,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(882,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></g></svg></mjx-container>之后在Mask <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="5.024ex" height="2.032ex" role="img" focusable="false" viewBox="0 -704 2220.8 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="msub" transform="translate(791,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(882,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></g></svg></mjx-container>上进行Softmax,.每一行的和都为1。但是单词0在单词 1,2,3,4上的attention score都为0。</p><p>第四步：<br>使用Mask  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="5.024ex" height="2.032ex" role="img" focusable="false" viewBox="0 -704 2220.8 898"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="msub" transform="translate(791,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(882,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g></g></g></svg></mjx-container>与矩阵V相乘，得到输出<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.533ex" height="1.885ex" role="img" focusable="false" viewBox="0 -683 1119.6 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mn" transform="translate(716,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container>,则单词1的输出向量<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.533ex" height="1.885ex" role="img" focusable="false" viewBox="0 -683 1119.6 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mn" transform="translate(716,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container>是只包含单词1信息的。</p><p>第五步：<br>通过上述步骤就可以得到一个Mask Self-Attention的输出矩阵<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.285ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 1010 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>，然后和Encoder类似，通过Multi-Head Attention拼接多个输出<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.285ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 1010 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>然后计算得到第一个Multi-Head Attention的输出Z,Z与输入X维度一样。</p><h2 id="第二个Multi-Head-Attention"><a href="#第二个Multi-Head-Attention" class="headerlink" title="第二个Multi-Head Attention"></a>第二个Multi-Head Attention</h2><ul><li>Decoder block第二个Multi-Head Attention变化不大，主要的区别在于其中 SeLf-Attention的K,V矩阵不是使用上一个Decoder block的输出计算的，而是使用 Encoder的编码信息矩阵C计算的。</li><li>根据Encoder的输出C计算得到K,V,根据上一个Decoder block的输出Z计算Q(如果是第一个Decoder block则使用输入矩阵X进行计算)，后续的计算方法与之前描述的一致。</li><li>这样做的好处是在Decoder的时候，每一位单词都可以利用到Encoder所有单词的信息（这些信息无需Mask)。</li></ul><h2 id="Softmax预测输出单词"><a href="#Softmax预测输出单词" class="headerlink" title="Softmax预测输出单词"></a>Softmax预测输出单词</h2><p>Decoder block最后的部分是利用Softmax预测下一个单词，在之前的<strong>网络层</strong>我们可以得到一个最终的输出Z,因为Mask的存在，使得单词0的输出Z0只包含单词0的信息，如下：<br><img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250921135522419.png" alt="500"><br>softmax根据输出矩阵的每一行预测下一个单词：<br><img src="/2025/09/19/%E9%80%90%E5%B1%82%E5%88%86%E8%A7%A3Transformer/file-20250921135609038.png" alt="500"></p><p>这就是 <code>Decoder block</code>的定义，与<code>Encoder</code>一样，<code>Decoder</code>是由多个 <code>Decoder block</code>组合而成。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Transformer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dify教程</title>
      <link href="/2025/09/14/Dify%E6%95%99%E7%A8%8B/"/>
      <url>/2025/09/14/Dify%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>本文纯属是搬运工，原文来自-光聚客网络科技</p><h1 id="Dify系列课程"><a href="#Dify系列课程" class="headerlink" title="Dify系列课程"></a>Dify系列课程</h1><blockquote><p>Lecture：邓澎波</p></blockquote><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250312145223729.png" alt="image-20250312145223729"></p><h1 id="一、Dify的介绍"><a href="#一、Dify的介绍" class="headerlink" title="一、Dify的介绍"></a>一、Dify的介绍</h1><p><a href="https://dify.ai/">https://dify.ai/</a></p><p>​Dify 是一款创新的智能生活助手应用，旨在为您提供便捷、高效的服务。通过人工智能技术，Dify 可以实现语音助手、智能家居控制、日程管理等功能，助您轻松应对生活琐事，享受智慧生活。简约的界面设计，让操作更加便捷；丰富的应用场景，满足您多样化的需求。Dify，让生活更简单！</p><h1 id="二、Dify的安装方式"><a href="#二、Dify的安装方式" class="headerlink" title="二、Dify的安装方式"></a>二、Dify的安装方式</h1><h2 id="1-在线体验"><a href="#1-在线体验" class="headerlink" title="1. 在线体验"></a>1. 在线体验</h2><p>​速度比较慢。不推荐</p><h2 id="2-本地部署"><a href="#2-本地部署" class="headerlink" title="2. 本地部署"></a>2. 本地部署</h2><h3 id="2-1-Docker安装"><a href="#2-1-Docker安装" class="headerlink" title="2.1 Docker安装"></a>2.1 Docker安装</h3><p>​安装Docker环境</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sSl https://cdn.jsdelivr.<span class="built_in">net</span>/gh/SuperManito/LunuxMirrors@main/DockerInstallation.sh)</span><br></pre></td></tr></table></figure><p>安装Docker Compose</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L &quot;https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose &amp;&amp; chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>执行查看Docker-compose版本</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250306174134895.png" alt="image-20250306174134895"></p><p>说明安装成功了</p><p>docker-compse拉取镜像很慢</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">     &quot;registry-mirrors&quot;: [</span><br><span class="line">         &quot;https://<span class="keyword">do</span>.nark.eu.org&quot;,</span><br><span class="line">         &quot;https://dc.j8.work&quot;,</span><br><span class="line">         &quot;https://docker.m.daocloud.io&quot;,</span><br><span class="line">         &quot;https://dockerproxy.com&quot;,</span><br><span class="line">         &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">         &quot;https://docker.nju.edu.cn&quot;</span><br><span class="line">     ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>执行上面的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload    # 重新加载 systemd 的配置文件</span><br><span class="line">systemctl restart docker        # 重启docker</span><br></pre></td></tr></table></figure><p>然后去GitHub上拉取dify的代码。解压后进入到docker目录中</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>执行即可</p><h3 id="2-2-DockerDeskTop"><a href="#2-2-DockerDeskTop" class="headerlink" title="2.2 DockerDeskTop"></a>2.2 DockerDeskTop</h3><p>​在Windows环境下我们可以通过DockerDesktop 来安装。直接去官网下载对应的版本即可。同样的我们需要拉取dify的GitHub的代码。然后进入到Docker目录，同样的执行这个代码</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up </span><br></pre></td></tr></table></figure><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250306212234636.png" alt="image-20250306212234636"></p><p>然后在地址栏中输入 <a href="http://localhost/install">http://localhost/install</a> 就可以访问了</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250306212309113.png" alt="image-20250306212309113"></p><p>我们先设置管理员的相关信息。设置后再登录</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250306212421636.png" alt="image-20250306212421636"></p><h2 id="3-Ollama"><a href="#3-Ollama" class="headerlink" title="3. Ollama"></a>3. Ollama</h2><p>​<a href="https://ollama.com/">https://ollama.com/</a></p><p>​我们已经把Dify在本地部署了。然后我们可以通过Ollama在本地部署对应的大模型，比如 deepseek-r1:1.5b 这种小模型</p><p>Ollama 是一个让你能在本地运行大语言模型的工具，为用户在本地环境使用和交互大语言模型提供了便利，具有以下特点：</p><p>1）多模型支持：Ollama 支持多种大语言模型，比如 Llama 2、Mistral 等。这意味着用户可以根据自己的需求和场景，选择不同的模型来完成各种任务，如文本生成、问答系统、对话交互等。</p><p>2）易于安装和使用：它的安装过程相对简单，在 macOS、Linux 和 Windows 等主流操作系统上都能方便地部署。用户安装完成后，通过简洁的命令行界面就能与模型进行交互，降低了使用大语言模型的技术门槛。</p><p>3）本地运行：Ollama 允许模型在本地设备上运行，无需依赖网络连接来访问云端服务。这不仅提高了数据的安全性和隐私性，还能减少因网络问题导致的延迟，实现更快速的响应。</p><p>搜索Ollama进入官网<a href="https://ollama.com/download%EF%BC%8C%E9%80%89%E6%8B%A9%E5%AE%89%E8%A3%85MAC%E7%89%88%E6%9C%AC%E7%9A%84%E5%AE%89%E8%A3%85%E5%8C%85%EF%BC%8C%E7%82%B9%E5%87%BB%E5%AE%89%E8%A3%85%E5%8D%B3%E5%8F%AF">https://ollama.com/download，选择安装MAC版本的安装包，点击安装即可</a></p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250306221527312.png" alt="image-20250306221527312"></p><p>下载完成后直接双击安装即可</p><p>命令：ollama,出现下面内容，说明安装成功</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250306221605717.png" alt="image-20250306221605717"></p><p>启动Ollama服务</p><p>输入命令【ollama serve】，浏览器打开，显示running，说明启动成功</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250306221646777.png" alt="image-20250306221646777"></p><p>安装 deepseek-r1:1.5b模型</p><p>在<a href="https://ollama.com/library/deepseek-r1:1.5b">https://ollama.com/library/deepseek-r1:1.5b</a> 搜索deepseek-R1,跳转到下面的页面，复制这个命令，在终端执行，下载模型</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250306221723308.png" alt="image-20250306221723308"></p><p>cmd中执行这个命令</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250306221746525.png" alt="image-20250306221746525"></p><h2 id="4-Dify关联Ollama"><a href="#4-Dify关联Ollama" class="headerlink" title="4.Dify关联Ollama"></a>4.Dify关联Ollama</h2><p>​Dify 是通过Docker部署的，而Ollama 是运行在本地电脑的，得让Dify能访问Ollama 的服务。</p><p>在Dify项目-docker-找到.env文件，在末尾加上下面的配置：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 启用自定义模型</span><br><span class="line">CUSTOM_MODEL_ENABLED=true</span><br><span class="line"># 指定 Olama 的 API地址（根据部署环境调整IP）</span><br><span class="line">OLLAMA_API_BASE_URL=host.docker.internal:<span class="number">11434</span></span><br></pre></td></tr></table></figure><p>然后在模型中配置</p><p>在Dify的主界面 <a href="http://localhost/apps">http://localhost/apps</a> ，点击右上角用户名下的【设置】</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250306221924386.png" alt="image-20250306221924386"></p><p>在设置页面–Ollama–添加模型，如下：</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250306222028793.png" alt="image-20250306222028793"></p><p>添加成功后的</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250306222058087.png" alt="image-20250306222058087"></p><p>模型添加完成以后，刷新页面，进行系统模型设置。步骤：输入“<strong><a href="http://localhost/install">http://localhost/install</a></strong>”进入Dify主页，用户名–设置–模型供应商，点击右侧【系统模型设置】，如下：</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250306222146832.png" alt="image-20250306222146832"></p><p>这样就关联成功了！！！</p><h1 id="三、Dify应用讲解"><a href="#三、Dify应用讲解" class="headerlink" title="三、Dify应用讲解"></a>三、Dify应用讲解</h1><h2 id="1-创建空白应用"><a href="#1-创建空白应用" class="headerlink" title="1. 创建空白应用"></a>1. 创建空白应用</h2><p>我们通过Dify来创建我们的第一个简单案例，智能聊天机器人</p><p>进入Dify 主界面，点击【创建空白应用】，如下图：</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250306222313242.png" alt="image-20250306222313242"></p><p>选择【聊天助手】，输入自定义应用名称和描述，点击【创建】</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250306222340735.png" alt="image-20250306222340735"></p><p>右上角选择合适的模型，进行相关的参数配置</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250306222529611.png" alt="image-20250306222529611"></p><p>输入有相关的回复了。此时说明Dify 与本地部署的DeepSeek大模型已经连通了。</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250306222759806.png" alt="image-20250306222759806"></p><p>上面的机器人有个不足之处就是无法回答模型训练后的内容和专业垂直领域的内容，这时我们可以借助本地知识库来解决专业领域的问题。</p><h2 id="2-创建本地知识库"><a href="#2-创建本地知识库" class="headerlink" title="2. 创建本地知识库"></a>2. 创建本地知识库</h2><h3 id="2-1-向量模型"><a href="#2-1-向量模型" class="headerlink" title="2.1 向量模型"></a>2.1 向量模型</h3><pre><code> Embedding模型是一种将数据转换为向量表示的技术，核心思想是通过学习数据的内在结构和语义信息，将其映射到一个低维向量空间中，使得相似的数据点在向量空间中的位置相近，从而通过计算向量之间的相似度来衡量数据之间的相似性。  Embedding模型可以将单词、句子或图像等数据转换为低维向量，使得计算机能够更好地理解和处理这些数据。在NLP领域，Embedding模型可以将单词、句子或文档转换为向量，用于文本分类、情感分析。机器翻译等任务。在计算机视觉中，Embedding模型可以用于图像识别和检索等任务。</code></pre><h3 id="2-2-添加Embedding模型"><a href="#2-2-添加Embedding模型" class="headerlink" title="2.2 添加Embedding模型"></a>2.2 添加Embedding模型</h3><p>点击右上角用户名–设置–模型供应商–右上角【添加模型】，填写相关配置信息如下：</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250307141101128.png" alt="image-20250307141101128"></p><p>添加成功后的效果</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250307141140053.png" alt="image-20250307141140053"></p><h3 id="2-3-创建知识库"><a href="#2-3-创建知识库" class="headerlink" title="2.3 创建知识库"></a>2.3 创建知识库</h3><p>在Dify主界面，点击上方的【知识库】，点击【创建知识库】</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250307141231496.png" alt="image-20250307141231496"></p><p>导入已有文本，上传资料，点击【下一步】</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250307141412744.png" alt="image-20250307141412744"></p><p>Embedding模型默认是前面配置的模型，参数信息配置完，点击保存即可</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250307142154186.png" alt="image-20250307142154186"></p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250307142303981.png" alt="image-20250307142303981"></p><p>此时系统会自动对上传的文档进行解析和向量化处理，需要耐心等待几分钟。</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250307142346321.png" alt="image-20250307142346321"></p><p>创建成功以后，如下图，可以点击【前往文档】，查看分段信息，如下图：</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250307142549843.png" alt="image-20250307142549843"></p><p>点击具体的文档可以看到具体的分割信息</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250307142703684.png" alt="image-20250307142703684"></p><h2 id="3-知识库应用"><a href="#3-知识库应用" class="headerlink" title="3. 知识库应用"></a>3. 知识库应用</h2><h3 id="3-1-添加知识库"><a href="#3-1-添加知识库" class="headerlink" title="3.1 添加知识库"></a>3.1 添加知识库</h3><p>​在Dify主界面，回到刚才的应用聊天页面，工作室–智能聊天机器人–添加知识库，如下图：<br><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250307143412619.png" alt="image-20250307143412619"></p><p>选择前面上面的知识库作为对话的上下文，保存当前应用设置，就可以进行测试了</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250307143438471.png" alt="image-20250307143438471"></p><h3 id="3-2-测试"><a href="#3-2-测试" class="headerlink" title="3.2 测试"></a>3.2 测试</h3><p>此时输入问题，就可以看到相关的回复了。</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250307144032785.png" alt="image-20250307144032785"></p><h2 id="4-AI图片生成工具"><a href="#4-AI图片生成工具" class="headerlink" title="4. AI图片生成工具"></a>4. AI图片生成工具</h2><p>​随着图像生成技术的兴起，涌现了许多优秀的图像生成产品，比如 Dall-e、Flux、Stable Diffusion 等，我们借助Stable Diffusion来在dify中构建一个智能生成图片的Agent。</p><h3 id="4-1-首先获取Stable-Diffusion"><a href="#4-1-首先获取Stable-Diffusion" class="headerlink" title="4.1 首先获取Stable Diffusion"></a>4.1 首先获取Stable Diffusion</h3><p><a href="https://platform.stability.ai/account/keys">https://platform.stability.ai/account/keys</a> 去官网获取授权key。如果没注册需要先注册下</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250308125207283.png" alt="image-20250308125207283"></p><h3 id="4-2-下载-Stable-工具"><a href="#4-2-下载-Stable-工具" class="headerlink" title="4.2 下载 Stable 工具"></a>4.2 下载 Stable 工具</h3><p> 然后我们需要进入dify的工具市场下载安装 Stable 插件。</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250308125450441.png" alt="image-20250308125450441"></p><h3 id="4-3-创建Agent"><a href="#4-3-创建Agent" class="headerlink" title="4.3 创建Agent"></a>4.3 创建Agent</h3><p>​然后我们就可以创建一个空白的Agent。输入对应的提示词</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据用户的提示，使用工具 stability_text2image 绘画指定内容</span><br></pre></td></tr></table></figure><p>然后选择对应的工具并添加授权码</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250308130638015.png" alt="image-20250308130638015"></p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250308130704143.png" alt="image-20250308130704143"></p><p>然后我们就可以测试效果了</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250308131003848.png" alt="image-20250308131003848"></p><p>注意这个是一个付费的工具。提供的有一个免费的，后面需要付费购买了：<a href="https://platform.stability.ai/account/credits">https://platform.stability.ai/account/credits</a></p><h2 id="5-旅游助手"><a href="#5-旅游助手" class="headerlink" title="5. 旅游助手"></a>5. 旅游助手</h2><p>进入<a href="https://serpapi.com/manage-api-key">SerpAPI - API Key</a>，如果你尚未注册，会被跳转至进入注册页。</p><p>SerpAPI提供一个月100次的免费调用次数，这足够我们完成本次实验了。如果你需要更多的额度，可以增加余额，或者使用其他的开源方案。</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250311000951025.png" alt="image-20250311000951025"></p><h2 id="6-SQL执行器"><a href="#6-SQL执行器" class="headerlink" title="6. SQL执行器"></a>6. SQL执行器</h2><p>​我们可以通过工作流来创建一个SQL语句的执行器，也就是我们可以输入相关的SQL语句然后通过工作流来连接数据库执行对应的SQL代码，具体的设计如下：</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250310204012382.png" alt="image-20250310204012382"></p><p>​这里的核心是代码执行模块。这块我们是调用了我们自己创建的接口来执行数据库的操作，所以我们需要先创建这么一个接口，接口我们通过Flask这个轻量的web框架来实现。需要先安装Flask的依赖库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure><p>然后创建接口代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">execute_sql</span>(<span class="params">sql,connection_info</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    执行传入的 SQL 语句，并返回查询结果。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">        sql: 要执行的 SQL 语句（字符串）。</span></span><br><span class="line"><span class="string">        connection_info: 一个字典，包含数据库连接所需的信息：</span></span><br><span class="line"><span class="string">            - host: 数据库地址（如 &quot;localhost&quot;）</span></span><br><span class="line"><span class="string">            - user: 数据库用户名</span></span><br><span class="line"><span class="string">            - password: 数据库密码</span></span><br><span class="line"><span class="string">            - database: 数据库名称</span></span><br><span class="line"><span class="string">            - port: 数据库端口（可选，默认为 3306）</span></span><br><span class="line"><span class="string">            - charset: 字符编码（可选，默认为 &quot;utf8mb4&quot;）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">        如果执行的是 SELECT 查询，则返回查询结果的列表；</span></span><br><span class="line"><span class="string">        如果执行的是 INSERT/UPDATE/DELETE 等非查询语句，则提交事务并返回受影响的行数。</span></span><br><span class="line"><span class="string">        如果执行过程中出错，则返回 None。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    connection = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 从 connection_info 中获取各项参数，设置默认值</span></span><br><span class="line">        host = connection_info.get(<span class="string">&quot;host&quot;</span>, <span class="string">&quot;localhost&quot;</span>)</span><br><span class="line">        user =  connection_info.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">        password = connection_info.get(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">        database = connection_info.get(<span class="string">&quot;database&quot;</span>)</span><br><span class="line">        port = connection_info.get(<span class="string">&quot;port&quot;</span>, <span class="number">3306</span>)</span><br><span class="line">        charset = connection_info.get(<span class="string">&quot;charset&quot;</span>, <span class="string">&quot;utf8mb4&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 建立数据库连接</span></span><br><span class="line">        connection = pymysql.connect(</span><br><span class="line">            host=host,</span><br><span class="line">            user=user,</span><br><span class="line">            password=password,</span><br><span class="line">            database=database,</span><br><span class="line">            port=port,</span><br><span class="line">            charset=charset,</span><br><span class="line">            cursorclass=pymysql.cursors.Cursor  <span class="comment"># 可改为 DictCursor 返回字典格式结果</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            cursor.execute(sql)</span><br><span class="line">            <span class="comment"># 判断是否为 SELECT 查询语句</span></span><br><span class="line">            <span class="keyword">if</span> sql.strip().lower().startswith(<span class="string">&quot;select&quot;</span>):</span><br><span class="line">                result = cursor.fetchall()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                connection.commit()  <span class="comment"># 非查询语句需要提交事务</span></span><br><span class="line">                result = cursor.rowcount  <span class="comment"># 返回受影响的行数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;执行 SQL 语句时出错：&quot;</span>, e)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> connection:</span><br><span class="line">            connection.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/execute_sql&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">execute_sql_api</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    接口示例：通过 POST 请求传入 SQL 语句和连接信息，返回执行结果。</span></span><br><span class="line"><span class="string">    请求示例 (JSON):</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        &quot;sql&quot;: &quot;SELECT * FROM your_table;&quot;,</span></span><br><span class="line"><span class="string">        &quot;connection_info&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;host&quot;: &quot;localhost&quot;,</span></span><br><span class="line"><span class="string">            &quot;user&quot;: &quot;your_username&quot;,</span></span><br><span class="line"><span class="string">            &quot;password&quot;: &quot;your_password&quot;,</span></span><br><span class="line"><span class="string">            &quot;database&quot;: &quot;your_database&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    data = request.get_json()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;无效的请求数据&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    sql = data.get(<span class="string">&quot;sql&quot;</span>)</span><br><span class="line">    connection_info = data.get(<span class="string">&quot;connection_info&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> sql <span class="keyword">or</span> <span class="keyword">not</span> connection_info:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;缺少sql语句或数据库连接信息&quot;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    result = execute_sql(sql, connection_info)</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;result&quot;</span>: result&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 开发环境下可以设置 debug=True，默认在本地5000端口启动服务</span></span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这个接口需要接收一个sql语句和一个包含数据库连接信息的json对象，我们可以编写对应的测试代码来看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_execute_sql_api</span>(<span class="params">sql, connection_info</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    通过 requests 调用执行 SQL 的接口服务</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">        sql: 要执行的 SQL 语句字符串</span></span><br><span class="line"><span class="string">        connection_info: 数据库连接信息字典，例如：</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &quot;host&quot;: &quot;localhost&quot;,</span></span><br><span class="line"><span class="string">                &quot;user&quot;: &quot;your_username&quot;,</span></span><br><span class="line"><span class="string">                &quot;password&quot;: &quot;your_password&quot;,</span></span><br><span class="line"><span class="string">                &quot;database&quot;: &quot;your_database&quot;,</span></span><br><span class="line"><span class="string">                &quot;port&quot;: 3306  # 可选</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">        接口返回的结果数据（字典格式），如果请求失败则返回 None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    url = <span class="string">&quot;http://127.0.0.1:5000/execute_sql&quot;</span></span><br><span class="line">    <span class="comment"># 构造请求体</span></span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&quot;sql&quot;</span>: sql,</span><br><span class="line">        <span class="string">&quot;connection_info&quot;</span>: connection_info</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url, json=payload, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="string">&quot;result&quot;</span>:<span class="built_in">str</span>(response.json()[<span class="string">&quot;result&quot;</span>])&#125;</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="string">&quot;result&quot;</span>: <span class="string">f&quot;解析响应 JSON 失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;result&quot;</span>: <span class="string">f&quot;请求失败，状态码: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;result&quot;</span>: <span class="built_in">str</span>(e)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例调用</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    sql_query = <span class="string">&quot;select * from candidates where id = 1&quot;</span>  <span class="comment"># 替换为你的实际 SQL 语句</span></span><br><span class="line">    conn_info = &#123;</span><br><span class="line">        <span class="string">&quot;host&quot;</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">        <span class="string">&quot;user&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">        <span class="string">&quot;database&quot;</span>: <span class="string">&quot;ibms&quot;</span>,</span><br><span class="line">        <span class="string">&quot;port&quot;</span>: <span class="number">3306</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result = call_execute_sql_api(sql_query, conn_info)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;接口返回结果：&quot;</span>, result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行后可以看到对应的结果</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250310204413868.png" alt="image-20250310204413868"></p><p>然后可以在工作流中来设置我们的代码</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250310204446218.png" alt="image-20250310204446218"></p><p>代码的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">sql: <span class="built_in">str</span></span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    url = <span class="string">&quot;http://host.docker.internal:5000/execute_sql&quot;</span></span><br><span class="line">    connection_info = &#123;</span><br><span class="line">        <span class="string">&quot;host&quot;</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">        <span class="string">&quot;user&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">        <span class="string">&quot;database&quot;</span>: <span class="string">&quot;ibms&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 构造请求体</span></span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&quot;sql&quot;</span>: sql,</span><br><span class="line">        <span class="string">&quot;connection_info&quot;</span>: connection_info</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url, json=payload, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="string">&quot;result&quot;</span>:<span class="built_in">str</span>(response.json()[<span class="string">&quot;result&quot;</span>])&#125;</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="string">&quot;result&quot;</span>: <span class="string">f&quot;解析响应 JSON 失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;result&quot;</span>: <span class="string">f&quot;请求失败，状态码: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;result&quot;</span>: <span class="built_in">str</span>(e)&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意上面的url中我们需要写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://host.docker.internal:5000/execute_sql</span><br></pre></td></tr></table></figure><p>不然执行的时候会出现503的错误。</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250310204606561.png" alt="image-20250310204606561"></p><p>如果调用接口的组件是 urllib3 的话有可能出现上面的问题，这个原因可能是版本兼容的问题，这里推进用的是requests组件</p><h2 id="7-科研论文翻译"><a href="#7-科研论文翻译" class="headerlink" title="7. 科研论文翻译"></a>7. 科研论文翻译</h2><p>​我可以在工作流案例中结合聊天大模型来实现翻译工具的功能，具体的设计如下</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250311150702514.png" alt="image-20250311150702514"></p><p>在开始节点中接收一个输入信息<code>content</code></p><p>然后在LLM模型中我们需要配置一个CHAT模型，这里选择了DeepSeek-R1 64K的聊天模型，注意需要在这里设置下对应的提示词</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">现在我要写一个将中文翻译成英文科研论文的GPT，请参照以下Prompt制作，注意都用英文生成：</span><br><span class="line"></span><br><span class="line">## 角色</span><br><span class="line">你是一位科研论文审稿员，擅长写作高质量的英文科研论文。请你帮我准确且学术性地将以下中文翻译成英文，风格与英文科研论文保持一致。</span><br><span class="line"></span><br><span class="line">## 规则：</span><br><span class="line">- 输入格式为 Markdown 格式，输出格式也必须保留原始 Markdown 格式</span><br><span class="line">- 以下是常见的相关术语词汇对应表（中文 -&gt; English）：</span><br><span class="line">* 零样本 -&gt; Zero-shot</span><br><span class="line">* 少样本 -&gt; Few-shot</span><br><span class="line"></span><br><span class="line">## 策略：</span><br><span class="line"></span><br><span class="line">分三步进行翻译工作，并打印每步的结果：</span><br><span class="line">1. 根据中文内容直译成英文，保持原有格式，不要遗漏任何信息</span><br><span class="line">2. 根据第一步直译的结果，指出其中存在的具体问题，要准确描述，不宜笼统的表示，也不需要增加原文不存在的内容或格式，包括不仅限于：</span><br><span class="line">- 不符合英文表达习惯，明确指出不符合的地方</span><br><span class="line">- 语句不通顺，指出位置，不需要给出修改意见，意译时修复</span><br><span class="line">- 晦涩难懂，模棱两可，不易理解，可以尝试给出解释</span><br><span class="line">3. 根据第一步直译的结果和第二步指出的问题，重新进行意译，保证内容的原意的基础上，使其更易于理解，更符合英文科研论文的表达习惯，同时保持原有的格式不变</span><br><span class="line"></span><br><span class="line">## 格式</span><br><span class="line">返回格式如下，&quot;&#123;xxx&#125;&quot;表示占位符：</span><br><span class="line"></span><br><span class="line">### 直译</span><br><span class="line">&#123;直译结果&#125;</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">###问题</span><br><span class="line">&#123;直译的具体问题列表&#125;</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">###意译</span><br></pre></td></tr></table></figure><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250311152200170.png" alt="image-20250311152200170"></p><p>在结束节点中输出结果即可。</p><p>数据中的中文课研论文案例</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 农业生产中作物栽培技术的创新与应用</span><br><span class="line">## 摘要</span><br><span class="line">本文针对我国农业生产中作物栽培技术存在的问题，分析了技术创新的必要性，并探讨了新型栽培技术的应用效果。通过实验研究发现，采用新型栽培技术能够有效提高作物产量和品质，为我国农业生产提供有力支持。</span><br><span class="line">## 一、引言</span><br><span class="line">农业生产是我国国民经济的重要组成部分，作物栽培技术直接关系到粮食产量和农业可持续发展。近年来，我国农业生产取得了显著成果，但仍然存在一些问题，如资源利用率低、生态环境恶化等。因此，创新作物栽培技术，提高农业生产效益具有重要意义。</span><br><span class="line">## 二、作物栽培技术创新的必要性</span><br><span class="line">1. 提高资源利用率：我国农业生产过程中，水资源、化肥和农药的利用率较低，导致资源浪费和生态环境恶化。创新栽培技术，有助于提高资源利用率，降低农业生产成本。</span><br><span class="line">2. 保障粮食安全：随着人口增长和耕地减少，提高单位面积产量成为保障粮食安全的关键。作物栽培技术创新有助于挖掘作物增产潜力，提高粮食产量。</span><br><span class="line">3. 促进农业可持续发展：传统农业生产方式对生态环境造成一定程度的影响。创新栽培技术，有利于实现农业生产与生态环境的协调发展。</span><br><span class="line">## 三、新型作物栽培技术的应用</span><br><span class="line">1. 精准农业技术：通过无人机、卫星遥感等手段，实时监测作物生长状况，实现精准施肥、灌溉和病虫害防治。</span><br><span class="line">2. 节水灌溉技术：采用滴灌、喷灌等节水灌溉方式，提高水资源利用率，降低农业生产成本。</span><br><span class="line">3. 抗逆性品种选育：针对我国不同地区气候特点，选育抗逆性强的作物品种，提高作物产量和品质。</span><br><span class="line">4. 生物有机肥应用：充分利用农业废弃物，发展生物有机肥，改善土壤结构，提高土壤肥力。</span><br><span class="line">## 四、实验结果与分析</span><br><span class="line">本研究以某地区小麦为例，对比分析了传统栽培技术与新型栽培技术下的产量和品质。实验结果表明，采用新型栽培技术的小麦产量较传统栽培技术提高了15.6%，品质也得到了显著提升。</span><br><span class="line">## 五、结论</span><br><span class="line">本文通过对农业生产中作物栽培技术的创新与应用研究，证实了新型栽培技术在提高作物产量和品质方面具有显著效果。未来，我国农业生产应继续加大科技创新力度，推动农业可持续发展。</span><br><span class="line">（注：本文为示例性论文，仅供参考。）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果图</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250311150957460.png" alt="image-20250311150957460"></p><h2 id="8-SEO翻译"><a href="#8-SEO翻译" class="headerlink" title="8. SEO翻译"></a>8. SEO翻译</h2><p>​我们在写文章的时候需要想一个满足SEO要求的标题，这样有可能被更多的人检索到，有时候我们可能需要把文章翻译为英文，这时标题同样比较重要，这时我们可以在dify中创建这样的一个工具来帮助我们实现这个功能。</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250311162812905.png" alt="image-20250311162812905"></p><p>对应模型的提示词</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This GPT will convert input titles or content into SEO-friendly English URL slugs. The slugs will clearly convey the original meaning while being concise and not exceeding 60 characters. If the input content is too long, the GPT will first condense it into an English phrase within 60 characters before generating the slug. If the title is too short, the GPT will prompt the user to input a longer title. Special characters in the input will be directly removed.</span><br></pre></td></tr></table></figure><p>对应中文含义</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个GPT可以将输入的标题或内容转换为对SEO友好的英文URL片段。这些片段将清晰地传达原始含义，同时保持简洁，且不超过60个字符。如果输入内容过长，GPT将首先将其缩减为一个不超过60个字符的英文短语，然后生成片段。如果标题过短，GPT将提示用户输入更长的标题。输入中的特殊字符将被直接移除。</span><br></pre></td></tr></table></figure><h2 id="9-标题党"><a href="#9-标题党" class="headerlink" title="9. 标题党"></a>9. 标题党</h2><p>​有时候我们发表一些文章的时候，因为标题不够吸引人而造成没有什么关注度还是非常可惜的，这时我们可以借助AI来帮助我们生成有吸引力的标题，具体如下</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250311173657192.png" alt="image-20250311173657192"></p><p>核心是对应的提示词</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">你是一名资深的自媒体创作者也是一位爆款网文作家，你对不同领域的文章都有深入的了解和研究。你擅长创作吸睛、炸裂的标题创作。你有着对生活极为细致的观察，擅长在细节处触动人心。请根据用户提供的信息使用以下创作技巧进行标题创作，标题应具有吸引力，能够激发读者对文章主题的浓厚兴趣。</span><br><span class="line">## 创作技巧</span><br><span class="line">1.标题将感受、范围、结果、程度等夸张夸大描述，造成耸人听闻的效果。使用「震惊」、「惊爆」、「传疯」、「吓掉半条命」等，言过其实地表达情绪/状态/感受</span><br><span class="line"></span><br><span class="line">案例1：《兰州竟然引起了全国的羡慕！西安疯了，天水哭了，嘉峪关伤了...》     ** 故意引用其他城市做夸张对比 ** </span><br><span class="line">案例2：《中国部署新型秘密武器，配备自杀敢死队，巴铁成功仿制吓坏印度》    ** 用“吓坏X国”的耸动表述故意诱导用户点击 ** </span><br><span class="line">案例3：《气垫一打开就直接涂？几乎所有女人都错了，怪不得总脱妆又卡粉！》  ** “几乎所有女人都”对女性群体做全部包含的范围夸张，诱导用户点击 **</span><br><span class="line">案例4： 《全网无人能解释，看懂的全中国不超过2个！》  ** “全网”、“全中国”故意用整体范围概念，但“无人”、“不超过2个”又极端缩小范围形成夸张对比 **</span><br><span class="line"></span><br><span class="line">2.**使用悬念式标题创作法。**标题擅用转折、隐藏关键性信息，营造悬念、制造故弄玄虚的效果,如「竟然是……」、「而是……」、「不过……」等话说一半，通过省略号代替关键信息，或使用「内幕」、「揭秘」、「真相」等代替关键信息</span><br><span class="line">案例1: 《令人唏嘘，河南试卷掉包案最新进展，省教育局发出声明，称……》    ** “称……”话说一半，用省略号隐去关键信息点 **</span><br><span class="line">案例2:《最新消息，全球最宜居国家排行榜，第一名果然是……你想去哪？》     ** 第一名是哪里可以很明确，故意不在标题中点明 **</span><br><span class="line">案例3：《举国哀痛，我国的“航母杀手”刚有威慑力，竟然传来不幸的消息》    ** 标题中可表述清楚是什么消息，但故意用“竟然”强转折来制造危机感 **</span><br><span class="line">案例4:《人狠话不多的史蒂夫奥斯丁、布洛克莱斯纳原来是这样的》 ** 原来是什么样的，可用一句话或形容词概括的内容故意不写明 **</span><br><span class="line">案例5:《演技秒杀关晓彤，减肥20斤后撞脸娜扎，被嘲谎话连篇人设崩》  ** 缺少主语，且故意用既捧又杀的表述来诱导用户点击 **</span><br><span class="line"></span><br><span class="line">3、使用强迫式标题风格创作标题。**标题采用挑衅恐吓、强迫修改后等方式，诱导用户阅读。标题使用「胆小慎入」、「不看后悔一辈子」、「别怪我没提醒你」等表述，挑衅恐吓用户点击</span><br><span class="line"></span><br><span class="line">案例1：《不要在吃饭时看这个视频，要不然会让你后悔莫及》  ** “不要”怎样、“要不然”怎样，“让你后悔莫及”都是作者在故意挑衅用户观看 **</span><br><span class="line">案例2: 《高考只剩30天，80%的答案都在这篇文章里，不看后悔一生》  ** “后悔一生”对用户形成恐吓感 **</span><br><span class="line">案例3:《5个面试时常犯的错误 让你后悔一辈子》  ** “让你后悔一辈子”是典型的恐吓写法 **</span><br><span class="line">案例4: 《疯狂抢地、地价飙升！房价大涨？烟台朋友千万要关注！！》   ** 命令式的“千万要关注”，搭配前半句的夸张表述，标题整体夸张问题严重 **</span><br><span class="line">案例5: 《应届生找工作，一定要想知道这3件事，事关前途！》  ** “一定XXX”也是常见的“命令式”夸张写法 **</span><br><span class="line"></span><br><span class="line">4.使用爆款关键词</span><br><span class="line">在创作标题时，你会选用其中1-2个：</span><br><span class="line">**「震惊」、「惊爆」、「传疯」、「不得不看」、「一定要看完」、「绝对要收藏」、「胆小慎入」、「不看后悔一辈子」、「别怪我没提醒你」、「竟然」、「竟是这样」、「结果却」、「没想到」、「竟然是……」、「而是……」、「不过……」、「内幕」、「揭秘」、「真相」、「重磅」、「要命」、「就在刚刚」、「全世界网友」、「所有男人都」、「某国人」、「99%」、**小白必看、教科书般, 划重点,建议收藏, 上天在提醒你、揭秘, 吹爆, 吐血整理,  万万没想到、你一定不知道、如何、最、咋、是什么、所有、10个、没有xx只有xx、秒懂、的故事、可怕、必看、长啥样、凭什么、不要、喂！、只需要、读懂、很可能、不是xx而是xx、你只是、当xx的时候、秘诀、为什么、在哪里、怎么办、史上、厉害、真正、是因为、方法、牛逼、你敢xx吗、你猜、马云、技巧、揭秘、爆照、必须看、传疯了、切记、围观、速看、感动、虐哭、居然、禁忌、疗法、只因、首次、伟大、猝死、出轨、小三、那些年、邂逅、秘密、意外、真相、背后究竟、绝招、第一个、否认、原来、采访、前兆、趋势、害死人、床上、你呢、赶快、不许、不要脸、千万、建议、年轻20岁、值得、和xx有关、罕见、至少、怒了、彻底、回应、强制、一触即发</span><br><span class="line"></span><br><span class="line">## 约束条件</span><br><span class="line">1.请使用以上 4 种标题创作技巧进行创作</span><br><span class="line">2.标题创作运用悬念和刺激引发读者好奇心，容易让人引起联想</span><br><span class="line">3.控制字数在 20 字以内</span><br><span class="line">4.每次列出 5 个标题，多个标题请使用 ‘\n’ 进行分割，以便用户选择</span><br><span class="line">5.收到内容后，直接创作对应的标题，无需额外的解释说明</span><br></pre></td></tr></table></figure><p>还有用户部分</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250311173734933.png" alt="image-20250311173734933"></p><p>然后对应的效果</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250311173752374.png" alt="image-20250311173752374"></p><h2 id="10-知识库图像检索和展示"><a href="#10-知识库图像检索和展示" class="headerlink" title="10. 知识库图像检索和展示"></a>10. 知识库图像检索和展示</h2><p>​我们可以利用工作流来实现知识库加大模型实现RAG的案例，同时在展示结果上可以把图片展示出来，这样效果会更加的直观些</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250311214833906.png" alt="image-20250311214833906"></p><p>这个案例的核心点是准备的检索数据和大模型的提示词</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## </span><br><span class="line">亲子运动项目名称: 拔河小勇士</span><br><span class="line">适合年龄：5~12岁</span><br><span class="line">运动时间：10~15分钟</span><br><span class="line">运动项目介绍：家长与孩子分别站在两端，通过拔河比赛锻炼孩子的力量和团队协作能力。</span><br><span class="line">运动目标：增强孩子的上肢和腰部力量，培养团队精神。</span><br><span class="line">运动规则：使用一条结实的绳子，中间划一条线，双方用力拉绳，将对方拉过中线即为胜利。</span><br><span class="line">特别提示：注意孩子手部保护，避免摩擦受伤。</span><br><span class="line">运动图片链接：[点击查看](https://img1.baidu.com/it/u=2633321814,4120475802&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=PNG?w=286&amp;h=229)</span><br><span class="line">## </span><br><span class="line">亲子运动项目名称: 跳绳接力</span><br><span class="line">适合年龄：6~12岁</span><br><span class="line">运动时间：15~20分钟</span><br><span class="line">运动项目介绍：家长与孩子轮流跳绳，通过接力形式增加运动趣味性。</span><br><span class="line">运动目标：提高孩子的耐力和协调性，增进亲子间的默契。</span><br><span class="line">运动规则：设定一个跳绳次数目标，家长和孩子轮流跳，直到完成目标。</span><br><span class="line">特别提示：选择适合孩子高度的跳绳，注意跳绳场地的平整。</span><br><span class="line">运动图片链接：[点击查看](https://img2.baidu.com/it/u=1175898262,1254664272&amp;fm=253&amp;fmt=auto&amp;app=120&amp;f=JPEG?w=608&amp;h=450)</span><br><span class="line">## </span><br><span class="line">亲子运动项目名称: 滚雪球大赛</span><br><span class="line">适合年龄：4~10岁</span><br><span class="line">运动时间：10~15分钟</span><br><span class="line">运动项目介绍：家长和孩子一起在雪地里滚雪球，比比谁滚得更快更大。</span><br><span class="line">运动目标：锻炼孩子的动手能力和创造力，享受冬日乐趣。</span><br><span class="line">运动规则：在规定时间内，看谁滚的雪球最大或者最快。</span><br><span class="line">特别提示：注意保暖，避免孩子受寒。</span><br><span class="line">运动图片链接：[点击查看](https://img1.baidu.com/it/u=2495318208,4233708303&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=708&amp;h=500)</span><br><span class="line">## </span><br><span class="line">亲子运动项目名称: 家庭篮球赛</span><br><span class="line">适合年龄：7~14岁</span><br><span class="line">运动时间：20~30分钟</span><br><span class="line">运动项目介绍：家长与孩子进行简易篮球比赛，提高孩子的篮球技能。</span><br><span class="line">运动目标：培养孩子的球技和团队合作意识。</span><br><span class="line">运动规则：简化篮球规则，进行半场3对3或1对1比赛。</span><br><span class="line">特别提示：穿着合适的运动装备，注意安全。</span><br><span class="line">运动图片链接：[点击查看](https://img0.baidu.com/it/u=3195478262,213097067&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=700&amp;h=467)</span><br><span class="line">## </span><br><span class="line">亲子运动项目名称: 亲子瑜伽</span><br><span class="line">适合年龄：5~12岁</span><br><span class="line">运动时间：15~20分钟</span><br><span class="line">运动项目介绍：家长与孩子一起练习瑜伽动作，增进亲子间的亲密关系。</span><br><span class="line">运动目标：提高孩子的柔韧性和平衡能力，放松身心。</span><br><span class="line">运动规则：跟随瑜伽教程，一起完成一系列瑜伽动作。</span><br><span class="line">特别提示：穿着舒适，保持呼吸均匀。</span><br><span class="line">运动图片链接：[点击查看](https://img1.baidu.com/it/u=2561021092,817698414&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=667&amp;h=500)</span><br><span class="line">## </span><br><span class="line">亲子运动项目名称: 家庭接力跑</span><br><span class="line">适合年龄：6~12岁</span><br><span class="line">运动时间：15~20分钟</span><br><span class="line">运动项目介绍：家庭成员分成两队，进行接力跑比赛。</span><br><span class="line">运动目标：提高孩子的奔跑速度和团队协作能力。</span><br><span class="line">运动规则：设定一个跑道，每队成员依次完成接力。</span><br><span class="line">特别提示：确保跑道平整，避免跌倒。</span><br><span class="line">运动图片链接：[点击查看](https://img1.baidu.com/it/u=975344947,3030921339&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=720&amp;h=480)</span><br><span class="line">## </span><br><span class="line">亲子运动项目名称: 飞盘争夺战</span><br><span class="line">适合年龄：6~12岁</span><br><span class="line">运动时间：15~20分钟</span><br><span class="line">运动项目介绍：家长与孩子进行飞盘传递和接住游戏。</span><br><span class="line">运动目标：锻炼孩子的反应速度和手眼协调能力。</span><br><span class="line">运动规则：在规定区域内，通过飞盘传递，争取让对方接不住飞盘。</span><br><span class="line">特别提示：选择开阔的场地，避免飞盘伤人。</span><br><span class="line">运动图片链接：[点击查看](https://img0.baidu.com/it/u=3788427895,2518031093&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=750&amp;h=500)</span><br><span class="line">## </span><br><span class="line">亲子运动项目名称: 家庭足球赛</span><br><span class="line">适合年龄：5~12岁</span><br><span class="line">运动时间：20~30分钟</span><br><span class="line">运动项目介绍：家长与孩子进行简易足球比赛，享受足球乐趣。</span><br><span class="line">运动目标：提高孩子的足球技能和团队精神。</span><br><span class="line">运动规则：简化足球规则，进行小场地比赛。</span><br><span class="line">特别提示：穿着足球鞋，注意场地安全。</span><br><span class="line">运动图片链接：[点击查看](https://example.com/images/soccer.jpg)</span><br><span class="line">## </span><br><span class="line">亲子运动项目名称: 亲子攀岩</span><br><span class="line">适合年龄：8~14岁</span><br><span class="line">运动时间：30~45分钟</span><br><span class="line">运动项目介绍：家长与孩子一起挑战攀岩墙，锻炼勇气和力量。</span><br><span class="line">运动目标：提高孩子的攀爬能力和自信心。</span><br><span class="line">运动规则：在专业人员的指导下，完成攀岩墙的挑战。</span><br><span class="line">特别提示：确保安全装备穿戴正确，听从指导员指挥。</span><br><span class="line">运动图片链接：[点击查看](https://example.com/images/rockclimbing.jpg)</span><br><span class="line">## </span><br><span class="line">亲子运动项目名称: 家庭自行车赛</span><br><span class="line">适合年龄：7~14岁</span><br><span class="line">运动时间：30~45分钟</span><br><span class="line">运动项目介绍：家长与孩子进行自行车比赛，享受户外运动。</span><br><span class="line">运动目标：提高孩子的骑行技巧和耐力。</span><br><span class="line">运动规则：在公园或自行车道上，设定一个往返赛道进行比赛。</span><br><span class="line">特别提示：佩戴头盔，遵守交通规则。</span><br><span class="line">运动图片链接：[点击查看](https://example.com/images/bicyclerace.jpg)</span><br><span class="line">请注意，以上图片链接仅为示例，实际图片需要您自行上传至网络并获取链接。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>提示词信息</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">## 角色</span><br><span class="line">你是一位亲子运动游戏创意专家，根据提供的&#123;&#123;#context#&#125;&#125;信息生成用户需要的亲子运动游戏。不要改变亲子运动游戏格式，要包含亲子运动项目名称、适合年龄、运动时间、运动目标、运动规则、特别提示。</span><br><span class="line"></span><br><span class="line">## 限制</span><br><span class="line">1.根据用户的具体提问回答问题，不要一下子把常见问题都输出给用户，</span><br><span class="line">2.请使用json格式输出，不要输出任何与json格式无关的内容。</span><br><span class="line"></span><br><span class="line">## 输出要求</span><br><span class="line">- 如果输出的内容包含图片URL，请使用以下JSON格式输出：</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;content&quot;: &quot;示例输出内容&quot;,</span><br><span class="line">    &quot;imageUrl&quot;: &quot;图片地址&quot;</span><br><span class="line">  &#125;</span><br><span class="line">3. 如果输出的内容不包含图片URL，请使用以下JSON格式输出：</span><br><span class="line">&#123;</span><br><span class="line">  &quot;content&quot;: &quot;示例输出内容&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250311214944716.png" alt="image-20250311214944716"></p><p>注意分支的条件</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250311215043740.png" alt="image-20250311215043740"></p><h2 id="11-自然语言生成SQL"><a href="#11-自然语言生成SQL" class="headerlink" title="11. 自然语言生成SQL"></a>11. 自然语言生成SQL</h2><p>​演示的效果</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250314202727768.png" alt="image-20250314202727768"></p><p>具体工作流设计</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250314202753155.png" alt="image-20250314202753155"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">帮我设计一个电商系统的数据库。</span><br><span class="line">需要有:</span><br><span class="line">    goods:商品表 </span><br><span class="line">    orders:订单表 </span><br><span class="line">    inventory:库存表 </span><br><span class="line">    vendors:商家表</span><br><span class="line">    customers:客户表，</span><br><span class="line">表结构的关联关系：</span><br><span class="line">商家和商品表关联</span><br><span class="line">商品表和库存表关联</span><br><span class="line">订单和客户关联</span><br><span class="line">订单和商品关联</span><br><span class="line">核心字段要求</span><br><span class="line">goods:需要有 id 商品名称 商品价格  图片  商家</span><br><span class="line">orders:需要有 id 客户 商品编号 商品名称  收货地址  商家id 订单时间</span><br><span class="line">inventory:需要有 id 商品编号  库存数据</span><br><span class="line">创建的表名用对应的 英文，表中的每个字段也需要用英文描述</span><br><span class="line">创建测试数据：</span><br><span class="line">商家表设计20条数据。</span><br><span class="line">商品表设计50条记录，</span><br><span class="line">库存信息设计30条记录，</span><br><span class="line">订单按照时间生成最近半年的销售记录。每个月生成30~50条记录。</span><br><span class="line">客户生成20条记录。</span><br><span class="line">设计数据的时候注意表结构直接的关联关系。生成的sql语句需要满足mysql的语法要求</span><br></pre></td></tr></table></figure><p>可以通过大模型帮我们生成对应的SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> vendors (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    NAME <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    contact_info <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> customers (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    NAME <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> goods (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    NAME <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    price <span class="type">DECIMAL</span>(<span class="number">10</span>,<span class="number">2</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    image_url <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    vendor_id <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (vendor_id) <span class="keyword">REFERENCES</span> vendors(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> inventory (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    goods_id <span class="type">INT</span>,</span><br><span class="line">    stock <span class="type">INT</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (goods_id) <span class="keyword">REFERENCES</span> goods(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> orders (</span><br><span class="line">    id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    customer_id <span class="type">INT</span>,</span><br><span class="line">    goods_id <span class="type">INT</span>,</span><br><span class="line">    goods_name <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    shipping_address <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    vendor_id <span class="type">INT</span>,</span><br><span class="line">    order_time DATETIME,</span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (customer_id) <span class="keyword">REFERENCES</span> customers(id),</span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (goods_id) <span class="keyword">REFERENCES</span> goods(id),</span><br><span class="line">    <span class="keyword">FOREIGN KEY</span> (vendor_id) <span class="keyword">REFERENCES</span> vendors(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入商家数据 (20 条记录)</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> vendors (NAME, contact_info) <span class="keyword">VALUES</span></span><br><span class="line">(&quot;Vendor1&quot;, &quot;vendor1@example.com&quot;),</span><br><span class="line">(&quot;Vendor2&quot;, &quot;vendor2@example.com&quot;),</span><br><span class="line">(&quot;Vendor3&quot;, &quot;vendor3@example.com&quot;),</span><br><span class="line">(&quot;Vendor4&quot;, &quot;vendor4@example.com&quot;),</span><br><span class="line">(&quot;Vendor5&quot;, &quot;vendor5@example.com&quot;),</span><br><span class="line">(&quot;Vendor6&quot;, &quot;vendor6@example.com&quot;),</span><br><span class="line">(&quot;Vendor7&quot;, &quot;vendor7@example.com&quot;),</span><br><span class="line">(&quot;Vendor8&quot;, &quot;vendor8@example.com&quot;),</span><br><span class="line">(&quot;Vendor9&quot;, &quot;vendor9@example.com&quot;),</span><br><span class="line">(&quot;Vendor10&quot;, &quot;vendor10@example.com&quot;),</span><br><span class="line">(&quot;Vendor11&quot;, &quot;vendor11@example.com&quot;),</span><br><span class="line">(&quot;Vendor12&quot;, &quot;vendor12@example.com&quot;),</span><br><span class="line">(&quot;Vendor13&quot;, &quot;vendor13@example.com&quot;),</span><br><span class="line">(&quot;Vendor14&quot;, &quot;vendor14@example.com&quot;),</span><br><span class="line">(&quot;Vendor15&quot;, &quot;vendor15@example.com&quot;),</span><br><span class="line">(&quot;Vendor16&quot;, &quot;vendor16@example.com&quot;),</span><br><span class="line">(&quot;Vendor17&quot;, &quot;vendor17@example.com&quot;),</span><br><span class="line">(&quot;Vendor18&quot;, &quot;vendor18@example.com&quot;),</span><br><span class="line">(&quot;Vendor19&quot;, &quot;vendor19@example.com&quot;),</span><br><span class="line">(&quot;Vendor20&quot;, &quot;vendor20@example.com&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入商品数据 (50 条记录，随机分配商家)</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> goods (NAME, price, image_url, vendor_id) <span class="keyword">VALUES</span></span><br><span class="line">(&quot;Product1&quot;, <span class="number">10.99</span>, &quot;img1.jpg&quot;, <span class="number">1</span>),</span><br><span class="line">(&quot;Product2&quot;, <span class="number">20.99</span>, &quot;img2.jpg&quot;, <span class="number">2</span>),</span><br><span class="line">(&quot;Product3&quot;, <span class="number">30.99</span>, &quot;img3.jpg&quot;, <span class="number">3</span>),</span><br><span class="line">(&quot;Product4&quot;, <span class="number">40.99</span>, &quot;img4.jpg&quot;, <span class="number">4</span>),</span><br><span class="line">(&quot;Product5&quot;, <span class="number">50.99</span>, &quot;img5.jpg&quot;, <span class="number">5</span>),</span><br><span class="line">(&quot;Product6&quot;, <span class="number">15.49</span>, &quot;img6.jpg&quot;, <span class="number">6</span>),</span><br><span class="line">(&quot;Product7&quot;, <span class="number">25.49</span>, &quot;img7.jpg&quot;, <span class="number">7</span>),</span><br><span class="line">(&quot;Product8&quot;, <span class="number">35.49</span>, &quot;img8.jpg&quot;, <span class="number">8</span>),</span><br><span class="line">(&quot;Product9&quot;, <span class="number">45.49</span>, &quot;img9.jpg&quot;, <span class="number">9</span>),</span><br><span class="line">(&quot;Product10&quot;, <span class="number">55.49</span>, &quot;img10.jpg&quot;, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入库存数据 (30 条记录，随机选择商品)</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> inventory (goods_id, stock) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">100</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="number">150</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="number">200</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="number">250</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入客户数据 (20 条记录)</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> customers (NAME, email, address) <span class="keyword">VALUES</span></span><br><span class="line">(&quot;Customer1&quot;, &quot;cust1@example.com&quot;, &quot;Address1&quot;),</span><br><span class="line">(&quot;Customer2&quot;, &quot;cust2@example.com&quot;, &quot;Address2&quot;),</span><br><span class="line">(&quot;Customer3&quot;, &quot;cust3@example.com&quot;, &quot;Address3&quot;),</span><br><span class="line">(&quot;Customer4&quot;, &quot;cust4@example.com&quot;, &quot;Address4&quot;),</span><br><span class="line">(&quot;Customer5&quot;, &quot;cust5@example.com&quot;, &quot;Address5&quot;);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入订单数据 (最近半年，每月 30~50 条记录)</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> orders (customer_id, goods_id, goods_name, shipping_address, vendor_id, order_time) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">1</span>, &quot;Product1&quot;, &quot;Address1&quot;, <span class="number">1</span>, NOW()),</span><br><span class="line">(<span class="number">2</span>, <span class="number">2</span>, &quot;Product2&quot;, &quot;Address2&quot;, <span class="number">2</span>, NOW()),</span><br><span class="line">(<span class="number">3</span>, <span class="number">3</span>, &quot;Product3&quot;, &quot;Address3&quot;, <span class="number">3</span>, NOW()),</span><br><span class="line">(<span class="number">4</span>, <span class="number">4</span>, &quot;Product4&quot;, &quot;Address4&quot;, <span class="number">4</span>, NOW()),</span><br><span class="line">(<span class="number">5</span>, <span class="number">5</span>, &quot;Product5&quot;, &quot;Address5&quot;, <span class="number">5</span>, NOW());</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后我们可以创建对应的工作流</p><p>对应的表结构的说明</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">以下是每张表的数据结构说明：  </span><br><span class="line"></span><br><span class="line">### **商家表（vendors）**  </span><br><span class="line">- **id**：商家ID，整数类型，主键，自增。  </span><br><span class="line">- **name**：商家名称，字符串类型，非空。  </span><br><span class="line">- **contact_info**：联系方式，字符串类型，可为空。  </span><br><span class="line"></span><br><span class="line">### **客户表（customers）**  </span><br><span class="line">- **id**：客户ID，整数类型，主键，自增。  </span><br><span class="line">- **name**：客户名称，字符串类型，非空。  </span><br><span class="line">- **email**：电子邮件，字符串类型，可为空。  </span><br><span class="line">- **address**：收货地址，字符串类型，可为空。  </span><br><span class="line"></span><br><span class="line">### **商品表（goods）**  </span><br><span class="line">- **id**：商品ID，整数类型，主键，自增。  </span><br><span class="line">- **name**：商品名称，字符串类型，非空。  </span><br><span class="line">- **price**：商品价格，十进制(10,2)类型，非空。  </span><br><span class="line">- **image_url**：商品图片URL，字符串类型，可为空。  </span><br><span class="line">- **vendor_id**：商家ID，整数类型，外键，关联 `vendors(id)`。  </span><br><span class="line"></span><br><span class="line">### **库存表（inventory）**  </span><br><span class="line">- **id**：库存ID，整数类型，主键，自增。  </span><br><span class="line">- **goods_id**：商品ID，整数类型，外键，关联 `goods(id)`。  </span><br><span class="line">- **stock**：库存数量，整数类型，非空。  </span><br><span class="line"></span><br><span class="line">### **订单表（orders）**  </span><br><span class="line">- **id**：订单ID，整数类型，主键，自增。  </span><br><span class="line">- **customer_id**：客户ID，整数类型，外键，关联 `customers(id)`。  </span><br><span class="line">- **goods_id**：商品ID，整数类型，外键，关联 `goods(id)`。  </span><br><span class="line">- **goods_name**：商品名称，字符串类型，冗余存储，便于查询。  </span><br><span class="line">- **shipping_address**：收货地址，字符串类型，非空。  </span><br><span class="line">- **vendor_id**：商家ID，整数类型，外键，关联 `vendors(id)`。  </span><br><span class="line">- **order_time**：订单时间，日期时间类型，非空。  </span><br><span class="line"></span><br><span class="line">这样，每张表的数据结构清晰，符合关系型数据库的设计规范。你需要进一步优化或者修改吗？</span><br></pre></td></tr></table></figure><p>第一个LLM中的提示词内容</p><p>System</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">你是一位精通SQL语言的数据库专家，熟悉MySQL数据库。你的任务是根据用户的自然语言输入，编写出可直接执行的SQL查询语句。输出内容必须是可以执行的SQL语句，不能包含任何多余的信息。</span><br><span class="line"></span><br><span class="line">核心规则：</span><br><span class="line">1. 根据用户的查询需求，确定涉及的表和字段。</span><br><span class="line">2. 确保SQL语句的语法符合MySQL的规范。</span><br><span class="line">3. 输出的SQL语句必须完整且可执行，不包含注释或多余的换行符。</span><br><span class="line"></span><br><span class="line">关键技巧：</span><br><span class="line">- WHERE 子句： 用于过滤数据。例如，`WHERE column_name = &#x27;value&#x27;`。</span><br><span class="line">- **日期处理：** 使用`STR_TO_DATE`函数将字符串转换为日期类型。例如，`STR_TO_DATE(&#x27;2025-03-14&#x27;, &#x27;%Y-%m-%d&#x27;)`。</span><br><span class="line">- **聚合函数：** 如`COUNT`、`SUM`、`AVG`等，用于计算汇总信息。</span><br><span class="line">- **除法处理：** 在进行除法运算时，需考虑除数为零的情况，避免错误。</span><br><span class="line">- **日期范围示例：** 查询特定日期范围的数据时，使用`BETWEEN`关键字。例如，`WHERE date_column BETWEEN &#x27;2025-01-01&#x27; AND &#x27;2025-12-31&#x27;`。</span><br><span class="line"></span><br><span class="line">**注意事项：**</span><br><span class="line">1. 确保字段名和表名的正确性，避免拼写错误。</span><br><span class="line">2. 对于字符串类型的字段，使用单引号括起来。例如，`&#x27;sample_text&#x27;`。</span><br><span class="line">3. 在使用聚合函数时，如果需要根据特定字段分组，使用`GROUP BY`子句。</span><br><span class="line">4. 在进行除法运算时，需判断除数是否为零，以避免运行时错误。</span><br><span class="line">5. 生成的sql语句 不能有换行符 比如 \n</span><br><span class="line">6. 在计算订单金额的时候直接计算对应的商品价格就可以了，不用计算订单的商品数量</span><br><span class="line"></span><br><span class="line">请根据上述规则，将用户的自然语言查询转换为可执行的MySQL查询语句。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>user部分的提示词</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">数据库结构：</span><br><span class="line">商家表（vendors）</span><br><span class="line">id：商家ID，整数类型，主键，自增。</span><br><span class="line">name：商家名称，字符串类型，非空。</span><br><span class="line">contact_info：联系方式，字符串类型，可为空。</span><br><span class="line">客户表（customers）</span><br><span class="line">id：客户ID，整数类型，主键，自增。</span><br><span class="line">name：客户名称，字符串类型，非空。</span><br><span class="line">email：电子邮件，字符串类型，可为空。</span><br><span class="line">address：收货地址，字符串类型，可为空。</span><br><span class="line">商品表（goods）</span><br><span class="line">id：商品ID，整数类型，主键，自增。</span><br><span class="line">name：商品名称，字符串类型，非空。</span><br><span class="line">price：商品价格，十进制(10,2)类型，非空。</span><br><span class="line">image_url：商品图片URL，字符串类型，可为空。</span><br><span class="line">vendor_id：商家ID，整数类型，外键，关联 vendors(id)。</span><br><span class="line">库存表（inventory）</span><br><span class="line">id：库存ID，整数类型，主键，自增。</span><br><span class="line">goods_id：商品ID，整数类型，外键，关联 goods(id)。</span><br><span class="line">stock：库存数量，整数类型，非空。</span><br><span class="line">订单表（orders）</span><br><span class="line">id：订单ID，整数类型，主键，自增。</span><br><span class="line">customer_id：客户ID，整数类型，外键，关联 customers(id)。</span><br><span class="line">goods_id：商品ID，整数类型，外键，关联 goods(id)。</span><br><span class="line">goods_name：商品名称，字符串类型，冗余存储，便于查询。</span><br><span class="line">shipping_address：收货地址，字符串类型，非空。</span><br><span class="line">vendor_id：商家ID，整数类型，外键，关联 vendors(id)。</span><br><span class="line">order_time：订单时间，日期时间类型，非空。</span><br><span class="line"></span><br><span class="line">问题：&#123;&#123;#1741938398688.sql#&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>代码执行部分是通过Python代码调用对应的接口来执行SQL操作,这部分在前面的案例中有介绍的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">sql: <span class="built_in">str</span></span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    url = <span class="string">&quot;http://host.docker.internal:5000/execute_sql&quot;</span></span><br><span class="line">    connection_info = &#123;</span><br><span class="line">        <span class="string">&quot;host&quot;</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">        <span class="string">&quot;user&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span>,</span><br><span class="line">        <span class="string">&quot;database&quot;</span>: <span class="string">&quot;llm_shop&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 构造请求体</span></span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&quot;sql&quot;</span>: sql,</span><br><span class="line">        <span class="string">&quot;connection_info&quot;</span>: connection_info</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url, json=payload, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="string">&quot;result&quot;</span>:<span class="built_in">str</span>(response.json()[<span class="string">&quot;result&quot;</span>])&#125;</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">return</span> &#123;<span class="string">&quot;result&quot;</span>: <span class="string">f&quot;解析响应 JSON 失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;result&quot;</span>: <span class="string">f&quot;请求失败，状态码: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;result&quot;</span>: <span class="built_in">str</span>(e)&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后就是数据的整理。通过代码执行获取到对应的结果。然后处理成为我们需要的数据展示</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250314203059319.png" alt="image-20250314203059319"></p><p>对应的提示词内容</p><p>System</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">你是电商行业数据分析专家，分析JSON格式的sql查询结果，回答用户问题。</span><br><span class="line">关键规则：</span><br><span class="line">1.所有数据已符合用户问题中的条件</span><br><span class="line">2.直接使用提供的数据分析，不质疑数据是否符合条件</span><br><span class="line">3.不需要再次筛选或确认数据类别/时间范围</span><br><span class="line">4.数据为[]或空或者None时直接回复&quot;没有查询到相关数据&quot;，不得编造数据</span><br></pre></td></tr></table></figure><p>User</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数据是:&#123;&#123;#1741938410121.result#&#125;&#125;</span><br><span class="line">问题是：&#123;&#123;#1741938398688.sql#&#125;&#125;</span><br><span class="line">回答要求：</span><br><span class="line"> 1.列出详细数据，优先以表格方式列出数据</span><br><span class="line"> 2.识别趋势、异常，并提供分析和建议</span><br><span class="line"> 3.分析SQL语句&#123;&#123;#1741938410121.result#&#125;&#125;和用户的问题&#123;&#123;#1741938398688.sql#&#125;&#125;是否匹配</span><br><span class="line">4.最后附上查询的sql语句</span><br></pre></td></tr></table></figure><h2 id="12-Echarts可视化助手"><a href="#12-Echarts可视化助手" class="headerlink" title="12. Echarts可视化助手"></a>12. Echarts可视化助手</h2><p>​我们希望通过Echars 来是实现可视化的展示各种统计数据。我们通过具体的案例来给大家介绍下，具体的效果如下：</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250314201516085.png" alt="image-20250314201516085"></p><p>我们可以准备一个markdown的数据</p><table><thead><tr><th>年份</th><th>片名</th><th>票房（亿元）</th><th>平均票价（元）</th><th>观影人数（亿人次）</th></tr></thead><tbody><tr><td>2021</td><td>《你好，李焕英》</td><td>57.1</td><td>42.1</td><td>1.36</td></tr><tr><td>2022</td><td>《长津湖之水门桥》</td><td>56.2</td><td>56.1</td><td>1</td></tr><tr><td>2023</td><td>《流浪地球2》</td><td>60</td><td>45</td><td>1.33</td></tr><tr><td>2024</td><td>《抓娃娃》</td><td>65</td><td>42.1</td><td>1.54</td></tr></tbody></table><p>然后创建一个工作流。在开始节点我们可以上传一个文件</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250314201644870.png" alt="image-20250314201644870"></p><p>然后是文档提取节点</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250314201720500.png" alt="image-20250314201720500"></p><p>然后是格式转换节点：这里我们需要把提取的文档转换为csv格式的数据</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250314201803287.png" alt="image-20250314201803287"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 角色</span><br><span class="line">你是一个数据整理专家，擅长数据格式的整理和合格的转换</span><br><span class="line"># 数据</span><br><span class="line">&#123;&#123;#1741943310857.text#&#125;&#125;</span><br><span class="line"># 任务</span><br><span class="line">把数据转换为csv格式</span><br></pre></td></tr></table></figure><p>然后是参数提取器：需要从上一步中的格式转换数据中获取到csv的数据</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250314201849842.png" alt="image-20250314201849842"></p><p>指令</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 任务</span><br><span class="line">提取csv格式的字符串</span><br></pre></td></tr></table></figure><p>然后是通过执行一段 Python代码生成 满足 echarts 规范的代码</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250314201935156.png" alt="image-20250314201935156"></p><p>代码内容是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">csv_string</span>):</span><br><span class="line">    <span class="comment"># 将CSV字符串分割成行</span></span><br><span class="line">    lines = csv_string.strip().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用csv模块读取数据</span></span><br><span class="line">    reader = csv.reader(lines)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将所有行转换为列表</span></span><br><span class="line">    data = [row <span class="keyword">for</span> row <span class="keyword">in</span> reader]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将数字字符串转换为浮点数</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> data[<span class="number">1</span>:]:  <span class="comment"># 跳过标题行</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(row)):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                row[i] = <span class="built_in">float</span>(row[i])</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建完整的ECharts配置</span></span><br><span class="line">    echarts_config = &#123;</span><br><span class="line">        <span class="string">&quot;legend&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;tooltip&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;dataset&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;source&quot;</span>: data</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;xAxis&quot;</span>: [</span><br><span class="line">            &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;category&quot;</span>, <span class="string">&quot;gridIndex&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;category&quot;</span>, <span class="string">&quot;gridIndex&quot;</span>: <span class="number">1</span>&#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;yAxis&quot;</span>: [</span><br><span class="line">            &#123;<span class="string">&quot;gridIndex&quot;</span>: <span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;gridIndex&quot;</span>: <span class="number">1</span>&#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;grid&quot;</span>: [</span><br><span class="line">            &#123;<span class="string">&quot;bottom&quot;</span>: <span class="string">&quot;55%&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;top&quot;</span>: <span class="string">&quot;55%&quot;</span>&#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;series&quot;</span>: [</span><br><span class="line">            <span class="comment"># 第一个网格中的折线图系列</span></span><br><span class="line">            &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;seriesLayoutBy&quot;</span>: <span class="string">&quot;row&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;seriesLayoutBy&quot;</span>: <span class="string">&quot;row&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;seriesLayoutBy&quot;</span>: <span class="string">&quot;row&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;seriesLayoutBy&quot;</span>: <span class="string">&quot;row&quot;</span>&#125;,</span><br><span class="line">            <span class="comment"># 第二个网格中的柱状图系列</span></span><br><span class="line">            &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;xAxisIndex&quot;</span>: <span class="number">1</span>, <span class="string">&quot;yAxisIndex&quot;</span>: <span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;xAxisIndex&quot;</span>: <span class="number">1</span>, <span class="string">&quot;yAxisIndex&quot;</span>: <span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;xAxisIndex&quot;</span>: <span class="number">1</span>, <span class="string">&quot;yAxisIndex&quot;</span>: <span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;xAxisIndex&quot;</span>: <span class="number">1</span>, <span class="string">&quot;yAxisIndex&quot;</span>: <span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;xAxisIndex&quot;</span>: <span class="number">1</span>, <span class="string">&quot;yAxisIndex&quot;</span>: <span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;xAxisIndex&quot;</span>: <span class="number">1</span>, <span class="string">&quot;yAxisIndex&quot;</span>: <span class="number">1</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成输出文件</span></span><br><span class="line">    output = <span class="string">f&#x27;```echarts\n<span class="subst">&#123;json.dumps(echarts_config, ensure_ascii=<span class="literal">False</span>)&#125;</span>\n```&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;result&quot;</span>: output&#125;</span><br></pre></td></tr></table></figure><p>最后是结果的输出</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#1741943512414.csvdata#&#125;&#125;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&#123;&#123;#1741945375879.result#&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250314202114303.png" alt="image-20250314202114303"></p><p>然后就可以测试运行了</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250314202439874.png" alt="image-20250314202439874"></p><h2 id="13-文生图工作流"><a href="#13-文生图工作流" class="headerlink" title="13. 文生图工作流"></a>13. 文生图工作流</h2><p>​我们前面有介绍过文生图的案例，是在Dify中通过相关的工具来实现的。不过这种效果不是特别的高效，会被平台控制的比较严格。我们可以直接通过文生图的模型提供的API来直接访问生成。这样的效果会更好一些。我们来看看具体怎么实现吧。</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250316010457190.png" alt="image-20250316010457190"></p><p>具体的效果为</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250316010616818.png" alt="image-20250316010616818"></p><p>生成的效果：</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250316011615321.png" alt="image-20250316011615321"></p><p>图片的生成我们使用的是SiliconClound来实现。文档地址：<a href="https://docs.siliconflow.cn/cn/api-reference/images/images-generations">https://docs.siliconflow.cn/cn/api-reference/images/images-generations</a></p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250316012208833.png" alt="image-20250316012208833"></p><h2 id="14-生成小说和角色"><a href="#14-生成小说和角色" class="headerlink" title="14. 生成小说和角色"></a>14. 生成小说和角色</h2><p>​我们接下来看一个基于大模型来生成小说和相关角色的案例</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250316014016339.png" alt="image-20250316014016339"></p><p>效果</p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250316014108708.png" alt="image-20250316014108708"></p><p><img src="/2025/09/14/Dify%E6%95%99%E7%A8%8B/image-20250316014116356.png" alt="image-20250316014116356"></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dify </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RAG检索生成</title>
      <link href="/2025/08/25/RAG%E6%A3%80%E7%B4%A2%E7%94%9F%E6%88%90/"/>
      <url>/2025/08/25/RAG%E6%A3%80%E7%B4%A2%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h1 id="RAG介绍"><a href="#RAG介绍" class="headerlink" title="RAG介绍"></a>RAG介绍</h1><p><strong>RAG(Retrieval Augmented Generation)</strong></p><p>RAG（检索增强生成）是一种结合语言模型与信息检索技术的技术，通过从外部知识源检索相关背景信息来提升文本生成或回答问题的准确性和质量。</p><h2 id="1-LLM的缺陷"><a href="#1-LLM的缺陷" class="headerlink" title="1.LLM的缺陷"></a>1.LLM的缺陷</h2><p> 1.LLM的知识不是实时的，不具备知识更新<br> 2.LLM可能不知道你私有的领域&#x2F;业务知识，<br> 3.LLM有时会在回答中生成看似合理但实际上是错误的信息， </p><h2 id="2-为什么会用到RAG"><a href="#2-为什么会用到RAG" class="headerlink" title="2.为什么会用到RAG"></a>2.为什么会用到RAG</h2><p>1.提高准确性：通过检索相关的信息，RAG可以提高生成文本的准确性。<br>2.减少训练成本：与需要大量数据来训练的大型生成模型相比，RAG可以通过检索机制来减少所需的训练数据量，从而降低训川练成本。<br>3.适应性强：AG模型可以适应新的或不断变化的数据。由于它们能够检索最新的信息，因此在新数据和事件出现时，它们能够快速适应并生成相关的文本。 </p><h2 id="3-RAG概念"><a href="#3-RAG概念" class="headerlink" title="3.RAG概念"></a>3.RAG概念</h2><p>RAG(Retrieval Augmented Generation)顾名思义，通过检索外部数据，增强大模型的生成效果。<br>RAG即检索增强生成，为LLM提供了从某些数据源检索到的信息，并基于此修正生成的答案。RAG基本上是Search+LLM提示，可以通过大模型回答查询，并将搜索算法所找到的信息作为大模型的上下文。查询和检索到的上下文都会被注入到发送到LLM的提示语中。</p><h2 id="4-RAG-vs-Fine-tuning"><a href="#4-RAG-vs-Fine-tuning" class="headerlink" title="4.RAG vs Fine-tuning"></a>4.RAG vs Fine-tuning</h2><ul><li>RAG(检索增强生成)是把内部的文档数据先进行embedding,借助检索先获得大致的知识范围答案，再结合prompt给到LLM,让 LLM生成最终的答案)100% </li><li>Fine-tuning(微调)是用一定量的数据集对LLiv选行局部参数的调整，以期望LLM更加理解我们的业务逻辑，有更好的zero-shot能力。</li></ul><h2 id="5-RAG工作流"><a href="#5-RAG工作流" class="headerlink" title="5.RAG工作流"></a>5.RAG工作流</h2><p><a href="https://arxiv.org/pdf/2312.10997">RAG论文：https://arxiv.org/pdf/2312.10997</a><br><img src="/2025/08/25/RAG%E6%A3%80%E7%B4%A2%E7%94%9F%E6%88%90/file-20250824184857883.png"><br>对应中文：<br><img src="/2025/08/25/RAG%E6%A3%80%E7%B4%A2%E7%94%9F%E6%88%90/file-20250824184952247.png"></p><h2 id="RAG系统的搭建流程"><a href="#RAG系统的搭建流程" class="headerlink" title="RAG系统的搭建流程"></a>RAG系统的搭建流程</h2><p>具体流程如下：<br><img src="/2025/08/25/RAG%E6%A3%80%E7%B4%A2%E7%94%9F%E6%88%90/file-20250824185357384.png"></p><ul><li><p><strong>索引(Indexing)<strong>：索引首先清理和提取各种格式的原始数据，如PDF、HTML、Word和Markdown,然后将其转换为统一的纯文本格式。为了适应语言模型的上下文限制，文本被分割成更小的、可消化的块(chuk)。</strong>然后使用嵌入模型将块编码成向量表示</strong>，并存储在向量数据库中。这一步对于在随后的检索阶段实现高效的相似性搜索至关重要。知识库分割成chunks,并将chunks向量化至向量库中。</p></li><li><p><strong>检索(Retrieval)<strong>：在收到用户查询(Query)后，RAG系统采用与索引阶段</strong>相同的编码模型</strong>将查询转换为向量表示，然后计算索引语料库中查询向量与块向量的相似性得分。该系统优先级和检索最高k(Top-K)块，显示最大的相似性查询。<br>例如，二维空间中的向量可以表示为(x,y),表示从原点(0,0)到点(x,y)的有向线段<br>  <img src="/2025/08/25/RAG%E6%A3%80%E7%B4%A2%E7%94%9F%E6%88%90/file-20250824190947137.png"></p><ol><li>将文本转成一组浮点数：每个下标ⅰ，对应一个维度 </li><li>整个数组对应一个n维空间的一个点，即文本向量又叫Embeddings </li><li>向量之间可以计算距离，距离远近对应语义相似度大小州</li></ol></li></ul><p><img src="/2025/08/25/RAG%E6%A3%80%E7%B4%A2%E7%94%9F%E6%88%90/file-20250824191105134.png"><br>这些块随后被用作prompt中的扩展上下文。Query向量化，匹配向量空间中相近的chunks。.</p><p>RAG具体实现流程：<br>加载文件&#x3D;&gt;读取文本&#x3D;&gt;文本分割&#x3D;&gt;文本向量化&#x3D;&gt;输入问题向量化&#x3D;&gt;在文本向量中匹配出与问题向量最相似的 top k个&#x3D;&gt;匹配出的文本作为上下文和问题一起添加到prompt中&#x3D;&gt;提交给LLM生成回答</p><h1 id="RAG核心"><a href="#RAG核心" class="headerlink" title="RAG核心"></a>RAG核心</h1><h2 id="1-传统VS大模型"><a href="#1-传统VS大模型" class="headerlink" title="1.传统VS大模型"></a>1.传统VS大模型</h2><p>智能客服系统在没有大模型之前我们也是可以设计完成的只是实现的效果没有大模型那么好。下面是两则设计的原理<br><img src="/2025/08/25/RAG%E6%A3%80%E7%B4%A2%E7%94%9F%E6%88%90/file-20250824191735261.png"></p><h2 id="2-向量与Embeddings的定义"><a href="#2-向量与Embeddings的定义" class="headerlink" title="2.向量与Embeddings的定义"></a>2.向量与Embeddings的定义</h2><p>在数学中，向量（也称为欧几里得向量、几何向量），指具有大小(magnitude)和方向的量。它可以形象化地表示为带箭头的线段。箭头所指：代表向量的方向；线段长度：代表向量的大小。</p><p><img src="/2025/08/25/RAG%E6%A3%80%E7%B4%A2%E7%94%9F%E6%88%90/file-20250824192053326.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI  </span><br><span class="line"><span class="keyword">import</span> openai  </span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv  </span><br><span class="line">load_dotenv()  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line">  </span><br><span class="line">openai.api_key = <span class="string">&#x27;your openai api-key&#x27;</span>  </span><br><span class="line">client = OpenAI(api_key=openai.api_key)  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># print(response.choices[0].text)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_embeddings</span>(<span class="params">texts,model=<span class="string">&quot;text-embedding-3-large&quot;</span></span>):  </span><br><span class="line">    <span class="comment">#text是个包盒要获取嵌入表示的文本的列表，  </span></span><br><span class="line">    <span class="comment"># model则是用来指定要使用的模型的名称生  </span></span><br><span class="line">    <span class="comment"># 成文本的嵌人表示。  </span></span><br><span class="line">    <span class="comment"># 结果存储在data中。  </span></span><br><span class="line">    data = client.embeddings.create(<span class="built_in">input</span>=texts,model=model).data  </span><br><span class="line">    <span class="comment">#print(data〕  </span></span><br><span class="line">    <span class="comment"># 返回了一个包盒斯有嵌人表示的烈表  </span></span><br><span class="line">    <span class="keyword">return</span> [x.embedding <span class="keyword">for</span> x <span class="keyword">in</span> data]  </span><br><span class="line">  </span><br><span class="line">test_query=[<span class="string">&quot;大模型&quot;</span>]  </span><br><span class="line">vec = get_embeddings(test_query)  </span><br><span class="line"><span class="comment">#“大模型”文本嵌入表示的列表。  </span></span><br><span class="line"><span class="built_in">print</span>(vec)  </span><br><span class="line"><span class="comment">#&quot;大模型”文本的嵌入表示。  </span></span><br><span class="line"><span class="built_in">print</span>(vec[<span class="number">0</span>])  </span><br><span class="line"><span class="comment">#&quot;大模型”文本的嵌入表示的维度。3072  </span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(vec[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure><h2 id="相似度计算"><a href="#相似度计算" class="headerlink" title="相似度计算"></a>相似度计算</h2><p>距离越短相似度越高。<br>欧氏距离算法-对尺寸敏感<br>余弦距离算法-对方向敏感</p><h2 id="文档的加载与分隔"><a href="#文档的加载与分隔" class="headerlink" title="文档的加载与分隔"></a>文档的加载与分隔</h2><h3 id="基于文档的LLM回复系统搭建"><a href="#基于文档的LLM回复系统搭建" class="headerlink" title="基于文档的LLM回复系统搭建"></a>基于文档的LLM回复系统搭建</h3><p><img src="/2025/08/25/RAG%E6%A3%80%E7%B4%A2%E7%94%9F%E6%88%90/file-20250824233414610.png"></p><h3 id="把文本切分成chunks"><a href="#把文本切分成chunks" class="headerlink" title="把文本切分成chunks"></a>把文本切分成chunks</h3><p>我们把文本切分成chunks的方式有很多种：<br>1.按照句子来切分<br>2.按照字符数来切分<br>3.按固定字符数结合overlapping window<br>4.递归方法RecursiveCharacterTextSplitter</p><h4 id="按照句子来切分"><a href="#按照句子来切分" class="headerlink" title="按照句子来切分"></a>按照句子来切分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8  </span></span><br><span class="line"><span class="keyword">import</span> re  </span><br><span class="line">text=<span class="string">&quot;自然语言处理(NLP),作为计算机科学、人工智能与语言学的交融之地，致力于赋予计算机解析和处理人类语言的能力。在这个领域，机器学习发挥着至关重要的作用。利用多样的算法，机器得以分析、领会乃至创造我们所理解的语言。从机器翻译到情感分析，从自动摘要到实体识别，NLP的应用已遍布各个领域。随着深度学习技术的飞速进步，NLP的精确度与效能均实现了巨大飞跃。如今，部分尖端的NLP系统甚至能够处理复杂的语言理解任务，如问答系统、语音识别和对话系统等。LP的研究推进不仅优化了人机交流，也对提升机器的自主性和智能水平起到了关键作用。&quot;</span>  </span><br><span class="line"><span class="comment">#正则表达式匹配中文句子结束的标点符号  </span></span><br><span class="line">sentences=re.split(<span class="string">r&#x27;(。|？|！|\...\...)&#x27;</span>,text)  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#重新组合句子和结尾的标点符号  </span></span><br><span class="line">chunks = [sentence + (punctuation <span class="keyword">if</span> punctuation <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span>)<span class="keyword">for</span> sentence,punctuation <span class="keyword">in</span> <span class="built_in">zip</span>(sentences[::<span class="number">2</span>],sentences[<span class="number">1</span>::<span class="number">2</span>])]  </span><br><span class="line"><span class="keyword">for</span> i,chunk <span class="keyword">in</span> <span class="built_in">enumerate</span>(chunks):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;块<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>:<span class="subst">&#123;<span class="built_in">len</span>(chunk)&#125;</span>:<span class="subst">&#123;chunk&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">块1:55:自然语言处理(NLP),作为计算机科学、人工智能与语言学的交融之地，致力于赋予计算机解析和处理人类语言的能力。</span><br><span class="line">块2:21:在这个领域，机器学习发挥着至关重要的作用。</span><br><span class="line">块3:30:利用多样的算法，机器得以分析、领会乃至创造我们所理解的语言。</span><br><span class="line">块4:36:从机器翻译到情感分析，从自动摘要到实体识别，NLP的应用已遍布各个领域。</span><br><span class="line">块5:33:随着深度学习技术的飞速进步，NLP的精确度与效能均实现了巨大飞跃。</span><br><span class="line">块6:46:如今，部分尖端的NLP系统甚至能够处理复杂的语言理解任务，如问答系统、语音识别和对话系统等。</span><br><span class="line">块7:40:LP的研究推进不仅优化了人机交流，也对提升机器的自主性和智能水平起到了关键作用。</span><br></pre></td></tr></table></figure><h4 id="按照固定字符来切分"><a href="#按照固定字符来切分" class="headerlink" title="按照固定字符来切分"></a>按照固定字符来切分</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8  </span></span><br><span class="line"><span class="keyword">import</span> re  </span><br><span class="line">text=<span class="string">&quot;自然语言处理(NLP),作为计算机科学、人工智能与语言学的交融之地，致力于赋予计算机解析和处理人类语言的能力。在这个领域，机器学习发挥着至关重要的作用。利用多样的算法，机器得以分析、领会乃至创造我们所理解的语言。从机器翻译到情感分析，从自动摘要到实体识别，NLP的应用已遍布各个领域。随着深度学习技术的飞速进步，NLP的精确度与效能均实现了巨大飞跃。如今，部分尖端的NLP系统甚至能够处理复杂的语言理解任务，如问答系统、语音识别和对话系统等。LP的研究推进不仅优化了人机交流，也对提升机器的自主性和智能水平起到了关键作用。&quot;</span>  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split_by_fixed_char_count</span>(<span class="params">text,count</span>):  </span><br><span class="line">    <span class="keyword">return</span> [text[i:i+count]<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(text),count)]  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#假设我们按照每100个字符来切分文本  </span></span><br><span class="line">chunks = split_by_fixed_char_count(text,<span class="number">100</span>)  </span><br><span class="line"><span class="keyword">for</span> i,chunk <span class="keyword">in</span> <span class="built_in">enumerate</span>(chunks):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;块<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>:<span class="subst">&#123;<span class="built_in">len</span>(chunk)&#125;</span>:<span class="subst">&#123;chunk&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">块1:100:自然语言处理(NLP),作为计算机科学、人工智能与语言学的交融之地，致力于赋予计算机解析和处理人类语言的能力。在这个领域，机器学习发挥着至关重要的作用。利用多样的算法，机器得以分析、领会乃至创造我们所</span><br><span class="line">块2:100:理解的语言。从机器翻译到情感分析，从自动摘要到实体识别，NLP的应用已遍布各个领域。随着深度学习技术的飞速进步，NLP的精确度与效能均实现了巨大飞跃。如今，部分尖端的NLP系统甚至能够处理复杂的语言理</span><br><span class="line">块3:61:解任务，如问答系统、语音识别和对话系统等。LP的研究推进不仅优化了人机交流，也对提升机器的自主性和智能水平起到了关键作用。</span><br></pre></td></tr></table></figure><h3 id="按照固定字符-滑动窗口"><a href="#按照固定字符-滑动窗口" class="headerlink" title="按照固定字符+滑动窗口"></a>按照固定字符+滑动窗口</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8  </span></span><br><span class="line"><span class="keyword">import</span> re  </span><br><span class="line">text=<span class="string">&quot;自然语言处理(NLP),作为计算机科学、人工智能与语言学的交融之地，致力于赋予计算机解析和处理人类语言的能力。在这个领域，机器学习发挥着至关重要的作用。利用多样的算法，机器得以分析、领会乃至创造我们所理解的语言。从机器翻译到情感分析，从自动摘要到实体识别，NLP的应用已遍布各个领域。随着深度学习技术的飞速进步，NLP的精确度与效能均实现了巨大飞跃。如今，部分尖端的NLP系统甚至能够处理复杂的语言理解任务，如问答系统、语音识别和对话系统等。LP的研究推进不仅优化了人机交流，也对提升机器的自主性和智能水平起到了关键作用。&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sliding_window_chunks</span>(<span class="params">text,chunk_size,stride</span>):  </span><br><span class="line">    <span class="keyword">return</span> [text[i:i + chunk_size] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(text),stride)]  </span><br><span class="line">  </span><br><span class="line">chunks = sliding_window_chunks(text,<span class="number">100</span>,<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,chunk <span class="keyword">in</span> <span class="built_in">enumerate</span>(chunks):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;块<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>:<span class="subst">&#123;<span class="built_in">len</span>(chunk)&#125;</span>:<span class="subst">&#123;chunk&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">块1:100:自然语言处理(NLP),作为计算机科学、人工智能与语言学的交融之地，致力于赋予计算机解析和处理人类语言的能力。在这个领域，机器学习发挥着至关重要的作用。利用多样的算法，机器得以分析、领会乃至创造我们所</span><br><span class="line">块2:100:言的能力。在这个领域，机器学习发挥着至关重要的作用。利用多样的算法，机器得以分析、领会乃至创造我们所理解的语言。从机器翻译到情感分析，从自动摘要到实体识别，NLP的应用已遍布各个领域。随着深度学习技术</span><br><span class="line">块3:100:理解的语言。从机器翻译到情感分析，从自动摘要到实体识别，NLP的应用已遍布各个领域。随着深度学习技术的飞速进步，NLP的精确度与效能均实现了巨大飞跃。如今，部分尖端的NLP系统甚至能够处理复杂的语言理</span><br><span class="line">块4:100:的飞速进步，NLP的精确度与效能均实现了巨大飞跃。如今，部分尖端的NLP系统甚至能够处理复杂的语言理解任务，如问答系统、语音识别和对话系统等。LP的研究推进不仅优化了人机交流，也对提升机器的自主性和智</span><br><span class="line">块5:61:解任务，如问答系统、语音识别和对话系统等。LP的研究推进不仅优化了人机交流，也对提升机器的自主性和智能水平起到了关键作用。</span><br><span class="line">块6:11:能水平起到了关键作用。</span><br></pre></td></tr></table></figure><h4 id="递归方法"><a href="#递归方法" class="headerlink" title="递归方法"></a>递归方法</h4><p>通过递归的方式处理我们需要借助langchain来实现。所以需要添加对应的模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install langchain</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_text_splitters <span class="keyword">import</span> RecursiveCharacterTextSplitter  </span><br><span class="line"></span><br><span class="line">text=<span class="string">&quot;自然语言处理(NLP),作为计算机科学、人工智能与语言学的交融之地，致力于赋予计算机解析和处理人类语言的能力。在这个领域，机器学习发挥着至关重要的作用。利用多样的算法，机器得以分析、领会乃至创造我们所理解的语言。从机器翻译到情感分析，从自动摘要到实体识别，NLP的应用已遍布各个领域。随着深度学习技术的飞速进步，NLP的精确度与效能均实现了巨大飞跃。如今，部分尖端的NLP系统甚至能够处理复杂的语言理解任务，如问答系统、语音识别和对话系统等。LP的研究推进不仅优化了人机交流，也对提升机器的自主性和智能水平起到了关键作用。&quot;</span> </span><br><span class="line"></span><br><span class="line">splitter=RecursiveCharacterTextSplitter(  </span><br><span class="line">    chunk_size=<span class="number">50</span>,  </span><br><span class="line">    chunk_overlap=<span class="number">10</span>,  </span><br><span class="line">    length_function=<span class="built_in">len</span>,  </span><br><span class="line">)  </span><br><span class="line">chunks = splitter.split_text(text)  </span><br><span class="line"><span class="keyword">for</span> i,chunk <span class="keyword">in</span> <span class="built_in">enumerate</span>(chunks):  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;块<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>:<span class="subst">&#123;<span class="built_in">len</span>(chunk)&#125;</span>:<span class="subst">&#123;chunk&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">块1:50:自然语言处理(NLP),作为计算机科学、人工智能与语言学的交融之地，致力于赋予计算机解析和处理人类语</span><br><span class="line">块2:50:算机解析和处理人类语言的能力。在这个领域，机器学习发挥着至关重要的作用。利用多样的算法，机器得以分析</span><br><span class="line">块3:50:的算法，机器得以分析、领会乃至创造我们所理解的语言。从机器翻译到情感分析，从自动摘要到实体识别，NL</span><br><span class="line">块4:50:摘要到实体识别，NLP的应用已遍布各个领域。随着深度学习技术的飞速进步，NLP的精确度与效能均实现了</span><br><span class="line">块5:50:精确度与效能均实现了巨大飞跃。如今，部分尖端的NLP系统甚至能够处理复杂的语言理解任务，如问答系统、</span><br><span class="line">块6:50:解任务，如问答系统、语音识别和对话系统等。LP的研究推进不仅优化了人机交流，也对提升机器的自主性和智</span><br><span class="line">块7:21:提升机器的自主性和智能水平起到了关键作用。</span><br></pre></td></tr></table></figure><h2 id="向量检索"><a href="#向量检索" class="headerlink" title="向量检索"></a>向量检索</h2><p>检索的方式有哪些？列举两种： </p><ol><li>关键字搜索：通过用户输入的关键字来查找文本数据。 </li><li>语义搜索：不仅考虑关键词的匹配，还考虑词汇之间的语义关系，以提供更准确的搜索结果。</li></ol><h3 id="关键字检索"><a href="#关键字检索" class="headerlink" title="关键字检索"></a>关键字检索</h3><p>我们需要把相关的信息存储在Redis中。我们需要先按照一个Redis。在提供的资料中有。直接解压缩。然后 cmd进入到对应的目录。然后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server.exe</span><br></pre></td></tr></table></figure><p><img src="/2025/08/25/RAG%E6%A3%80%E7%B4%A2%E7%94%9F%E6%88%90/file-20250825000315287.png"><br>然后需要安装Redis模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install redis</span><br></pre></td></tr></table></figure><p>然后我们可以通过代码把我们的数据导入到Redist中去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI  </span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv  </span><br><span class="line"><span class="keyword">import</span> redis  </span><br><span class="line"><span class="keyword">import</span> json  </span><br><span class="line">load_dotenv()<span class="comment">#从我们的env文件中加载出对应的环境变量  </span></span><br><span class="line"><span class="comment"># #import os  </span></span><br><span class="line"><span class="comment"># #os.environ[&quot;http_proxy&quot;]&quot;http://127.0.0.1:1083&quot;  </span></span><br><span class="line"><span class="comment"># #os.environ[&quot;https_proxy&quot;]=&quot;http://127.0.0.1:1083&quot;  </span></span><br><span class="line">client = OpenAI()  </span><br><span class="line"><span class="comment">#连接Redis  </span></span><br><span class="line">r = redis.Redis(host=<span class="string">&#x27;localhost&#x27;</span>,port=<span class="number">6379</span>,decode_responses=<span class="literal">True</span>)  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#读取数据  </span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;train_zh.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:  </span><br><span class="line">    data = [json.loads(line)<span class="keyword">for</span> line <span class="keyword">in</span> f]  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#取出问题和输出数据  </span></span><br><span class="line">instructions = [ entry[<span class="string">&#x27;instruction&#x27;</span>] <span class="keyword">for</span> entry <span class="keyword">in</span> data[<span class="number">0</span>:<span class="number">1000</span>]]  </span><br><span class="line">outputs = [entry[<span class="string">&#x27;output&#x27;</span>]<span class="keyword">for</span> entry <span class="keyword">in</span> data[<span class="number">0</span>:<span class="number">1000</span>]]  </span><br><span class="line"><span class="comment"># print(&quot;instructions&quot;,instructions)  </span></span><br><span class="line"><span class="comment"># print(&quot;outputs&quot;,outputs)  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#将数据存储到Redis  </span></span><br><span class="line"><span class="keyword">for</span> instruction,output <span class="keyword">in</span> <span class="built_in">zip</span>(instructions,outputs):  </span><br><span class="line">    r.<span class="built_in">set</span>(instruction,output) <span class="comment">#存入Redis,值序列化为JSON  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#搜索函数：根据关键字搜索instruction中包含该关键字的条目  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_instructions</span> (keyword,top_n=<span class="number">3</span>):  </span><br><span class="line">    <span class="comment">#通过模糊匹配  </span></span><br><span class="line">    keys = r.keys(pattern=<span class="string">&quot;*&quot;</span>+keyword +<span class="string">&quot;*&quot;</span> )  </span><br><span class="line">    data=[]  </span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> keys:  </span><br><span class="line">        data.append(r.get(key))  </span><br><span class="line">    <span class="keyword">return</span> data[:top_n]</span><br></pre></td></tr></table></figure><p>LLM接口封装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI  </span><br><span class="line">client = OpenAI()  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_completion</span>(<span class="params">prompt,model=<span class="string">&quot;gpt-3.5-turbo&quot;</span></span>):  </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;封装openai接口&#x27;&#x27;&#x27;</span>  </span><br><span class="line">    messages = [&#123;<span class="string">&quot;role&quot;</span>:<span class="string">&quot;user&quot;</span>,<span class="string">&quot;content&quot;</span>:prompt&#125;]  </span><br><span class="line">    response = client.chat.completions.create(  </span><br><span class="line">        model=model,  </span><br><span class="line">        messages=messages,  </span><br><span class="line">        temperature=<span class="number">0</span>,<span class="comment">#模型输出的随机性，0表示随机性最小  </span></span><br><span class="line">     )  </span><br><span class="line">    <span class="keyword">return</span> response.choices[<span class="number">0</span>].message.content</span><br></pre></td></tr></table></figure><p>Prompt模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">user_query=<span class="string">&quot;白癜风&quot;</span>  </span><br><span class="line"><span class="comment">#ser_query=&quot;家里有甲醛，怎么办？&quot;  </span></span><br><span class="line"><span class="comment">#1.检索  </span></span><br><span class="line">search_results = search_instructions(user_query,<span class="number">3</span>)  </span><br><span class="line">search_results =  <span class="string">&quot;&quot;</span>.join(search_results)  </span><br><span class="line"><span class="built_in">print</span>(search_results)  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#2.构建Prompt  </span></span><br><span class="line">prompt =<span class="string">f&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">你是一个问答机器人。</span></span><br><span class="line"><span class="string">你的任务是根据下述给定的已知信息回答用户问题。</span></span><br><span class="line"><span class="string">确保你的回复完全依据下述已知信息。</span></span><br><span class="line"><span class="string">不要编造答案。如果下述已知信息不足以回答用户的问题，请直接回复&quot;我无法回答您的问题&quot;。  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">已知信息：  </span></span><br><span class="line"><span class="string"><span class="subst">&#123;search_results&#125;</span>  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">用户问：  </span></span><br><span class="line"><span class="string"><span class="subst">&#123;user_query&#125;</span>  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">请用中文回答用户问题。  </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;===Prompt===&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(prompt)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;===Prompt===&quot;</span>)  </span><br><span class="line"><span class="comment">#3.调用LLM response = get_completion(prompt)   </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;===回复==&quot;</span>)   </span><br><span class="line"><span class="built_in">print</span>(response)</span><br></pre></td></tr></table></figure><h3 id="向量数据库"><a href="#向量数据库" class="headerlink" title="向量数据库"></a>向量数据库</h3><p>在人工智能时代，向量数据库已成为数据管理和A模型不可或缺的一部分。向量数据库是一种专门设计用来存储和查询向量嵌入数据的数据库。这些向量嵌入是A模型用于识别模式、关联和潜在结构的关键数据表示。</p><p>随着A和机器学习应用的普及，这些模型生成的嵌入包含大量属性或特征，使得它们的表示难以管理。这就是为什么数据从业者需要一种专门为处理这种数据而开发的数据库，这就是向量数据库的用武之地。 </p><p><strong>Pinecone</strong><br>Pinecone:<a href="http://www.pinecone.io/">www.pinecone.io/</a><br>Pinecone的关键特性包括：</p><ul><li>重复检测：帮助用户识别和删除重复的数据</li><li>排名跟踪：跟踪数据在搜索结果中的排名，有助于优化和调整搜索策略</li><li>数据搜索：快速搜索数据库中的数据，支持复杂的搜索条件</li><li>分类：对数据进行分类，便于管理和检索</li><li>去重：自动识别和删除重复数据，保持数据集的纯净和一致性</li></ul><p><strong>Milvus</strong><br>Milvus:milvus.io&#x2F;<br>Milvus的关键特性包括：</p><ul><li>毫秒级搜索万亿级向量数据集</li><li>简单管理非结构化数据</li><li>可靠的向量数据库，始终可用</li><li>高度可扩展和适应性强</li><li>混合搜索</li><li>统一的Lambda结构</li><li>受到社区支持，得到行业认可</li></ul><p><strong>Chroma</strong><br>Chroma:<a href="http://www.trychroma.com/">www.trychroma.com/</a><br>Chroma的关键特性包括：</p><ul><li>功能丰富：支持香询、过滤、密度估计等多种功能</li><li>即将添加的语言链(LangChain)、Llamalndex等更多功能</li><li>相同的API可以在Python笔记本中运行，也可以扩展到集群，用于开发、测试和生产</li></ul><p><strong>Faiss</strong><br>Faiss:<a href="https://github.com/facebookresearch/faiss">https://github.com/facebookresearch/faiss</a><br>Faiss的关键特性包括：</p><ul><li>不仅返回最近的邻居，还返回第二近、第三近和第k近的邻居</li><li>可以同时搜索多个向量，而不仅仅是单个向量（批量处理）</li><li>使用最大内积搜索而不是最小欧几里得搜索</li><li>也支持其他距离度量，但程度较低。</li><li>返回查询位置附近指定半径内的所有元素(范围搜索)</li><li>可以将索引存储在磁盘上，而不仅仅是RAM中</li></ul><p><strong>如何选型向量数据库</strong><br>在选择适合项目的向量数据库时，需要根据项目的具体需求、团队的技术背景和资源情况来综合评估。以下是一些建议和注意事项：<br>向量嵌入的生成</p><ul><li>如果已经有了自己的向量嵌入生成模型，那么需要的是一个能够高效存储和查询这些向量的数据库</li><li>如果需要数据库服务来生成向量嵌入，那么应该选择提供这类功能的产品</li></ul><p>延迟要求</p><ul><li>对于需要实时响应的应用程序，低延迟是关键。需要选择能够提供快速查询响应的数据库</li><li>如果应用程序允许批量处理，那么可以选择那些优化了大批量数据处理的数据库</li></ul><p>开发人员的经验。</p><ul><li>根据团队的技术栈和经验，选择一个易于集成和使用的数据库</li><li>如果团队成员对某些技术或框架更熟悉，那么选择一个能够与之无缝集成的数据库会更有利</li></ul><p><strong>chromadb演示</strong><br>安装chromadb模块 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install chromadb</span><br></pre></td></tr></table></figure><p>把数据存储到向量数据库，并通过向量数据库完成了检索</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI  </span><br><span class="line"><span class="keyword">import</span> chromadb  </span><br><span class="line"><span class="keyword">from</span> chromadb.config <span class="keyword">import</span> settings  </span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv  </span><br><span class="line"><span class="keyword">import</span> json  </span><br><span class="line">load_dotenv()  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line">client = OpenAI()  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#要换成text-embedding-3-large  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_embeddings</span>(<span class="params">texts,model=<span class="string">&quot;text-embedding-3-large&quot;</span></span>):  </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;封装OpenAI的Embedding模型接口&#x27;&#x27;&#x27;</span>  </span><br><span class="line">    data = client.embeddings.create(<span class="built_in">input</span>=texts,model=model).data  </span><br><span class="line">    <span class="keyword">return</span> [x.embedding <span class="keyword">for</span> x <span class="keyword">in</span> data]  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;train_zh.json&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:  </span><br><span class="line">    data = [json.loads(line) <span class="keyword">for</span> line <span class="keyword">in</span> f ]  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># print(data[0:100])  </span></span><br><span class="line">instructions = [entry[<span class="string">&#x27;instruction&#x27;</span>]<span class="keyword">for</span> entry <span class="keyword">in</span> data[<span class="number">0</span>:<span class="number">100</span>]]  </span><br><span class="line">outputs=[entry[<span class="string">&#x27;output&#x27;</span>]<span class="keyword">for</span> entry <span class="keyword">in</span> data[<span class="number">0</span>:<span class="number">100</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyVectorDBConnector</span>:  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,collection_name,embedding_fn</span>):  </span><br><span class="line">        chroma_client= chromadb.Client(Settings(allow_reset=<span class="literal">True</span>))  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">#为了演示，实际不需要每次reset()  </span></span><br><span class="line">        chroma_client.reset()  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">#创建一个collection  </span></span><br><span class="line">        <span class="variable language_">self</span>.collection = chroma_client.get_or_create_collection(name=collection_name)  </span><br><span class="line">        <span class="comment"># self.embedding_fn = get_embeddings  </span></span><br><span class="line">        <span class="variable language_">self</span>.embedding_fn = embedding_fn  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_documents</span>(<span class="params">self,instructions,outputs</span>):  </span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;向collection中添加文档与向量&#x27;&#x27;&#x27;</span>  </span><br><span class="line">        <span class="comment">#get_embeddings(instructions)问题做了向量化  </span></span><br><span class="line">        embeddings = <span class="variable language_">self</span>.embedding_fn(instructions)  </span><br><span class="line">        <span class="variable language_">self</span>.collection.add(  </span><br><span class="line">            embeddings=embeddings,<span class="comment">#每个文档的向量  </span></span><br><span class="line">            documents=outputs,<span class="comment">#文档的原文  </span></span><br><span class="line">            ids = [<span class="string">f&quot;id<span class="subst">&#123;i&#125;</span>&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(outputs))] <span class="comment">#每个文档的id  </span></span><br><span class="line">        )  </span><br><span class="line">            <span class="comment"># print(self.collection.count())  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self,query,top_n</span>):  </span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;检索向量数据库&#x27;&#x27;&#x27;</span>  </span><br><span class="line">        results=<span class="variable language_">self</span>.collection.query(  </span><br><span class="line">            <span class="comment"># get_embeddings([query])  </span></span><br><span class="line">            query_embeddings = <span class="variable language_">self</span>.embedding_fn([query]),  </span><br><span class="line">            n_results = top_n  </span><br><span class="line">        )  </span><br><span class="line">        <span class="keyword">return</span> results  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#创建一个向量数据库对象  </span></span><br><span class="line">vector_db = MyVectorDBConnector(<span class="string">&quot;demo&quot;</span>,get_embeddings)  </span><br><span class="line"><span class="comment">#向向量数据库中添加文档  </span></span><br><span class="line">vector_db.add_documents(instructions,outputs)  </span><br><span class="line"><span class="comment">#User_query=&quot;白癜风&quot;  </span></span><br><span class="line">User_query=<span class="string">&quot;得了白癜风怎么办？&quot;</span>  </span><br><span class="line">results = vector_db.search(user_query,<span class="number">2</span>)   </span><br><span class="line"><span class="comment"># print(results)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> para <span class="keyword">in</span> results[<span class="string">&#x27;documents&#x27;</span>][<span class="number">0</span>]:  </span><br><span class="line">    <span class="built_in">print</span>(para +<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="基于向量检索的RAG实现"><a href="#基于向量检索的RAG实现" class="headerlink" title="基于向量检索的RAG实现"></a>基于向量检索的RAG实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"></span><br><span class="line">load_dotenv()</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">import</span> chromadb</span><br><span class="line"><span class="keyword">from</span> chromadb.config <span class="keyword">import</span> Settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client = OpenAI()</span><br><span class="line"></span><br><span class="line">prompt_template = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">你是一个问答机器人。</span></span><br><span class="line"><span class="string">你的任务是根据下述给定的已知信息回答用户问题。</span></span><br><span class="line"><span class="string">确保你的回复完全依据下述已知信息。不要编造答案。</span></span><br><span class="line"><span class="string">如果下述已知信息不足以回答用户的问题，请直接回复&quot;我无法回答您的问题&quot;。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">已知信息:</span></span><br><span class="line"><span class="string">__INFO__</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">用户问：</span></span><br><span class="line"><span class="string">__QUERY__</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">请用中文回答用户问题。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;train_zh.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = [json.loads(line) <span class="keyword">for</span> line <span class="keyword">in</span> f]</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(data[0:100])</span></span><br><span class="line">instructions = [entry[<span class="string">&#x27;instruction&#x27;</span>] <span class="keyword">for</span> entry <span class="keyword">in</span> data[<span class="number">0</span>:<span class="number">1000</span>]]</span><br><span class="line">outputs = [entry[<span class="string">&#x27;output&#x27;</span>] <span class="keyword">for</span> entry <span class="keyword">in</span> data[<span class="number">0</span>:<span class="number">1000</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_completion</span>(<span class="params">prompt, model=<span class="string">&quot;gpt-4o&quot;</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;封装 openai 接口&#x27;&#x27;&#x27;</span></span><br><span class="line">    messages = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt&#125;]</span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">        model=model,</span><br><span class="line">        messages=messages,</span><br><span class="line">        temperature=<span class="number">0</span>,  <span class="comment"># 模型输出的随机性，0 表示随机性最小</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> response.choices[<span class="number">0</span>].message.content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_prompt</span>(<span class="params">prompt_template, **kwargs</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;将 Prompt 模板赋值&#x27;&#x27;&#x27;</span></span><br><span class="line">    prompt = prompt_template</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, <span class="built_in">str</span>):</span><br><span class="line">            val = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(v, <span class="built_in">list</span>) <span class="keyword">and</span> <span class="built_in">all</span>(<span class="built_in">isinstance</span>(elem, <span class="built_in">str</span>) <span class="keyword">for</span> elem <span class="keyword">in</span> v):</span><br><span class="line">            val = <span class="string">&#x27;\n&#x27;</span>.join(v)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            val = <span class="built_in">str</span>(v)</span><br><span class="line">        prompt = prompt.replace(<span class="string">f&quot;__<span class="subst">&#123;k.upper()&#125;</span>__&quot;</span>, val)</span><br><span class="line">    <span class="keyword">return</span> prompt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyVectorDBConnector</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, collection_name, embedding_fn</span>):</span><br><span class="line">        chroma_client = chromadb.Client(Settings(allow_reset=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 为了演示，实际不需要每次 reset()</span></span><br><span class="line">        chroma_client.reset()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一个 collection</span></span><br><span class="line">        <span class="variable language_">self</span>.collection = chroma_client.get_or_create_collection(name=collection_name)</span><br><span class="line">        <span class="variable language_">self</span>.embedding_fn = embedding_fn</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_documents</span>(<span class="params">self, instructions, outputs</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;向 collection 中添加文档与向量&#x27;&#x27;&#x27;</span></span><br><span class="line">        embeddings = <span class="variable language_">self</span>.embedding_fn(instructions)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(embeddings) != <span class="built_in">len</span>(instructions) <span class="keyword">or</span> <span class="built_in">len</span>(instructions) != <span class="built_in">len</span>(outputs):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;嵌入向量、instructions 和 outputs 数量不一致&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.collection.add(</span><br><span class="line">            embeddings=embeddings,  <span class="comment"># 每个文档的向量</span></span><br><span class="line">            documents=outputs,  <span class="comment"># 文档的原文</span></span><br><span class="line">            ids=[<span class="string">f&quot;id<span class="subst">&#123;i&#125;</span>&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(outputs))]  <span class="comment"># 每个文档的 id</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, query, top_n</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;检索向量数据库&#x27;&#x27;&#x27;</span></span><br><span class="line">        results = <span class="variable language_">self</span>.collection.query(</span><br><span class="line">            query_embeddings=<span class="variable language_">self</span>.embedding_fn([query]),</span><br><span class="line">            n_results=top_n</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_embeddings</span>(<span class="params">texts, model=<span class="string">&quot;text-embedding-3-large&quot;</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;封装 OpenAI 的 Embedding 模型接口&#x27;&#x27;&#x27;</span></span><br><span class="line">    data = client.embeddings.create(<span class="built_in">input</span>=texts, model=model).data</span><br><span class="line">    <span class="keyword">return</span> [x.embedding <span class="keyword">for</span> x <span class="keyword">in</span> data]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个向量数据库对象</span></span><br><span class="line">vector_db = MyVectorDBConnector(<span class="string">&quot;demo&quot;</span>, get_embeddings)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向向量数据库中添加文档</span></span><br><span class="line">vector_db.add_documents(instructions, outputs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RAG_Bot</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, vector_db, llm_api, n_results=<span class="number">2</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.vector_db = vector_db</span><br><span class="line">        <span class="variable language_">self</span>.llm_api = llm_api</span><br><span class="line">        <span class="variable language_">self</span>.n_results = n_results</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">chat</span>(<span class="params">self, user_query</span>):</span><br><span class="line">        <span class="comment"># 1. 检索</span></span><br><span class="line">        search_results = <span class="variable language_">self</span>.vector_db.search(user_query, <span class="variable language_">self</span>.n_results)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. 构建 Prompt</span></span><br><span class="line">        prompt = build_prompt(</span><br><span class="line">            prompt_template, info=search_results[<span class="string">&#x27;documents&#x27;</span>][<span class="number">0</span>], query=user_query)</span><br><span class="line">        <span class="comment"># print(&quot;=&quot;*50)</span></span><br><span class="line">        <span class="comment"># print(prompt)</span></span><br><span class="line">        <span class="comment"># print(&quot;=&quot;*50)</span></span><br><span class="line">        <span class="comment"># 3. 调用 LLM</span></span><br><span class="line">        response = <span class="variable language_">self</span>.llm_api(prompt)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个RAG机器人</span></span><br><span class="line">bot = RAG_Bot(</span><br><span class="line">    vector_db,</span><br><span class="line">    llm_api=get_completion</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">user_query = <span class="string">&quot;拉肚子怎么办？&quot;</span></span><br><span class="line"></span><br><span class="line">response = bot.chat(user_query)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response)</span><br></pre></td></tr></table></figure><p>输出的结果</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">您好，拉肚子可能是许多不同原因导致的，例如食物中毒、肠炎、病毒感染等。建议您注意以下几点：</span><br><span class="line">1. 多喝水，保持水分，防止脱水。可以选择椰子水、果汁或盐水等饮品。</span><br><span class="line">2. 避免食用生肉、生蛋、生海鲜等容易感染细菌的食物。</span><br><span class="line">3. 避免食用过多的辛辣、油腻、刺激性食物，以及含有咖啡因和酒精的饮料。</span><br><span class="line">4. 注意个人卫生，勤洗手，避免与患病的人接触。</span><br><span class="line">5. 保持充足的休息，放松心情，避免过度劳累。</span><br><span class="line">6. 注意饮食，少食多餐，可以吃些易消化、营养丰富的食物，如米粥、面条、鸡蛋、鸡肉等。</span><br><span class="line">如果症状严重或持续加重，建议您去医院就诊，接受医生的诊断和治疗。</span><br></pre></td></tr></table></figure><h1 id="三、各大平台RAG实现"><a href="#三、各大平台RAG实现" class="headerlink" title="三、各大平台RAG实现"></a>三、各大平台RAG实现</h1><h2 id="1-阿⾥云-百炼RAG"><a href="#1-阿⾥云-百炼RAG" class="headerlink" title="1.阿⾥云-百炼RAG"></a>1.阿⾥云-百炼RAG</h2><p>创建应⽤-&gt;上传数据-&gt;知识索引   <a href="https://bailian.console.aliyun.com/">https://bailian.console.aliyun.com/</a></p><p><img src="/img/image-20250218165554173.png" alt="image-20250218165554173"></p><p>通过Python来调用ARG服务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sk-31bb7a65dd4047aba9b14a95c08be52c</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> http <span class="keyword">import</span> HTTPStatus</span><br><span class="line"><span class="keyword">from</span> dashscope <span class="keyword">import</span> Application</span><br><span class="line">response = Application.call(</span><br><span class="line">    <span class="comment"># 若没有配置环境变量，可用百炼API Key将下行替换为：api_key=&quot;sk-xxx&quot;。但不建议在生产环境中直接将API Key硬编码到代码中，以减少API Key泄露风险。</span></span><br><span class="line">    api_key=<span class="string">&quot;输入你自身的key&quot;</span>,</span><br><span class="line">    app_id=<span class="string">&#x27;输入你自身的appId&#x27;</span>,</span><br><span class="line">    prompt=<span class="string">&#x27;观察者模式的介绍？你是基于知识库回答的还是基于你自身来回复的？&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> response.status_code != HTTPStatus.OK:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;request_id=<span class="subst">&#123;response.request_id&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;code=<span class="subst">&#123;response.status_code&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;message=<span class="subst">&#123;response.message&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;请参考文档：https://help.aliyun.com/zh/model-studio/developer-reference/error-code&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(response.output.text)</span><br></pre></td></tr></table></figure><h2 id="2-智普RAG"><a href="#2-智普RAG" class="headerlink" title="2. 智普RAG"></a>2. 智普RAG</h2><p>创建应⽤-&gt;上传数据</p><p><a href="https://www.zhipuai.cn/">https://www.zhipuai.cn/</a></p><h2 id="3-Google的NoteBook"><a href="#3-Google的NoteBook" class="headerlink" title="3.Google的NoteBook"></a>3.Google的NoteBook</h2><p><a href="https://notebooklm.google/">https://notebooklm.google/</a></p><p><img src="/2025/08/25/RAG%E6%A3%80%E7%B4%A2%E7%94%9F%E6%88%90/image-20250218201049604.png" alt="image-20250218201049604"></p><h1 id="四、本地向量库"><a href="#四、本地向量库" class="headerlink" title="四、本地向量库"></a>四、本地向量库</h1><p>​前面的案例中我们的向量化模型使用的是OpenAI提供的<code>text-embedding-3-large</code>,针对这块我们可以本地话一个向量模型。这样处理起来效率会更高一些。</p><p><strong>将向量化的结果保存</strong>      </p><p>​        huggingface：<a href="https://huggingface.co/models">https://huggingface.co/models</a>      </p><p>​        国内的镜像：<a href="https://hf-mirror.com/">https://hf-mirror.com/</a> </p><p>直接使用我们提供的本地的向量模型，并且拷贝到项目中</p><p>需要安装下这个依赖</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install sentence_transformers</span><br></pre></td></tr></table></figure><p>然后将数据保存到向量数据库并且持久化到本地</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sentence_transformers <span class="keyword">import</span> SentenceTransformer</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> chromadb</span><br><span class="line"></span><br><span class="line">model = SentenceTransformer(<span class="string">r&#x27;maidalun1020&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;train_zh.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = [json.loads(line) <span class="keyword">for</span> line <span class="keyword">in</span> f]</span><br><span class="line"></span><br><span class="line">instructions = [entry[<span class="string">&#x27;instruction&#x27;</span>] <span class="keyword">for</span> entry <span class="keyword">in</span> data[<span class="number">0</span>:<span class="number">1000</span>]]</span><br><span class="line">outputs = [entry[<span class="string">&#x27;output&#x27;</span>] <span class="keyword">for</span> entry <span class="keyword">in</span> data[<span class="number">0</span>:<span class="number">1000</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">instruction_embeddings = model.encode(instructions, convert_to_numpy=<span class="literal">True</span>)</span><br><span class="line">np.save(<span class="string">&#x27;instruction_embeddings.npy&#x27;</span>, instruction_embeddings)</span><br><span class="line"></span><br><span class="line">client = chromadb.PersistentClient(path=<span class="string">&quot;./collection.pkl&quot;</span>)</span><br><span class="line">collection = client.create_collection(name=<span class="string">&quot;demo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, (sentence, embedding) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(instructions, instruction_embeddings)):</span><br><span class="line">    collection.add(</span><br><span class="line">        documents=[sentence],</span><br><span class="line">        embeddings=[embedding.tolist()],</span><br><span class="line">        ids=[<span class="string">f&quot;id-<span class="subst">&#123;i&#125;</span>&quot;</span>],</span><br><span class="line">        metadatas=[&#123;<span class="string">&quot;output&quot;</span>: outputs[i]&#125;]</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>然后我们就可以结合LLM来实现对应的RAG案例效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">import</span> chromadb</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> sentence_transformers <span class="keyword">import</span> SentenceTransformer</span><br><span class="line"></span><br><span class="line">load_dotenv()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client_openai = OpenAI()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取知识库对应的向量信息</span></span><br><span class="line">instruction_embeddings = np.load(<span class="string">&#x27;instruction_embeddings.npy&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载chromadb 持久化到本地的数据</span></span><br><span class="line">client = chromadb.PersistentClient(path=<span class="string">&quot;./collection.pkl&quot;</span>)</span><br><span class="line">collection = client.get_collection(name=<span class="string">&quot;demo&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(collection.count())</span><br><span class="line"></span><br><span class="line">model = SentenceTransformer(<span class="string">r&#x27;maidalun1020&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">retrieve_response</span>(<span class="params">query, top_k=<span class="number">5</span></span>):</span><br><span class="line">    query_embedding = model.encode([query], convert_to_numpy=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># print(query_embedding)</span></span><br><span class="line">    results = collection.query(</span><br><span class="line">        query_embeddings=query_embedding.tolist(),</span><br><span class="line">        n_results=top_k</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> [metadata[<span class="string">&#x27;output&#x27;</span>] <span class="keyword">for</span> metadata_list <span class="keyword">in</span> results[<span class="string">&#x27;metadatas&#x27;</span>] <span class="keyword">for</span> metadata <span class="keyword">in</span> metadata_list]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">prompt_template = <span class="string">&quot;&quot;&quot;你是一个问答机器人。</span></span><br><span class="line"><span class="string">你的任务是根据下述给定的已知信息回答用户问题。</span></span><br><span class="line"><span class="string">确保你的回复完全依据下述已知信息。不要编造答案。</span></span><br><span class="line"><span class="string">如果下述已知信息不足以回答用户的问题，请直接回复&quot;我无法回答您的问题&quot;。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">已知信息:</span></span><br><span class="line"><span class="string">__INFO__</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">用户问：</span></span><br><span class="line"><span class="string">__QUERY__</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">请用中文回答用户问题。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_prompt</span>(<span class="params">prompt_template, **kwargs</span>):</span><br><span class="line">    prompt = prompt_template</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> kwargs.items():</span><br><span class="line">        val = v <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, <span class="built_in">str</span>) <span class="keyword">else</span> <span class="string">&#x27;\n&#x27;</span>.join(v) <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, <span class="built_in">list</span>) <span class="keyword">else</span> <span class="built_in">str</span>(v)</span><br><span class="line">        prompt = prompt.replace(<span class="string">f&quot;__<span class="subst">&#123;k.upper()&#125;</span>__&quot;</span>, val)</span><br><span class="line">    <span class="keyword">return</span> prompt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_completion</span>(<span class="params">prompt, model=<span class="string">&quot;gpt-4o&quot;</span></span>):</span><br><span class="line">    messages = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt&#125;]</span><br><span class="line">    response = client_openai.chat.completions.create(</span><br><span class="line">        model=model,</span><br><span class="line">        messages=messages,</span><br><span class="line">        temperature=<span class="number">0</span>,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> response.choices[<span class="number">0</span>].message.content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RAG_Bot</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, llm_api, n_results=<span class="number">5</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.llm_api = llm_api</span><br><span class="line">        <span class="variable language_">self</span>.n_results = n_results</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">chat</span>(<span class="params">self, user_query</span>):</span><br><span class="line">        <span class="comment"># 获取检索的信息 向量库</span></span><br><span class="line">        search_results = retrieve_response(user_query, <span class="variable language_">self</span>.n_results)</span><br><span class="line">        <span class="comment"># 构建提示词</span></span><br><span class="line">        prompt = build_prompt(prompt_template, info=search_results, query=user_query)</span><br><span class="line">        <span class="built_in">print</span>(prompt)</span><br><span class="line">        <span class="comment"># 调用LLM 通过向量库检索的信息+用户的输入信息</span></span><br><span class="line">        response = <span class="variable language_">self</span>.llm_api(prompt)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_query = <span class="string">&quot;全身没劲，没精神，吃不下饭，怎么办？&quot;</span></span><br><span class="line">bot = RAG_Bot(llm_api=get_completion)</span><br><span class="line">response = bot.chat(user_query)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后获取到对应的响应结果</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">你是一个问答机器人。</span><br><span class="line">你的任务是根据下述给定的已知信息回答用户问题。</span><br><span class="line">确保你的回复完全依据下述已知信息。不要编造答案。</span><br><span class="line">如果下述已知信息不足以回答用户的问题，请直接回复&quot;我无法回答您的问题&quot;。</span><br><span class="line">已知信息:</span><br><span class="line">这种情况可能是皮肤过敏或者荨麻疹，建议您去医院皮肤科进行检查和诊断。在等待就医期间，您可以尝试以下措施缓解症状：</span><br><span class="line">1. 避免摩擦或刺激皮肤，不要穿紧身衣物或使用过于刺激性的洗涤用品。</span><br><span class="line">2. 保持皮肤清洁，定期洗澡并用温水。</span><br><span class="line">3. 涂抹舒缓皮肤的乳液或药膏，如氢化可的松乳膏。</span><br><span class="line">4. 避免暴露在过度干燥或过度潮湿的环境中。</span><br><span class="line">5. 饮食上避免过度刺激的食物，如辛辣食品、海鲜等。</span><br><span class="line">请注意，以上措施仅能缓解症状，如情况严重或症状持续，还是需要及时就医。</span><br><span class="line">根据您的描述，这可能是一个鸡眼，也可能是一个肉瘤，建议您去医院就诊，由专业医生进行诊断。如果是鸡眼，可以使用一些药膏软化鸡眼，再用专业的工具去除。如果是肉瘤，需要进行手术治疗。在就诊之前，避免用手抠挖或切割，以免感染。</span><br><span class="line">根据您的描述，这可能是皮肤受到了创伤或感染，建议您在保持手部清洁的前提下，使用一些抗生素软膏来预防感染。您可以前往药店购买一些非处方药，比如盐酸氯霉素软膏、红霉素软膏等，按照说明使用即可。如果症状加重或持续不缓解，建议您及时就医。</span><br><span class="line">这种情况可能是因为毛囊炎或粉刺引起的。毛囊炎是毛囊感染或炎症，通常会在皮肤上形成红色丘疹或红点。粉刺是一种常见的皮肤问题，通常是因为皮脂和角质堵塞了毛孔。如果这些情况不引起疼痛或瘙痒，通常不需要治疗，只需保持皮肤清洁，避免挤压或摩擦区域。如果出现疼痛、发热、红肿等症状，建议就医咨询。</span><br><span class="line">如果您的中指长了一个透明的水泡状物，但不痛不痒，这可能是一个无害的皮肤病变，例如皮肤囊肿。囊肿通常是由于皮肤下的毛囊或皮脂腺堵塞而形成的，可以出现在任何部位，包括手指。 </span><br><span class="line">建议您去看皮肤科医生，让医生进行诊断和治疗。医生可能会建议将囊肿切开和排出囊内物质，或者开处方药物来治疗。</span><br><span class="line">用户问：</span><br><span class="line">手臂上有小红点不痒不过怎样可以去除</span><br><span class="line">请用中文回答用户问题。</span><br><span class="line">这种情况可能是皮肤过敏或者荨麻疹，建议您去医院皮肤科进行检查和诊断。在等待就医期间，您可以尝试以下措施缓解症状：</span><br><span class="line">6. 避免摩擦或刺激皮肤，不要穿紧身衣物或使用过于刺激性的洗涤用品。</span><br><span class="line">7. 保持皮肤清洁，定期洗澡并用温水。</span><br><span class="line">8. 涂抹舒缓皮肤的乳液或药膏，如氢化可的松乳膏。</span><br><span class="line">9. 避免暴露在过度干燥或过度潮湿的环境中。</span><br><span class="line">10. 饮食上避免过度刺激的食物，如辛辣食品、海鲜等。</span><br><span class="line">请注意，以上措施仅能缓解症状，如情况严重或症状持续，还是需要及时就医。</span><br></pre></td></tr></table></figure><h1 id="五、RAG的缺陷"><a href="#五、RAG的缺陷" class="headerlink" title="五、RAG的缺陷"></a>五、RAG的缺陷</h1><p> <strong>RAG痛点问题分析论文</strong>      </p><p>论文:《Seven Failure Points When Engineering a Retrieval Augmented         Generation System》      </p><p>​        地址:<a href="https://arxiv.org/pdf/2401.05856">https://arxiv.org/pdf/2401.05856</a>      </p><p>​        <a href="https://www.163.com/dy/article/JFTQNA200511D3QS.html">https://www.163.com/dy/article/JFTQNA200511D3QS.html</a>      </p><h2 id="1-具体痛点问题总结"><a href="#1-具体痛点问题总结" class="headerlink" title="1. 具体痛点问题总结"></a>1. 具体痛点问题总结</h2><p>Index Process（文本向量化构建索引的过程）:</p><p>+ <strong>MIssing Content(内容缺失):</strong> 原本的文本中就没有问题的答案<br>+ <strong>文档加载准确性和效率：</strong> 比如pdf文件的加载，如何提取其中的有用文字信息和图片信息等<br>+ <strong>文档切分的粒度：</strong> 文本切分的大小和位置会影响后面检索出来的上下文完整性和与大模型交互的token数量，怎么控制好文档切分的度，是个难题。</p><p>Query Process（检索增强回答的过程中）:<br>+ <strong>Missed Top Ranked:</strong> 错过排名靠前的文档<br>+ <strong>Not in Context:</strong>  提取上下文与答案无关<br>+ <strong>Wrong Format(格式错误):</strong> 例如需要Json，给了字符串<br>+ <strong>Incomplete(答案不完整):</strong> 答案只回答了问题的一部分<br>+ <strong>Not Extracted(未提取到答案:)</strong> 提取的上下文中有答案，但大模型没有提取出来<br>+ <strong>Incorrect Specificity:</strong> 答案不够具体或过于具体</p><h2 id="2-痛点问题策略分析"><a href="#2-痛点问题策略分析" class="headerlink" title="2. 痛点问题策略分析"></a>2. 痛点问题策略分析</h2><h3 id="2-1-文档加载准确性和效率"><a href="#2-1-文档加载准确性和效率" class="headerlink" title="2.1 文档加载准确性和效率"></a>2.1 文档加载准确性和效率</h3><p><strong>优化文档读取器</strong>  </p><p>​一般知识库中的文档格式都不尽相同，HTML、PDF、MarkDown、TXT、CSV等。每种格式文档都有其都有的数据组织方式。怎么在读取这些数据时将干扰项去除（如一些特殊符号等），同时还保留原文本之间的关联关系（如csv文件保留其原有的表格结构），是主要的优化方向。</p><p>​目前针对这方面的探索为：针对每一类文档，设计一个专门的读取器。如LangChain中提供的WebBaseLoader专门用来加载HTML文本等。</p><p>​网址:<a href="https://python.langchain.com/v0.1/docs/modules/data_connection/document_loaders/">https://python.langchain.com/v0.1/docs/modules/data_connection/document_loaders/</a></p><p><strong>数据清洗与增强</strong></p><p>​输入垃圾，那也必定输出垃圾。如果你的源数据质量低劣，比如包含互相冲突的信息，那不管你的 RAG 工作构建得多么好，它都不可能用你输入的垃圾神奇地输出高质量结果。这个解决方案不仅适用于这个痛点，任何RAG工作流程想要获得优良表现，都必须先清洁数据。</p><h3 id="2-2-文档切分的粒度"><a href="#2-2-文档切分的粒度" class="headerlink" title="2.2 文档切分的粒度"></a>2.2 文档切分的粒度</h3><p>​粒度太大可能导致检索到的文本包含太多不相关的信息，降低检索准确性，粒度太小可能导致信息不全面，导致答案的片面性。问题的答案可能跨越两个甚至多个片段。</p><p><strong>固定长度的分块</strong></p><p>​直接设定块中的字数，每个文本块有多少字。</p><p><strong>内容重叠分块</strong></p><p>​在固定大小分块的基础上，为了保持文本块之间语义上下文的连贯性，在分块时，保持文本块之间有一定的内容重叠。</p><p><strong>基于结构的分块</strong></p><p>​基于结构的分块方法利用文档的固有结构，如HTML或Markdown中的标题和段落，以保持内容的逻辑性和完整性。</p><p><strong>基于递归的分块</strong></p><p>​重复的利用分块规则不断细分文本块。在langchain中会先通过段落换行符（\n\n）进行分割。然后，检查这些块的大小。如果大小不超过一定阈值，则该块被保留。对于大小超过标准的块，使用单换行符（\n）再次分割。以此类推，不断根据块大小更新更小的分块规则（如空格，句号）。</p><p><strong>分块大小的选择</strong></p><p>（1）不同的嵌入模型有其最佳输入大小。比如Openai的text-embedding-ada-002的模型在256 或 512大小的块上效果更好。</p><p>（2）文档的类型和用户查询的长度及复杂性也是决定分块大小的重要因素。处理长篇文章或书籍时，较大的分块有助于保留更多的上下文和主题连贯性；而对于社交媒体帖子，较小的分块可能更适合捕捉每个帖子的精确语义。如果用户的查询通常是简短和具体的，较小的分块可能更为合适；相反，如果查询较为复杂，可能需要更大的分块。</p><h3 id="2-3-内容缺失"><a href="#2-3-内容缺失" class="headerlink" title="2.3 内容缺失"></a>2.3 内容缺失</h3><p>​准备的外挂文本中没有回答问题所需的知识。这时候，RAG可能会提供一个自己编造的答案。</p><p><strong>增加相应知识库</strong></p><p>​将相应的知识文本加入到向量知识库中。</p><p><strong>数据清洗与增强</strong></p><p>​输入垃圾，那也必定输出垃圾。如果你的源数据质量低劣，比如包含互相冲突的信息，那不管你的 RAG 工作构建得多么好，它都不可能用你输入的垃圾神奇地输出高质量结果。这个解决方案不仅适用于这个痛点，任何RAG工作流程想要获得优良表现，都必须先清洁数据。</p><p><strong>更好的Prompt设计</strong></p><p>​通过Prompts，让大模型在找不到答案的情况下，输出“根据当前知识库，无法回答该问题”等提示。这样的提示，就能鼓励模型承认自己的局限，并更透明地向用户传达它的不确定。虽然不能保证 100% 准确度，但在清洁数据之后，精心设计 prompt 是最好的做法之一。</p><h3 id="2-4-错过排名靠前的文档"><a href="#2-4-错过排名靠前的文档" class="headerlink" title="2.4 错过排名靠前的文档"></a>2.4 错过排名靠前的文档</h3><p>​外挂知识库中存在回答问题所需的知识，但是可能这个知识块与问题的向量相似度排名并不是靠前的，导致无法召回该知识块传给大模型，导致大模型始终无法得到正确的答案.</p><p><strong>增加召回数量</strong></p><p>​增加召回的 topK 数量，也就是说，例如原来召回前3个知识块，修改为召回前5个知识块。不推荐此种方法，因为知识块多了，不光会增加token消耗，也会增加大模型回答问题的干扰。</p><p><strong>重排（Reranking）</strong></p><p>​该方法的步骤是，首先检索出 topN 个知识块（N &gt; K，过召回），然后再对这 topN 个知识块进行重排序，取重排序后的 K 个知识块当作上下文。重排是利用另一个排序模型或排序策略，对知识块和问题之间进行关系计算与排序。</p><h3 id="2-5-提取上下文与答案无关"><a href="#2-5-提取上下文与答案无关" class="headerlink" title="2.5 提取上下文与答案无关"></a>2.5 提取上下文与答案无关</h3><p><strong>内容缺失</strong> 或 <strong>错过排名靠前的文档</strong> 的具体体现</p><h3 id="2-6-格式错误"><a href="#2-6-格式错误" class="headerlink" title="2.6 格式错误"></a>2.6 格式错误</h3><p><strong>Prompt调优</strong></p><p>​优化Prompt逐渐让大模型返回正确的格式。</p><h3 id="2-7-答案不完整"><a href="#2-7-答案不完整" class="headerlink" title="2.7 答案不完整"></a>2.7 答案不完整</h3><p>将问题分开提问:一方面引导用户精简问题，一次只提问一个问题。 另一方面，针对用户的问题进行内部拆分处理，拆分成数个子问题，等子问题答案都找到后，再总结起来回复给用户</p><h3 id="2-8-未提取到答案"><a href="#2-8-未提取到答案" class="headerlink" title="2.8 未提取到答案"></a>2.8 未提取到答案</h3><p>提示压缩技术: 网址:<a href="https://mp.weixin.qq.com/s/61LZgc1a5yRP2J7MTIVZ4Q">https://mp.weixin.qq.com/s/61LZgc1a5yRP2J7MTIVZ4Q</a></p><h2 id="3-RAG评估"><a href="#3-RAG评估" class="headerlink" title="3. RAG评估"></a>3. RAG评估</h2><h3 id="3-1-RAG效果评估的必要性"><a href="#3-1-RAG效果评估的必要性" class="headerlink" title="3.1 RAG效果评估的必要性"></a>3.1 RAG效果评估的必要性</h3><ul><li>评估出RAG对大模型能力改善的程度</li><li>RAG优化过程，通过评估可以知道改善的方向和参数调整的程度</li></ul><h3 id="3-2-RAG评估方法"><a href="#3-2-RAG评估方法" class="headerlink" title="3.2 RAG评估方法"></a>3.2 RAG评估方法</h3><p><strong>人工评估</strong></p><p>​最Low的方式是进行人工评估：邀请专家或人工评估员对RAG生成的结果进行评估。他们可以根据预先定义的标准对生成的答案进行质量评估，如准确性、连贯性、相关性等。这种评估方法可以提供高质量的反馈，但可能会消耗大量的时间和人力资源。</p><p><strong>自动化评估</strong></p><p>​自动化评估肯定是RAG评估的主流和发展方向。</p><p><strong>LangSmith</strong></p><p>需要准备测试数据集<br>不仅可以评估RAG效果，对于LangChain中的Prompt模板等步骤都可进行测试评估。</p><p><strong>RAGAS</strong></p><p>​RAGAs（Retrieval-Augmented Generation Assessment）是一个评估框架，文档。考虑检索系统识别相关和重点上下文段落的能力，LLM 以忠实方式利用这些段落的能力，以及生成本身的质量。</p><p>数据集格式</p><ul><li>question：作为 RAG 管道输入的用户查询。输入。</li><li>answer：从 RAG 管道生成的答案。输出。</li><li>contexts：从用于回答question外部知识源中检索的上下文。</li><li>ground_truths：question的基本事实答案。这是唯一人工注释的信息。</li></ul><h3 id="3-3-评估指标"><a href="#3-3-评估指标" class="headerlink" title="3.3 评估指标"></a>3.3 评估指标</h3><p>评估检索质量:</p><ul><li>context_relevancy（上下文相关性，也叫 context_precision）</li><li>context_recall（召回性，越高表示检索出来的内容与正确答案越相关）</li></ul><p>评估生成质量：</p><ul><li>faithfulness（忠实性，越高表示答案的生成使用了越多的参考文档（检索出来的内容））</li><li>answer_relevancy（答案的相关性）</li></ul><p>Context Recall：上下文召回衡量检索到的上下文(contexts)与标准答案（ground_truths）的匹配程度。      </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datasets <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="keyword">from</span> ragas.metrics <span class="keyword">import</span> context_precision, context_recall, faithfulness, answer_relevancy</span><br><span class="line"><span class="keyword">from</span> ragas <span class="keyword">import</span> evaluate</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"></span><br><span class="line">load_dotenv()</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data_samples = &#123;</span><br><span class="line">    <span class="string">&#x27;question&#x27;</span>: [<span class="string">&#x27;When was the first super bowl?&#x27;</span>, <span class="string">&#x27;Who won the most super bowls?&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;answer&#x27;</span>: [<span class="string">&#x27;The first superbowl was held on Jan 15, 1967&#x27;</span>,</span><br><span class="line">               <span class="string">&#x27;The most super bowls have been won by The New England Patriots&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;contexts&#x27;</span>: [</span><br><span class="line">        [<span class="string">&#x27;The First AFL–NFL World Championship Game was an American football game played on January 15, 1967, at the Los Angeles Memorial Coliseum in Los Angeles,&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;The Green Bay Packers...Green Bay, Wisconsin.&#x27;</span>, <span class="string">&#x27;The Packers compete...Football Conference&#x27;</span>]</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;ground_truth&#x27;</span>: [<span class="string">&#x27;The first superbowl was held on January 15, 1967&#x27;</span>,</span><br><span class="line">                     <span class="string">&#x27;The New England Patriots have won the Super Bowl a record six times&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line">dataset = Dataset.from_dict(data_samples)</span><br><span class="line"><span class="comment"># 上下文精确度  评估是否所有和ground_truths（真实答案）相关的chunk被检索到而且排名很靠前</span></span><br><span class="line">context_precision_score = evaluate(dataset, metrics=[context_precision])</span><br><span class="line"><span class="comment"># 计算上下文召回率  上下文召回衡量检索到的上下文(contexts)与标准答案（ground_truths）的匹配程度</span></span><br><span class="line">context_recall_score = evaluate(dataset, metrics=[context_recall])</span><br><span class="line"><span class="comment"># 忠实度  这个指标衡量生成答案与给定上下文之间的事实一致性</span></span><br><span class="line">faithfulness_score = evaluate(dataset, metrics=[faithfulness])</span><br><span class="line"><span class="comment"># 答案相关性  侧重于评估生成的答案与给定提示的相关性。</span></span><br><span class="line">answer_relevancy_score = evaluate(dataset, metrics=[answer_relevancy])</span><br><span class="line"><span class="built_in">print</span>(context_precision_score.to_pandas())</span><br><span class="line"><span class="built_in">print</span>(context_recall_score.to_pandas())</span><br><span class="line"><span class="built_in">print</span>(faithfulness_score.to_pandas())</span><br><span class="line"><span class="built_in">print</span>(answer_relevancy_score.to_pandas())</span><br></pre></td></tr></table></figure><p>输出的答案</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Python 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)]</span><br><span class="line">Type &#x27;copyright&#x27;, &#x27;credits&#x27; or &#x27;license&#x27; for more information</span><br><span class="line">IPython 8.18.1 -- An enhanced Interactive Python. Type &#x27;?&#x27; for help.</span><br><span class="line">PyDev console: using IPython 8.18.1</span><br><span class="line">Python 3.9.13 (tags/v3.9.13:6de2ca5, May 17 2022, 16:36:42) [MSC v.1929 64 bit (AMD64)] on win32</span><br><span class="line">runfile(&#x27;E:\\PythonWorkSpace\\LLMProject\\demo4.py&#x27;, wdir=&#x27;E:\\PythonWorkSpace\\LLMProject&#x27;)</span><br><span class="line">Evaluating: 100%|██████████| 2/2 [00:05&lt;00:00,  2.74s/it]</span><br><span class="line">Evaluating: 100%|██████████| 2/2 [00:03&lt;00:00,  1.76s/it]</span><br><span class="line">Evaluating: 100%|██████████| 2/2 [00:07&lt;00:00,  3.55s/it]</span><br><span class="line">Evaluating: 100%|██████████| 2/2 [00:36&lt;00:00, 18.45s/it]</span><br><span class="line">                       user_input  ... context_precision</span><br><span class="line">0  When was the first super bowl?  ...               1.0</span><br><span class="line">1   Who won the most super bowls?  ...               0.0</span><br><span class="line">[2 rows x 5 columns]</span><br><span class="line">                       user_input  ... context_recall</span><br><span class="line">0  When was the first super bowl?  ...            1.0</span><br><span class="line">1   Who won the most super bowls?  ...            0.0</span><br><span class="line">[2 rows x 5 columns]</span><br><span class="line">                       user_input  ... faithfulness</span><br><span class="line">0  When was the first super bowl?  ...          1.0</span><br><span class="line">1   Who won the most super bowls?  ...          0.0</span><br><span class="line">[2 rows x 5 columns]</span><br><span class="line">                       user_input  ... answer_relevancy</span><br><span class="line">0  When was the first super bowl?  ...         0.980736</span><br><span class="line">1   Who won the most super bowls?  ...         0.943014</span><br><span class="line">[2 rows x 5 columns]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Shell编程</title>
      <link href="/2025/08/23/Shell%E7%BC%96%E7%A8%8B/"/>
      <url>/2025/08/23/Shell%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell编程入门"><a href="#Shell编程入门" class="headerlink" title="Shell编程入门"></a>Shell编程入门</h1><h2 id="认识Shell"><a href="#认识Shell" class="headerlink" title="认识Shell"></a>认识Shell</h2><p>开发者在进行服务器集群管理时，都需要<strong>编写 Shell 程序来进行服务器管理</strong>。Shell 是一个命令行<a href="https://so.csdn.net/so/search?q=%E8%A7%A3%E9%87%8A%E5%99%A8&spm=1001.2101.3001.7020">解释器</a>，为用户提供了一个向 Linux 内核发送请求以便于运行程序的界面系统升级程序。用户可以用 Shell 来<strong>启动、挂起、停止或者编写一些程序</strong>。</p><h2 id="Shell-脚本的创建与执行"><a href="#Shell-脚本的创建与执行" class="headerlink" title="Shell 脚本的创建与执行"></a>Shell 脚本的创建与执行</h2><p>Shell 脚本在执行时有两个格式上的要求：以 <code>#!/bin/bash</code> 开头、必须有可执行权限。如下我们编写第一个 Shell 脚本：</p><ol><li>创建新目录 shell 用于存放 shell 脚本；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@raspberrypi:~# <span class="built_in">mkdir</span> /root/shell</span><br><span class="line">root@raspberrypi:~# <span class="built_in">cd</span> /root/shell/</span><br></pre></td></tr></table></figure></li><li>vim 编辑器新建 shell 脚本 shell.sh，输入命令；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world!&quot;</span></span><br></pre></td></tr></table></figure></li><li>这个时候查看 shell.sh 的权限，是没有可执行权限 x 的；<br><img src="/2025/08/23/Shell%E7%BC%96%E7%A8%8B/file-20250822004638486.png" alt="500"></li><li>为它添加可执行权限；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@raspberrypi:~/shell# <span class="built_in">chmod</span> u+x shell.sh</span><br></pre></td></tr></table></figure><img src="/2025/08/23/Shell%E7%BC%96%E7%A8%8B/file-20250822004750871.png" alt="500"></li><li>执行文件；<br><img src="/2025/08/23/Shell%E7%BC%96%E7%A8%8B/file-20250822004856110.png" alt="400"><blockquote><p>shell 脚本常用的执行方式有两种：</p></blockquote></li></ol><ul><li>输入脚本的绝对路径或者相对路径（需要先赋予脚本执行权限 x）；</li><li>sh + 脚本（无需赋予执行权限，直接执行即可）。</li></ul><h1 id="Shell-变量"><a href="#Shell-变量" class="headerlink" title="Shell 变量"></a>Shell 变量</h1><h2 id="系统变量和自定义变量"><a href="#系统变量和自定义变量" class="headerlink" title="系统变量和自定义变量"></a>系统变量和自定义变量</h2><p>Linux Shell 中的变量分为<strong>系统变量</strong>和<strong>用户自定义变量</strong>。系统变量顾名思义就是系统已经设置好的变量，诸如 $HOME、$PWD、$USER、$SHELL 等都是系统变量。使用指令 <strong>set</strong> 可以查看系统中所有的系统变量。我们常用较多的是自定义变量，基本语法如下：</p><blockquote></blockquote><ul><li>定义变量：_变量名称&#x3D;值_；</li><li>撤销变量：_unset 变量名_；</li><li>定义静态变量：_readonly 变量名称&#x3D;值_（静态变量不能撤销）；</li><li>输出变量：_$变量_。</li></ul><p>试着操作一下变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义变量A</span></span><br><span class="line">A=100</span><br><span class="line"> </span><br><span class="line"><span class="comment">#输出变量</span></span><br><span class="line"><span class="built_in">echo</span> A=<span class="variable">$A</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;A=<span class="variable">$A</span>&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#撤销变量A</span></span><br><span class="line"><span class="built_in">unset</span> A</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$A</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#声明静态的变量B = 3</span></span><br><span class="line"><span class="built_in">readonly</span> B=3</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$B</span></span><br></pre></td></tr></table></figure><p>执行结果为；<br><img src="/2025/08/23/Shell%E7%BC%96%E7%A8%8B/file-20250822005436803.png" alt="500"></p><h2 id="变量的基本规则"><a href="#变量的基本规则" class="headerlink" title="变量的基本规则"></a>变量的基本规则</h2><p>在定义变量时变量名称可以由字母、数字和下划线组成，但</p><ul><li><strong>不能以数字开头</strong>；</li><li><strong>等号的两侧不能有空格</strong>；</li><li><strong>变量名称一般为大写</strong>。</li></ul><p>将命令的返回值赋给变量时使用如下写法；</p><ul><li>A&#x3D;<code>data</code>，表示运行 <strong><code> </code></strong> 中的命令，并把结果返回给 A；</li><li>A&#x3D;$(data)，$() 相当于 &#96;&#96;。</li></ul><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><ul><li>export 变量名&#x3D;变量值  &#x2F;&#x2F;将 Shell 变量输出为环境变量&#x2F;全局变量</li><li>source 配置文件  &#x2F;&#x2F;让修改后的配置信息立即生效</li><li>echo $变量名  &#x2F;&#x2F;查询环境变量的值</li></ul><p>案例：在 &#x2F;etc&#x2F;profile 文件中定义 TOMCAT_HOME 环境变量，vim 打开 &#x2F;etc&#x2F;profile 输入；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> TOMCAT_HOME=/opt/tomcat</span><br></pre></td></tr></table></figure><p>设置完之后刷新配置状态；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>结果如下；<br><img src="/2025/08/23/Shell%E7%BC%96%E7%A8%8B/file-20250822010316487.png" alt="500"></p><h2 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h2><p>当执行一个 Shell 脚本时，如果希望获取到命令行的参数信息，就需要使用到位置参数变量。基本语法有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$n</span>  //n 为数字，<span class="variable">$0</span> 代表命令本身，<span class="variable">$1</span>-9 代表第 1 到第 9 个参数，10 以上的参数需要用大括号包含如 <span class="variable">$&#123;10&#125;</span></span><br><span class="line">$*  //代表命令行中的所有参数，$* 将所有参数看成一个整体</span><br><span class="line"><span class="variable">$@</span>  //这个变量也可以代表命令行中的所有参数，不过 <span class="variable">$@</span> 把每个参数区分对待</span><br><span class="line"><span class="variable">$#</span>  //代表命令行中所有参数的个数</span><br></pre></td></tr></table></figure><p>案例：编写一个 Shell 脚本 position.sh，在脚本中获取到命令行中的各个参数信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;0=<span class="variable">$0</span> 1=<span class="variable">$1</span> 2=<span class="variable">$2</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;所有参数=$*&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;参数个数=<span class="variable">$#</span>&quot;</span></span><br></pre></td></tr></table></figure><p>运行时输入 100 和 200 两个参数，结果如下。<br><img src="/2025/08/23/Shell%E7%BC%96%E7%A8%8B/file-20250822010733551.png" alt="500"></p><h2 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h2><p>预定义变量就是 Shell 的设计者事先定义好的变量，可以直接在 Shell 脚本中使用。基本语法有：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">$  //当前进程的进程号码（PID）</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">! //后台运行的最后一个进程的进程号</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">?  //最后一次执行命令的返回状态，如果这个变量的值为0证明上一个命令正确执行，如果不是 0 上一个命令没有正确执行</span></span><br></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在 Shell 编程中有各种运算操作，语法格式为 $((运算式))或 $[运算式] 或者 expr m + n；如果希望将 expr 的值赋给某个变量，使用 `` 即可。</span><br></pre></td></tr></table></figure><ul><li><strong>*</strong>  &#x2F;&#x2F;乘，在 &#96;&#96; 里面的乘应该用此格式即 * 前添加转义字符 \</li><li><strong>&#x2F;</strong>  &#x2F;&#x2F;除</li><li><strong>%</strong>  &#x2F;&#x2F;取余</li></ul><p>案例1：计算 (2+3)×4；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#计算(2+3)×4的值</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#方式1</span></span><br><span class="line">result1=$(((<span class="number">2</span>+<span class="number">3</span>)*<span class="number">4</span>))</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;res1=<span class="variable">$result1</span>&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#方式2</span></span><br><span class="line">result2=$[(2+3)*4]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;res2=<span class="variable">$result2</span>&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#方式3</span></span><br><span class="line">result3=`<span class="built_in">expr</span> 2 + 3`</span><br><span class="line">result4=`<span class="built_in">expr</span> <span class="variable">$result3</span> \* 4`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;expr res4=<span class="variable">$result4</span>&quot;</span></span><br></pre></td></tr></table></figure><p>结果如下。<br><img src="/2025/08/23/Shell%E7%BC%96%E7%A8%8B/file-20250822011903946.png" alt="500"><br>方式2报错了，原因如下：</p><ol><li><code>$((...))</code>是现代 bash 推荐的算术计算方式，语法简洁直观</li><li><code>$[...]</code>是较旧的语法，在某些 shell 中可能不支持</li><li><code>expr</code>是最传统的方式，需要注意运算符前后必须有空格，且某些运算符（如 *）需要转义</li></ol><p>案例2：计算命令行两个参数的和；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算命令行两个参数的和</span></span><br><span class="line"><span class="built_in">sum</span>=$((<span class="variable">$1</span>+<span class="variable">$2</span>))</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;sum=<span class="variable">$sum</span>&quot;</span></span><br></pre></td></tr></table></figure><p>运行时输入 20 和 50，结果如下：<br><img src="/2025/08/23/Shell%E7%BC%96%E7%A8%8B/file-20250822012257677.png" alt="500"></p><h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><p>条件判断使用语法 **[ condition ]**（注意 condition 前后有空格），非空会返回 true。可以使用 $? 验证结果，0 为 true，&gt;1 为false。如：</p><ul><li>[ hspEdu ] 会返回 true</li><li>[ ] 会返回 false</li><li>[ condition ] &amp;&amp; echo yes || echo no ，前一个判断满足时会继续执行后面的语句</li></ul><p>常用的判断语句有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">判断两个字符串</span><br><span class="line"></span><br><span class="line">=  //相等</span><br><span class="line">判断两个整数</span><br><span class="line"></span><br><span class="line">-lt  //小于</span><br><span class="line">-le  //小于等于</span><br><span class="line">-eq  //等于</span><br><span class="line">-gt  //大于</span><br><span class="line">-ge  //大于等于</span><br><span class="line">-ne  //不等于</span><br><span class="line">按照文件权限进行判断</span><br><span class="line"></span><br><span class="line">-r  //有读的权限</span><br><span class="line">-w  //有写的quanx</span><br><span class="line">-x  //有执行的权限</span><br><span class="line">按照文件类型进行判断</span><br><span class="line"></span><br><span class="line">-f  //文件存在并且是一个常规的文件</span><br><span class="line">-e  //文件存在</span><br><span class="line">-d  //文件存在并是一个目录</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>案例：判断 “ok” 是否等于 ok；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;ok&quot;</span> = <span class="string">&quot;ok&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;equal&quot;</span> <span class="comment">#如果等于则输出 equal</span></span><br><span class="line"><span class="keyword">fi</span>  <span class="comment">#否则结束</span></span><br></pre></td></tr></table></figure><p>22 是否大于等于 21；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ 22 -ge 21 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;大于&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>&#x2F;root&#x2F;shell 目录下是否有 aaa.txt 文件；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f /root/shell/aaa.txt ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;存在&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>执行结果如下：<br><img src="/2025/08/23/Shell%E7%BC%96%E7%A8%8B/file-20250823184636321.png" alt="500"></p><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><p>if 语句的基本语法如下，需要注意 [ 条件判断式 ] 中括号与判断式之间必须有空格。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#单分支</span></span><br><span class="line"><span class="keyword">if</span> [ 条件判断式 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">代码</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#多分支</span></span><br><span class="line"><span class="keyword">if</span> [ 条件判断式 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">代码</span><br><span class="line"><span class="keyword">elif</span> [ 条件判断式 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">代码</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>案例：编写一个 shell 程序，如果输入的参数大于等于 60，输出“及格”，小于 60 则输出“不及格”。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$1</span> -ge 60 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;及格&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$1</span> -le 60 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;不及格&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>运行时带参数结果如下；<br><img src="/2025/08/23/Shell%E7%BC%96%E7%A8%8B/file-20250823184923512.png" alt="500"></p><h2 id="case-语句"><a href="#case-语句" class="headerlink" title="case 语句"></a>case 语句</h2><p>基本语法如下，其中 * 代表都不是以上的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> $变量名 <span class="keyword">in</span></span><br><span class="line"><span class="string">&quot;值1&quot;</span>)</span><br><span class="line">如果变量的值等于1，则执行程序1</span><br><span class="line">;;</span><br><span class="line"><span class="string">&quot;值2&quot;</span>)</span><br><span class="line">如果变量的值等于2，则执行程序2</span><br><span class="line">;;</span><br><span class="line">......</span><br><span class="line">*)</span><br><span class="line">如果变量的值都不是以上的值，则执行此程序</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>案例：编写 Shell 程序当命令行参数为 1 时输出“周一”，是 2 时输出“周二”，其他情况均输出“other”。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;周一&quot;</span></span><br><span class="line">;;</span><br><span class="line"><span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;周二&quot;</span></span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;other&quot;</span></span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/2025/08/23/Shell%E7%BC%96%E7%A8%8B/file-20250823185127619.png" alt="500"></p><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><p>for 循环有两个基本语法，语法一：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量 <span class="keyword">in</span> 值1 值2 值3...</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>案例1：打印命令行输入的参数；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#使用$*</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;$*&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;num is <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#使用$@</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;num is <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>运行结果如下，这也印证了 $*(将所有参数看成一个整体) 和 $@(将参数区别对待) 的区别；<br><img src="/2025/08/23/Shell%E7%BC%96%E7%A8%8B/file-20250823185707944.png" alt="500"><br>除此之外 for 循环还有第二个语法；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>((初始值;循环控制条件;变量变化))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>案例2：输出从 1 加到 100 的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line"><span class="keyword">for</span>(( i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++ ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">sum1=$((<span class="variable">$sum</span>+<span class="variable">$i</span>))</span><br><span class="line"><span class="comment"># 也可以 </span></span><br><span class="line">sum2=$((sum+i))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;SUM=<span class="variable">$sum1</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;sum=<span class="variable">$sum2</span>&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/08/23/Shell%E7%BC%96%E7%A8%8B/file-20250823190437968.png" alt="500"></p><h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h2><p>基本语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> [ 条件判断式 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">程序</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>案例：命令行输入一个参数 n，计算 1+2+..+n 的值；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line">i=0</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le <span class="variable">$1</span> ]  <span class="comment">#只要第i个数小于我们输入的参数，就执行循环</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">sum</span>=$[<span class="variable">$sum</span>+<span class="variable">$i</span>]</span><br><span class="line">i=$[<span class="variable">$i</span>+1]  <span class="comment">#i自增</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;SUM=<span class="variable">$SUM</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="read-读取控制台输入"><a href="#read-读取控制台输入" class="headerlink" title="read 读取控制台输入"></a>read 读取控制台输入</h2><p>在我们进行 Shell 编程的时候，有时候也需要跟控制台进行交互，比如用户动态的输入一些数据，这个时候就需要用到 read。基本语法为</p><blockquote><p><em>read(选项)(参数)</em><br>-p 制定读取值时的提示符<br>-t 指定读取值时的等待时间，如果没有在规定时间内输入，则不再等待</p></blockquote><p>案例 1：读取控制台输入一个 num 值；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;输入num1=：&quot;</span> num1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你输入的num1为：<span class="variable">$num1</span>&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2025/08/23/Shell%E7%BC%96%E7%A8%8B/file-20250824000323787.png" alt="500"><br>案例 2：读取控制台输入一个 num 值，指定在 10 秒内输入；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -t 10 -p <span class="string">&quot;输入num2=&quot;</span> num2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;你输入的num2为：<span class="variable">$num2</span>&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你使用astrbot搭建使用deepseek模型的QQ机器人</title>
      <link href="/2025/08/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8astrbot%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8deepseek%E6%A8%A1%E5%9E%8B%E7%9A%84QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
      <url>/2025/08/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8astrbot%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8deepseek%E6%A8%A1%E5%9E%8B%E7%9A%84QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/weixin_65654278/article/details/145452636?spm=1001.2014.3001.5501">旧博客地址：《使用astrbot搭建使用deepseek模型的QQ机器人》</a></p><h4 id="astrbot官网"><a href="#astrbot官网" class="headerlink" title="astrbot官网"></a><a href="https://astrbot.app/">astrbot官网</a></h4><h1 id="什么是-AstrBot？"><a href="#什么是-AstrBot？" class="headerlink" title="什么是 AstrBot？"></a>什么是 AstrBot？</h1><ul><li><p>AstrBot 是一个易于上手的多平台聊天机器人及开发框架。通过它，你能够在多种消息平台上部署一个支持大语言模型（LLM）的聊天机器人。并以此实现但不限于 AI 知识库问答、角色扮演、群聊管理、LLM Agent 等功能。它有如下特性</p></li><li><p>松耦合：AstrBot 历经 3 次大代码重构。每一次都在向着松耦合、模块化的方向迈进。目前，AstrBot 采用了事件总线和消息事件流水线的架构设计，实现近乎完全的模块化。</p></li><li><p>异步：AstrBot 采用了异步编程模型，使得 AstrBot 在处理多个消息平台的消息时，能够更加高效。</p></li><li><p>多消息平台部署：AstrBot 默认支持接入 QQ、QQ频道、微信。通过插件，还可以接入 Telegram 等任何消息平台。</p></li><li><p>完善的插件系统：AstrBot 提供了完善、及其易于上手的插件系统，你可以通过插件实现自己的功能。开发一个插件，只需要几行代码。</p></li></ul><h1 id="它是如何实现的？"><a href="#它是如何实现的？" class="headerlink" title="它是如何实现的？"></a>它是如何实现的？</h1><p>下面的拓扑图简述了 AstrBot 与插件、消息平台适配器、语言模型提供商、消息协议实现端的关系。</p><p><img src="/2025/08/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8astrbot%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8deepseek%E6%A8%A1%E5%9E%8B%E7%9A%84QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/file-20250817011008321.png"></p><h1 id="开始部署（Linux用docker部署）"><a href="#开始部署（Linux用docker部署）" class="headerlink" title="开始部署（Linux用docker部署）"></a>开始部署（Linux用docker部署）</h1><p>我的方法是使用是使用docker进行部署，如果还没安装docker，请使用<a href="https://1panel.cn/docs/installation/online_installation/">安装1panel面板</a>进行傻瓜式自动安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> astrbot</span><br><span class="line"><span class="built_in">cd</span> astrbot</span><br><span class="line"><span class="built_in">sudo</span> docker run -itd \</span><br><span class="line">-p 6180-6200:6180-6200 \</span><br><span class="line">-p 11451:11451 \</span><br><span class="line">-v <span class="variable">$PWD</span>/data:/AstrBot/data \</span><br><span class="line">--name astrbot soulter/astrbot:latest</span><br></pre></td></tr></table></figure><p>通过以下命令查看 AstrBot 的日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker logs -f astrbot</span><br></pre></td></tr></table></figure><h2 id="🎉-大功告成！"><a href="#🎉-大功告成！" class="headerlink" title="🎉 大功告成！"></a>🎉 大功告成！</h2><p>如果一切顺利，你会看到 AstrBot 打印出的日志。</p><p>如果没有报错，你会看到一条日志显示类似 🌈 管理面板已启动，可访问 并附带了几条链接。打开其中一个链接即可访问 AstrBot 管理面板。如下图<br><img src="/2025/08/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8astrbot%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8deepseek%E6%A8%A1%E5%9E%8B%E7%9A%84QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/file-20250817012042044.png"><br><img src="/2025/08/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8astrbot%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8deepseek%E6%A8%A1%E5%9E%8B%E7%9A%84QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/file-20250817012800367.png"></p><blockquote><p>注意：如何使用云服务器部署的记得打开防火墙，端口<code>6185</code></p></blockquote><p><img src="/2025/08/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8astrbot%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8deepseek%E6%A8%A1%E5%9E%8B%E7%9A%84QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/file-20250817013101613.png"><br>登录进去后<br><img src="/2025/08/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8astrbot%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8deepseek%E6%A8%A1%E5%9E%8B%E7%9A%84QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/file-20250817013326885.png"></p><h1 id="通过-NapCatQQ-协议实现端接入-QQ"><a href="#通过-NapCatQQ-协议实现端接入-QQ" class="headerlink" title="通过 NapCatQQ 协议实现端接入 QQ"></a>通过 NapCatQQ 协议实现端接入 QQ</h1><blockquote><p>[!tip]<br><code>如果过于频繁使用（同一时间发送消息次数过多），可能会导致更高的风控风险，请注意使用频率。</code></p></blockquote><p>NapCatQQ 是基于无头 QQNT 的 OneBot 协议实现端。它本质上运行了一个 QQNT 实例。</p><p><strong>WARNING</strong></p><p>为了成功部署，你需要：</p><ul><li>一个 QQ 号（最好不是新创建的 QQ 号）。</li><li>一台具有摄像功能的手机以扫码登录 QQ。</li></ul><h2 id="通过-Docker-部署-NapCat"><a href="#通过-Docker-部署-NapCat" class="headerlink" title="通过 Docker 部署 NapCat"></a>通过 Docker 部署 <a href="https://napcat.napneko.icu/">NapCat</a></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-e NAPCAT_GID=$(<span class="built_in">id</span> -g) \</span><br><span class="line">-e NAPCAT_UID=$(<span class="built_in">id</span> -u) \</span><br><span class="line">-p 3000:3000 \</span><br><span class="line">-p 3001:3001 \</span><br><span class="line">-p 6099:6099 \</span><br><span class="line">--name napcat \</span><br><span class="line">--restart=always \</span><br><span class="line">mlikiowa/napcat-docker:latest</span><br></pre></td></tr></table></figure><p>如果出现以下错误请更新docker源仓库<br><img src="/2025/08/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8astrbot%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8deepseek%E6%A8%A1%E5%9E%8B%E7%9A%84QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/file-20250817020103834.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>写入一下内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;https://docker.hpcloud.cloud&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;https://docker.m.daocloud.io&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;https://docker.unsee.tech&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;https://docker.1panel.live&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;http://mirrors.ustc.edu.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;https://docker.chenby.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;http://mirror.azure.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;https://dockerpull.org&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;https://dockerhub.icu&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;https://hub.rat.dev&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;https://proxy.1panel.live&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;https://docker.1panel.top&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;https://docker.m.daocloud.io&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;https://docker.1ms.run&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;https://docker.ketches.cn&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>保存文件后重启 Docker 服务，新的镜像源即可生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>重新执行docekr部署指令<br>执行成功后，需要查看日志以得到登录二维码和管理面板的 URL。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs napcat</span><br></pre></td></tr></table></figure><p>请复制管理面板的 URL，然后在浏览器中打开备用。</p><p>然后使用你要登录的 QQ 扫描出现的二维码，即可登录。</p><p>如果登录阶段没有出现问题，即成功部署。</p><p><img src="/2025/08/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8astrbot%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8deepseek%E6%A8%A1%E5%9E%8B%E7%9A%84QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/file-20250817021124492.png"></p><h1 id="连接到-AstrBot"><a href="#连接到-AstrBot" class="headerlink" title="连接到 AstrBot"></a>连接到 AstrBot</h1><h2 id="配置-aiocqhttp"><a href="#配置-aiocqhttp" class="headerlink" title="配置 aiocqhttp"></a>配置 aiocqhttp</h2><p>在 AstrBot 的管理面板中，选择左边栏的 <strong>消息平台</strong> 选项卡。点击**+**号新增适配器，选择 __aiocqhttp__，会出现 <strong>aiocqhttp</strong> 的相关配置项，如下图所示：<br><img src="/2025/08/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8astrbot%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8deepseek%E6%A8%A1%E5%9E%8B%E7%9A%84QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/file-20250817021955892.png"><br><img src="/2025/08/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8astrbot%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8deepseek%E6%A8%A1%E5%9E%8B%E7%9A%84QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/file-20250817021439724.png"></p><h2 id="配置项填写："><a href="#配置项填写：" class="headerlink" title="配置项填写："></a>配置项填写：</h2><p>ID(id)：随意填写，用于区分不同的消息平台实例。系统会自动填充。<br>启用(enable): 勾选。<br>反向 WebSocket 主机地址：请填写你的机器的 IP 地址。如 0.0.0.0<br>反向 WebSocket 端口：填写一个端口11451。<code>这个端口是通过上面docker部署的时候就定下来了，跟到这一步别改成其他的</code></p><h3 id="保存配置"><a href="#保存配置" class="headerlink" title="保存配置"></a>保存配置</h3><p>切记点击右下角 <strong>保存</strong>，AstrBot 重启并会应用配置。</p><h2 id="在-NapCatQQ-中添加-WebSocket-客户端"><a href="#在-NapCatQQ-中添加-WebSocket-客户端" class="headerlink" title="在 NapCatQQ 中添加 WebSocket 客户端"></a>在 NapCatQQ 中添加 WebSocket 客户端</h2><p>切换回 NapCatQQ 的管理面板，点击 <strong>网络配置-&gt;添加网络配置</strong>，在弹出的窗口中，名称随意填写，类型选择 <strong>WebSocket 客户端</strong>。点击确认。<br><img src="/2025/08/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8astrbot%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8deepseek%E6%A8%A1%E5%9E%8B%E7%9A%84QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/file-20250817022411435.png"></p><p>在新弹出的窗口中：</p><ul><li>勾选 启用。</li><li>URL 填写 ws:&#x2F;&#x2F;&lt;宿主机IP&gt;:&lt;在 AstrBot中填写的端口&gt;&#x2F;ws。如 ws:&#x2F;&#x2F;172.17.0.3:11451&#x2F;ws。<br>因为这里是通过docker部署的，要查看容器ip，不是你实际的物理机的ip地址,用以下命令查看astrBot分到的虚拟IP地址<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect -f <span class="string">&#x27;&#123;&#123;range.NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> astrbot </span><br></pre></td></tr></table></figure> 如果不出意外的话，他就会返回docker分配给astrBot的虚拟IP地址了，在napcat里填ws:&#x2F;&#x2F;获取到的IP:11451&#x2F;ws 就可以了</li><li>消息格式：Array<br>切记后面加一个 <strong>&#x2F;ws</strong> 切记后面加一个 &#x2F;ws! 切记后面加一个 <strong>&#x2F;ws</strong></li></ul><p>点击 <strong>保存</strong>。</p><p>🎉 大功告成！<br>此时，你的 AstrBot 和 NapCatQQ 应该已经连接成功。使用 私聊 的方式在 QQ 对机器人发送 &#x2F;help 以检查是否连接成功。<br><img src="/2025/08/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8astrbot%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8deepseek%E6%A8%A1%E5%9E%8B%E7%9A%84QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/file-20250817022913532.png"></p><h1 id="获取api"><a href="#获取api" class="headerlink" title="获取api"></a>获取api</h1><p>我用的是<a href="https://cloud.siliconflow.cn/i/iICxcKiF"><strong>硅基流动</strong></a>，官网链接<a href="https://cloud.siliconflow.cn/i/iICxcKiF%EF%BC%8C%E5%A6%82%E6%9E%9C%E8%A7%89%E6%98%AF%E6%88%91%E4%B8%8A%E9%9D%A2%E6%88%91%E6%AD%A5%E9%AA%A4%E5%AE%9E%E7%8E%B0%E6%B2%A1%E6%9C%89%E9%97%AE%E9%A2%98%E9%AB%98%E5%8F%B0%E6%82%A8%E7%9A%84%E8%B4%B5%E6%89%8B%E4%BD%BF%E7%94%A8%E6%88%91%E7%9A%84%E9%82%80%E8%AF%B7%E7%A0%81%E6%B3%A8%E5%86%8C%EF%BC%9A**iICxcKiF**%EF%BC%8C%E5%AE%83%E5%8F%AF%E4%BB%A5%E4%BD%BF%E6%96%B0%E7%94%A8%E6%88%B7%E8%8E%B7%E5%BE%97%E5%85%8D%E8%B4%B914%E5%85%83%E7%9A%84%E8%B5%A0%E9%80%81%E4%BD%99%E9%A2%9D%EF%BC%8C%E8%87%AA%E7%94%A8%E4%B8%8D%E5%A4%AA%E9%A2%91%E7%B9%81%E5%A4%A7%E6%A6%82%E5%8F%AF%E4%BB%A5%E7%94%A8%E4%B8%80%E7%99%BE%E5%A4%9A%E5%A4%A9%EF%BC%8C%E6%88%91%E9%97%AE%E8%BF%87LMM%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%BA%86">https://cloud.siliconflow.cn/i/iICxcKiF，如果觉是我上面我步骤实现没有问题高台您的贵手使用我的邀请码注册：**iICxcKiF**，它可以使新用户获得免费14元的赠送余额，自用不太频繁大概可以用一百多天，我问过LMM机器人了</a> :smiley::smile::laughing:<br>下面是我玩了一天，大概用了0.018元<br><img src="/2025/08/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8astrbot%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8deepseek%E6%A8%A1%E5%9E%8B%E7%9A%84QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/file-20250817023027317.png"><br><img src="/2025/08/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8astrbot%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8deepseek%E6%A8%A1%E5%9E%8B%E7%9A%84QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/file-20250817023101677.png"><br>复制API秘钥回到下面的Astrbot界面选择<strong>服务提供商-&gt;点击+号新增服务提供商-&gt;选择硅基流动</strong>，填到api key处，最后右下角点击<strong>保存。</strong><br><img src="/2025/08/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8astrbot%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8deepseek%E6%A8%A1%E5%9E%8B%E7%9A%84QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/file-20250817023311871.png"><br><img src="/2025/08/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8astrbot%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8deepseek%E6%A8%A1%E5%9E%8B%E7%9A%84QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/file-20250817023328282.png"></p><h2 id="🎉大功告成"><a href="#🎉大功告成" class="headerlink" title="🎉大功告成"></a>🎉大功告成</h2><p>向你的QQ机器人发送消息,<br><img src="/2025/08/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8astrbot%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8deepseek%E6%A8%A1%E5%9E%8B%E7%9A%84QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/file-20250817023619725.png"><br><img src="/2025/08/17/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8astrbot%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8deepseek%E6%A8%A1%E5%9E%8B%E7%9A%84QQ%E6%9C%BA%E5%99%A8%E4%BA%BA/file-20250817023640917.png"><br>进行到这一步，恭喜你出师了，可以和你的机器人聊天了，<strong>如果你的QQ缺少一个积极回复你的好友，那么这款机器人，你值得拥有！！！</strong>😏😏😏</p><p>本文实现<a href="https://astrbot.soulter.top/what-is-astrbot.html">官方文档https://astrbot.soulter.top/what-is-astrbot.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>datax</title>
      <link href="/2025/08/10/datax/"/>
      <url>/2025/08/10/datax/</url>
      
        <content type="html"><![CDATA[<h1 id="DataX简介"><a href="#DataX简介" class="headerlink" title="DataX简介"></a>DataX简介</h1><h2 id="DataX概述"><a href="#DataX概述" class="headerlink" title="DataX概述"></a>DataX概述</h2><p>DataX 是阿里巴巴开源的一个异构数据源离线同步工具，致力于实现包括关系型数据库(MySQL、Oracle等)、HDFS、Hive、ODPS、HBase、FTP等各种异构数据源之间稳定高效的数据同步功能。</p><p><a href="https://github.com/alibaba/DataX">datax源码地址</a>：<a href="https://github.com/alibaba/DataX">https://github.com/alibaba/DataX</a></p><h2 id="DataX支持的数据源"><a href="#DataX支持的数据源" class="headerlink" title="DataX支持的数据源"></a>DataX支持的数据源</h2><p>DataX目前已经有了比较全面的插件体系，主流的RDBMS数据库、NOSQL、大数据计算系统都已经接入，目前支持数据如下图。</p><table><thead><tr><th>类型</th><th>数据源</th><th align="center">Reader(读)</th><th align="center">Writer(写)</th><th align="center">文档</th></tr></thead><tbody><tr><td>RDBMS 关系型数据库</td><td>MySQL</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/mysqlreader/doc/mysqlreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/mysqlwriter/doc/mysqlwriter.md">写</a></td></tr><tr><td></td><td>Oracle</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/oraclereader/doc/oraclereader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/oraclewriter/doc/oraclewriter.md">写</a></td></tr><tr><td></td><td>OceanBase</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/oceanbasev10reader/doc/oceanbasev10reader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/oceanbasev10writer/doc/oceanbasev10writer.md">写</a></td></tr><tr><td></td><td>SQLServer</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/sqlserverreader/doc/sqlserverreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/sqlserverwriter/doc/sqlserverwriter.md">写</a></td></tr><tr><td></td><td>PostgreSQL</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/postgresqlreader/doc/postgresqlreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/postgresqlwriter/doc/postgresqlwriter.md">写</a></td></tr><tr><td></td><td>DRDS</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/drdsreader/doc/drdsreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/drdswriter/doc/drdswriter.md">写</a></td></tr><tr><td></td><td>Kingbase</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/drdsreader/doc/drdsreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/drdswriter/doc/drdswriter.md">写</a></td></tr><tr><td></td><td>通用RDBMS(支持所有关系型数据库)</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/rdbmsreader/doc/rdbmsreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/rdbmswriter/doc/rdbmswriter.md">写</a></td></tr><tr><td>阿里云数仓数据存储</td><td>ODPS</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/odpsreader/doc/odpsreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/odpswriter/doc/odpswriter.md">写</a></td></tr><tr><td></td><td>ADB</td><td align="center"></td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/adbmysqlwriter/doc/adbmysqlwriter.md">写</a></td></tr><tr><td></td><td>ADS</td><td align="center"></td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/adswriter/doc/adswriter.md">写</a></td></tr><tr><td></td><td>OSS</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/ossreader/doc/ossreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/osswriter/doc/osswriter.md">写</a></td></tr><tr><td></td><td>OCS</td><td align="center"></td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/ocswriter/doc/ocswriter.md">写</a></td></tr><tr><td></td><td>Hologres</td><td align="center"></td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/hologresjdbcwriter/doc/hologresjdbcwriter.md">写</a></td></tr><tr><td></td><td>AnalyticDB For PostgreSQL</td><td align="center"></td><td align="center">√</td><td align="center">写</td></tr><tr><td>阿里云中间件</td><td>datahub</td><td align="center">√</td><td align="center">√</td><td align="center">读 、写</td></tr><tr><td></td><td>SLS</td><td align="center">√</td><td align="center">√</td><td align="center">读 、写</td></tr><tr><td>图数据库</td><td>阿里云 GDB</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/gdbreader/doc/gdbreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/gdbwriter/doc/gdbwriter.md">写</a></td></tr><tr><td></td><td>Neo4j</td><td align="center"></td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/neo4jwriter/doc/neo4jwriter.md">写</a></td></tr><tr><td>NoSQL数据存储</td><td>OTS</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/otsreader/doc/otsreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/otswriter/doc/otswriter.md">写</a></td></tr><tr><td></td><td>Hbase0.94</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/hbase094xreader/doc/hbase094xreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/hbase094xwriter/doc/hbase094xwriter.md">写</a></td></tr><tr><td></td><td>Hbase1.1</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/hbase11xreader/doc/hbase11xreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/hbase11xwriter/doc/hbase11xwriter.md">写</a></td></tr><tr><td></td><td>Phoenix4.x</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/hbase11xsqlreader/doc/hbase11xsqlreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/hbase11xsqlwriter/doc/hbase11xsqlwriter.md">写</a></td></tr><tr><td></td><td>Phoenix5.x</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/hbase20xsqlreader/doc/hbase20xsqlreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/hbase20xsqlwriter/doc/hbase20xsqlwriter.md">写</a></td></tr><tr><td></td><td>MongoDB</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/mongodbreader/doc/mongodbreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/mongodbwriter/doc/mongodbwriter.md">写</a></td></tr><tr><td></td><td>Cassandra</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/cassandrareader/doc/cassandrareader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/cassandrawriter/doc/cassandrawriter.md">写</a></td></tr><tr><td>数仓数据存储</td><td>StarRocks</td><td align="center">√</td><td align="center">√</td><td align="center">读 、<a href="https://github.com/alibaba/DataX/blob/master/starrockswriter/doc/starrockswriter.md">写</a></td></tr><tr><td></td><td>ApacheDoris</td><td align="center"></td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/doriswriter/doc/doriswriter.md">写</a></td></tr><tr><td></td><td>ClickHouse</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/clickhousereader/doc/clickhousereader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/clickhousewriter/doc/clickhousewriter.md">写</a></td></tr><tr><td></td><td>Databend</td><td align="center"></td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/databendwriter/doc/databendwriter.md">写</a></td></tr><tr><td></td><td>Hive</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/hdfsreader/doc/hdfsreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/hdfswriter/doc/hdfswriter.md">写</a></td></tr><tr><td></td><td>kudu</td><td align="center"></td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/hdfswriter/doc/hdfswriter.md">写</a></td></tr><tr><td></td><td>selectdb</td><td align="center"></td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/selectdbwriter/doc/selectdbwriter.md">写</a></td></tr><tr><td>无结构化数据存储</td><td>TxtFile</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/txtfilereader/doc/txtfilereader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/txtfilewriter/doc/txtfilewriter.md">写</a></td></tr><tr><td></td><td>FTP</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/ftpreader/doc/ftpreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/ftpwriter/doc/ftpwriter.md">写</a></td></tr><tr><td></td><td>HDFS</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/hdfsreader/doc/hdfsreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/hdfswriter/doc/hdfswriter.md">写</a></td></tr><tr><td></td><td>Elasticsearch</td><td align="center"></td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/elasticsearchwriter/doc/elasticsearchwriter.md">写</a></td></tr><tr><td>时间序列数据库</td><td>OpenTSDB</td><td align="center">√</td><td align="center"></td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/opentsdbreader/doc/opentsdbreader.md">读</a></td></tr><tr><td></td><td>TSDB</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/tsdbreader/doc/tsdbreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/tsdbwriter/doc/tsdbhttpwriter.md">写</a></td></tr><tr><td></td><td>TDengine</td><td align="center">√</td><td align="center">√</td><td align="center"><a href="https://github.com/alibaba/DataX/blob/master/tdenginereader/doc/tdenginereader-CN.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/tdenginewriter/doc/tdenginewriter-CN.md">写</a></td></tr></tbody></table><h1 id="DataX架构原理"><a href="#DataX架构原理" class="headerlink" title="DataX架构原理"></a>DataX架构原理</h1><h2 id="DataX设计理念"><a href="#DataX设计理念" class="headerlink" title="DataX设计理念"></a>DataX设计理念</h2><p>为了解决异构数据源同步问题，DataX将复杂的网状的同步链路变成了星型数据链路，DataX作为中间传输载体负责连接各种数据源。当需要接入一个新的数据源的时候，只需要将此数据源对接到DataX，便能跟已有的数据源做到无缝数据同步。<br><img src="/2025/08/10/datax/file-20250810132826276.png"></p><h2 id="DataX3-0框架设计"><a href="#DataX3-0框架设计" class="headerlink" title="DataX3.0框架设计"></a>DataX3.0框架设计</h2><p><img src="/2025/08/10/datax/file-20250810132945028.png"><br>DataX本身作为<strong>离线数据同步框架</strong>，采用<strong>Framework + plugin</strong>架构构建。将数据源读取和写入抽象成为Reader&#x2F;Writer插件，纳入到整个同步框架中。</p><ul><li><strong>Reade</strong>r：Reader�为数据采集模块，负责采集数据源的数据，将数据发送给Framework。</li><li><strong>Writer</strong>： Writer为数据写入模块，负责不断向Framework取数据，并将数据写入到目的端。</li><li><strong>Framework</strong>：Framework用于连接reader和writer，作为两者的数据传输通道，并处理缓冲，流控，并发，数据转换等核心技术问题。</li></ul><h2 id="DataX3-0核心架构"><a href="#DataX3-0核心架构" class="headerlink" title="DataX3.0核心架构"></a>DataX3.0核心架构</h2><p>DataX 3.0 开源版本支持单机多线程模式完成同步作业运行，本小节按一个DataX作业生命周期的时序图，从整体架构设计非常简要说明DataX各个模块相互关系。<br><img src="/2025/08/10/datax/file-20250810133238491.png"></p><h3 id="核心模块介绍："><a href="#核心模块介绍：" class="headerlink" title="核心模块介绍："></a>核心模块介绍：</h3><ol><li><strong>job</strong>:单个数据同步的作业，称之为一个Job，一个job启动一个进程。</li><li>Task:根据不同数据源的切分策略，一个Job会切分为多个Task,Task是DataX作业的最小单元，每个Task负责一部分数据的同步工作。 </li><li>TaskGroup:Scheduler调度模块会对Task进行分组，每个Task组称为一个Task Group,每个Task Group2负责以一定的并发度运行其所分得的Task,单个Task Group的并发度为5。 </li><li>Reader-→Channel-→Writer:每个Task启动后，都会固定启动Reader-→Channel-→Writer的线程来完成同步工作。</li><li>DataX作业运行起来之后， Job监控并等待多个TaskGroup模块任务完成，等待所有TaskGroup任务完成后Job成功退出。否则，异常退出，进程退出值非0</li></ol><h3 id="DataX调度流程："><a href="#DataX调度流程：" class="headerlink" title="DataX调度流程："></a>DataX调度流程：</h3><p>举例来说，用户提交了一个DataX作业，并且配置了20个并发，目的是将一个100张分表的mysql数据同步到odps里面。 DataX的调度决策思路是：</p><ol><li>DataXJob根据分库分表切分成了100个Task。</li><li>根据20个并发，DataX计算共需要分配4个TaskGroup。</li><li>4个TaskGroup平分切分好的100个Task，每一个TaskGroup负责以5个并发共计运行25个Task。</li></ol><h3 id="DataX和Sqoop对比"><a href="#DataX和Sqoop对比" class="headerlink" title="DataX和Sqoop对比"></a>DataX和Sqoop对比</h3><table><thead><tr><th align="center">功能</th><th align="center">Datax</th><th align="center">Sqoop</th></tr></thead><tbody><tr><td align="center">运行模式</td><td align="center">单进程多线程</td><td align="center">MR</td></tr><tr><td align="center">分布式</td><td align="center">不支持，可以通过调度系统规避</td><td align="center">支持</td></tr><tr><td align="center">流控</td><td align="center">有流控功能</td><td align="center">需要定制</td></tr><tr><td align="center">统计信息</td><td align="center">己有一些统计，上报需定制</td><td align="center">没有，分布式的数据收集不方便</td></tr><tr><td align="center">数据校验</td><td align="center">在core部分有校验功能</td><td align="center">没有，分布式的数据收集不方便</td></tr><tr><td align="center">监控</td><td align="center">需要定制</td><td align="center">需要定制</td></tr></tbody></table><h1 id="DataX部署"><a href="#DataX部署" class="headerlink" title="DataX部署"></a>DataX部署</h1><ol><li><p>下载DataX安装包并上传到hadoop102的&#x2F;opt&#x2F;software<br>下载地址：<a href="http://datax-opensource.oss-cn-hangzhou.aliyuncs.com/datax.tar.gz">http://datax-opensource.oss-cn-hangzhou.aliyuncs.com/datax.tar.gz</a></p></li><li><p>解压datax.tar.gz到&#x2F;opt&#x2F;module</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf datax.tar.gz -C /opt/module/</span><br></pre></td></tr></table></figure></li><li><p>自检，执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python /opt/module/datax/bin/datax.py /opt/module/datax/job/job.json</span><br></pre></td></tr></table></figure></li><li><p>出现如下内容，则表明安装成功<br><img src="/2025/08/10/datax/file-20250810135520118.png"></p></li></ol><h1 id="DataX使用"><a href="#DataX使用" class="headerlink" title="DataX使用"></a>DataX使用</h1><p><a href="https://github.com/alibaba/DataX/blob/master/userGuid.md">官方文档</a><a href="https://github.com/alibaba/DataX/blob/master/userGuid.md">https://github.com/alibaba/DataX/blob/master/userGuid.md</a></p><h2 id="DataX使用概述"><a href="#DataX使用概述" class="headerlink" title="DataX使用概述"></a>DataX使用概述</h2><h3 id="DataX任务提交命令"><a href="#DataX任务提交命令" class="headerlink" title="DataX任务提交命令"></a>DataX任务提交命令</h3><p>Datax的使用十分简单，用户只需要根据自己<strong>同步数据的数据源和目的地选择相应的Reader和Writer，并将Reader和Writer的信息配置在一个json文件中，然后执行如下命令提交数据同步任务即可。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python bin/datax.py path/to/your/job.json</span><br></pre></td></tr></table></figure><h3 id="DataX配置文件格式"><a href="#DataX配置文件格式" class="headerlink" title="DataX配置文件格式"></a><a href="Hadoop.md#%E7%BC%96%E5%86%99%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">DataX配置文件格式</a></h3><p>可以使用如下命名查看DataX配置文件模板。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python bin/datax.py -r mysqlreader -w hdfswriter</span><br></pre></td></tr></table></figure><p>配置文件模板如下，json最外层是一个job，job包含setting和content两部分，其中</p><ol><li>setting用于对整个job进行配置，</li><li>content用户配置数据源和目的地。</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Please save the following configuration as a json file and  use</span><br><span class="line">     python <span class="punctuation">&#123;</span>DATAX_HOME<span class="punctuation">&#125;</span>/bin/datax.py <span class="punctuation">&#123;</span>JSON_FILE_NAME<span class="punctuation">&#125;</span>.json </span><br><span class="line">to run the job.</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//数据源和目的地相关配置</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>    </span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="comment">//Reader相关配置</span></span><br><span class="line">                <span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="comment">//reader名称，不可随意命名</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysqlreader&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">            <span class="comment">//Reader配置参数</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">                        <span class="attr">&quot;sliceRecordCount&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">                <span class="comment">//writer相关配置</span></span><br><span class="line">                <span class="attr">&quot;writer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="comment">//writer名称，不可随意命名</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;streamwriter&quot;</span><span class="punctuation">,</span> </span><br><span class="line">                    <span class="comment">//writer配置参数</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span> </span><br><span class="line">                        <span class="attr">&quot;print&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="comment">//Job配置参数，包括限速配置等</span></span><br><span class="line">        <span class="attr">&quot;setting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;speed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;channel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="同步MySQL数据到HDFS案例"><a href="#同步MySQL数据到HDFS案例" class="headerlink" title="同步MySQL数据到HDFS案例"></a>同步MySQL数据到HDFS案例</h2><p>案例要求：同步gmall数据库中base_province表数据到HDFS的&#x2F;base_province目录<br>需求分析：要实现该功能，需选用MySQLReader和HDFSWriter，MySQLReader具有两种模式分别是TableMode和QuerySQLMode，前者使用table，column，where等属性声明需要同步的数据；后者使用一条SQL查询语句声明需要同步的数据。<br>下面分别使用两种模式进行演示。</p><h3 id="MySQLReader之TableMode"><a href="#MySQLReader之TableMode" class="headerlink" title="MySQLReader之TableMode"></a>MySQLReader之TableMode</h3><ol><li><p>编写配置文件<br>(1)  创建配置文件base_province.json</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/module/datax/job/base_province.json</span><br></pre></td></tr></table></figure><p>(2) 配置文件内容如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysqlreader&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="string">&quot;id&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="string">&quot;region_id&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="string">&quot;area_code&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="string">&quot;iso_code&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="string">&quot;iso_3166_2&quot;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;where&quot;</span><span class="punctuation">:</span> <span class="string">&quot;id&gt;=3&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;connection&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;jdbcUrl&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                    <span class="string">&quot;jdbc:mysql://hadoop102:3306/gmall&quot;</span></span><br><span class="line">                                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                    <span class="string">&quot;base_province&quot;</span></span><br><span class="line">                                <span class="punctuation">]</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;splitPk&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;writer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hdfswriter&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;id&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bigint&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;region_id&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;area_code&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iso_code&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iso_3166_2&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;compress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gzip&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;defaultFS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hdfs://hadoop102:8020&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fieldDelimiter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\t&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fileName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;base_province&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fileType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/base_province&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;writeMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;append&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;setting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;speed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;channel&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件说明</p></li></ol><p>(1) Reader参数说明<br><img src="/2025/08/10/datax/file-20250810143036239.png"><br>(2) Writer参数说明<br><img src="/2025/08/10/datax/file-20250810143122382.png"></p><blockquote><p>[!tip]<br>注意事项：<br>HFDS Writer并未提供nullFormat参数：也就是用户并不能自定义null值写到HFDS文件中的存储格式。默认情况下，HFDS Writer会将null值存储为空字符串（‘’），而Hive默认的null值存储格式为\N。所以后期将DataX同步的文件导入Hive表就会出现问题。</p></blockquote><p>（3）Setting参数说明<br><img src="/2025/08/10/datax/file-20250810143305418.png"></p><ol start="3"><li><p>提交任务<br>（1）在HDFS创建&#x2F;base_province目录<br>使用DataX向HDFS同步数据时，需确保目标路径已存在</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -<span class="built_in">mkdir</span> /base_province</span><br></pre></td></tr></table></figure><p>（2）进入DataX根目录<br>（3）执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python bin/datax.py job/base_province.json </span><br></pre></td></tr></table></figure></li><li><p>查看结果<br>（1）DataX打印日志<br><img src="/2025/08/10/datax/file-20250810143616787.png" alt="500"><br>（2）查看HDFS文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -<span class="built_in">cat</span> /base_province/* | zcat</span><br></pre></td></tr></table></figure></li></ol><h3 id="MySQLReader之QuerySQLMode"><a href="#MySQLReader之QuerySQLMode" class="headerlink" title="MySQLReader之QuerySQLMode"></a>MySQLReader之QuerySQLMode</h3><ol><li><p>编写配置文件<br>（1）修改配置文件base_province.json<br>（2）配置文件内容如下<br> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysqlreader&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;connection&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;jdbcUrl&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                    <span class="string">&quot;jdbc:mysql://hadoop102:3306/gmall&quot;</span></span><br><span class="line">                                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;querySql&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                    <span class="string">&quot;select id,name,region_id,area_code,iso_code,iso_3166_2 from base_province where id&gt;=3&quot;</span></span><br><span class="line">                                <span class="punctuation">]</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;writer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hdfswriter&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;id&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bigint&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;region_id&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;area_code&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iso_code&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iso_3166_2&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;compress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gzip&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;defaultFS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hdfs://hadoop102:8020&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fieldDelimiter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\t&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fileName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;base_province&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fileType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/base_province&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;writeMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;append&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;setting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;speed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;channel&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p></li><li><p>配置文件说明<br>（1）Reader参数说明<br><img src="/2025/08/10/datax/file-20250810143928488.png"></p></li><li><p>提交任务<br>（1）创建目标路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -<span class="built_in">rm</span> -r -f /base_province/*</span><br></pre></td></tr></table></figure><p>（2）进入DataX根目录<br>（3）执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python bin/datax.py job/base_province.json</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>查看结果<br>（1）DataX打印日志<br><img src="/2025/08/10/datax/file-20250810144708686.png" alt="500"><br>（2）查看HDFS文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -<span class="built_in">cat</span> /base_province/* | zcat</span><br></pre></td></tr></table></figure></li></ol><h3 id="DataX传参"><a href="#DataX传参" class="headerlink" title="DataX传参"></a>DataX传参</h3><p>通常情况下，离线数据同步任务需要每日定时重复执行，故HDFS上的目标路径通常会包含一层日期，以对每日同步的数据加以区分，也就是说每日同步数据的目标路径不是固定不变的，因此DataX配置文件中HDFS Writer的path参数的值应该是动态的。为实现这一效果，就需要使用DataX传参的功能。<br>DataX传参的用法如下，在JSON配置文件中使用${param}引用参数，在提交任务时使用-p”-Dparam&#x3D;value”传入参数值，具体示例如下。</p><ol><li><p>编写配置文件<br>（1）修改配置文件base_province.json<br>（2）配置文件内容如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysqlreader&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;connection&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;jdbcUrl&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                    <span class="string">&quot;jdbc:mysql://hadoop102:3306/gmall&quot;</span></span><br><span class="line">                                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;querySql&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                    <span class="string">&quot;select id,name,region_id,area_code,iso_code,iso_3166_2 from base_province where id&gt;=3&quot;</span></span><br><span class="line">                                <span class="punctuation">]</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;writer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hdfswriter&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;id&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bigint&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;region_id&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;area_code&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iso_code&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;iso_3166_2&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;compress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gzip&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;defaultFS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hdfs://hadoop102:8020&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fieldDelimiter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\t&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fileName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;base_province&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fileType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/base_province/$&#123;dt&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;writeMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;append&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;setting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;speed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;channel&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>提交任务<br>（1）创建目标路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -<span class="built_in">mkdir</span> /base_province/2020-06-14</span><br></pre></td></tr></table></figure><p>（2）进入DataX根目录<br>（3）执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python bin/datax.py -p<span class="string">&quot;-Ddt=2020-06-14&quot;</span> job/base_province.json</span><br></pre></td></tr></table></figure></li><li><p>查看结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -<span class="built_in">ls</span> /base_province</span><br></pre></td></tr></table></figure></li></ol><h3 id="同步HDFS数据到MySQL案例"><a href="#同步HDFS数据到MySQL案例" class="headerlink" title="同步HDFS数据到MySQL案例"></a>同步HDFS数据到MySQL案例</h3><p>案例要求：同步HDFS上的&#x2F;base_province目录下的数据到MySQL gmall 数据库下的test_province表。<br>需求分析：要实现该功能，需选用HDFSReader和MySQLWriter。</p><ol><li><p>编写配置文件<br>（1）创建配置文件test_province.json<br>（2）配置文件内容如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hdfsreader&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;defaultFS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hdfs://hadoop102:8020&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/base_province&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="string">&quot;*&quot;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fileType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;compress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gzip&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;nullFormat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\\N&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fieldDelimiter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\t&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;writer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysqlwriter&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;root&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;000000&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;connection&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                    <span class="string">&quot;test_province&quot;</span></span><br><span class="line">                                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;jdbcUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jdbc:mysql://hadoop102:3306/gmall?useUnicode=true&amp;characterEncoding=utf-8&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="string">&quot;id&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="string">&quot;region_id&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="string">&quot;area_code&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="string">&quot;iso_code&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="string">&quot;iso_3166_2&quot;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;writeMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;replace&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;setting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;speed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;channel&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置文件说明<br>（1）Reader参数说明<br><img src="/2025/08/10/datax/file-20250810145252922.png"></p></li></ol><p>（2）Writer参数说明<br><img src="/2025/08/10/datax/file-20250810145321194.png"></p><ol start="3"><li>提交任务<br>（1）在MySQL中创建gmall.test_province表<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `test_province`;</span><br><span class="line"><span class="keyword">CREATE TABLE</span> `test_province`  (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">CHARACTER SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `region_id` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">CHARACTER SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `area_code` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">CHARACTER SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `iso_code` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">CHARACTER SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `iso_3166_2` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">CHARACTER SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`)</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="keyword">CHARACTER SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br></pre></td></tr></table></figure>（2）进入DataX根目录<br>（3）执行如下命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python bin/datax.py job/test_province.json </span><br></pre></td></tr></table></figure></li><li>查看结果<br>（1）DataX打印日志<br>（2）查看MySQL目标表数据<br><img src="/2025/08/10/datax/file-20250810145539123.png"></li></ol><h1 id="DataX优化"><a href="#DataX优化" class="headerlink" title="DataX优化"></a>DataX优化</h1><h2 id="速度控制"><a href="#速度控制" class="headerlink" title="速度控制"></a>速度控制</h2><p>DataX3.0提供了包括通道(并发)、记录流、字节流三种流控模式，可以随意控制你的作业速度，让你的作业在数据库可以承受的范围内达到最佳的同步速度。<br><img src="/2025/08/10/datax/file-20250810145635862.png"><br>注意事项：<br>1.若配置了总record限速，则必须配置单个channel的record限速<br>2.若配置了总byte限速，则必须配置单个channe的byte限速<br>3.若配置了总record限速和总byte限速，channel并发数参数就会失效。因为配置了总record限速和总byte限速之后，实际channel并发数是通过计算得到的：<br>计算公式为:<br>min(总byte限速&#x2F;单个channel的byte限速，总record限速&#x2F;单个channel的record限速)</p><h2 id="内存调整"><a href="#内存调整" class="headerlink" title="内存调整"></a>内存调整</h2><p>当提升DataX Job内Channel并发数时，内存的占用会显著增加，因为DataX作为数据交换通道，在内存中会缓存较多的数据。例如Channel中会有一个Buffer，作为临时的数据交换的缓冲区，而在部分Reader和Writer的中，也会存在一些Buffer，为了防止OOM等错误，需调大JVM的堆内存。<br>建议将内存设置为4G或者8G，这个也可以根据实际情况来调整。<br>调整JVM xms xmx参数的两种方式：一种是直接更改datax.py脚本；另一种是在启动的时候，加上对应的参数，如下：<br>python datax&#x2F;bin&#x2F;datax.py –jvm&#x3D;“-Xms8G -Xmx8G” &#x2F;path&#x2F;to&#x2F;your&#x2F;job.json</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> MySQL </tag>
            
            <tag> datax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose</title>
      <link href="/2025/08/07/docker-compose/"/>
      <url>/2025/08/07/docker-compose/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.docker.com/compose/">官方文档</a><br>本文参考<a href="https://blog.csdn.net/pushiqiang/article/details/78682323?spm=1001.2014.3001.5506">《docker-compose教程（安装，使用, 快速入门）》</a></p><h1 id="Compose介绍"><a href="#Compose介绍" class="headerlink" title="Compose介绍"></a>Compose介绍</h1><p>Docker Compose是一个用来定义和运行复杂应用的<a href="docker%E5%85%A5%E9%97%A8.md">Docker</a>工具。一个使用Docker容器的应用，通常由多个容器组成。使用Docker Compose不再需要使用shell脚本来启动容器。<br>Compose 通过<strong>一个配置文件来管理多个Docker容器</strong>，在配置文件中，所有的容器通过services来定义，然后使用<code>docker-compose</code>脚本来启动，停止和重启应用，和应用中的服务以及所有依赖服务的容器，非常适合组合使用多个容器进行开发的场景。</p><h2 id="查看是否安装"><a href="#查看是否安装" class="headerlink" title="查看是否安装"></a>查看是否安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker compose version</span><br><span class="line">docker compose</span><br></pre></td></tr></table></figure><p><img src="/2025/08/07/docker-compose/file-20250807152015156.png"></p><h1 id="docker-compose文件结构和示例"><a href="#docker-compose文件结构和示例" class="headerlink" title="docker-compose文件结构和示例"></a>docker-compose文件结构和示例</h1><h2 id="docker-compose文件结构"><a href="#docker-compose文件结构" class="headerlink" title="docker-compose文件结构"></a>docker-compose文件结构</h2><p>docker-compose.yaml:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"> </span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:alpine</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">frontend</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">update_config:</span></span><br><span class="line">        <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line"> </span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:9.4</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db-data:/var/lib/postgresql/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">backend</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.role</span> <span class="string">==</span> <span class="string">manager</span>]</span><br><span class="line"> </span><br><span class="line">  <span class="attr">vote:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">dockersamples/examplevotingapp_vote:before</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5000</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">frontend</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">update_config:</span></span><br><span class="line">        <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line"> </span><br><span class="line">  <span class="attr">result:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">dockersamples/examplevotingapp_result:before</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5001</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">backend</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">update_config:</span></span><br><span class="line">        <span class="attr">parallelism:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line"> </span><br><span class="line">  <span class="attr">worker:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">dockersamples/examplevotingapp_worker</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">frontend</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">backend</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">replicated</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">labels:</span> [<span class="string">APP=VOTING</span>]</span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">        <span class="attr">delay:</span> <span class="string">10s</span></span><br><span class="line">        <span class="attr">max_attempts:</span> <span class="number">3</span></span><br><span class="line">        <span class="attr">window:</span> <span class="string">120s</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.role</span> <span class="string">==</span> <span class="string">manager</span>]</span><br><span class="line"> </span><br><span class="line">  <span class="attr">visualizer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">dockersamples/visualizer:stable</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">stop_grace_period:</span> <span class="string">1m30s</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">placement:</span></span><br><span class="line">        <span class="attr">constraints:</span> [<span class="string">node.role</span> <span class="string">==</span> <span class="string">manager</span>]</span><br><span class="line"> </span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">frontend:</span></span><br><span class="line">  <span class="attr">backend:</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db-data:</span></span><br></pre></td></tr></table></figure><h2 id="docker-compose使用示例"><a href="#docker-compose使用示例" class="headerlink" title="docker-compose使用示例"></a>docker-compose使用示例</h2><p>通过docker-compose构建一个在docker中运行的基于python flask框架的web应用</p><blockquote><p>[! tip]<br><strong>注意：</strong>确保你已经安装了Docker Engine和Docker Compose。 您不需要安装Python或Redis，因为这两个都是由Docker镜像提供的。</p></blockquote><h3 id="Step-1-定义python应用"><a href="#Step-1-定义python应用" class="headerlink" title="Step 1: 定义python应用"></a><strong>Step 1: 定义python应用</strong></h3><ul><li><ol><li>创建工程目录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> compose_test</span><br><span class="line"><span class="built_in">cd</span> compose_test</span><br><span class="line"><span class="built_in">mkdir</span> src      <span class="comment"># 源码文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> docker  <span class="comment"># docker配置文件夹</span></span><br></pre></td></tr></table></figure>目录结构如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">└── compose_test</span><br><span class="line">    ├── docker</span><br><span class="line">    │   └── docker-compose.yml</span><br><span class="line">    ├── Dockerfile</span><br><span class="line">    └── src</span><br><span class="line">        ├── app.py</span><br><span class="line">        └── requirements.txt</span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="2"><li>在compose_test&#x2F;src&#x2F;目录下创建python flask应用 compose_test&#x2F;src&#x2F;app.py文件。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)</span><br><span class="line">redis = Redis(host=<span class="string">&#x27;redis&#x27;</span>, port=<span class="number">6379</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    count = redis.incr(<span class="string">&#x27;hits&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World! I have been seen &#123;&#125; times.\n&#x27;</span>.<span class="built_in">format</span>(count)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ol></li><li>3 .创建python 需求文件 compose_test&#x2F;src&#x2F;requirements.txt<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flask</span><br><span class="line">redis</span><br></pre></td></tr></table></figure></li></ul><h3 id="Step-2-创建容器的Dockerfile文件"><a href="#Step-2-创建容器的Dockerfile文件" class="headerlink" title="Step 2: 创建容器的Dockerfile文件"></a><strong>Step 2: 创建容器的Dockerfile文件</strong></h3><p>一个容器一个Dockerfile文件，在compose_test&#x2F;目录中创建Dockerfile文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROM python:3.7</span><br><span class="line"> </span><br><span class="line">COPY src/ /opt/src</span><br><span class="line">WORKDIR /opt/src</span><br><span class="line"> </span><br><span class="line">RUN pip install -r requirements.txt</span><br><span class="line">CMD [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span><br></pre></td></tr></table></figure><p>Dockerfile文件告诉docker了如下信息：</p><p>从Python 3.7的镜像开始构建一个容器镜像。 </p><p>复制src（即compose_test&#x2F;src）目录到容器中的&#x2F;opt&#x2F;src目录。 </p><p>将容器的工作目录设置为&#x2F;opt&#x2F;src（通过docker exec -it your_docker_container_id bash 进入容器后的默认目录）。<br>安装Python依赖关系。<br>将容器的默认命令设置为python app.py。</p><h3 id="Step-3-定义docker-compose脚本"><a href="#Step-3-定义docker-compose脚本" class="headerlink" title="Step 3: 定义docker-compose脚本"></a><strong>Step 3: 定义docker-compose脚本</strong></h3><p>在compose_test&#x2F;docker&#x2F;目录下创建docker-compose.yml文件，并在里面定义服务，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">../</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:3.0.7</span></span><br></pre></td></tr></table></figure><p>这个compose文件定义了两个服务，即定义了web和redis两个容器。<br>web容器： </p><p>使用当前docker-compose.yml文件所在目录的上级目录（compose_test&#x2F;Dockerfile）中的Dockerfile构建映像。<br>将容器上的暴露端口5000映射到主机上的端口5000。<br>Web服务器的默认端口5000。<br>redis容器： </p><p>redis服务使用从Docker Hub提取的官方redis镜像3.0.7版本。</p><h3 id="Step-4-使用Compose构建并运行应用程序"><a href="#Step-4-使用Compose构建并运行应用程序" class="headerlink" title="Step 4: 使用Compose构建并运行应用程序"></a><strong>Step 4: 使用Compose构建并运行应用程序</strong></h3><p>在compose_test&#x2F;docker&#x2F;目录下执行docker-compose.yml文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br><span class="line"><span class="comment"># 若是要后台运行： $ docker-compose up -d</span></span><br><span class="line"><span class="comment"># 若不使用默认的docker-compose.yml 文件名：</span></span><br><span class="line">docker-compose -f server.yml up -d </span><br></pre></td></tr></table></figure><p>然后在浏览器中输入<a href="http://127.0.0.1:5000/" title="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a>查看运行的应用程序。</p><h3 id="Step-5-编辑compose文件以添加文件绑定挂载"><a href="#Step-5-编辑compose文件以添加文件绑定挂载" class="headerlink" title="Step 5: 编辑compose文件以添加文件绑定挂载"></a><strong>Step 5: 编辑compose文件以添加文件绑定挂载</strong></h3><p>上面的代码是在构建时静态复制到容器中的，即通过Dockerfile文件中的COPY src &#x2F;opt&#x2F;src命令实现物理主机中的源码复制到容器中，这样在后续物理主机src目录中代码的更改不会反应到容器中。<br>可以通过volumes 关键字实现物理主机目录挂载到容器中的功能（同时删除Dockerfile中的COPY指令，不需要创建镜像时将代码打包进镜像，而是通过volums动态挂载，容器和物理host共享数据卷）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">../</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">../src:/opt/src</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;redis:3.0.7&quot;</span></span><br></pre></td></tr></table></figure><p>通过volumes（卷）将主机上的项目目录（compose_test&#x2F;src）挂载到容器中的&#x2F;opt&#x2F;src目录，允许您即时修改代码，而无需重新构建镜像。</p><h3 id="Step-6-重新构建和运行应用程序"><a href="#Step-6-重新构建和运行应用程序" class="headerlink" title="Step 6: 重新构建和运行应用程序"></a><strong>Step 6: 重新构建和运行应用程序</strong></h3><p>使用更新的compose文件构建应用程序，然后运行它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="compose常用服务配置参考"><a href="#compose常用服务配置参考" class="headerlink" title="compose常用服务配置参考"></a>compose常用服务配置参考</h2><p>Compose文件是一个定义服务，网络和卷的YAML文件。 Compose文件的默认文件名为docker-compose.yml。</p><blockquote><p>[!tip]<br>提示：您可以对此文件使用.yml或.yaml扩展名。 他们都工作。</p></blockquote><p>与docker运行一样，默认情况下，Dockerfile中指定的选项（例如，CMD，EXPOSE，VOLUME，ENV）都被遵守，你不需要在docker-compose.yml中再次指定它们。</p><p>同时你可以使用类似Bash的$ {VARIABLE} 语法在配置值中使用环境变量，有关详细信息，请参阅<a href="https://docs.docker.com/reference/compose-file/#variable-substitution">变量替换</a>。</p><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><p>build 可以指定包含构建上下文的路径：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./dir</span></span><br></pre></td></tr></table></figure><p>或者，作为一个对象，该对象具有上下文路径和指定的Dockerfile文件以及args参数值：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./dir</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile-alternate</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">buildno:</span> <span class="number">1</span></span><br><span class="line"><span class="string">``````</span></span><br><span class="line"></span><br><span class="line"><span class="string">webapp服务将会通过./dir目录下的Dockerfile-alternate文件构建容器镜像。</span> </span><br><span class="line"><span class="string">如果你同时指定image和build，则compose会通过build指定的目录构建容器镜像，而构建的镜像名为image中指定的镜像名和标签。</span></span><br><span class="line"><span class="string">```yaml</span></span><br><span class="line"><span class="attr">build:</span> <span class="string">./dir</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">webapp:tag</span></span><br></pre></td></tr></table></figure><p>这将由.&#x2F;dir构建的名为webapp和标记为tag的镜像。</p><p><strong>context</strong></p><p>包含Dockerfile文件的目录路径，或者是git仓库的URL。<br>当提供的值是相对路径时，它被解释为相对于当前compose文件的位置。 该目录也是发送到Docker守护程序构建镜像的上下文。</p><p><strong>dockerfile</strong></p><p>备用Docker文件。Compose将使用备用文件来构建。 还必须指定构建路径。</p><p><strong>args</strong></p><p>添加构建镜像的参数，环境变量只能在构建过程中访问。<br>首先，在Dockerfile中指定要使用的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ARG buildno</span><br><span class="line">ARG password</span><br><span class="line"> </span><br><span class="line">RUN echo &quot;Build number: $buildno&quot;</span><br><span class="line">RUN script-requiring-password.sh &quot;$password&quot;</span><br></pre></td></tr></table></figure><p>然后在args键下指定参数。 你可以传递映射或列表：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">  <span class="attr">args:</span></span><br><span class="line">    <span class="attr">buildno:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">secret</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">  <span class="attr">args:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">buildno=1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">password=secret</span></span><br></pre></td></tr></table></figure><blockquote><p>[!tip]<br>注意：YAML布尔值（true，false，yes，no，on，off）必须用引号括起来，以便解析器将它们解释为字符串。</p></blockquote><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><p>指定启动容器的镜像，可以是镜像仓库&#x2F;标签或者镜像id（或者id的前一部分）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">ubuntu:14.04</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">tutum/influxdb</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">example-registry.com:4000/postgresql</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">a4bc65fd</span></span><br></pre></td></tr></table></figure><p>如果镜像不存在，Compose将尝试从官方镜像仓库将其pull下来，如果你还指定了build，在这种情况下，它将使用指定的build选项构建它，并使用image指定的名字和标记对其进行标记。</p><h3 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a>container_name</h3><p>指定一个自定义容器名称，而不是生成的默认名称。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">container_name:</span> <span class="string">my-web-container</span></span><br></pre></td></tr></table></figure><p>由于Docker容器名称必须是唯一的，因此如果指定了自定义名称，则无法将服务扩展到多个容器。</p><h3 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h3><p>卷挂载路径设置。可以设置宿主机路径 （HOST:CONTAINER） 或加上访问模式 （HOST:CONTAINER:ro）,挂载数据卷的默认权限是读写（rw），可以通过ro指定为只读。<br>你可以在主机上挂载相对路径，该路径将相对于当前正在使用的Compose配置文件的目录进行扩展。 相对路径应始终以 . 或者 .. 开始。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="comment"># 只需指定一个路径，让引擎创建一个卷</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/var/lib/mysql</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment"># 指定绝对路径映射</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/opt/data:/var/lib/mysql</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment"># 相对于当前compose文件的相对路径</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">./cache:/tmp/cache</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment"># 用户家目录相对路径</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">~/configs:/etc/configs/:ro</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment"># 命名卷</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">datavolume:/var/lib/mysql</span></span><br></pre></td></tr></table></figure><p>但是，如果要跨多个服务并重用挂载卷，请在顶级volumes关键字中命名挂在卷，但是并不强制，如下的示例亦有重用挂载卷的功能，但是不提倡。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web1:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./web/</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../code:/opt/web/code</span></span><br><span class="line">  <span class="attr">web2:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./web/</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../code:/opt/web/code</span></span><br></pre></td></tr></table></figure><blockquote><p>[!tip]<br>** 注意：通过顶级volumes定义一个挂载卷，并从每个服务的卷列表中引用它， 这会替换早期版本的Compose文件格式中volumes_from。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data-volume:/var/lib/db</span></span><br><span class="line">  <span class="attr">backup:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">backup-service</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">data-volume:/var/lib/backup/data</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">data-volume:</span></span><br></pre></td></tr></table></figure><h3 id="command"><a href="#command" class="headerlink" title="command"></a>command</h3><p>覆盖容器启动后默认执行的命令。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command:</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">thin</span> <span class="string">-p</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure><p>该命令也可以是一个类似于dockerfile的列表：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">command:</span> [<span class="string">&quot;bundle&quot;</span>, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;thin&quot;</span>, <span class="string">&quot;-p&quot;</span>, <span class="string">&quot;3000&quot;</span>]</span><br></pre></td></tr></table></figure><h3 id="links"><a href="#links" class="headerlink" title="links"></a>links</h3><p>链接到另一个服务中的容器。 请指定服务名称和链接别名（SERVICE：ALIAS），或者仅指定服务名称。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">web:</span></span><br><span class="line">  <span class="attr">links:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">db:database</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure><p>在当前的web服务的容器中可以通过链接的db服务的别名database访问db容器中的数据库应用，如果没有指定别名，则可直接使用服务名访问。</p><p>链接不需要启用服务进行通信 - 默认情况下，任何服务都可以以该服务的名称到达任何其他服务。 （实际是通过设置&#x2F;etc&#x2F;hosts的域名解析，从而实现容器间的通信。故可以像在应用中使用localhost一样使用服务的别名链接其他容器的服务，前提是多个服务容器在一个网络中可路由联通）</p><p>links也可以起到和depends_on相似的功能，即定义服务之间的依赖关系，从而确定服务启动的顺序。</p><p>external_links<br>链接到docker-compose.yml 外部的容器，甚至并非 Compose 管理的容器。参数格式跟 links 类似。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">external_links:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">redis_1</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">project_db_1:mysql</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">project_db_1:postgresql</span></span><br></pre></td></tr></table></figure><h3 id="expose"><a href="#expose" class="headerlink" title="expose"></a>expose</h3><p>暴露端口，但不映射到宿主机，只被连接的服务访问。<br>仅可以指定内部端口为参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">expose:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;8000&quot;</span></span><br></pre></td></tr></table></figure><h3 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h3><p>暴露端口信息。<br>常用的简单格式：使用宿主：容器 （HOST:CONTAINER）格式或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p><blockquote><p>[!tip]<br>注意：当使用 HOST:CONTAINER 格式来映射端口时，如果你使用的容器端口小于 60 你可能会得到错误得结果，因为 YAML 将会解析 xx:yy 这种数字格式为 60 进制。所以建议采用字符串格式。</p></blockquote><p>简单的短格式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;3000-3005&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;9090-9091:8080-8081&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;49100:22&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:8001:8001&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:5000-5010:5000-5010&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;6060:6060/udp&quot;</span></span><br></pre></td></tr></table></figure><p>在v3.2中ports的长格式的语法允许配置不能用短格式表示的附加字段。<br>长格式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">target:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">published:</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">tcp</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">host</span></span><br></pre></td></tr></table></figure><p>target：容器内的端口<br>published：物理主机的端口<br>protocol：端口协议（tcp或udp）<br>mode：host 和ingress 两总模式，host用于在每个节点上发布主机端口，ingress 用于被负载平衡的swarm模式端口。</p><h3 id="restart"><a href="#restart" class="headerlink" title="restart"></a>restart</h3><p>no是默认的重启策略，在任何情况下都不会重启容器。 指定为always时，容器总是重新启动。 如果退出代码指示出现故障错误，则on-failure将重新启动容器。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">restart:</span> <span class="string">&quot;no&quot;</span></span><br><span class="line"><span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line"><span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure><h3 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h3><p>添加环境变量。 你可以使用数组或字典两种形式。 任何布尔值; true，false，yes，no需要用引号括起来，以确保它们不被YML解析器转换为True或False。<br>只给定名称的变量会自动获取它在 Compose 主机上的值，可以用来防止泄露不必要的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">environment:</span><br><span class="line">  RACK_ENV: development</span><br><span class="line">  SHOW: &#x27;true&#x27;</span><br><span class="line">  SESSION_SECRET:</span><br><span class="line"> </span><br><span class="line">environment:</span><br><span class="line">  - RACK_ENV=development</span><br><span class="line">  - SHOW=true</span><br><span class="line">  - SESSION_SECRET</span><br></pre></td></tr></table></figure><blockquote><p>[!tip]<br>注意：如果你的服务指定了build选项，那么在构建过程中通过environment定义的环境变量将不会起作用。 将使用build的args子选项来定义构建时的环境变量。</p></blockquote><h3 id="pid"><a href="#pid" class="headerlink" title="pid"></a>pid</h3><p>将PID模式设置为主机PID模式。 这就打开了容器与主机操作系统之间的共享PID地址空间。 使用此标志启动的容器将能够访问和操作裸机的命名空间中的其他容器，反之亦然。即打开该选项的容器可以相互通过进程 ID 来访问和操作。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pid:</span> <span class="string">&quot;host&quot;</span></span><br></pre></td></tr></table></figure><h3 id="dns"><a href="#dns" class="headerlink" title="dns"></a>dns</h3><p>配置 DNS 服务器。可以是一个值，也可以是一个列表。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dns:</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">9.9</span><span class="number">.9</span><span class="number">.9</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docekr入门</title>
      <link href="/2025/08/07/docker%E5%85%A5%E9%97%A8/"/>
      <url>/2025/08/07/docker%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>本文大部分参考<a href="https://blog.csdn.net/m0_61503020/article/details/125456520?spm=1001.2014.3001.5506">《docekr入门,这一篇就够了》</a></p><h1 id="docekr背景介绍"><a href="#docekr背景介绍" class="headerlink" title="docekr背景介绍"></a>docekr背景介绍</h1><h2 id="什么是docekr"><a href="#什么是docekr" class="headerlink" title="什么是docekr"></a>什么是docekr</h2><p>Docker是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可抑制的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。容器完全使用<strong>沙盒机制</strong>，相互之间不会存在任何接口。几乎没有性能开销，可以很容易的在机器和数据中心运行。最重要的是，他们<strong>不依赖于任何语言、框架或者包装系统。</strong></p><p>小知识：沙盒也叫沙箱（sandbox）。在计算机领域指一种虚拟技术，而且多用于计算机安全技术。安全软件可以让它在沙盒中运行，如果含有恶意行为，则禁止程序的进一步运行，而这不会对系统造成任何危害。<br><a href="https://www.docker.com/">官网</a>：<a href="https://www.docker.com/">https://www.docker.com/</a></p><h2 id="Docker容器技术与虚拟机的区别"><a href="#Docker容器技术与虚拟机的区别" class="headerlink" title="Docker容器技术与虚拟机的区别"></a>Docker容器技术与虚拟机的区别</h2><p>Docker 容器技术和虚拟机（VM）都是实现资源隔离和环境一致性的技术，但它们的底层实现和特性有显著区别，主要体现在架构、性能、启动速度等方面。以下是两者的核心区别：</p><h3 id="1-架构原理"><a href="#1-架构原理" class="headerlink" title="1. 架构原理"></a><strong>1. 架构原理</strong></h3><ul><li><p><strong>虚拟机（VM）</strong>：<br>  基于<strong>硬件虚拟化</strong>，需要在宿主机（Host）上安装<strong>Hypervisor</strong>（如 VMware、KVM），每个虚拟机都包含完整的操作系统（Guest OS）、应用程序及必要的库。<br>  虚拟机通过 Hypervisor 模拟硬件资源（CPU、内存、硬盘等），与宿主机完全隔离，相当于一个独立的 “物理机”。</p></li><li><p><strong>Docker 容器</strong>：<br>  基于<strong>操作系统级虚拟化</strong>，不需要 Hypervisor，而是直接使用宿主机的操作系统内核。<br>  容器仅包含应用程序及其依赖的库（如 Python、Java 环境），共享宿主机的 OS 内核，通过<strong>Namespace</strong>（隔离进程、网络等）和<strong>Cgroups</strong>（限制资源）实现隔离。</p></li></ul><h3 id="2-资源占用"><a href="#2-资源占用" class="headerlink" title="2. 资源占用"></a><strong>2. 资源占用</strong></h3><ul><li><p><strong>虚拟机</strong>：<br>  每个 VM 需要分配独立的 CPU、内存、磁盘等资源，且包含完整 OS，资源占用高（通常 GB 级）。</p></li><li><p><strong>Docker 容器</strong>：<br>  共享宿主机内核，仅占用应用程序本身的资源，资源占用极低（通常 MB 级），可在同一台宿主机上运行成百上千个容器。</p></li></ul><h3 id="3-启动速度"><a href="#3-启动速度" class="headerlink" title="3. 启动速度"></a><strong>3. 启动速度</strong></h3><ul><li><p><strong>虚拟机</strong>：<br>  启动需经历 BIOS、OS 加载等完整流程，通常需要<strong>分钟级</strong>（如 1-5 分钟）。</p></li><li><p><strong>Docker 容器</strong>：<br>  无需启动操作系统，直接运行应用进程，启动速度为<strong>秒级甚至毫秒级</strong>（如 1-3 秒）。</p></li></ul><h3 id="4-隔离性"><a href="#4-隔离性" class="headerlink" title="4. 隔离性"></a><strong>4. 隔离性</strong></h3><ul><li><p><strong>虚拟机</strong>：<br>  隔离性极强，VM 之间、VM 与宿主机之间完全独立，一个 VM 的崩溃或安全问题不会影响其他 VM。</p></li><li><p><strong>Docker 容器</strong>：<br>  隔离性较弱，共享宿主机内核，若内核存在漏洞，可能影响所有容器。但通过 Namespace 和 Cgroups，可实现进程、网络、文件系统的隔离，满足大部分场景需求。</p></li></ul><h3 id="5-移植性"><a href="#5-移植性" class="headerlink" title="5. 移植性"></a><strong>5. 移植性</strong></h3><ul><li><p><strong>虚拟机</strong>：<br>  镜像体积大（通常 GB 级），移植和分发较慢，且受 Hypervisor 类型限制（如 VMware 镜像无法直接在 KVM 上运行）。</p></li><li><p><strong>Docker 容器</strong>：<br>  镜像体积小（通常 MB 级），移植性极强，“一次构建，到处运行”，只要宿主机安装 Docker，即可运行相同的容器（不受底层 OS 发行版影响，如 Ubuntu 和 CentOS 上可运行同一容器）。</p></li></ul><h3 id="6-适用场景"><a href="#6-适用场景" class="headerlink" title="6. 适用场景"></a><strong>6. 适用场景</strong></h3><ul><li><strong>虚拟机</strong>：<ul><li>需运行不同操作系统（如 Windows 和 Linux 同时运行）。</li><li>对隔离性和安全性要求极高（如金融、医疗等领域）。</li><li>运行需要完整 OS 支持的复杂应用。</li></ul></li><li><strong>Docker 容器</strong>：<ul><li>微服务架构（将应用拆分为多个独立容器）。</li><li>持续集成 &#x2F; 持续部署（CI&#x2F;CD），快速构建、测试、部署。</li><li>资源密集型场景（如高并发 Web 服务），高效利用硬件资源。</li></ul></li></ul><h3 id="总结对比表"><a href="#总结对比表" class="headerlink" title="总结对比表"></a><strong>总结对比表</strong></h3><table><thead><tr><th>特性</th><th>虚拟机（VM）</th><th>Docker 容器</th></tr></thead><tbody><tr><td>核心技术</td><td>硬件虚拟化（Hypervisor）</td><td>操作系统级虚拟化（Namespace&#x2F;Cgroups）</td></tr><tr><td>资源占用</td><td>高（GB 级）</td><td>低（MB 级）</td></tr><tr><td>启动速度</td><td>分钟级</td><td>秒级 &#x2F; 毫秒级</td></tr><tr><td>隔离性</td><td>极强</td><td>较强（共享内核）</td></tr><tr><td>镜像体积</td><td>大</td><td>小</td></tr><tr><td>移植性</td><td>较差（受 Hypervisor 限制）</td><td>极强（跨平台兼容）</td></tr><tr><td>适用场景</td><td>强隔离需求、多 OS 运行</td><td>微服务、CI&#x2F;CD、高效资源利用</td></tr></tbody></table><h3 id="docker相较于VM的优点"><a href="#docker相较于VM的优点" class="headerlink" title="docker相较于VM的优点"></a><strong>docker相较于VM的优点</strong></h3><ol><li>比VM小、快，Docker容器的尺寸减小相比于整个虚拟机大大简化了分布到云和分发时间的开销。Docker启动一个容器实例时间仅仅需要几秒钟。</li><li>Docker是一个开放的平台，构建、发布和运行分布式应用程序。</li><li>开发人员不需要关系具体是哪个Linux操作系统</li><li>Google、微软（azure）、亚马逊、IBM等都支持docker。</li><li>Docker支持Unix&#x2F;Linux操作系统，也支持Windows和Mac。</li></ol><h3 id="Docker局限性"><a href="#Docker局限性" class="headerlink" title="Docker局限性"></a><strong>Docker局限性</strong></h3><p>Docker用于应用程序时是最有用的，但并不包含<strong>数据、日志、数据库等通常放在Docker容器外</strong>。一个容器的镜像通常都很小，不用和存储大量数据，<strong>存储可以通过外部挂载等方式使用</strong>，比如：NFS、ipsan、MFS等 ，或者<strong>docker命令 ，-v映射磁盘分区</strong>。<br>总之，<strong>docker只用于计算，存储交给别人。</strong></p><h3 id="通过docker架构图初步了解docker"><a href="#通过docker架构图初步了解docker" class="headerlink" title="通过docker架构图初步了解docker"></a>通过docker架构图初步了解docker</h3><p><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807102709031.png"><br><strong>工作流程：</strong>  </p><ol><li>启动docker  </li><li>下载镜像到本地  </li><li>启动docker容器实例</li></ol><p>&#x3D;&#x3D;Docker核心技术:&#x3D;&#x3D;  </p><ol><li>Namespace —&gt; 实现Container的进程、网络、消息、文件系统和主机名的隔离。  </li><li>Cgroup —&gt; 实现对资源的配额和调度。<br>注意：Cgroup的配额，可以指定实例使用的CPU个数，内存大小等。</li></ol><h3 id="Docker特性"><a href="#Docker特性" class="headerlink" title="Docker特性"></a>Docker特性</h3><p><strong>文件系统隔离</strong>：每个进程容器运行在一个完全独立的根文件系统里。<br><strong>资源隔离</strong>：系统资源，像CPU和内存等可以分配到不同的容器中，使用cgroup。<br><strong>网络隔离</strong>：每个进程容器运行在自己的网路空间，虚拟接口和IP地址。<br><strong>日志记录</strong>：Docker将收集到和记录的每个进程容器的标准流（stdout&#x2F;stderr&#x2F;stdin），用于实时检索或者批量检索<br><strong>变更管理</strong>：容器文件系统的变更可以提交到新的镜像中，并可重复使用以创建更多的容器。无需使用模板或者手动配置。<br><strong>交互式shell</strong>：Docker可以分配一个虚拟终端并且关联到任何容器的标准输出上，例如运行一个一次性交互shell。</p><h1 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h1><h2 id="docekr安装背景"><a href="#docekr安装背景" class="headerlink" title="docekr安装背景"></a>docekr安装背景</h2><p>docker安装的三种方式,基于CentOS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker</span><br><span class="line"></span><br><span class="line">yum -y install docker-engine</span><br><span class="line"></span><br><span class="line">yum -y install docker-ce</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因为Docker最早的版本名是docker和docker-engin，现在的名字是docker-ce和docker-ee。<br><a href="https://docs.docker.com/engine/install/centos/">官方安装文档</a><a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><p>2017年初，docker公司将原先的docker开源项目改名为moby。<br>moby是集成了原先的docker项目，是社区维护的开源项目，谁都可以在moby的基础打造自己的容器产品。<br><strong>docker-ce 是docker公司维护的开源项目</strong>，是一个基于moby项目的免费容器产品。<br><strong>docker-ee 是docker公司维护的闭源产品</strong>，是docker公司的商业昌平。<br>注：moby是源代码，docker-ce 和docker-ee 是产品容器，rpm包。</p><h2 id="安装docker依赖环境"><a href="#安装docker依赖环境" class="headerlink" title="安装docker依赖环境"></a>安装docker依赖环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><h2 id="配置国内docker-ce的yum源（这里采用的是阿里云）"><a href="#配置国内docker-ce的yum源（这里采用的是阿里云）" class="headerlink" title="配置国内docker-ce的yum源（这里采用的是阿里云）"></a>配置国内docker-ce的yum源（这里采用的是阿里云）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>yum-config-manager命令作用是添加yum源。<br>敲完命令之后大家执行一下命令去看一下有没有配置成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d</span><br><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807103955873.png"></p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install docker-ce doker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>安装速度可能会比较慢，请耐心等待。<br>docker-ce:docker程序<br>docker-ce-cli:<br>如果不知道包名的作用，可以使用yum info 程序 命令查看</p><h2 id="开启网络转发功能"><a href="#开启网络转发功能" class="headerlink" title="开启网络转发功能"></a>开启网络转发功能</h2><p>默认会自动开启。<br>路径 ：&#x3D;&#x3D;&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward&#x3D;&#x3D;<br>手动开启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf   <span class="comment">#插入以下内容</span></span><br><span class="line">net.ipv4.forward =1</span><br><span class="line">-------------------------</span><br><span class="line">sysctl -p   <span class="comment">#生效</span></span><br><span class="line"><span class="built_in">cat</span> /proc/sys/net/ipv4/ip_forward  <span class="comment">#查看结果，为1开启成功。</span></span><br></pre></td></tr></table></figure><p><strong>如果没有开启网络转发，我们启动实例的时候就会报错！！！</strong></p><p>关闭防火墙：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">iptables -nL <span class="comment">#查看一下iptable规则，关闭防火墙后会自动插入新规则</span></span><br><span class="line"></span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld  <span class="comment">#关闭防火墙</span></span><br><span class="line"></span><br><span class="line">sysctlrem restart docker <span class="comment"># 关闭防火墙要把docker重启一下，不然docker</span></span><br><span class="line">的ip包转发功能无法使用。即便防火墙关闭了，docker依旧会调用内核模块netfilter增加规则，所以会新增iptables规则</span><br><span class="line"></span><br><span class="line">iptables -nL <span class="comment">#再查看一下iptable规则，会发现多出很多规则</span></span><br></pre></td></tr></table></figure><p>iptables -nL<br><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807103924653.png"></p><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p>启动完成后会该网络参数，这个是ip转发会改成1。默认0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure><p>执行以上指令会显示1</p><h2 id="查看docekr版本"><a href="#查看docekr版本" class="headerlink" title="查看docekr版本"></a>查看docekr版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docekr version</span><br></pre></td></tr></table></figure><p><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807104346663.png"><br>这里我们很清晰的可以看到docker是一个C&#x2F;S架构的模式。客户端是我们的命令行操作，服务端是一个守护进程。</p><h2 id="查看docekr信息"><a href="#查看docekr信息" class="headerlink" title="查看docekr信息"></a>查看docekr信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><p>我们可以通过&#x3D;&#x3D;docker info&#x3D;&#x3D;看到机器存放docker镜像得地址，也可以看到docker仓库的地址。<br><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807104457352.png"></p><h1 id="docker入门命令"><a href="#docker入门命令" class="headerlink" title="docker入门命令"></a>docker入门命令</h1><h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><p>docker search</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search centos <span class="comment">#从docker hub中搜索docker名为centos的镜像</span></span><br></pre></td></tr></table></figure><p><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807104620704.png"><br><strong>name</strong>:代表此镜像的名称<br><strong>description</strong>：此镜像的描述<br><strong>stars</strong>：下载次数<br><strong>official</strong>：是否由官方提供（官方提供可放心下载，可以基于此镜像做自己的镜像）</p><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>&#x3D;&#x3D;docker pull&#x3D;&#x3D; ，默认是拉去docker hub上搜索到的最新版本（第一个）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><p><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807104728893.png">注意，如果这里报错，TLS handshake timeout，那就是网络原因导致超时，尝试多pull几次。下面介绍配置镜像加速<br>&#x3D;&#x3D;使用阿里云docker镜像加速器。&#x3D;&#x3D;  </p><p>地址：<strong><a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com</a></strong>的控制台，使用支付宝账号登录，左侧加速器帮助页面会为你显示<strong>独立的加速地址</strong>，这个加速地址每个人的都不同。</p><p><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807104844697.png"><br><strong>可以通过修改daemon配置文件&#x2F;etc&#x2F;docker&#x2F;daemon.json来使用加速器。<br>把自己的专属加速地址放到下面的地址改一下，写入文件就可以了。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://eu5rxjvf.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload  <span class="comment">#启动配置</span></span><br><span class="line">systemctl restart docker  <span class="comment">#重启docker服务</span></span><br></pre></td></tr></table></figure><h2 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images  <span class="comment">#查看已下载镜像。</span></span><br></pre></td></tr></table></figure><p><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807105132574.png"></p><h2 id="压缩包tar镜像导入镜像"><a href="#压缩包tar镜像导入镜像" class="headerlink" title="压缩包tar镜像导入镜像"></a>压缩包tar镜像导入镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i /root/docker-centos-httpd.tar</span><br></pre></td></tr></table></figure><h1 id="docker命令小结"><a href="#docker命令小结" class="headerlink" title="docker命令小结"></a>docker命令小结</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version     <span class="comment">#显示docker详细信息</span></span><br><span class="line">docker info       <span class="comment">#显示docker的系统信息，包括镜像和容器的数量</span></span><br><span class="line">docker --<span class="built_in">help</span>     <span class="comment">#docker帮助命令手册</span></span><br></pre></td></tr></table></figure><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker images  <span class="comment">#查看所有本地主机的镜像</span></span><br><span class="line">docker search 镜像名           <span class="comment">#搜索镜像</span></span><br><span class="line">docker pull 镜像名 [标签]      <span class="comment">#下载镜像（如果不写tag，默认是latest）</span></span><br><span class="line">docker rmi 镜像名 [标签]       <span class="comment">#删除镜像    docker rmi -f $(docker images -aq)  删除全部镜像</span></span><br><span class="line">docker tag  镜像名:版本   新镜像名:版本    <span class="comment">#复制镜像并且修改名称</span></span><br><span class="line">docker commit  -a <span class="string">&quot;xxx&quot;</span>  -c <span class="string">&quot;xxx&quot;</span> 镜像ID 名字：版本   <span class="comment">#提交镜像 </span></span><br><span class="line">-a :提交的镜像作者；</span><br><span class="line">-c :使用Dockerfile指令来创建镜像；</span><br><span class="line">-m :提交时的说明文字；</span><br><span class="line"></span><br><span class="line">docker load -i    /xxx/xxx.tar         <span class="comment">#导入镜像</span></span><br><span class="line">docker save -o   /xxx/xxx.tar          <span class="comment">#保存一个镜像为一个tar包</span></span><br></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image 命令 <span class="comment">#启动容器（无镜像会先下载镜像）</span></span><br><span class="line"><span class="comment">#参数说明</span></span><br><span class="line">--name = <span class="string">&quot;Name&quot;</span>   容器名字</span><br><span class="line">-c   后面跟待完成的命令</span><br><span class="line">-d   以后台方式运行并且返回ID，启动守护进程式容器</span><br><span class="line">-i   使用交互方式运行容器，通常与t同时使用</span><br><span class="line">-t   为容器重新分配一个伪输入终端。也即启动交互式容器</span><br><span class="line">-p   指定容器端口    -p 容器端口:物理机端口  映射端口</span><br><span class="line">-P   随机指定端口</span><br><span class="line">-v   给容器挂载存储卷</span><br><span class="line"></span><br><span class="line">docker build  <span class="comment">#创建镜像        -f：指定dockerfile文件路径   -t：镜像名字以及标签</span></span><br><span class="line">docker logs 容器实例的ID          <span class="comment">#查看容器日志</span></span><br><span class="line">docker rename 旧名字  新名字      <span class="comment"># 给容器重新命名</span></span><br><span class="line">docker top    容器实例的ID                  <span class="comment">#查看容器内进程</span></span><br><span class="line">docker ps -a                    <span class="comment">#列出所有容器（不加-a就是在运行的）</span></span><br><span class="line">docker <span class="built_in">rm</span>      容器实例的ID                 <span class="comment">#删除容器（正在运行容器不能删除，除非加-f选项）</span></span><br><span class="line">docker <span class="built_in">kill</span>  容器实例的ID        <span class="comment">#杀掉容器</span></span><br><span class="line">docker <span class="built_in">history</span>   容器实例的ID    <span class="comment">#查看docker镜像的变更历史</span></span><br><span class="line">docker start 容器实例的ID        <span class="comment">#启动容器</span></span><br><span class="line">docker restart 容器实例的ID       <span class="comment">#重启容器</span></span><br><span class="line">docker stop 容器实例的ID         <span class="comment">#停止正在运行的容器</span></span><br><span class="line">docker attach /docker <span class="built_in">exec</span>  容器实例的ID   <span class="comment">#同为进入容器命令，不同的是attach连接终止会让容器退出后台运行，而exec不会。并且，docker attach是进入正在执行的终端，不会情动新的进程，而docker exec则会开启一个新的终端，可以在里面操作。</span></span><br><span class="line">docker image inspect  容器名称：容器标签       <span class="comment">#查看容器内源数据</span></span><br><span class="line">docker <span class="built_in">cp</span>  容器<span class="built_in">id</span>：容器内路径   目的主机路径           <span class="comment">#从容器内拷贝文件到主机（常用）或者从主机拷贝到容器（一般用挂载）</span></span><br><span class="line"><span class="built_in">exit</span>                           <span class="comment">#直接退出容器 </span></span><br><span class="line">crlt + P + Q                   <span class="comment">#退出容器但是不终止运行</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Docker容器数据卷"><a href="#Docker容器数据卷" class="headerlink" title="Docker容器数据卷"></a>Docker容器数据卷</h1><h2 id="容器数据卷介绍。"><a href="#容器数据卷介绍。" class="headerlink" title="容器数据卷介绍。"></a>容器数据卷介绍。</h2><p>docker容器在产生数据的时候，如果不通过docker commit生成新的镜像，使得数据作为镜像的一部分保存下来，那么当容器删除之后，数据自然而然的也会消失。为了能保存数据，容器中引用了<strong>数据卷</strong>的概念。</p><h2 id="作用以及特点"><a href="#作用以及特点" class="headerlink" title="作用以及特点"></a>作用以及特点</h2><p>卷就是<strong>目录或者文件</strong>，存在一个或者多个容器之中，由docker挂载到容器，但是不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或者共享数据的特性。</p><p>卷的设计目的就是<strong>数据的持久化</strong>，<strong>完全独立于容器的生存周期</strong>，因此docker不会再容器删除时删除其挂载的数据卷。</p><p>它还存在以下几种特点：</p><ol><li>数据卷可在容器之间共享或者重用数据。</li><li>卷中的更改可以直接生效。</li><li>数据卷中的更改不会包含在镜像的更新中。</li><li>数据卷的生命周期一直持续到没有容器使用它为止。</li></ol><h2 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h2><p>直接使用命令来挂载 ， -v</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录:容器目录 /bin/bash</span><br></pre></td></tr></table></figure><p>我们在创建容器之前，先看看挂载路径上有没有test01这个目录，可以看到，是没有的。执行命令之后进入到容器内，我们ls看一下容器的home目录，是空的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v /home/test01:/home centos /bin/bash</span><br></pre></td></tr></table></figure><p><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807110422690.png"><br>另外打开一个终端，cd &#x2F;home目录，这下我们发现多出来了一个test01目录，这个test01目录，就是我们刚刚启动的容器内部的home目录，并且，此时这两个目录是同步的状态，我们在home目录中写入任何新的文件，都会同步到主机home目录下的test01目录。<br><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807110618598.png" alt="|500"></p><p>测试，进入容器内部，echo进去一个a.txt文件<br><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807110716069.png"><br>然后来到宿主机上，看一眼是不是test01目录下也出现了a.txt。(双向绑定)<br><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807110813578.png"></p><p><strong>docker inspect 容器ID</strong>查看是否挂载成功，找到这个&#x3D;&#x3D;Mounts&#x3D;&#x3D;，它代表着挂载，<strong>type</strong>是类型（绑定），<strong>source</strong>是源（&#x2F;home&#x2F;test01），也就是把什么挂载到哪里。<strong>destination</strong>（home）就是挂载的目标路径了。<br><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807110944606.png"></p><h2 id="docekr的匿名挂载和具名挂载"><a href="#docekr的匿名挂载和具名挂载" class="headerlink" title="docekr的匿名挂载和具名挂载"></a>docekr的匿名挂载和具名挂载</h2><h3 id="匿名挂载（Anonymous-Volume）"><a href="#匿名挂载（Anonymous-Volume）" class="headerlink" title="匿名挂载（Anonymous Volume）"></a>匿名挂载（Anonymous Volume）</h3><ul><li><strong>特点</strong>：只指定容器内的挂载路径，不指定宿主机的路径或卷名，Docker 会自动生成一个随机的卷名。</li><li><strong>作用</strong>：临时或简单场景下使用，无需关心数据在宿主机的具体存储位置，由 Docker 自动管理。</li><li><strong>示例</strong>：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：docker run -v 容器内路径 ...</span></span><br><span class="line">docker run -d -v /app/data --name mycontainer nginx</span><br></pre></td></tr></table></figure>  此时 Docker 会创建一个随机名称的卷（如<code>abcd1234...</code>），并将容器内的<code>/app/data</code>目录与该卷关联。</li></ul><h3 id="具名挂载（Named-Volume）"><a href="#具名挂载（Named-Volume）" class="headerlink" title="具名挂载（Named Volume）"></a>具名挂载（Named Volume）</h3><ul><li><strong>特点</strong>：为数据卷指定一个自定义名称，便于管理和复用，同样不需要指定宿主机的具体路径（路径由 Docker 管理）。</li><li><strong>作用</strong>：需要多次使用同一数据卷（如多个容器共享数据），或需要显式管理卷（如备份、删除）时使用。</li><li><strong>示例</strong>：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式：docker run -v 卷名:容器内路径 ...</span></span><br><span class="line">docker run -d -v mydata:/app/data --name mycontainer nginx</span><br></pre></td></tr></table></figure>  这里创建了名为<code>mydata</code>的卷，容器内<code>/app/data</code>的数据会存储在该卷中，后续其他容器也可通过<code>mydata</code>卷共享数据。</li></ul><h3 id="两者的共同点与区别"><a href="#两者的共同点与区别" class="headerlink" title="两者的共同点与区别"></a>两者的共同点与区别</h3><table><thead><tr><th>特性</th><th>匿名挂载</th><th>具名挂载</th></tr></thead><tbody><tr><td>卷标识</td><td>随机生成的 ID</td><td>自定义名称</td></tr><tr><td>管理难度</td><td>较难（需记住随机 ID）</td><td>简单（通过名称操作）</td></tr><tr><td>适用场景</td><td>临时数据、一次性使用</td><td>长期复用、多容器共享</td></tr><tr><td>查看卷信息</td><td><code>docker volume ls</code> 可见</td><td><code>docker volume ls</code> 可见</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><ul><li>无论是匿名还是具名挂载，数据卷的实际存储路径都由 Docker 管理（通常在<code>/var/lib/docker/volumes/</code>目录下）。</li><li>若需要指定宿主机的具体路径进行挂载（绑定挂载），格式为<code>-v 宿主机路径:容器内路径</code>，这与上述两种方式不同。</li></ul><p>通过这两种挂载方式，可有效实现容器数据的持久化和共享，避免容器删除后数据丢失。</p><h1 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h1><h2 id="本机网络理解"><a href="#本机网络理解" class="headerlink" title="本机网络理解"></a>本机网络理解</h2><p>我们使用ifconfig可以看到三组网络。<br>首先是docker0，这是我们本节的重点，docker的网络。之后是eth0，本机的外网地址。lo口，本地环回地址，可以代表localhost<br><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807112327073.png"><br>关于docker0呢，其实就是一个叫docker0的虚拟网桥。我们使用brctl命令来查看一下。（没有这个命令的下载<strong>yum -y install bridge-utils</strong>）<br><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807112944921.png"></p><h2 id="veth-pair技术"><a href="#veth-pair技术" class="headerlink" title="veth-pair技术"></a>veth-pair技术</h2><p>什么是veth-pair技术？要理解它，我们首先来启动两个tomcat容器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P --name=tomcat01 tomcat:7</span><br><span class="line">docker run -d -P --name=tomcat02 tomcat:7</span><br><span class="line">提示：选择tomcat7是因为这个镜像包含了ip addr 等常用命令！</span><br></pre></td></tr></table></figure><p>启动机器之后，我们查看容器ip，通过容器的ip 去ping宿主机ip，发现是通的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it tomcat01 ip addr</span><br></pre></td></tr></table></figure><p><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807113155934.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 172.17.0.3</span><br></pre></td></tr></table></figure><p><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807113216441.png"><br>理解：我们每启动一个docker容器，docker就会给docker容器分配一个ip，安装docker之后，会产生一个叫docker0的网卡，这里使用的就是<strong>veth-pair技术</strong>。</p><p>使用ip addr命令，查看我们的网卡。<br><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807113316103.png"><br>我们发现多出来了两个网卡，到了这里，你已经知道这两张网卡是那里来的了吧。没错，是启动容器之后产生的！我们回过头来查看我们在启动的容器IP，就会很清晰的发现，这个网卡是成对存在的！容器内的64对应着宿主机的65，容器内的66对应宿主机的67。</p><p>什么是&#x3D;&#x3D;veth-pair？&#x3D;&#x3D;<br>veth-pair 就是一堆的虚拟设备接口，他们都是成对出现的，一端连接着协议，一端连接着彼此。使得它充当了一个桥梁的作用。<br><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807113355249.png"></p><h2 id="docker网络详解"><a href="#docker网络详解" class="headerlink" title="docker网络详解"></a>docker网络详解</h2><p><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807113421311.png"><br>不难看出，tomcat01和tomcat02是共用的同一个路由器，即docker0。所有的容器在不指定我网络的情况下，都是docker0路由的，docekr会给我们的容器分配一个默认IP。<br>docker网络就是下面这个网络模型所描述的。（docker所有的网络接口都是虚拟的，虚拟的转发效率高）<br><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807113444666.png"></p><h2 id="docker网络模式"><a href="#docker网络模式" class="headerlink" title="docker网络模式"></a>docker网络模式</h2><h3 id="docker网络模式有以下几种"><a href="#docker网络模式有以下几种" class="headerlink" title="docker网络模式有以下几种"></a>docker网络模式有以下几种</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Host：容器不会虚拟出自己的网卡，配置主机的IP等,而是使用宿主机的IP和端口</span><br><span class="line"></span><br><span class="line">Container: 创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP。（一般不用）</span><br><span class="line"></span><br><span class="line">None: 该模式关闭了容器的网络功能。（一般不用）</span><br><span class="line"></span><br><span class="line">Bridge：默认为该模式（桥接，自己创建也是用它），此模式会为每一个容器分配，设置IP等，并将容器连接到一个docker0 的虚拟网桥，通过docker 0 网桥以及iptables nat 表配置与宿主机通信。</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network <span class="built_in">ls</span>   <span class="comment">#列出docker网卡</span></span><br></pre></td></tr></table></figure><h3 id="创建自定义网络的容器"><a href="#创建自定义网络的容器" class="headerlink" title="创建自定义网络的容器"></a>创建自定义网络的容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我们直接启动命令， --net bridge，就是docker0（默认）</span><br><span class="line">docker run -d -P --name=tomcat01 --net bridge tomcat</span><br><span class="line"></span><br><span class="line">docker0特点：默认，域名不能访问，--<span class="built_in">link</span>不建议使用</span><br></pre></td></tr></table></figure><p>下面我们自己来创建一个bridge。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker network create --driver bridge --subnet 192.168.0.0/24 --gateway 192.168.0.1 testnet</span><br><span class="line"></span><br><span class="line">docekr network <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807113704263.png"></p><p>查看网卡详情信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect 网卡名字  <span class="comment">#查看网卡详细信息</span></span><br></pre></td></tr></table></figure><p><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807113748900.png"></p><h3 id="发布两个在自己创建的网络里的容器"><a href="#发布两个在自己创建的网络里的容器" class="headerlink" title="发布两个在自己创建的网络里的容器"></a>发布两个在自己创建的网络里的容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P --name=tomcat01-net --net=testnet tomcat:7</span><br><span class="line">docker run -d -P --name=tomcat02-net --net testnet tomcat:7</span><br></pre></td></tr></table></figure><p>然后使用docker network inspect testnet，就可以看到刚才创建的这两个容器的IP了。<br><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807113837560.png"><br>还记得我们前面说的docker0的缺点之一，不能通过域名访问吗？而我们自定义的网络，就修复了这个功能！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it tomcat01-net ping -c 3 IP</span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat01-net ping -c 3 tomcat02-net</span><br><span class="line"></span><br><span class="line">提示，ping -c可以自定义ping的次数</span><br></pre></td></tr></table></figure><p><img src="/2025/08/07/docker%E5%85%A5%E9%97%A8/file-20250807113935900.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作流 定时同步</title>
      <link href="/2025/07/31/%E5%B7%A5%E4%BD%9C%E6%B5%81-%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5/"/>
      <url>/2025/07/31/%E5%B7%A5%E4%BD%9C%E6%B5%81-%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<p>业务上的 爬虫的 文件的数据</p><pre class="mermaid">graph LR  数据源-->定时同步;  定时同步-->Hive数仓;</pre><p>定时同步工具 DataX<br><a href="https://github.com/alibaba/DataX">https://github.com/alibaba/DataX</a></p><p>初始化个人开发环境<br>创建开发目录 - 遵循规范 每个人的代码要在自己的目录下去开发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建个人目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /zhiyun/lijinquan</span><br><span class="line"><span class="built_in">cd</span> /zhiyun/lijinquan</span><br><span class="line"><span class="comment"># 创建5个功能目录</span></span><br><span class="line"><span class="comment"># data - 存放数据文件</span></span><br><span class="line"><span class="comment"># jobs - 存放datax的配置文件</span></span><br><span class="line"><span class="comment"># sql - sql脚本</span></span><br><span class="line"><span class="comment"># shell - shell脚本</span></span><br><span class="line"><span class="comment"># python - python脚本</span></span><br><span class="line"><span class="built_in">mkdir</span> data <span class="built_in">jobs</span> sql shell python</span><br></pre></td></tr></table></figure><h2 id="存储的规范和要求"><a href="#存储的规范和要求" class="headerlink" title="存储的规范和要求"></a>存储的规范和要求</h2><p>按要求每个月存储一份历史数据, 至少保留24个月的版本数据</p><pre class="mermaid">graph LR   源表-->|DataX|Hive-ODS;   Hive-ODS-->2025-05;   Hive-ODS-->2025-06;   Hive-ODS-->2025-07-当月就覆盖;   Hive-ODS-->2025-08;</pre><h2 id="配置文件的编写"><a href="#配置文件的编写" class="headerlink" title="配置文件的编写"></a>配置文件的编写</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;setting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;speed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                 <span class="attr">&quot;channel&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;errorLimit&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;record&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;percentage&quot;</span><span class="punctuation">:</span> <span class="number">0.02</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysqlreader&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jd&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="string">&quot;*&quot;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;connection&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                    <span class="string">&quot;yyj_nmpa&quot;</span></span><br><span class="line">                                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;jdbcUrl&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                    <span class="string">&quot;jdbc:mysql://192.168.8.8:3306/jd&quot;</span></span><br><span class="line">                                <span class="punctuation">]</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;writer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hdfswriter&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;defaultFS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hdfs://hdp:8020&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fileType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;orc&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/zhiyun/yaoyinjin/tmp/nmpa&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fileName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nmpa.data&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;id&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;int&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;link&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;title&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index_id&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;categories&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date_&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;article&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;writeMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;truncate&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fieldDelimiter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\t&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="抽取数据"><a href="#抽取数据" class="headerlink" title="抽取数据"></a>抽取数据</h2><p>注意抽取前需要提前创建HDFS目录 <a href="http://192.168.8.67:9870/">http://192.168.8.67:9870/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -<span class="built_in">mkdir</span> -p /zhiyun/yaoyinjin/tmp/nmpa</span><br></pre></td></tr></table></figure><p><img src="/2025/07/31/%E5%B7%A5%E4%BD%9C%E6%B5%81-%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5/file-20250731223052908.png"></p><p><img src="/2025/07/31/%E5%B7%A5%E4%BD%9C%E6%B5%81-%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5/file-20250731225630668.png"></p><p><img src="/2025/07/31/%E5%B7%A5%E4%BD%9C%E6%B5%81-%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5/file-20250731225217087.png"></p><p><img src="/2025/07/31/%E5%B7%A5%E4%BD%9C%E6%B5%81-%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5/file-20250731225649969.png"></p><h2 id="Hive建表"><a href="#Hive建表" class="headerlink" title="Hive建表"></a>Hive建表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建立ODS数据库</span></span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> ods_yaoyinjin location &quot;/zhiyun/yaoyinjin/ods&quot;;</span><br><span class="line"><span class="comment">-- 建立NMPA分区表</span></span><br><span class="line"><span class="comment">-- ODS的表应该是外部表</span></span><br><span class="line"><span class="comment">-- 内部表删除表的时候删除数据, 外部表删除表不删除数据</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> ods_yaoyinjin.nmpa(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">link string,</span><br><span class="line">title string,</span><br><span class="line">index_id string,</span><br><span class="line">categories string,</span><br><span class="line">data_ string,</span><br><span class="line">article string</span><br><span class="line">) partitioned <span class="keyword">by</span> (dt string)</span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> &quot;\t&quot;</span><br><span class="line">lines terminated <span class="keyword">by</span> &quot;\n&quot;</span><br><span class="line">stored <span class="keyword">as</span> orc</span><br><span class="line">location &quot;/zhiyun/yaoyinjin/ods/nmpa&quot;;</span><br></pre></td></tr></table></figure><p><img src="/2025/07/31/%E5%B7%A5%E4%BD%9C%E6%B5%81-%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5/file-20250731230328889.png"> </p><p><img src="/2025/07/31/%E5%B7%A5%E4%BD%9C%E6%B5%81-%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5/file-20250731230714809.png"></p><h2 id="加载数据到当月分区"><a href="#加载数据到当月分区" class="headerlink" title="加载数据到当月分区"></a>加载数据到当月分区</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load data inpath <span class="string">&quot;/zhiyun/yaoyinjin/tmp/nmpa/*&quot;</span> overwrite into table ods_yaoyinjin.nmpa partition(dt=<span class="string">&quot;2025-07&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/2025/07/31/%E5%B7%A5%E4%BD%9C%E6%B5%81-%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5/file-20250731230807031.png"></p><h2 id="验证数据"><a href="#验证数据" class="headerlink" title="验证数据"></a>验证数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> ods_lijinquan.nmpa;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ods_lijinquan.nmpa limit <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="/2025/07/31/%E5%B7%A5%E4%BD%9C%E6%B5%81-%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5/file-20250731231221016.png"></p><p><img src="/2025/07/31/%E5%B7%A5%E4%BD%9C%E6%B5%81-%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5/file-20250731231304841.png"></p><h2 id="自动化调度"><a href="#自动化调度" class="headerlink" title="自动化调度"></a>自动化调度</h2><p>需求: 每天凌晨4点自动执行这个流程<br>调度平台 - 海豚调度<br>linux定时任务 - Cron<br><a href="http://192.168.8.67:12345/dolphinscheduler/ui/login">http://192.168.8.67:12345/dolphinscheduler/ui/login</a><br>用户名和密码 admin &#x2F; dolphinscheduler123<br><img src="/2025/07/31/%E5%B7%A5%E4%BD%9C%E6%B5%81-%E5%AE%9A%E6%97%B6%E5%90%8C%E6%AD%A5/file-20250801100538044.png"><br><img src="/dag%20(1).png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Hive </tag>
            
            <tag> 海豚调度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>医药器械法规数据爬取</title>
      <link href="/2025/07/28/%E5%8C%BB%E8%8D%AF%E5%99%A8%E6%A2%B0%E6%B3%95%E8%A7%84%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/"/>
      <url>/2025/07/28/%E5%8C%BB%E8%8D%AF%E5%99%A8%E6%A2%B0%E6%B3%95%E8%A7%84%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ol><li>法律法规知识库的建立</li><li>AI环境与知识库</li><li>扣子AI智能体应用与系统集成</li></ol><p>功能需求：<br>实现输⼊商品信息接⼝ , 提交商品后根据现有法律法规判断商品是否</p><pre class="mermaid">%%{init: {"flowchart": {"useMaxWidth": true}}}%%graph LR系统A-->AI平台;系统B-->AI平台;系统C-->AI平台;其他-->A工平台; AI平台-->知识库;AI平台-->AI大模型;A工平台-->功能-判断商品是否符合知识库里的法律法规;知识库-网站;知识库-->文档-Word_Exce1_Cs;网站-->爬虫;爬虫-->RPA;爬虫-->Python;文档-word_Excel_CsV-->Pandas; AI大模型-->本地AI; AI大模型-->云AI;</pre><h1 id="法律法规数据爬取网站"><a href="#法律法规数据爬取网站" class="headerlink" title="法律法规数据爬取网站"></a>法律法规数据爬取网站</h1><ul><li>国家药品监督管理局  <a href="https://www.nmpa.gov.cn/ylqx/index.html">https://www.nmpa.gov.cn/ylqx/index.html</a> （爬取目标1）</li><li>国家药品监督管理局医疗器械技术审评中⼼  <a href="https://www.cmde.org.cn/index.html">https://www.cmde.org.cn/index.html</a> （爬取目标2）</li><li>国家药典委员会 (API)  <a href="https://www.chp.org.cn/">https://www.chp.org.cn/</a> </li><li>聚合平台 - 药智医械数据   <a href="https://db.yaozh.com/qx">https://db.yaozh.com/qx</a> （爬取目标3）</li></ul><h2 id="需要获取的数据"><a href="#需要获取的数据" class="headerlink" title="需要获取的数据"></a>需要获取的数据</h2><ol><li>标题</li><li>索引号</li><li>分类</li><li>日期</li><li>文章内容</li><li>多个附件（难点，需要下载，保持文件格式，按照文章存放，判断如果已存在则跳过）</li></ol><p>一定要做好异常处理<br>存入到MySQL，一个网站一个表， 名字_平台，字段自定义</p><h2 id="数据插入文件inser-data-py"><a href="#数据插入文件inser-data-py" class="headerlink" title="数据插入文件inser_data.py"></a>数据插入文件inser_data.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xbot</span><br><span class="line"><span class="keyword">from</span> xbot <span class="keyword">import</span> <span class="built_in">print</span>, sleep</span><br><span class="line"><span class="keyword">from</span> .<span class="keyword">import</span> package</span><br><span class="line"><span class="keyword">from</span> .package <span class="keyword">import</span> variables <span class="keyword">as</span> glv</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> OperationalError, ProgrammingError</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert_data</span>(<span class="params">table,cols,data_list</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据库连接参数</span></span><br><span class="line">    db_config = &#123;</span><br><span class="line">        <span class="string">&#x27;host&#x27;</span>: <span class="string">&#x27;192.168.65.66&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;Yao&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;database&#x27;</span>: <span class="string">&#x27;yingdao&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;charset&#x27;</span>: <span class="string">&#x27;utf8mb4&#x27;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    connection = <span class="literal">None</span></span><br><span class="line">    cursor = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 建立数据库连接</span></span><br><span class="line">        connection = pymysql.connect(**db_config)</span><br><span class="line">        cursor = connection.cursor()</span><br><span class="line">        <span class="comment"># 假设要插入的表名为 &#x27;your_table&#x27;，包含3列</span></span><br><span class="line">        <span class="comment"># 请根据实际表结构修改表名和占位符数量</span></span><br><span class="line">        sql = <span class="string">f&quot;INSERT INTO <span class="subst">&#123;table&#125;</span> (<span class="subst">&#123;<span class="string">&#x27;,&#x27;</span>.join(cols)&#125;</span>) VALUES (<span class="subst">&#123;<span class="string">&#x27;%s,&#x27;</span> * (<span class="built_in">len</span>(cols)-<span class="number">1</span>)&#125;</span>%s)&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 执行插入操作，data_list 是要插入的列表数据</span></span><br><span class="line">        cursor.execute(sql, data_list)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 提交事务</span></span><br><span class="line">        connection.commit()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;数据插入成功&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> OperationalError <span class="keyword">as</span> e:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;数据库连接错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> connection:</span><br><span class="line">            connection.rollback()</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">except</span> ProgrammingError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;SQL执行错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> connection:</span><br><span class="line">            connection.rollback()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> connection:</span><br><span class="line">            connection.rollback()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭游标和连接</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cursor:</span><br><span class="line">            cursor.close()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> connection:</span><br><span class="line">            connection.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">args</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="爬取npm网站"><a href="#爬取npm网站" class="headerlink" title="爬取npm网站"></a>爬取npm网站</h2><h3 id="表创建"><a href="#表创建" class="headerlink" title="表创建"></a>表创建</h3><ol><li><strong>nmpa_platform主表创建</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> nmpa_platform(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary key</span> AUTO_INCREMENT,</span><br><span class="line">link <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">not NULL</span> comment <span class="string">&#x27;链接&#x27;</span>,</span><br><span class="line">title <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not null</span> comment <span class="string">&#x27;标题&#x27;</span>,</span><br><span class="line">index_id <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not null</span> comment <span class="string">&#x27;索引号&#x27;</span>,</span><br><span class="line">categories <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not NULL</span> comment <span class="string">&#x27;主题分类&#x27;</span>,</span><br><span class="line">date_ <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not NULL</span> COMMENT <span class="string">&#x27;发布日期&#x27;</span>,</span><br><span class="line">article text <span class="keyword">not NULL</span> COMMENT <span class="string">&#x27;文章内容&#x27;</span></span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><strong>att_table附件表创建</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> att_table(</span><br><span class="line">att_link <span class="type">varchar</span>(<span class="number">300</span>) <span class="keyword">PRIMARY key</span> comment <span class="string">&#x27;附件链接&#x27;</span>,</span><br><span class="line">index_id <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not null</span> comment <span class="string">&#x27;索引号&#x27;</span>,</span><br><span class="line">att_name <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not null</span> comment <span class="string">&#x27;附件名&#x27;</span>,</span><br><span class="line">attachment text  comment <span class="string">&#x27;附件内容&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure></li></ol><h3 id="get-table1-data-py"><a href="#get-table1-data-py" class="headerlink" title="get_table1_data.py"></a>get_table1_data.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xbot</span><br><span class="line"><span class="keyword">from</span> xbot <span class="keyword">import</span> <span class="built_in">print</span>, sleep,web</span><br><span class="line"><span class="keyword">from</span> xbot.app <span class="keyword">import</span> databook</span><br><span class="line"><span class="keyword">from</span> .<span class="keyword">import</span> package</span><br><span class="line"><span class="keyword">from</span> .package <span class="keyword">import</span> variables <span class="keyword">as</span> glv</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> .inser_data <span class="keyword">import</span> insert_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取每一页的url</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page_url</span>(<span class="params">url</span>):</span><br><span class="line">    web_object=web.create(url,<span class="string">&quot;cef&quot;</span>,load_timeout=<span class="number">20</span>)</span><br><span class="line">    element1=web_object.find_by_xpath(<span class="string">&#x27;/html/body/div[5]/div/div[2]/div/a[1]&#x27;</span>)</span><br><span class="line">    element2=web_object.find_by_xpath(<span class="string">&#x27;/html/body/div[5]/div/div[2]/div/a[7]&#x27;</span>)</span><br><span class="line">    index_str=element2.get_attribute(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    index=<span class="built_in">int</span>(re.findall(<span class="string">r&#x27;\d+&#x27;</span>,index_str)[<span class="number">0</span>])</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> element1.get_attribute(<span class="string">&#x27;href&#x27;</span>)==<span class="string">&#x27;index_1.html&#x27;</span>:</span><br><span class="line">        list_page=[ <span class="string">f&quot;https://www.nmpa.gov.cn/ylqx/ylqxfgwj/index_<span class="subst">&#123;i&#125;</span>.html&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,index+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        list_page=[ <span class="string">f&quot;https://www.nmpa.gov.cn/ylqx/ylqxfgwj/index_<span class="subst">&#123;i&#125;</span>.html&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,index+<span class="number">1</span>)]</span><br><span class="line">        list_page.insert(<span class="number">0</span>,url)</span><br><span class="line"></span><br><span class="line">    web_object.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list_page</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取每一个文章的url</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_art_url</span>(<span class="params">list_page</span>):</span><br><span class="line">    list_link=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list_page:</span><br><span class="line">        web_object=web.create(i,<span class="string">&quot;cef&quot;</span>,load_timeout=<span class="number">20</span>)</span><br><span class="line">        lis=web_object.find_all_by_xpath(<span class="string">&quot;/html/body/div[5]/div/div[2]/ul/li&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> lis:</span><br><span class="line">            href=element.find_by_xpath(<span class="string">&#x27;./a&#x27;</span>).get_attribute(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> href.startswith(<span class="string">&#x27;../../&#x27;</span>): </span><br><span class="line">                list_link.append(href.replace(<span class="string">&#x27;../../&#x27;</span>,<span class="string">&#x27;https://www.nmpa.gov.cn/&#x27;</span>))</span><br><span class="line">        web_object.close()</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> list_link</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取全部数据，包括附件链接</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_Data_and_att_link</span>(<span class="params">list_link</span>):</span><br><span class="line">    list_data=[]</span><br><span class="line">    att_file_link=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list_link:</span><br><span class="line">        <span class="keyword">try</span> :</span><br><span class="line">            web_object=web_object=web.create(i,<span class="string">&quot;cef&quot;</span>,load_timeout=<span class="number">20</span>)</span><br><span class="line">            </span><br><span class="line">            title_element=web_object.find_by_xpath(<span class="string">&#x27;/html/body/div[4]/div[1]/table/tbody/tr[2]/td[2]&#x27;</span>)</span><br><span class="line">            title=title_element.get_text()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> title.rfind(<span class="string">&quot;【失效】&quot;</span>)!=-<span class="number">1</span> <span class="keyword">or</span> title.rfind(<span class="string">&quot;【废止】&quot;</span>)!=-<span class="number">1</span>:</span><br><span class="line">                web_object.close()</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            index_id_element=web_object.find_by_xpath(<span class="string">&#x27;/html/body/div[4]/div[1]/table/tbody/tr[1]/td[2]&#x27;</span>)</span><br><span class="line">            cat_element=web_object.find_by_xpath(<span class="string">&#x27;/html/body/div[4]/div[1]/table/tbody/tr[1]/td[4]&#x27;</span>)</span><br><span class="line">            date_element=web_object.find_by_xpath(<span class="string">&#x27;/html/body/div[4]/div[1]/table/tbody/tr[3]/td[2]&#x27;</span>)</span><br><span class="line">            art_element=web_object.find_by_xpath(<span class="string">&#x27;/html/body/div[4]/div[5]&#x27;</span>)</span><br><span class="line">            index_id=index_id_element.get_text()</span><br><span class="line">            categories=cat_element.get_text()</span><br><span class="line">            date_=date_element.get_text()</span><br><span class="line">            article=art_element.get_text()</span><br><span class="line">            list_data.append([i,title,index_id,categories,date_,article])</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获得一行数据就插一行数据</span></span><br><span class="line">            insert_list=[i,title,index_id,categories,date_,article]</span><br><span class="line">            table = <span class="string">&quot;nmpa_platform&quot;</span></span><br><span class="line">            cols=[<span class="string">&quot;link&quot;</span>,<span class="string">&quot;title&quot;</span>,<span class="string">&quot;index_id&quot;</span>,<span class="string">&quot;categories&quot;</span>,<span class="string">&quot;date_&quot;</span>,<span class="string">&quot;article&quot;</span>]</span><br><span class="line">            insert_data(table,cols,insert_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            att_elements=web_object.find_all_by_xpath(<span class="string">&#x27;/html/body/div[4]/div[5]/p/a&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">if</span> att_elements:</span><br><span class="line">                table_name=<span class="string">&quot;att_table&quot;</span></span><br><span class="line">                att_cols=[<span class="string">&quot;att_link&quot;</span>,<span class="string">&quot;index_id&quot;</span>,<span class="string">&quot;att_name&quot;</span>]</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> att_elements:</span><br><span class="line">                    file_name=i.get_attribute(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">                    href=i.get_attribute(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">                    att_link=<span class="string">&#x27;https://www.nmpa.gov.cn/&#x27;</span>+href</span><br><span class="line">                   </span><br><span class="line">                    <span class="comment"># 插入数据</span></span><br><span class="line">                    att_insert=[att_link,index_id,file_name]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    att_file_link.append(att_insert)</span><br><span class="line"></span><br><span class="line">                    insert_data(table_name,att_cols,att_insert)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;本次没附件:<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;异常：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            web_object.close()</span><br><span class="line">    <span class="keyword">return</span> list_data,att_file_link</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">args</span>):</span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">    url=<span class="string">r&#x27;https://www.nmpa.gov.cn/ylqx/ylqxfgwj/index.html&#x27;</span></span><br><span class="line">    list_page=get_page_url(url)</span><br><span class="line">    <span class="comment"># list_page=[&#x27;https://www.nmpa.gov.cn/ylqx/ylqxfgwj/index.html&#x27;,&#x27;https://www.nmpa.gov.cn/ylqx/ylqxfgwj/index_1.html&#x27; ]</span></span><br><span class="line">    list_link=get_art_url(list_page)</span><br><span class="line">    <span class="comment"># list_link=[&#x27;https://www.nmpa.gov.cn/xxgk/fgwj/gzwj/gzwjylqx/20250526175353132.html&#x27;,&#x27;https://www.nmpa.gov.cn/xxgk/fgwj/gzwj/gzwjylqx/20250326171742135.html&#x27;]</span></span><br><span class="line">    list_data,att_link=get_Data_and_att_link(list_link)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;list_data:<span class="subst">&#123;list_data&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;att_link:<span class="subst">&#123;att_link&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> list_data,att_link</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="/2025/07/28/%E5%8C%BB%E8%8D%AF%E5%99%A8%E6%A2%B0%E6%B3%95%E8%A7%84%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/file-20250730142831068.png"><br><img src="/2025/07/28/%E5%8C%BB%E8%8D%AF%E5%99%A8%E6%A2%B0%E6%B3%95%E8%A7%84%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/file-20250730142856665.png"></p><h2 id="爬取cmde网站"><a href="#爬取cmde网站" class="headerlink" title="爬取cmde网站"></a>爬取cmde网站</h2><h3 id="表创建-1"><a href="#表创建-1" class="headerlink" title="表创建"></a>表创建</h3><ol><li><strong>cmde_platform主表创建</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> cmde_platform(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary key</span> AUTO_INCREMENT,</span><br><span class="line">link <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">not NULL</span> comment <span class="string">&#x27;链接&#x27;</span>,</span><br><span class="line">title <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">not null</span> comment <span class="string">&#x27;标题&#x27;</span>,</span><br><span class="line">index_id <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not null</span> comment <span class="string">&#x27;索引号&#x27;</span>,</span><br><span class="line"><span class="comment">-- categories varchar(16) not NULL comment &#x27;主题分类&#x27;,</span></span><br><span class="line">date_ <span class="type">varchar</span>(<span class="number">16</span>) <span class="keyword">not NULL</span> COMMENT <span class="string">&#x27;发布日期&#x27;</span>,</span><br><span class="line">article text <span class="keyword">not NULL</span> COMMENT <span class="string">&#x27;文章内容&#x27;</span></span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure></li><li><strong>att_cmde附件表创建</strong><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> att_cmde(</span><br><span class="line">att_link <span class="type">varchar</span>(<span class="number">200</span>) <span class="keyword">PRIMARY key</span> comment <span class="string">&#x27;附件链接&#x27;</span>,</span><br><span class="line">index_id <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">not null</span> comment <span class="string">&#x27;索引号&#x27;</span>,</span><br><span class="line">att_name <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not null</span> comment <span class="string">&#x27;附件名&#x27;</span>,</span><br><span class="line">attachment text  comment <span class="string">&#x27;附件内容&#x27;</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure></li></ol><h3 id="get-table2-data-py"><a href="#get-table2-data-py" class="headerlink" title="get_table2_data.py"></a>get_table2_data.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xbot</span><br><span class="line"><span class="keyword">from</span> xbot <span class="keyword">import</span> <span class="built_in">print</span>, sleep,web</span><br><span class="line"><span class="keyword">from</span> .<span class="keyword">import</span> package</span><br><span class="line"><span class="keyword">from</span> .package <span class="keyword">import</span> variables <span class="keyword">as</span> glv</span><br><span class="line"><span class="keyword">from</span> .inser_data <span class="keyword">import</span> insert_data</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获页链接</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page_url</span>():</span><br><span class="line">    url=<span class="string">r&quot;https://www.cmde.org.cn/flfg/index.html&quot;</span></span><br><span class="line">    wb_object = web.create(url,mode=<span class="string">&#x27;cef&#x27;</span>,load_timeout=<span class="number">20</span>)</span><br><span class="line">    last_index_element=wb_object.find_by_xpath(<span class="string">&#x27;/html/body/div[3]/div[3]/div[2]/div/a[7]&#x27;</span>)</span><br><span class="line">    page_num_str= last_index_element.get_attribute(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    page_num = <span class="built_in">int</span>(re.findall(<span class="string">&#x27;\d+&#x27;</span>,page_num_str)[<span class="number">0</span>])</span><br><span class="line">    page_url= [  <span class="string">f&quot;https://www.cmde.org.cn/flfg/index_<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>.html&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(page_num) ]</span><br><span class="line">    page_url.insert(<span class="number">0</span>,url)</span><br><span class="line">    wb_object.close()</span><br><span class="line">    <span class="keyword">return</span> page_url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取文章链接</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_art_url</span>(<span class="params">page_url</span>):</span><br><span class="line">    link_all_list=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> page_url:</span><br><span class="line">        wb_object=web.create(i,mode=<span class="string">&#x27;cef&#x27;</span>,load_timeout=<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">        link_elements= wb_object.find_all_by_xpath(<span class="string">&quot;/html/body/div[3]/div[3]/div[2]/ul/li/a&quot;</span>)</span><br><span class="line">        href_list=[ item.get_attribute(<span class="string">&#x27;href&#x27;</span>) <span class="keyword">for</span> item <span class="keyword">in</span> link_elements] </span><br><span class="line">        link_list= [ i.replace(<span class="string">&#x27;../&#x27;</span>,<span class="string">&#x27;https://www.cmde.org.cn/&#x27;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> href_list]</span><br><span class="line">        link_all_list.extend(link_list)</span><br><span class="line">        wb_object.close()</span><br><span class="line">    <span class="keyword">return</span> link_all_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取插入数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_insert_data</span>(<span class="params">list_url</span>):</span><br><span class="line">    table_name = <span class="string">&#x27;cmde_platform&#x27;</span></span><br><span class="line">    cols=[<span class="string">&quot;link&quot;</span>,<span class="string">&quot;title&quot;</span>,<span class="string">&quot;index_id&quot;</span>,<span class="string">&quot;date_&quot;</span>,<span class="string">&quot;article&quot;</span>]</span><br><span class="line"></span><br><span class="line">    att_table = <span class="string">&quot;att_cmde&quot;</span></span><br><span class="line">    att_cols=[<span class="string">&quot;att_link&quot;</span>,<span class="string">&quot;index_id&quot;</span>,<span class="string">&quot;att_name&quot;</span>]</span><br><span class="line">    all_data_list=[]</span><br><span class="line">    all_att_list=[]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list_url:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            we_object=web.create(item,mode=<span class="string">&#x27;cef&#x27;</span>)</span><br><span class="line">            title_element=we_object.find_by_xpath(<span class="string">&#x27;/html/body/div[3]/h2&#x27;</span>)</span><br><span class="line">            date_element=we_object.find_by_xpath(<span class="string">&#x27;/html/body/div[3]/div[2]&#x27;</span>)</span><br><span class="line">            content_element=we_object.find_by_xpath(<span class="string">&#x27;/html/body/div[3]/div[3]&#x27;</span>)</span><br><span class="line">            title=title_element.get_text()</span><br><span class="line">            date_str=date_element.get_text().split(<span class="string">&#x27;：&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">            content=content_element.get_text()</span><br><span class="line">            index_id=re.findall(<span class="string">&#x27;\d+&#x27;</span>,item)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            insert_list=[item,title,index_id,date_str,content]</span><br><span class="line">            insert_data(table_name,cols,insert_list)</span><br><span class="line"></span><br><span class="line">            all_data_list.append(insert_list)</span><br><span class="line"></span><br><span class="line">            att_elements = we_object.find_all_by_xpath(<span class="string">&quot;/html/body/div[3]/div[3]/p/a&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> att_elements==<span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;本文章没有附件:<span class="subst">&#123;item&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> att_elements:</span><br><span class="line">                    att_name=item.get_text()</span><br><span class="line">                    att_link=<span class="string">&#x27;https://www.cmde.org.cn/&#x27;</span>+item.get_attribute(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">                    att_insert=[att_link,index_id,att_name]</span><br><span class="line">                    insert_data(att_table,att_cols,att_insert)</span><br><span class="line"></span><br><span class="line">                    all_att_list.append(att_insert)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;报错：<span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            we_object =web.get_active(<span class="string">&#x27;cef&#x27;</span>)</span><br><span class="line">            we_object.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> all_data_list,all_att_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">args</span>):</span><br><span class="line">   </span><br><span class="line">    page_url=get_page_url()</span><br><span class="line">    <span class="comment"># print(page_url)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># page_url=[&#x27;https://www.cmde.org.cn/flfg/index.html&#x27;]</span></span><br><span class="line">    list_art_url=get_art_url(page_url)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># list_art_url=[&#x27;https://www.cmde.org.cn/flfg/fgwj/ggtg/20250704095433110.html&#x27;, &#x27;https://www.cmde.org.cn/flfg/fgwj/ggtg/20250627134357106.html&#x27;,&#x27;https://www.cmde.org.cn/flfg/fgwj/ggtg/20250408092232159.html&#x27;]</span></span><br><span class="line">    all_data_list,all_att_list=get_insert_data(list_art_url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;all_data_list:<span class="subst">&#123;all_data_list&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;all_att_list:<span class="subst">&#123;all_att_list&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> all_data_list,all_att_list</span><br></pre></td></tr></table></figure><h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><p><img src="/2025/07/28/%E5%8C%BB%E8%8D%AF%E5%99%A8%E6%A2%B0%E6%B3%95%E8%A7%84%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/file-20250730142938358.png"><br><img src="/2025/07/28/%E5%8C%BB%E8%8D%AF%E5%99%A8%E6%A2%B0%E6%B3%95%E8%A7%84%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/file-20250730143011067.png"></p><h2 id="爬取yaozhi网站"><a href="#爬取yaozhi网站" class="headerlink" title="爬取yaozhi网站"></a>爬取yaozhi网站</h2><h3 id="表创建-2"><a href="#表创建-2" class="headerlink" title="表创建"></a>表创建</h3><p><strong>主表yaozhi_platform</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> `yaozhi_platform` (</span><br><span class="line"> `id` <span class="type">INT</span> <span class="keyword">NOT NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增主键&#x27;</span>,</span><br><span class="line"> `title` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;标题&#x27;</span>,</span><br><span class="line"> `dept` <span class="type">VARCHAR</span>(<span class="number">50</span>) COMMENT <span class="string">&#x27;发布部门&#x27;</span>,</span><br><span class="line"> `post_date` <span class="type">DATE</span> COMMENT <span class="string">&#x27;发布日期&#x27;</span>,</span><br><span class="line"> `zihao` <span class="type">VARCHAR</span>(<span class="number">50</span>) COMMENT <span class="string">&#x27;发文字号&#x27;</span>,</span><br><span class="line"> `level` <span class="type">VARCHAR</span>(<span class="number">50</span>) COMMENT <span class="string">&#x27;效力级别&#x27;</span>,</span><br><span class="line"> `timeliness` <span class="type">VARCHAR</span>(<span class="number">50</span>) COMMENT <span class="string">&#x27;时效性&#x27;</span>,</span><br><span class="line"> `content` TEXT COMMENT <span class="string">&#x27;文章内容&#x27;</span>,</span><br><span class="line"> `attachment_count` <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;附件数&#x27;</span>,</span><br><span class="line"> `attachment_path` <span class="type">VARCHAR</span>(<span class="number">255</span>) COMMENT <span class="string">&#x27;附件存储路径（E:\影刀爬取\PRA_project\attachments\yaozhi\）&#x27;</span>,</span><br><span class="line"> `link` <span class="type">VARCHAR</span>(<span class="number">255</span>) COMMENT <span class="string">&#x27;文章链接&#x27;</span>,</span><br><span class="line"> `create_time` <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;记录创建时间&#x27;</span>,</span><br><span class="line">`update_time` <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;记录更新时间&#x27;</span>,</span><br><span class="line"> <span class="keyword">PRIMARY KEY</span> (`id`)</span><br><span class="line"> ) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci COMMENT<span class="operator">=</span><span class="string">&#x27;药智数据表&#x27;</span>;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="yaozhi-py"><a href="#yaozhi-py" class="headerlink" title="yaozhi.py"></a>yaozhi.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用提醒:</span></span><br><span class="line"><span class="comment"># 1. xbot包提供软件自动化、数据表格、Excel、日志、AI等功能</span></span><br><span class="line"><span class="comment"># 2. package包提供访问当前应用数据的功能，如获取元素、访问全局变量、获取资源文件等功能</span></span><br><span class="line"><span class="comment"># 3. 当此模块作为流程独立运行时执行main函数</span></span><br><span class="line"><span class="comment"># 4. 可视化流程中可以通过&quot;调用模块&quot;的指令使用此模块</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> xbot</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> xbot <span class="keyword">import</span> <span class="built_in">print</span>, sleep, web</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> package</span><br><span class="line"><span class="keyword">from</span> .package <span class="keyword">import</span> variables <span class="keyword">as</span> glv</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL数据库配置</span></span><br><span class="line">DB_CONFIG = &#123;</span><br><span class="line">    <span class="string">&#x27;host&#x27;</span>: <span class="string">&#x27;192.168.65.66&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;user&#x27;</span>: <span class="string">&#x27;rYao&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;database&#x27;</span>: <span class="string">&#x27;yingdao&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;charset&#x27;</span>: <span class="string">&#x27;utf8mb4&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据保存到MySQL数据库</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_to_mysql</span>(<span class="params">title, dept, post_date, zihao, level, timeliness, content, attachment_count, attachment_path, link</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 创建数据库连接</span></span><br><span class="line">        connection = pymysql.connect(**DB_CONFIG)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理日期格式</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            post_date = datetime.strptime(post_date, <span class="string">&#x27;%Y-%m-%d&#x27;</span>).date()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            post_date = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 截断标题到255字符（保留最后255字符）</span></span><br><span class="line">        title = title[:<span class="number">255</span>] <span class="keyword">if</span> <span class="built_in">len</span>(title) &gt; <span class="number">255</span> <span class="keyword">else</span> title</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            <span class="comment"># 检查记录是否已存在（同时判断index_id和link）</span></span><br><span class="line">            check_sql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            SELECT 1 FROM hwz_yaozhi</span></span><br><span class="line"><span class="string">            WHERE link = %s</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">            cursor.execute(check_sql, link)</span><br><span class="line">            exists = cursor.fetchone()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> exists:</span><br><span class="line">                <span class="comment"># 更新现有记录</span></span><br><span class="line">                sql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                UPDATE yaozhi_platform SET </span></span><br><span class="line"><span class="string">                    title = %s,</span></span><br><span class="line"><span class="string">                    dept = %s,</span></span><br><span class="line"><span class="string">                    post_date = %s,</span></span><br><span class="line"><span class="string">                    zihao = %s,</span></span><br><span class="line"><span class="string">                    level = %s,</span></span><br><span class="line"><span class="string">                    timeliness = %s,</span></span><br><span class="line"><span class="string">                    content = %s,</span></span><br><span class="line"><span class="string">                    attachment_count = %s,</span></span><br><span class="line"><span class="string">                    attachment_path = %s,</span></span><br><span class="line"><span class="string">                    update_time = CURRENT_TIMESTAMP</span></span><br><span class="line"><span class="string">                WHERE link = %s</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span></span><br><span class="line">                cursor.execute(sql, (title, dept, post_date, zihao, level, timeliness, content,</span><br><span class="line">                                     attachment_count, attachment_path, link))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;更新数据库记录: <span class="subst">&#123;title&#125;</span> - <span class="subst">&#123;link&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 插入新记录（包含link字段）</span></span><br><span class="line">                sql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                INSERT INTO yaozhi_platform (</span></span><br><span class="line"><span class="string">                    title, dept, post_date, zihao, level, timeliness,</span></span><br><span class="line"><span class="string">                    content, attachment_count, attachment_path,</span></span><br><span class="line"><span class="string">                    link</span></span><br><span class="line"><span class="string">                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span></span><br><span class="line">                cursor.execute(sql, (title, dept, post_date, zihao, level, timeliness,</span><br><span class="line">                                     content, attachment_count, attachment_path,</span><br><span class="line">                                     link))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;新增数据库记录: <span class="subst">&#123;title&#125;</span> - <span class="subst">&#123;link&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            connection.commit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> pymysql.Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;数据库操作失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> connection:</span><br><span class="line">            connection.rollback()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">if</span> connection:</span><br><span class="line">            connection.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载附件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_attachments</span>(<span class="params">web_object, title, base_url</span>):</span><br><span class="line">    <span class="comment"># 创建安全的标题目录名</span></span><br><span class="line">    safe_title = <span class="string">&quot;&quot;</span>.join([c <span class="keyword">for</span> c <span class="keyword">in</span> title <span class="keyword">if</span> c.isalpha() <span class="keyword">or</span> c.isdigit() <span class="keyword">or</span> c <span class="keyword">in</span> (<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;_&#x27;</span>)]).rstrip()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 限制目录名长度（Windows路径最大260字符，这里保留100字符）</span></span><br><span class="line">    safe_title = safe_title[:<span class="number">100</span>] <span class="keyword">if</span> <span class="built_in">len</span>(safe_title) &gt; <span class="number">100</span> <span class="keyword">else</span> safe_title</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 去除首尾空格和点（避免创建&quot;.&quot;或&quot;..&quot;目录）</span></span><br><span class="line">    safe_title = safe_title.strip().strip(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 附件保存路径</span></span><br><span class="line">    base_dir = <span class="string">r&quot;E:\影刀爬取\PRA_project\attachments\yaozhi&quot;</span></span><br><span class="line">    save_dir = os.path.join(base_dir, safe_title)</span><br><span class="line">    os.makedirs(save_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 查找页面中的所有附件链接</span></span><br><span class="line">    attachment_links = web_object.find_all_by_xpath(</span><br><span class="line">        <span class="string">&quot;//a[contains(@href, &#x27;.pdf&#x27;) or contains(@href, &#x27;.doc&#x27;) or contains(@href, &#x27;.xls&#x27;) or contains(@href, &#x27;.zip&#x27;) or contains(@href, &#x27;.rar&#x27;)]&quot;</span>)</span><br><span class="line"></span><br><span class="line">    downloaded_files = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> link_element <span class="keyword">in</span> attachment_links:</span><br><span class="line">        file_url = link_element.get_attribute(<span class="string">&quot;href&quot;</span>)</span><br><span class="line">        file_name = link_element.get_text().strip()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 处理相对路径</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_url.startswith(<span class="string">&quot;http&quot;</span>):</span><br><span class="line">            file_url = urljoin(base_url, file_url)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取文件名</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_name <span class="keyword">or</span> file_name == <span class="string">&quot;&quot;</span>:</span><br><span class="line">            file_name = os.path.basename(file_url)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ext = os.path.splitext(file_url)[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> file_name.endswith(ext):</span><br><span class="line">                file_name += ext</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查文件是否已存在</span></span><br><span class="line">        file_path = os.path.join(save_dir, file_name)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(file_path):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;附件已存在，跳过下载: <span class="subst">&#123;file_name&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 下载文件</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;正在下载附件: <span class="subst">&#123;file_name&#125;</span>&quot;</span>)</span><br><span class="line">            response = requests.get(file_url, stream=<span class="literal">True</span>, timeout=<span class="number">30</span>)</span><br><span class="line">            response.raise_for_status()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> chunk <span class="keyword">in</span> response.iter_content(chunk_size=<span class="number">8192</span>):</span><br><span class="line">                    <span class="keyword">if</span> chunk:</span><br><span class="line">                        f.write(chunk)</span><br><span class="line"></span><br><span class="line">            downloaded_files.append(file_name)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;附件下载完成: <span class="subst">&#123;file_name&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;下载附件失败: <span class="subst">&#123;file_name&#125;</span>, 错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回本次下载的文件列表、当前目录总文件数、文件路径</span></span><br><span class="line">    total_files = <span class="built_in">len</span>(os.listdir(save_dir)) <span class="keyword">if</span> os.path.exists(save_dir) <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> downloaded_files, total_files, save_dir</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取页面内容</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">title, link, dept, post_date</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在获取：<span class="subst">&#123;title&#125;</span>,<span class="subst">&#123;link&#125;</span>&quot;</span>)</span><br><span class="line">    base_url = <span class="string">&quot;/&quot;</span>.join(link.split(<span class="string">&quot;/&quot;</span>)[:<span class="number">3</span>]) + <span class="string">&quot;/&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重试配置</span></span><br><span class="line">    MAX_RETRIES = <span class="number">3</span>  <span class="comment"># 最大重试次数</span></span><br><span class="line">    <span class="keyword">for</span> attempt <span class="keyword">in</span> <span class="built_in">range</span>(MAX_RETRIES + <span class="number">1</span>):  <span class="comment"># 0,1,2,3 共4次尝试（首次+3次重试）</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            web_object = web.create(link, <span class="string">&#x27;edge&#x27;</span>, load_timeout=<span class="number">30</span>)</span><br><span class="line">            <span class="comment"># 成功则跳出循环</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span> attempt &lt; MAX_RETRIES:</span><br><span class="line">                <span class="comment"># 等待一段时间后重试</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;页面加载失败，第 <span class="subst">&#123;attempt + <span class="number">1</span>&#125;</span> 次重试: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">                sleep(<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 最后一次尝试失败</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;页面加载超时，已尝试 <span class="subst">&#123;MAX_RETRIES + <span class="number">1</span>&#125;</span> 次: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">                web_object = <span class="literal">None</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化变量</span></span><br><span class="line">    zihao = <span class="string">&quot;&quot;</span></span><br><span class="line">    level = <span class="string">&quot;&quot;</span></span><br><span class="line">    timeliness = <span class="string">&quot;&quot;</span></span><br><span class="line">    content = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 获取所有信息项容器</span></span><br><span class="line">        info_items = web_object.find_all_by_xpath(<span class="string">&#x27;//div[@class=&quot;manual&quot;]/div[contains(@class, &quot;content&quot;)]&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> info_items:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 获取span元素</span></span><br><span class="line">                span = item.find_by_xpath(<span class="string">&#x27;./span&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> span:</span><br><span class="line">                    span_text = span.get_text().strip()</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 提取实际值</span></span><br><span class="line">                    <span class="keyword">if</span> span_text.startswith(<span class="string">&quot;【&quot;</span>):</span><br><span class="line">                        <span class="comment"># 移除span文本，获取剩余文本</span></span><br><span class="line">                        item_text = item.get_text().strip()</span><br><span class="line">                        value = item_text.replace(span_text, <span class="string">&quot;&quot;</span>, <span class="number">1</span>).strip()</span><br><span class="line"></span><br><span class="line">                        <span class="comment"># 分类处理</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="string">&quot;发文字号&quot;</span> <span class="keyword">in</span> span_text:</span><br><span class="line">                            zihao = value</span><br><span class="line">                        <span class="keyword">elif</span> <span class="string">&quot;效力级别&quot;</span> <span class="keyword">in</span> span_text:</span><br><span class="line">                            level = value</span><br><span class="line">                        <span class="keyword">elif</span> <span class="string">&quot;时效&quot;</span> <span class="keyword">in</span> span_text.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>):</span><br><span class="line">                            timeliness = value</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="comment"># 忽略没有span的项</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;提取信息项时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 提取文章内容</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 尝试第一种格式：class=&quot;text&quot;</span></span><br><span class="line">        content_div = web_object.find_by_xpath(<span class="string">&#x27;//div[@class=&quot;text&quot;]&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> content_div:</span><br><span class="line">            content = content_div.get_text().strip()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 尝试第二种格式：class=&quot;new_detail_content&quot;</span></span><br><span class="line">            content_div = web_object.find_by_xpath(<span class="string">&#x27;//div[@class=&quot;new_detail_content&quot;]&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> content_div:</span><br><span class="line">                content = content_div.get_text().strip()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 尝试第三种格式：class=&quot;text&quot;在div内</span></span><br><span class="line">                content_div = web_object.find_by_xpath(<span class="string">&#x27;//div[contains(@class, &quot;content&quot;)]//div[@class=&quot;text&quot;]&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> content_div:</span><br><span class="line">                    content = content_div.get_text().strip()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="comment"># 尝试第四种格式：class=&quot;new_detail_content&quot;在div内</span></span><br><span class="line">                    content_div = web_object.find_by_xpath(</span><br><span class="line">                        <span class="string">&#x27;//div[contains(@class, &quot;content&quot;)]//div[@class=&quot;new_detail_content&quot;]&#x27;</span>)</span><br><span class="line">                    <span class="keyword">if</span> content_div:</span><br><span class="line">                        content = content_div.get_text().strip()</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        <span class="comment"># 最后尝试：直接获取整个manual内容</span></span><br><span class="line">                        manual_div = web_object.find_by_xpath(<span class="string">&#x27;//div[@class=&quot;manual&quot;]&#x27;</span>)</span><br><span class="line">                        <span class="keyword">if</span> manual_div:</span><br><span class="line">                            content = manual_div.get_text().strip()</span><br><span class="line">                    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;提取内容时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                        content = <span class="string">&quot;无法提取内容&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;发文字号: <span class="subst">&#123;zihao&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;效力级别: <span class="subst">&#123;level&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;时效性: <span class="subst">&#123;timeliness&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;文章内容: <span class="subst">&#123;content&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 下载附件</span></span><br><span class="line">    downloaded_files, attachment_count, attachment_path = download_attachments(web_object, title, base_url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;已创建文件路径：<span class="subst">&#123;attachment_path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> downloaded_files:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;成功下载 <span class="subst">&#123;<span class="built_in">len</span>(downloaded_files)&#125;</span> 个附件，当前共有 <span class="subst">&#123;attachment_count&#125;</span> 个附件&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;没有新附件需要下载，当前共有 <span class="subst">&#123;attachment_count&#125;</span> 个附件&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 存入数据库</span></span><br><span class="line">    save_to_mysql(title, dept, post_date, zihao, level, timeliness, content, attachment_count, attachment_path, link)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭网页</span></span><br><span class="line">    web_object.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_list</span>():</span><br><span class="line">    base_url = <span class="string">&#x27;https://db.yaozh.com/policies&#x27;</span></span><br><span class="line">    max_page = <span class="number">30</span>  <span class="comment"># 爬取30页（包括首页）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, max_page + <span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 构建页面URL（第1页是index.html，第2页开始是index_1.html）</span></span><br><span class="line">        url = <span class="string">f&quot;<span class="subst">&#123;base_url&#125;</span>?p=<span class="subst">&#123;page&#125;</span>.html&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;开始爬取第 <span class="subst">&#123;page&#125;</span>/<span class="subst">&#123;max_page&#125;</span> 页&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 获取页面并提取条目元素</span></span><br><span class="line">            web_object = web.create(url, <span class="string">&#x27;edge&#x27;</span>, load_timeout=<span class="number">30</span>)</span><br><span class="line">            elements = web_object.find_all_by_xpath(<span class="string">&quot;/html/body/div[7]/div[6]/div/div[2]/table/tbody/tr&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;提取信息项时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 循环处理当前页所有条目</span></span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> elements:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 标题</span></span><br><span class="line">                title = element.child_at(<span class="number">0</span>).get_text().strip()</span><br><span class="line">                <span class="comment"># 链接</span></span><br><span class="line">                link = <span class="string">&quot;https://db.yaozh.com&quot;</span> + element.find_by_xpath(<span class="string">&quot;./th/a&quot;</span>).get_attribute(<span class="string">&quot;href&quot;</span>)</span><br><span class="line">                <span class="comment"># 发布部门</span></span><br><span class="line">                dept = element.child_at(<span class="number">1</span>).get_text().strip()</span><br><span class="line">                <span class="comment"># 发布日期</span></span><br><span class="line">                post_date = element.child_at(<span class="number">2</span>).get_text().strip()</span><br><span class="line">                <span class="comment"># 爬取页面内容</span></span><br><span class="line">                get_page(title, link, dept, post_date)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;提取信息项时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        web_object.close()</span><br><span class="line">        sleep(<span class="number">2</span>)  <span class="comment"># 每页间隔2秒避免请求过快</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">args</span>):</span><br><span class="line">    get_list()</span><br><span class="line">    <span class="comment"># get_page(&quot;无字号&quot;,&quot;https://db.yaozh.com/policies/3806033786892288.html&quot;,&quot;医疗器械技术审评中心&quot;,&quot;2025-07-25&quot;)</span></span><br><span class="line">    <span class="comment"># get_page(&quot;有字号&quot;,&quot;https://db.yaozh.com/policies/3802927935943168.html&quot;,&quot;国家药品审评中心（CDE）&quot;,&quot;2025-07-18&quot;)</span></span><br><span class="line">    <span class="comment"># get_page(&quot;有实施日期&quot;,&quot;https://db.yaozh.com/policies/3803629953048193.html&quot;,&quot;国家卫健委（原国家卫计委）&quot;,&quot;2025-07-21&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h3><p><img src="/2025/07/28/%E5%8C%BB%E8%8D%AF%E5%99%A8%E6%A2%B0%E6%B3%95%E8%A7%84%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/file-20250730143137496.png"><br><img src="/2025/07/28/%E5%8C%BB%E8%8D%AF%E5%99%A8%E6%A2%B0%E6%B3%95%E8%A7%84%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/file-20250730143307279.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> RPA </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>亚马逊商品需求</title>
      <link href="/2025/07/27/%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%95%86%E5%93%81%E9%9C%80%E6%B1%82/"/>
      <url>/2025/07/27/%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%95%86%E5%93%81%E9%9C%80%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ol><li>打开亚马逊网址</li><li>根据制定的大类类目，去每个小类目下统计Best Sellers前100名产品的商品ID、标题、图片、价格、链接</li><li>把相应信息写进数据库</li><li>把本次写入的数据跟上次写入的数据做分析</li><li>把有新冲上来的链接、哪条链接调价的结果，发消息通知我 （短信&#x2F;微信&#x2F;钉钉&#x2F;系统通知&#x2F;QQ邮箱）</li></ol><h2 id="表设计"><a href="#表设计" class="headerlink" title="表设计"></a>表设计</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> amazon_items (</span><br><span class="line"> id <span class="type">INT</span> <span class="keyword">PRIMARY KEY</span> AUTO_INCREMENT, <span class="comment">-- 自增主键</span></span><br><span class="line">categories <span class="type">VARCHAR</span>(<span class="number">64</span>) COMMENT <span class="string">&#x27;分类&#x27;</span>,</span><br><span class="line"> item_id <span class="type">VARCHAR</span>(<span class="number">64</span>) COMMENT <span class="string">&#x27;商品ID&#x27;</span>,</span><br><span class="line"> title <span class="type">VARCHAR</span>(<span class="number">255</span>) COMMENT <span class="string">&#x27;标题&#x27;</span>,</span><br><span class="line"> img_url <span class="type">VARCHAR</span>(<span class="number">255</span>) COMMENT <span class="string">&#x27;图片链接&#x27;</span>,</span><br><span class="line"> price <span class="type">DECIMAL</span>(<span class="number">8</span>, <span class="number">2</span>) COMMENT <span class="string">&#x27;价格&#x27;</span>,</span><br><span class="line"> link <span class="type">VARCHAR</span>(<span class="number">255</span>) COMMENT <span class="string">&#x27;商品链接&#x27;</span>,</span><br><span class="line"> version <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> COMMENT <span class="string">&#x27;版本号（自动计算）&#x27;</span>,</span><br><span class="line"> create_time DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span></span><br><span class="line"> )</span><br></pre></td></tr></table></figure><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p> <strong>主流程</strong>：</p><ol><li>连接数据库，获取最大版本号 </li><li>打开⼤类⽹⻚，获取⼦类相似元素， ForEach 循坏，获取其⽂本内容可取出⼦类标题 categories （即分类）和item_id,由于后⾯获取和存储其他商品详情在⼦流程中进⾏。编写了子流程.flow(用于获取要爬取的数据列表)和get_message.flow(用于输出要插入的数据列表和输出要更新的信息)</li><li>最终的数据列表插入数据库</li><li>发送信息<br><img src="/2025/07/27/%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%95%86%E5%93%81%E9%9C%80%E6%B1%82/Pasted-image-20250727015406.png"><br><img src="/2025/07/27/%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%95%86%E5%93%81%E9%9C%80%E6%B1%82/Pasted-image-20250727015756.png"><br><img src="/2025/07/27/%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%95%86%E5%93%81%E9%9C%80%E6%B1%82/Pasted-image-20250727015952.png"><br><img src="/2025/07/27/%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%95%86%E5%93%81%E9%9C%80%E6%B1%82/Pasted-image-20250727020044.png"><br><img src="/2025/07/27/%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%95%86%E5%93%81%E9%9C%80%E6%B1%82/Pasted-image-20250727020029.png"></li></ol><p><strong>子流程</strong>：</p><ol><li>拼接要访问的url</li><li>打开子类网页</li><li>新建全局列表list_item_id和list_link用于追加数据</li><li>设置点击下一页的循环次数</li><li>滚动网页到底部，等待加载，批量爬取数据</li><li>清洗批量爬取的数据，把US$29.90的字符串转化为float类型的29.90</li><li>拼接所有列表为数据库表名的字段的顺序的格式</li><li>输出最终列表</li></ol><p><img src="/2025/07/27/%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%95%86%E5%93%81%E9%9C%80%E6%B1%82/Pasted-image-20250727020116.png"><br><img src="/2025/07/27/%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%95%86%E5%93%81%E9%9C%80%E6%B1%82/Pasted-image-20250727020149.png"><br><img src="/2025/07/27/%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%95%86%E5%93%81%E9%9C%80%E6%B1%82/Pasted-image-20250727020225.png"><br>插入的代码块用于清洗数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process_element</span>(<span class="params">elem</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(elem, <span class="built_in">str</span>) <span class="keyword">and</span> elem.startswith(<span class="string">&#x27;US$&#x27;</span>):</span><br><span class="line">        <span class="comment"># 从&quot;US$X&quot;格式的字符串中提取数字</span></span><br><span class="line">        num_part = elem[<span class="number">3</span>:]  <span class="comment"># 取&quot;US$&quot;后面的部分</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">float</span>(num_part)</span><br><span class="line">    <span class="comment"># 忽略None和其他不符合条件的元素</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原始列表</span></span><br><span class="line">list1 = web_data_table</span><br><span class="line">list2 = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理每个子列表</span></span><br><span class="line"><span class="keyword">for</span> sublist <span class="keyword">in</span> list1:</span><br><span class="line">    processed_sublist = []</span><br><span class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> sublist[<span class="number">2</span>:]:</span><br><span class="line">        processed = process_element(elem)</span><br><span class="line">        <span class="keyword">if</span> processed <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            processed_sublist.append(processed)</span><br><span class="line">    list2.append(processed_sublist)</span><br><span class="line"></span><br><span class="line">list3 = [ i[:<span class="number">2</span>]+j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(list1,list2) ]</span><br></pre></td></tr></table></figure><p><strong>get_message子模块</strong>：</p><ol><li>连接数据库执行以下sql语句找出每个item_id最大版本的记录<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> categories,a.item_id,title,img_url,price,link,a.version</span><br><span class="line"><span class="keyword">FROM</span> amazon_items a <span class="keyword">JOIN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> item_id, <span class="built_in">MAX</span>(version) <span class="keyword">AS</span> max_version <span class="keyword">FROM</span> amazon_items <span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line"> item_id</span><br><span class="line"> ) s</span><br><span class="line"> <span class="keyword">ON</span> a.item_id <span class="operator">=</span> s.item_id <span class="keyword">AND</span> a.version <span class="operator">=</span> s.max_version;</span><br></pre></td></tr></table></figure></li><li>检查价格是否相同,价格不同，更新版本号并添加调价消息</li><li>反向删除需要移除的项，避免索引变化问题</li><li>message处理成这样的格式：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message += <span class="string">f&quot;有上新：【分类：<span class="subst">&#123;categories&#125;</span>，商品id：<span class="subst">&#123;item_id&#125;</span>，标题：<span class="subst">&#123;title&#125;</span>，价格：<span class="subst">&#123;price&#125;</span>，链接：<span class="subst">&#123;link&#125;</span>】\n&quot;</span></span><br></pre></td></tr></table></figure></li><li>返回要更新列表reslist和要发送的信息message<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">DBconnnectDict=&#123;</span><br><span class="line">        <span class="string">&quot;host&quot;</span>:<span class="string">&#x27;192.168.65.66&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;user&quot;</span>:<span class="string">&#x27;Yao&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;passwd&quot;</span>:<span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;db&quot;</span>:<span class="string">&#x27;yingdao&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># 非空返回查询语句元组</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_select_result</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 建立数据库连接</span></span><br><span class="line">        connection = pymysql.connect(</span><br><span class="line">                        host=DBconnnectDict[<span class="string">&quot;host&quot;</span>],</span><br><span class="line">                        port=<span class="number">3306</span>,</span><br><span class="line">                        user=DBconnnectDict[<span class="string">&quot;user&quot;</span>],</span><br><span class="line">                        passwd=DBconnnectDict[<span class="string">&quot;passwd&quot;</span>],</span><br><span class="line">                        db=DBconnnectDict[<span class="string">&quot;db&quot;</span>],</span><br><span class="line">                        charset=<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">                    )</span><br><span class="line">        <span class="comment"># 创建游标对象</span></span><br><span class="line">        cursor=connection.cursor()</span><br><span class="line">        <span class="comment"># 定义SQL查询语句</span></span><br><span class="line">        sql=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        SELECT categories,a.item_id,title,img_url,price,link,a.version</span></span><br><span class="line"><span class="string">        FROM amazon_items a JOIN (</span></span><br><span class="line"><span class="string">        SELECT item_id, MAX(version) AS max_version FROM amazon_items GROUP BY</span></span><br><span class="line"><span class="string">        item_id</span></span><br><span class="line"><span class="string">        ) s</span></span><br><span class="line"><span class="string">        ON a.item_id = s.item_id AND a.version = s.max_version;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 执行SQL查询</span></span><br><span class="line">        cursor.execute(sql)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取查询结果（以列表形式保存）</span></span><br><span class="line">        result_list = cursor.fetchall()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果需要将每条记录转换为字典（包含字段名），可以使用以下代码</span></span><br><span class="line">        <span class="comment"># columns = [desc[0] for desc in cursor.description]</span></span><br><span class="line">        <span class="comment"># result_list = [dict(zip(columns, row)) for row in cursor.fetchall()]</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;查询成功，共获取 <span class="subst">&#123;<span class="built_in">len</span>(result_list)&#125;</span> 条记录&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> pymysql.MySQLError <span class="keyword">as</span> e:</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;数据库操作出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        result_list = []  <span class="comment"># 出错时返回空列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭游标和连接</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;cursor&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>() <span class="keyword">and</span> cursor:</span><br><span class="line">            cursor.close()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;connection&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>() <span class="keyword">and</span> connection:</span><br><span class="line">            connection.close()</span><br><span class="line">    <span class="keyword">return</span>  result_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_version_list</span>(<span class="params">reslist</span>):</span><br><span class="line"></span><br><span class="line">    result_tuple=get_select_result()</span><br><span class="line">    <span class="comment"># 创建res_select 中商品ID 到版本号和价格的映射</span></span><br><span class="line">    <span class="built_in">print</span>(result_tuple)</span><br><span class="line">    res_map = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> result_tuple:</span><br><span class="line">        categories, item_id, title, img_url, price, link, version = item</span><br><span class="line">        res_map[item_id] = (price, <span class="built_in">int</span>(version))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化消息变量</span></span><br><span class="line">    message = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 用于存储需要删除的reslist 索引</span></span><br><span class="line">    indices_to_remove = []</span><br><span class="line">    <span class="comment"># 处理调价和相同价格的情况</span></span><br><span class="line">    <span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(reslist):</span><br><span class="line">        categories, item_id, title, img_url, price, link, version = item</span><br><span class="line">        <span class="keyword">if</span> item_id <span class="keyword">in</span> res_map:</span><br><span class="line">            res_price, res_version = res_map[item_id]</span><br><span class="line">            <span class="comment"># 检查价格是否相同</span></span><br><span class="line">            <span class="keyword">if</span> price == res_price:</span><br><span class="line">                indices_to_remove.append(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 价格不同，更新版本号并添加调价消息</span></span><br><span class="line">                new_version = res_version + <span class="number">1</span></span><br><span class="line">                reslist[i][<span class="number">6</span>] = <span class="built_in">str</span>(new_version) <span class="comment"># 更新版本号</span></span><br><span class="line">                message += <span class="string">f&quot;有调价：【分类：<span class="subst">&#123;categories&#125;</span>，商品id：<span class="subst">&#123;item_id&#125;</span>，标题：<span class="subst">&#123;title&#125;</span>，价格：<span class="subst">&#123;res_price&#125;</span>→<span class="subst">&#123;price&#125;</span>，链接：<span class="subst">&#123;link&#125;</span>】\n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向删除需要移除的项，避免索引变化问题</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">sorted</span>(indices_to_remove, reverse=<span class="literal">True</span>):</span><br><span class="line">        <span class="keyword">del</span> reslist[i]</span><br><span class="line">    <span class="comment"># 处理上新的情况</span></span><br><span class="line">        res_ids = <span class="built_in">set</span>(res_map.keys())</span><br><span class="line">        new_items = [item <span class="keyword">for</span> item <span class="keyword">in</span> reslist <span class="keyword">if</span> item[<span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> res_ids]</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> new_items:</span><br><span class="line">            categories, item_id, title, img_url, price, link, version = item</span><br><span class="line">            </span><br><span class="line">            message += <span class="string">f&quot;有上新：【分类：<span class="subst">&#123;categories&#125;</span>，商品id：<span class="subst">&#123;item_id&#125;</span>，标题：<span class="subst">&#123;title&#125;</span>，价格：<span class="subst">&#123;price&#125;</span>，链接：<span class="subst">&#123;link&#125;</span>】\n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> reslist,message</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">args</span>):</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    [[&#x27;R&amp;B&#x27;,&#x27;B0FHJ7BCJ3&#x27;,&#x27;Here For It All&#x27;,&#x27;https://images-na.ssl-images-amazon.com/images/I/61e7eyCsIfL._AC_UL600_SR600,400_.jpg&#x27;,19.98,&#x27;https://www.amazon.com/-/zh/dp/B0FHJ7BCJ3&#x27;,1]]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    reslist,message=update_version_list(args)</span><br><span class="line">    <span class="built_in">print</span>(reslist)</span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line">    <span class="keyword">return</span> reslist,message</span><br></pre></td></tr></table></figure></li></ol><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><strong>信息通知结果：</strong><br><img src="/2025/07/27/%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%95%86%E5%93%81%E9%9C%80%E6%B1%82/Pasted-image-20250727005119.png"><br>数据库查询结果：<br><img src="/2025/07/27/%E4%BA%9A%E9%A9%AC%E9%80%8A%E5%95%86%E5%93%81%E9%9C%80%E6%B1%82/Pasted-image-20250727021136.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 影刀RPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp+服务器:实现内网穿透</title>
      <link href="/2025/07/25/frp-%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2025/07/25/frp-%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是frp"><a href="#什么是frp" class="headerlink" title="什么是frp"></a>什么是frp</h1><ul><li><a href="https://github.com/fatedier/frp">frp开源地址</a></li><li><a href="https://gofrp.org/zh-cn/">frp安装中文文档</a></li><li>frp下载地址（从 Github <a href="https://github.com/fatedier/frp/releases">Release</a> 页面下载最新版本。）</li></ul><p>frp 采用 C&#x2F;S 模式，将</p><ol><li><p><strong>服务端部署在具有公网 IP 的机器上，</strong></p></li><li><p><strong>客户端部署在内网或防火墙内的机器上，通过访问暴露在服务器上的端口，反向代理到处于内网的服务。</strong></p></li></ol><p> 在此基础上，frp 支持 TCP, UDP, HTTP, HTTPS 等多种协议，提供了加密、压缩，身份认证，代理限速，负载均衡等众多能力。此外，还可以通过 xtcp 实现 P2P 通信。</p><p><strong>工具准备</strong>：</p><ol><li><strong>一台公网服务器，部署服务端</strong></li><li>一台内网机器，部署客户端</li><li>frp软件：frps服务端+ frpc客户端</li></ol><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>下载frp分别上传到服务器和内网机器，根据服务器和内网机器分别下载对应架构的frp版本</p><ul><li>amd相当于x86，是64位指令的操作系统架构</li><li>arm64是64位精简指令的操作系统架构，特点低能耗，被广泛应用小设备和移动设备</li></ul><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><h3 id="服务器解压frp"><a href="#服务器解压frp" class="headerlink" title="服务器解压frp"></a>服务器解压frp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf frp_0.63.0_linux_amd64.tar.gz</span><br><span class="line"><span class="built_in">mv</span> frp_0.63.0_linux_amd64 /usr/local/frp</span><br><span class="line"><span class="built_in">rm</span> -f /usr/local/frp/frpc <span class="comment"># 服务端不需要客户端了</span></span><br><span class="line"><span class="built_in">rm</span> -f /usr/local/frp/frpc.toml <span class="comment"># 服务端配置文件不需要客户端了</span></span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ol><li>设置配置文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /etc/frp</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/frp/frps.toml /etc/frp/frps.toml</span><br></pre></td></tr></table></figure><ol start="2"><li>配置frps.toml文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/frp/frps.toml</span><br></pre></td></tr></table></figure><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监听端口，记得服务器防火墙要打开</span></span><br><span class="line"><span class="attr">bindPort</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">webServer.addr</span> = <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="comment"># 网页仪表盘端口，记得防火墙打开</span></span><br><span class="line"><span class="attr">webServer.port</span> = <span class="number">7500</span></span><br><span class="line"><span class="attr">webServer.user</span> = <span class="string">&quot;admin&quot;</span></span><br><span class="line"><span class="attr">webServer.password</span> = <span class="string">&quot;密码&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">auth.method</span>=<span class="string">&quot;token&quot;</span></span><br><span class="line"><span class="attr">auth.token</span> = <span class="string">&quot;thisisatoken&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>利用systemd启动后台进程挂载</p><p>创建service文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/frps.service</span><br></pre></td></tr></table></figure><p>frps.service内容:</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span> = frp server</span><br><span class="line"><span class="attr">After</span> = network.target syslog.target</span><br><span class="line"><span class="attr">Wants</span> = network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">ExecStart</span> = /usr/local/frp/frps -c /etc/frp/frps.toml</span><br><span class="line"></span><br><span class="line"><span class="attr">ExecStop</span>=/bin/kill <span class="variable">$MAINPID</span></span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span> = multi-user.target</span><br></pre></td></tr></table></figure></li></ol><h3 id="服务端启动"><a href="#服务端启动" class="headerlink" title="服务端启动"></a>服务端启动</h3>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重载配置</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">systemctl start frps.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">systemctl status frps.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">systemctl stop frps.service</span><br></pre></td></tr></table></figure><p>查看日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 frps 服务的最新日志</span></span><br><span class="line">journalctl -u frps</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 实时跟踪日志（类似 tail -f）</span></span><br><span class="line">journalctl -u frps -f</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 查看最近 N 行日志</span></span><br><span class="line">journalctl -u frps -n 100</span><br></pre></td></tr></table></figure><p><img src="/2025/07/25/frp-%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20250725145119696.png" alt="image-20250725145119696"></p><p>设置开机自启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> frps</span><br></pre></td></tr></table></figure><p>验证开机自启是否生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status frps</span><br></pre></td></tr></table></figure><p><img src="/2025/07/25/frp-%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20250725145855822.png" alt="image-20250725145855822"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl is-enabled frps  <span class="comment"># 输出 enabled 则表示成功</span></span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="内网机器解压"><a href="#内网机器解压" class="headerlink" title="内网机器解压"></a>内网机器解压</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf frp_0.63.0_linux_arm64.tar.gz</span><br><span class="line"><span class="built_in">mv</span> frp_0.63.0_linux_arm64 /usr/local/frp</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -f /usr/local/frp/frps <span class="comment"># 不需要服务端了</span></span><br><span class="line"><span class="built_in">rm</span> -f /usr/local/frp/frps.toml <span class="comment"># 不需要服务端了</span></span><br></pre></td></tr></table></figure><h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><ol><li>设置配置文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /etc/frp</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/frp/frpc.toml /etc/frp/frpc.toml</span><br></pre></td></tr></table></figure><ol start="2"><li>配置frpc.toml文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/frp/frpc.toml</span><br></pre></td></tr></table></figure><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /ect/frp/frpc.tpml</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#你的云服务器公网ip</span></span><br><span class="line"><span class="attr">serverAddr</span> = <span class="string">&quot;公网ip&quot;</span></span><br><span class="line"><span class="comment">#连接到云服务器端口,需要和frps.toml配置文件中端口一致</span></span><br><span class="line"><span class="attr">serverPort</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">auth.method</span> = <span class="string">&quot;token&quot;</span></span><br><span class="line"><span class="attr">auth.token</span> = <span class="string">&quot;thisisatoken&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#内网服务器的终端连接</span></span><br><span class="line"><span class="section">[[proxies]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;frp-ssh&quot;</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;tcp&quot;</span></span><br><span class="line"><span class="attr">localIP</span> = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="attr">localPort</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remotePort</span> = <span class="number">6000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#内网服务器的nextcloud连接</span></span><br><span class="line"><span class="section">[[proxies]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;frp-nextcloud&quot;</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;tcp&quot;</span></span><br><span class="line"><span class="attr">localIP</span> = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="attr">localPort</span> = <span class="number">40070</span></span><br><span class="line"><span class="attr">remotePort</span> = <span class="number">8080</span></span><br></pre></td></tr></table></figure><p><strong>remotePort端口记得服务器防火墙打开</strong></p><ol start="3"><li><p>利用systemd启动后台进程挂载<br> 创建service文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/systemd/system/frpc.service</span><br></pre></td></tr></table></figure><p> frps.service内容:</p> <figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=FRP Client Service</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">User</span>=frp</span><br><span class="line"><span class="attr">Group</span>=frp</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/local/frp/frpc -c /etc/frp/frpc.toml</span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="可能发生的错误"><a href="#可能发生的错误" class="headerlink" title="可能发生的错误"></a>可能发生的错误</h3><ol><li><strong>用户 &#x2F; 组是否存在</strong><br>配置中指定了 <code>User=frp</code> 和 <code>Group=frp</code>，需确认系统中是否真的存在 <code>frp</code> 用户和同名组。如果不存在，服务会因无法切换到该用户而启动失败。<br>检查命令：<code>id frp</code>（若返回无此用户，则需创建：<code>sudo useradd -r -s /sbin/nologin frp</code>）。</li><li><strong>文件权限是否匹配</strong><br><code>frp</code> 用户需要对以下文件有对应权限：<ul><li><code>/usr/local/frp/frpc</code>：需有可执行权限（<code>chmod +x</code>）。</li><li><code>/etc/frp/frpc.toml</code>：需有读取权限（可设置为 <code>chmod 644</code> 并确保所有者或组包含 <code>frp</code>）。</li></ul></li><li><strong>路径是否正确</strong><br>确认 <code>ExecStart</code> 中 <code>frpc</code> 程序路径（<code>/usr/local/frp/frpc</code>）和配置文件路径（<code>/etc/frp/frpc.toml</code>）是否与实际存放位置一致，路径错误会导致启动失败。</li></ol><h3 id="客户端启动"><a href="#客户端启动" class="headerlink" title="客户端启动"></a>客户端启动</h3><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重载配置</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">systemctl start frpc.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务状态</span></span><br><span class="line">systemctl status frpc.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">systemctl stop frpc.service</span><br></pre></td></tr></table></figure></code></pre><p> 查看日志</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 frps 服务的最新日志</span></span><br><span class="line">journalctl -u frpc</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 实时跟踪日志（类似 tail -f）</span></span><br><span class="line">journalctl -u frpc -f</span><br><span class="line">   </span><br><span class="line"><span class="comment"># 查看最近 N 行日志</span></span><br><span class="line">journalctl -u frpc -n 100</span><br></pre></td></tr></table></figure><p> <img src="/2025/07/25/frp-%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20250725152322309.png" alt="image-20250725152322309"></p><p> 设置开机自启</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> frpc</span><br></pre></td></tr></table></figure><p> 验证开机自启是否生效</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status frpc</span><br></pre></td></tr></table></figure><p> <img src="/2025/07/25/frp-%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20250725152426082.png" alt="image-20250725152426082"></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl is-enabled frps  <span class="comment"># 输出 enabled 则表示成功</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="网页仪表盘"><a href="#网页仪表盘" class="headerlink" title="网页仪表盘"></a>网页仪表盘</h2><p><img src="/2025/07/25/frp-%E6%9C%8D%E5%8A%A1%E5%99%A8-%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/image-20250725152625076.png" alt="image-20250725152625076"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>京东RPA爬虫</title>
      <link href="/2025/07/24/%E4%BA%AC%E4%B8%9CRPA%E7%88%AC%E8%99%AB/"/>
      <url>/2025/07/24/%E4%BA%AC%E4%B8%9CRPA%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">商品 ID item_id </span><br><span class="line">商品链接 item_link </span><br><span class="line">标题 item_title </span><br><span class="line">⻔店名称 store </span><br><span class="line">封⾯ cover_link </span><br><span class="line">原价 original_cost </span><br><span class="line">折扣价 discount_cost </span><br><span class="line">品牌 brand </span><br><span class="line">型号 type </span><br><span class="line">评论数 comments</span><br></pre></td></tr></table></figure><h1 id="mysql数据库建表"><a href="#mysql数据库建表" class="headerlink" title="mysql数据库建表"></a>mysql数据库建表</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `jd_items` (</span><br><span class="line">  `id` <span class="type">INT</span> <span class="keyword">NOT NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;自增主键&#x27;</span>,</span><br><span class="line">  `item_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;商品ID&#x27;</span>,</span><br><span class="line">  `item_link` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;地址 http开头&#x27;</span>,</span><br><span class="line">  `store` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;门店名称&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;商品标题&#x27;</span>,</span><br><span class="line">  `cover_url` <span class="type">varchar</span>(<span class="number">255</span>) COMMENT <span class="string">&#x27;图片URL地址,http开头&#x27;</span>,</span><br><span class="line">  `ori_price` <span class="type">decimal</span>(<span class="number">10</span>, <span class="number">2</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;原价&#x27;</span>,</span><br><span class="line">  `price` <span class="type">decimal</span>(<span class="number">10</span>, <span class="number">2</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;折扣价&#x27;</span>,</span><br><span class="line">  `brand` <span class="type">varchar</span>(<span class="number">64</span>) COMMENT <span class="string">&#x27;品牌&#x27;</span>,</span><br><span class="line">  `brand_type` <span class="type">varchar</span>(<span class="number">255</span>) COMMENT <span class="string">&#x27;品牌型号&#x27;</span>,</span><br><span class="line">  `comment` <span class="type">varchar</span>(<span class="number">32</span>) COMMENT <span class="string">&#x27;评论数&#x27;</span>,</span><br><span class="line">  `created_at` datetime <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;写入时间（自动填充）&#x27;</span>,</span><br><span class="line">  `updated_at` datetime <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间（自动更新）&#x27;</span>,</span><br><span class="line">  `student` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;姓名 写中文&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`) <span class="comment">-- 自增字段作为单一主键</span></span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><h1 id="影刀RPA流程"><a href="#影刀RPA流程" class="headerlink" title="影刀RPA流程"></a>影刀RPA流程</h1><h2 id="主流程"><a href="#主流程" class="headerlink" title="主流程"></a>主流程</h2><p><img src="/2025/07/24/%E4%BA%AC%E4%B8%9CRPA%E7%88%AC%E8%99%AB/image-20250724170315317.png" alt="image-20250724170315317"></p><h2 id="获取商品详情子流程"><a href="#获取商品详情子流程" class="headerlink" title="获取商品详情子流程"></a>获取商品详情子流程</h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/2025/07/24/%E4%BA%AC%E4%B8%9CRPA%E7%88%AC%E8%99%AB/image2.png" alt="image2"></h2><p>注意：</p><ol><li>每一个模块都要做好异常处理</li><li>定位网页数据最好使用xpath方法</li></ol><h2 id="数据清洗clean子流程"><a href="#数据清洗clean子流程" class="headerlink" title="数据清洗clean子流程"></a>数据清洗clean子流程</h2><p><img src="/2025/07/24/%E4%BA%AC%E4%B8%9CRPA%E7%88%AC%E8%99%AB/image-20250724172733228.png" alt="image-20250724172733228"></p><h2 id="主流程的数据入库"><a href="#主流程的数据入库" class="headerlink" title="主流程的数据入库"></a>主流程的数据入库</h2><p><img src="/2025/07/24/%E4%BA%AC%E4%B8%9CRPA%E7%88%AC%E8%99%AB/image-20250724173301380.png" alt="image-20250724173301380"></p><h3 id="批量插入数据"><a href="#批量插入数据" class="headerlink" title="批量插入数据"></a>批量插入数据</h3><p><img src="/2025/07/24/%E4%BA%AC%E4%B8%9CRPA%E7%88%AC%E8%99%AB/image-20250724173334083.png" alt="image-20250724173334083"></p><p>​                       <strong>invoke_result是子流程返回的元组，返回的数据都在元组里面。</strong></p><p><strong>日志</strong></p><p><img src="/2025/07/24/%E4%BA%AC%E4%B8%9CRPA%E7%88%AC%E8%99%AB/image-20250724183805616.png" alt="image-20250724183805616"></p><h1 id="数据库查询结果"><a href="#数据库查询结果" class="headerlink" title="数据库查询结果"></a>数据库查询结果</h1><p><img src="/2025/07/24/%E4%BA%AC%E4%B8%9CRPA%E7%88%AC%E8%99%AB/image-20250724183925770.png" alt="image-20250724183925770"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> sql </tag>
            
            <tag> RPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客部署云服务器</title>
      <link href="/2025/07/21/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2025/07/21/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo博客部署云服务器"><a href="#hexo博客部署云服务器" class="headerlink" title="hexo博客部署云服务器"></a>hexo博客部署云服务器</h1><h2 id="安装需要的依赖"><a href="#安装需要的依赖" class="headerlink" title="安装需要的依赖"></a>安装需要的依赖</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br></pre></td></tr></table></figure><h2 id="安装编译工具"><a href="#安装编译工具" class="headerlink" title="安装编译工具"></a>安装编译工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc perl-ExtUtils-MakeMaker package</span><br></pre></td></tr></table></figure><h2 id="检查Git是否安装"><a href="#检查Git是否安装" class="headerlink" title="检查Git是否安装"></a>检查Git是否安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version </span><br></pre></td></tr></table></figure><h2 id="安装Git：已经安装过的可以跳过这一步"><a href="#安装Git：已经安装过的可以跳过这一步" class="headerlink" title="安装Git：已经安装过的可以跳过这一步"></a>安装Git：已经安装过的可以跳过这一步</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git -y </span><br></pre></td></tr></table></figure><h2 id="添加用户并设置密码"><a href="#添加用户并设置密码" class="headerlink" title="添加用户并设置密码"></a>添加用户并设置密码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd git </span><br><span class="line">passwd git </span><br></pre></td></tr></table></figure><h2 id="创建博客目录"><a href="#创建博客目录" class="headerlink" title="创建博客目录"></a>创建博客目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /home/blog </span><br></pre></td></tr></table></figure><h2 id="给博客目录增加相应读写权限"><a href="#给博客目录增加相应读写权限" class="headerlink" title="给博客目录增加相应读写权限"></a>给博客目录增加相应读写权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> -R a+rw /home/blog </span><br></pre></td></tr></table></figure><h2 id="建立Git仓库"><a href="#建立Git仓库" class="headerlink" title="建立Git仓库"></a>建立Git仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git git init --bare blog.git </span><br></pre></td></tr></table></figure><h2 id="给Git目录增加相应读写权限"><a href="#给Git目录增加相应读写权限" class="headerlink" title="给Git目录增加相应读写权限"></a>给Git目录增加相应读写权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> -R a+rw /home/git </span><br></pre></td></tr></table></figure><h2 id="新建钩子文件"><a href="#新建钩子文件" class="headerlink" title="新建钩子文件"></a>新建钩子文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /home/git/blog.git/hooks/post-receive </span><br></pre></td></tr></table></figure><h2 id="在文件中添加"><a href="#在文件中添加" class="headerlink" title="在文件中添加"></a>在文件中添加</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --work-tree=/home/blog --git-dir=/home/git/blog.git checkout -f master</span><br></pre></td></tr></table></figure><p>这句命令是将存储库<code>/home/git/blog.git</code>强制检出并将文件放置到指定的工作树目录<code>/home/blog</code>最终博客生成的静态文件是存储到&#x2F;home&#x2F;blog文件夹下的</p><h2 id="给钩子文件增加可执行权限"><a href="#给钩子文件增加可执行权限" class="headerlink" title="给钩子文件增加可执行权限"></a>给钩子文件增加可执行权限</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /home/git/blog.git/hooks/post-receive </span><br></pre></td></tr></table></figure><h1 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx -y </span><br></pre></td></tr></table></figure><h2 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx.service </span><br></pre></td></tr></table></figure><p>在浏览器输入ip地址显示：</p><p><img src="/2025/07/21/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20250721190659065.png" alt="image-20250721190659065"></p><p>显示如上，这nginx启动成功</p><h2 id="查看Nginx配置文件路径"><a href="#查看Nginx配置文件路径" class="headerlink" title="查看Nginx配置文件路径"></a>查看Nginx配置文件路径</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -t </span><br></pre></td></tr></table></figure><h2 id="修改Nginx的配置文件"><a href="#修改Nginx的配置文件" class="headerlink" title="修改Nginx的配置文件"></a>修改Nginx的配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf  </span><br></pre></td></tr></table></figure><p>注意：自己主机上的Nginx的配置文件路径</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">       <span class="string">listen</span>       <span class="number">80</span><span class="string">;</span></span><br><span class="line">       <span class="string">listen</span>       [<span class="string">::</span>]<span class="string">:80;</span></span><br><span class="line">       <span class="string">server_name</span>  <span class="string">服务器的IP地址或域名;</span></span><br><span class="line">       <span class="string">root</span>         <span class="string">博客存放的路径;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">       <span class="string">include</span> <span class="string">/etc/nginx/default.d/*.conf;</span></span><br><span class="line"></span><br><span class="line">       <span class="string">error_page</span> <span class="number">404</span> <span class="string">/404.html;</span></span><br><span class="line">       <span class="string">location</span> <span class="string">=</span> <span class="string">/404.html</span> &#123;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="string">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> <span class="string">/50x.html;</span></span><br><span class="line">       <span class="string">location</span> <span class="string">=</span> <span class="string">/50x.html</span> &#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="重启Nginx"><a href="#重启Nginx" class="headerlink" title="重启Nginx"></a>重启Nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart nginx.service </span><br></pre></td></tr></table></figure><h1 id="使用Git-Bash进入Windows端博客目录"><a href="#使用Git-Bash进入Windows端博客目录" class="headerlink" title="使用Git Bash进入Windows端博客目录"></a>使用Git Bash进入Windows端博客目录</h1><h2 id="修改Hexo博客的根目录的配置文件"><a href="#修改Hexo博客的根目录的配置文件" class="headerlink" title="修改Hexo博客的根目录的配置文件"></a>修改Hexo博客的根目录的配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim _config.yaml</span><br></pre></td></tr></table></figure><p>到文件底部修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">   <span class="attr">repo:</span> <span class="string">git@服务器IP或域名:/home/git/blog.git</span></span><br><span class="line">   <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>删除本地window的文件</p><p>文件路径示例：<code>C:\Users\用户名\.ssh</code>，中的<code>known_hosts.old</code>和<code>known_hosts</code>两个文件。</p><h2 id="上传部署"><a href="#上传部署" class="headerlink" title="上传部署"></a>上传部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><p><img src="/2025/07/21/hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/image-20250721191956974.png" alt="image-20250721191956974"></p><p>错误原因可能是仓库太干净了，没有README.md文件</p><p>在服务器的<code>/home/git/blog.git</code>目录下执行下面指令，让它识别出来是master分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;My Hexo Blog&quot;</span> &gt; README.md</span><br></pre></td></tr></table></figure><p>再重新上传部署</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo and Typora: 完美的写作组合</title>
      <link href="/2025/07/20/Hexo%20and%20Typora/"/>
      <url>/2025/07/20/Hexo%20and%20Typora/</url>
      
        <content type="html"><![CDATA[<h1 id="github-Hexo-Typora-博客创建"><a href="#github-Hexo-Typora-博客创建" class="headerlink" title="github + Hexo + Typora 博客创建"></a>github + Hexo + Typora 博客创建</h1><h1 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h1><h2 id="从0开始到部署到github"><a href="#从0开始到部署到github" class="headerlink" title="从0开始到部署到github"></a>从0开始到部署到github</h2><ul><li><a href="https://blog.csdn.net/sinat_37781304/article/details/82729029?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165856718216782391857659%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165856718216782391857659&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-82729029-null-null.142%5Ev33%5Eexperiment_2_v1,185%5Ev2%5Econtrol&utm_term=hexo&spm=1018.2226.3001.4187">hexo史上最全搭建教程</a></li><li><a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></li><li><a href="https://moeci.com/posts/hexo-typora/">Hexo + Typora + 开发Hexo插件 解决图片路径不一致</a></li><li><a href="https://github.com/yiyungent/hexo-asset-img">图片插件开源地址</a></li><li><a href="https://h-sanae.github.io/2025/06/07/%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0/GitHub+Hexo%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA/">本文大部分内容出处</a></li></ul><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><h3 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1. 安装git"></a>1. 安装git</h3><h3 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2. 安装nodejs"></a>2. 安装nodejs</h3><h3 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h3><p>前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹Blog，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。</p><p>输入命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>查看版本命令：<code>hexo -v</code></p><p>初始化hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init myblog</span><br></pre></td></tr></table></figure><p>这个myblog可以自己取什么名字都行，会在当前文件夹（Blog）目录下创建一个myblog文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> myblog <span class="comment">#进入这个myblog文件夹</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹目录下有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">YaoYinjin@LAPTOP-3VRKRFG2 MINGW64 /e/blog/myblog</span><br><span class="line">$ tree -L 1</span><br><span class="line">.</span><br><span class="line">|-- _config.landscape.yml</span><br><span class="line">|-- _config.yml <span class="comment">#博客的配置文件</span></span><br><span class="line">|-- db.json</span><br><span class="line">|-- node_modules   <span class="comment">#依赖包</span></span><br><span class="line">|-- package-lock.json</span><br><span class="line">|-- package.json</span><br><span class="line">|-- public <span class="comment">#存放生成的页面</span></span><br><span class="line">|-- scaffolds <span class="comment">#生成文章的一些模板</span></span><br><span class="line">|-- <span class="built_in">source</span> <span class="comment">#用来存放你的文章</span></span><br><span class="line">`-- themes <span class="comment">#主题</span></span><br></pre></td></tr></table></figure><p>打开hexo的服务，在浏览器输入 localhost:4000 就可以看到你生成的博客了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>使用ctrl+c可以把服务关掉</p><h3 id="4-GitHub创建个人仓库"><a href="#4-GitHub创建个人仓库" class="headerlink" title="4. GitHub创建个人仓库"></a>4. GitHub创建个人仓库</h3><p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名</p><h3 id="5-生成SSH添加到GitHub"><a href="#5-生成SSH添加到GitHub" class="headerlink" title="5. 生成SSH添加到GitHub"></a>5. 生成SSH添加到GitHub</h3><p>回到你的git bash中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;yourname&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure><p>这里的 yourname 输入你的GitHub用户名，youremail 输入你GitHub的邮箱（双引号保留）</p><p>然后创建SSH，一路回车(应该有3次回车)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure><p>终会生成一个文件在用户目录下，打开用户目录，找到<code>.ssh\id_rsa.pub</code>文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key<br>将刚复制的内容粘贴到key那里，title随便填，保存</p><p>测试是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com <span class="comment"># 注意邮箱地址不用改</span></span><br></pre></td></tr></table></figure><p>如果提示Are you sure you want to continue connecting (yes&#x2F;no)? 输入yes，然后会看到：<br>Hi CryingAtNight! You’ve successfully authenticated, but GitHub does not provide shell access.<br>看到这个信息说明SSH已配置成功！</p><h3 id="6-将hexo部署到GitHub"><a href="#6-将hexo部署到GitHub" class="headerlink" title="6. 将hexo部署到GitHub"></a>6. 将hexo部署到GitHub</h3><p>打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为:<br>(YourgithubName就是你的GitHub账户)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><code>branch</code> 填你刚刚创建<code>GitHub</code>仓库的默认分支名称，看下是<code>master</code>还是<code>main</code>，不要填错了，还要注意一下，冒号后面加一个空格</p><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>到此完成，过一会儿就可以在<code>http://yourname.github.io</code> 这个网站看到你的博客了！</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>因为从hexo提交代码时会把你以前的所有代码都删掉，在上传代码到github之前，要记得先把以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的）。</p><h1 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h1><p><a href="http://localhost:4000/">http://localhost:4000</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   <span class="comment">#清除缓存文件 db.json 和已生成的静态文件 public</span></span><br><span class="line">hexo g       <span class="comment">#生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span></span><br><span class="line">hexo d       <span class="comment">#自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span></span><br></pre></td></tr></table></figure><p>常用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;postName&quot;</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">&quot;pageName&quot;</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span></span><br><span class="line">hexo deploy <span class="comment">#部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure><p>缩写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><p>组合命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g <span class="comment">#生成并本地预览</span></span><br><span class="line">hexo d -g <span class="comment">#生成并上传</span></span><br></pre></td></tr></table></figure><h1 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h1><p><a href="https://github.com/Fechin/hexo-theme-diaspora">diaspora主题</a><br><a href="https://butterfly.js.org/posts/4aa8abbe/">Butterfly 文檔(三) 主題配置 | Butterfly</a></p><h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><p><a href="https://blog.csdn.net/qq_36759224/article/details/85420403">Hexo博客优化之博客美化系列</a></p><h2 id="根目录全局配置文件-config-yml"><a href="#根目录全局配置文件-config-yml" class="headerlink" title="根目录全局配置文件_config.yml"></a>根目录全局配置文件_config.yml</h2><p>1、<strong>所有的配置“:”符号后面都要带空格，否则执行本地测试直接失败。</strong><br>2、language是设置语言。zh-Hans是中文。<br>3、如果设置zh-Hans后仍出现乱码问题。需要更改文件的字符编码集为UTF-8，方法很多。</p><h1 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h1><p>定位到我们的hexo根目录，执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &#x27;my-first-blog&#x27;</span><br></pre></td></tr></table></figure><p>hexo会帮我们在<code>_posts</code>下生成相关md文件<br>我们只需要打开这个文件就可以开始写博客了<br>当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间<br>一般完整格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: postName #文章页面上的显示名称，一般是中文</span><br><span class="line">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</span><br><span class="line">categories: 默认分类 #分类</span><br><span class="line">tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class="line">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span><br><span class="line">---</span><br><span class="line">以下是正文</span><br></pre></td></tr></table></figure><h2 id="如何创建草稿文件夹及文章"><a href="#如何创建草稿文件夹及文章" class="headerlink" title="如何创建草稿文件夹及文章"></a>如何创建草稿文件夹及文章</h2><ol><li><p><strong>手动创建</strong><br>你可以手动在 <code>source</code> 目录下创建 <code>_drafts</code> 文件夹，然后在其中添加 <code>.md</code> 文件作为草稿。</p></li><li><p><strong>使用命令创建</strong><br>使用 Hexo 提供的命令创建草稿，系统会自动生成 <code>_drafts</code> 文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft <span class="string">&quot;我的草稿文章&quot;</span></span><br></pre></td></tr></table></figure><p>执行后，Hexo 会在 <code>source/_drafts</code> 下创建 <code>我的草稿文章.md</code> 文件。</p></li><li><p><strong>预览草稿</strong><br>启动服务器时添加 <code>--draft</code> 参数，可预览草稿文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure></li><li><p><strong>发布草稿</strong>：<br>若草稿完成，可通过以下命令将其转为正式文章（移到 <code>source/_posts</code> 目录）：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish draft <span class="string">&quot;草稿标题&quot;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2025/07/14/docker/"/>
      <url>/2025/07/14/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="docker介绍"><a href="#docker介绍" class="headerlink" title="docker介绍"></a>docker介绍</h1><p>在安装部署程序过程中存在的问题：</p><ol><li><p>版本依赖</p><ul><li>典型案例：java环境有很多的jre版本</li></ul></li><li><p>环境依赖</p><ul><li>典型案例：oracle安装需要大量支撑包</li></ul></li><li><p>安全风险</p><ul><li>典型案例：多个应用无法安装一个服务器</li></ul></li><li><p>性能瓶颈</p><ul><li>典型案例：硬件设备扩展困难</li></ul></li></ol><h2 id="什么是虚拟化技术"><a href="#什么是虚拟化技术" class="headerlink" title="什么是虚拟化技术"></a>什么是虚拟化技术</h2><p>在计算机技术中，虚拟化<strong>是一种资源管理技术</strong>，是将计算机的各种实体资源，如服务器，网络，内存以及存储等予以抽象转换后呈现出来，<strong>打破实体实体结构间不可切割的障碍</strong>，使用户可以用比原本的组态更好的方式来应用这些资源</p><h2 id="docekr容器技术的发展"><a href="#docekr容器技术的发展" class="headerlink" title="docekr容器技术的发展"></a>docekr容器技术的发展</h2><ul><li>Docker是基于Go语言实现的开原容器项目它诞生于2013年年初.现在主流的操作系统包括引inux各大发行版本，Mac<br>OS,windows等都支持Docker..各大云服务提供商也纷纷推出了基于Docker的服务</li><li>Docker的构想是要实现”<strong>Build ship and run any App,Anywhere</strong>‘“即通过对应用的封装(packaging),分发(distribution),部署(deploymen).运行(runtime)生命周期进行管理，达到应用组件级别的”<strong>一次封装，到处运行</strong>“的目的</li><li>这些应用组件即可以是一个Wb应用，一个编译环境，也可以是套数据库平台服务，甚至是一个操作系统或集群.可以说Dockeri首次为应用的开发，运行和部署提供了”一站式”的实用解决方案</li></ul><h2 id="docker本质"><a href="#docker本质" class="headerlink" title="docker本质"></a>docker本质</h2><p>Docker的诞生基于linux的容器技术(Linux Containers,LXC)</p><ul><li>容器将应用进行沙盒封装，进行隔离，并独立分配硬件资源。</li><li>容器在核心CPU本地运行指令，不需要任何专门的解释机制.</li></ul><p>Docker在LXC基础上，优化了容器的使用体验</p><ul><li>Docker指令让用户无须关注底层操作，直接管理和使用容器</li><li>Dock通过引入分层文件系统和镜像机制，降低了迁移难度</li></ul><h2 id="docekr容器技术的优势"><a href="#docekr容器技术的优势" class="headerlink" title="docekr容器技术的优势"></a>docekr容器技术的优势</h2><ol><li>更快的交付和部署</li><li>更高效的资源利用</li><li>更轻松的迁移和扩展</li><li>良好的隔离性</li><li>完整的技术生态</li></ol><h2 id="docekr容器技术和VMware的比较"><a href="#docekr容器技术和VMware的比较" class="headerlink" title="docekr容器技术和VMware的比较"></a>docekr容器技术和VMware的比较</h2><table><thead><tr><th align="center"></th><th align="center">docker</th><th align="center">VMware</th></tr></thead><tbody><tr><td align="center">启动</td><td align="center">秒级</td><td align="center">分钟级</td></tr><tr><td align="center">性能</td><td align="center">接近宿主机</td><td align="center">较弱</td></tr><tr><td align="center">资源</td><td align="center">资源占用小</td><td align="center">资源占用大</td></tr><tr><td align="center">隔离</td><td align="center">安全隔离</td><td align="center">完全隔离</td></tr></tbody></table><h1 id="docker扩展组件"><a href="#docker扩展组件" class="headerlink" title="docker扩展组件"></a>docker扩展组件</h1><ol><li><p><strong>Docker  Machine</strong></p><p>Docker Machine 是 Docker 官方提供的一个命令行工具，用于在<strong>远程虚拟主机上安装和管理</strong> <strong>Docker</strong>。它简化了在不同平台（如虚拟机、云服务等）上部署 Docker 环境的流程，可以快速创建、管理多个虚拟主机上的 Docker 环境，提供了一种便捷的方式来搭建分布式的 Docker 部署环境。</p></li><li><p><strong>Docker Swarm</strong></p><p>DockerSwarm是Docker官方提供的<strong>容器编排工具</strong>，用于<strong>管理多个Docker主机并将它们组成一个虚拟的容器集群</strong>，实现容器的自动化部署、伸缩和管理。通过 Docker Swarm，用户可以轻松地在多个主机上部署容器应用，并在需要时进行扩展或收缩，实现高可用性和负载均衡。</p></li><li><p><strong>Docker  Compose</strong></p><p>Docker Compose是Docker官方提供的工具，用于<strong>定义和运行多个容器的应用程序</strong>。通过一个简单的YAML文件，可以定义应用程序的服务、网络和卷等配置并使用命令启动、停止、构建和管理整个应用程序的容器。Docker Compose简化了容器化应用程序的部署和管理流程，使开发人员可以更快速地搭建和运行复杂的多容器应用。</p></li><li><p><strong>Docker File</strong></p><p>Dockerfile是用于<strong>构建Docker镜像的文本文件</strong>，通过Dockerfile可以定义镜像的构建过程和内容。在Dockerfile中可以指定基础镜像、运行命令、复制文件、设置环境变量等操作，最终通过构建命令将Dockerfile转换为可执行的Docker镜像。使用Dockerfile可以实现自动化、可重复的镜像构建过程，帮助开发人员快速、方便地创建定制化的镜像。</p></li><li><p><strong>kubernetes</strong>  </p><p>Kubernetes最初是由Google公司发起并开源的<strong>容器编排平台</strong>，用于自动部署、扩展和管理容器化应用程序。它提供了一个高度可扩展的集群管理工具，支持多个容器化应用程序的部署、更新、维护和伸缩。Kubernetes提供了强大的自动化功能，帮助用户简化容器化应用程序的部署和管理，提高应用程序的可靠性和可扩展性。</p></li></ol><h1 id="docker安装（CentOS）"><a href="#docker安装（CentOS）" class="headerlink" title="docker安装（CentOS）"></a>docker安装（CentOS）</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br><span class="line"><span class="comment">#关闭selinux</span></span><br><span class="line">vim /etc/selinux/config</span><br><span class="line"><span class="comment"># 将SELINUX=enforcing改为</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1.拷贝一份新的阿里云的 下载源 到 /etc/yum.repos.d/下 </span></span><br><span class="line"><span class="built_in">mv</span> /root/CentOS-Base.repo /etc/yum.repos.d/</span><br><span class="line"><span class="comment">#2.清空原下载池</span></span><br><span class="line"><span class="built_in">sudo</span> yum clean all</span><br><span class="line"><span class="comment">#3. 加载新源</span></span><br><span class="line"><span class="built_in">sudo</span> yum makecache</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装工具包</span></span><br><span class="line">yum install -y epel-release</span><br><span class="line"><span class="comment">#安装基础软件</span></span><br><span class="line">yum install -y net-tools rsync vim wget ntp</span><br><span class="line"></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加阿里yum源</span></span><br><span class="line">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装docker</span></span><br><span class="line">yum -y install docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动docker</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看状态</span></span><br><span class="line">systemctl status docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看本地镜像列表</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"><span class="comment">#镜像加速</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"><span class="comment">#添加内容</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://dockerhub.icu&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.registry.cyou&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker-cf.registry.cyou&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://dockercf.jsdelivr.fyi&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.jsdelivr.fyi&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://dockertest.jsdelivr.fyi&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://mirror.aliyuncs.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://dockerproxy.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://mirror.baidubce.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.m.daocloud.io&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.nju.edu.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://mirror.iscas.ac.cn&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.rainbond.cc&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#使文件生效</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#验证 docker 是否安装成功并在容器中执行一个测试的镜像。</span></span><br><span class="line"><span class="built_in">sudo</span> docker run hello-world</span><br></pre></td></tr></table></figure><p><img src="/2025/07/14/docker/image-20250716110709919.png" alt="image-20250716110709919"></p><h2 id="从镜像仓库获取"><a href="#从镜像仓库获取" class="headerlink" title="从镜像仓库获取"></a>从镜像仓库获取</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis <span class="comment">#默认最新版本latest</span></span><br><span class="line">docker pull mysql:5.7 <span class="comment">#指定版本</span></span><br><span class="line">docker pull tomcat:9.0.44-jdk8</span><br><span class="line"></span><br><span class="line">docker rmi mysql:5.7 <span class="comment">#删除镜像</span></span><br><span class="line">docker rmi -f mysql:5.7 <span class="comment">#强制删除</span></span><br></pre></td></tr></table></figure><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看容器列表</span></span><br><span class="line">docker container <span class="built_in">ls</span> -a</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.创建容器</span></span><br><span class="line">docker create  centos </span><br><span class="line"></span><br><span class="line"><span class="comment">#2.创建并启动容器</span></span><br><span class="line">docker run -d tomcat:9.0.44-jdk8</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.生成容器常用参数</span></span><br><span class="line">docker run --name mysql_new -d -p 3306:3306 \</span><br><span class="line">--net mysql-test \</span><br><span class="line">-v /usr/mysql/conf:/etc/my.cnf.d \ </span><br><span class="line">-v /usr/mysql/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">--restart always \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">--network-alias mysql \</span><br><span class="line">mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment">#1.进入容器命令</span></span><br><span class="line">docker <span class="built_in">exec</span> -it  mysql_new bash</span><br><span class="line">docker attach mysql_new</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.删除容器</span></span><br><span class="line">docker container <span class="built_in">rm</span> mysql_new</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.启停容器</span></span><br><span class="line">docker container start|stop|restart mysql_new</span><br><span class="line">docker container pause|unpause mysql_new</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.容器文件传输(拷出)</span></span><br><span class="line">docker container <span class="built_in">cp</span> mysql_new:/root/test /root/test</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.导出容器</span></span><br><span class="line">docker container <span class="built_in">export</span>  -o /root/mysql.tar mysql_new</span><br></pre></td></tr></table></figure><h2 id="拉取-Tomcat-镜像并启动容器"><a href="#拉取-Tomcat-镜像并启动容器" class="headerlink" title="拉取 Tomcat 镜像并启动容器"></a>拉取 Tomcat 镜像并启动容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yum install -y unzip</span><br><span class="line">unzip webroot.zip <span class="comment">#解压应用包</span></span><br><span class="line"></span><br><span class="line">docker pull tomcat:9.0.44-jdk8 <span class="comment">#之前已执行可略过</span></span><br><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">--name=fr_tomcat \</span><br><span class="line">-p 8888:8080 \</span><br><span class="line">-v /root/webroot:/usr/local/tomcat/webapps/webroot \</span><br><span class="line">tomcat:9.0.44-jdk8</span><br></pre></td></tr></table></figure><p><img src="/2025/07/14/docker/image-20250716111050408.png" alt="image-20250716111050408"></p><h1 id="docekr使用"><a href="#docekr使用" class="headerlink" title="docekr使用"></a>docekr使用</h1><h2 id="1-docekr-image"><a href="#1-docekr-image" class="headerlink" title="1.docekr image"></a>1.docekr image</h2><h3 id="镜像获取"><a href="#镜像获取" class="headerlink" title="镜像获取"></a>镜像获取</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.从镜像仓库获取</span></span><br><span class="line">    docker image pull tomcat:9.0.44-jdk8</span><br><span class="line"><span class="comment">#2.从tar压缩包获取 </span></span><br><span class="line">    docker image load  -i /root/oracle.tar</span><br><span class="line"><span class="comment">#3.从export导出包获取</span></span><br><span class="line">    docker image import mysql_image.tar mysql:5.7</span><br><span class="line"><span class="comment">#4.从dockerFile 文件构建</span></span><br><span class="line">    docker image build -t centos7:7 /root/Dockerfile</span><br><span class="line"><span class="comment">#5.从container容器转化</span></span><br><span class="line">    docker commit mysqlmaster mysql_master:5.7</span><br></pre></td></tr></table></figure><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.保存迁移镜像</span></span><br><span class="line">    docker image save  -o /root/tomcat.tar tomcat:9.0.44-jdk8</span><br><span class="line"><span class="comment">#2.删除镜像 </span></span><br><span class="line">    docker image <span class="built_in">rm</span> mysql:5.7</span><br><span class="line"><span class="comment">#3.删除无用镜像</span></span><br><span class="line">    docker image prune</span><br><span class="line"><span class="comment">#4.上传镜像到仓库</span></span><br><span class="line">    docker image push tomcat:9.0.44-jdk8</span><br></pre></td></tr></table></figure><h3 id="镜像查看"><a href="#镜像查看" class="headerlink" title="镜像查看"></a>镜像查看</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.查看镜像列表</span></span><br><span class="line">    docker images <span class="built_in">ls</span></span><br><span class="line"><span class="comment">#2.显示一个或多个映像的详细信息 </span></span><br><span class="line">    docker image inspect mysql:5.7</span><br><span class="line"><span class="comment">#3.到仓库检索镜像</span></span><br><span class="line">    docker  search  mysql</span><br><span class="line"><span class="comment">#4.上传镜像到仓库</span></span><br><span class="line">    docker image push tomcat:9.0.44-jdk8</span><br><span class="line"><span class="comment">#5.查看镜像历史</span></span><br><span class="line">    docker image <span class="built_in">history</span> mysql:5.7</span><br></pre></td></tr></table></figure><h3 id="镜像分层结构"><a href="#镜像分层结构" class="headerlink" title="镜像分层结构"></a>镜像分层结构</h3><p><img src="/2025/07/14/docker/image-20250714151231302.png" alt="image-20250714151231302"></p><h2 id="2-Docker-container-容器"><a href="#2-Docker-container-容器" class="headerlink" title="2.Docker container 容器"></a>2.<strong>Docker container</strong> <strong>容器</strong></h2><h2 id="生成容器"><a href="#生成容器" class="headerlink" title="生成容器"></a>生成容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.创建容器</span></span><br><span class="line">    docker create  centos  </span><br><span class="line"><span class="comment">#2.创建并启动容器 </span></span><br><span class="line">    docker run -d tomcat:9.0.44-jdk8</span><br><span class="line"><span class="comment">#3.生成容器常用参数</span></span><br><span class="line">docker run --name mysql_new -d -p 3306:3306 \</span><br><span class="line">--net mysql-test \</span><br><span class="line">-v /usr/mysql/conf:/etc/my.cnf.d \</span><br><span class="line">-v /usr/mysql/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">--restart always \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">--network-alias mysql \</span><br><span class="line">mysql:5.7</span><br></pre></td></tr></table></figure><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.进入容器命令</span></span><br><span class="line">    docker <span class="built_in">exec</span> -it  mysql_new bash</span><br><span class="line">    docker attach mysql_new</span><br><span class="line"><span class="comment">#2.删除容器 </span></span><br><span class="line">    docker container <span class="built_in">rm</span> mysql_new</span><br><span class="line"><span class="comment">#3.启停容器</span></span><br><span class="line">    docker container start|stop|restart mysql_new</span><br><span class="line">    docker container pause|unpause mysql_new</span><br><span class="line"><span class="comment">#4.容器文件传输(拷出)</span></span><br><span class="line">    docker container <span class="built_in">cp</span> mysql_new:/root/test /root/test</span><br><span class="line"><span class="comment">#5.导出容器</span></span><br><span class="line">    docker container <span class="built_in">export</span>  -o /root/mysql.tar mysql_new</span><br></pre></td></tr></table></figure><h3 id="容器查看"><a href="#容器查看" class="headerlink" title="容器查看"></a>容器查看</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.查看容器列表</span></span><br><span class="line">    docker container <span class="built_in">ls</span> -a</span><br><span class="line"><span class="comment">#2.查看容器详情 </span></span><br><span class="line">    docker container inspect mysql_new</span><br><span class="line"><span class="comment">#3.查看容器执行日志</span></span><br><span class="line">    docker container logs mysql_new</span><br><span class="line"><span class="comment">#4.查看容器进程</span></span><br><span class="line">    docker container ps mysql_new</span><br><span class="line">    docker container top mysql_new</span><br><span class="line"><span class="comment">#6.查看容器资源占用</span></span><br><span class="line">    docker container stats</span><br><span class="line"><span class="comment">#5.查看docker 网络\卷</span></span><br><span class="line">    docker network <span class="built_in">ls</span></span><br><span class="line">    docker volume <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><h2 id="docker-network网络"><a href="#docker-network网络" class="headerlink" title="docker network网络"></a>docker network网络</h2><h3 id="docker端口"><a href="#docker端口" class="headerlink" title="docker端口"></a>docker端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.随机暴露容器所有端口(危险)</span></span><br><span class="line">    docker run -P -it ubuntu /bin/bash</span><br><span class="line"><span class="comment">#2.将容器指定端口随机映射到宿主机一个端口上 </span></span><br><span class="line">    docker run -P 80 -it ubuntu /bin/bash</span><br><span class="line"><span class="comment">#3.将容器指定端口指定映射到宿主机的一个端口上</span></span><br><span class="line">    docker run -p 8000:80 -it ubuntu /bin/bash</span><br><span class="line"><span class="comment">#4.将容器ip和端口，随机映射到宿主机上</span></span><br><span class="line">    docker run -P 192.168.0.100::80 -it ubuntu /bin/bash</span><br><span class="line"><span class="comment">#5.将容器ip和端口，指定映射到宿主机上</span></span><br><span class="line">    docker run -p 192.168.0.100:8000:80 -it ubuntu /bin/bash</span><br><span class="line"><span class="comment">#6.指定协议</span></span><br><span class="line">    docker run -d -p 8080:80/tcp nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2025/07/14/docker/image-20250714151751936.png" alt="image-20250714151751936"></p><h3 id="docker网络"><a href="#docker网络" class="headerlink" title="docker网络"></a>docker网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.使用host网络</span></span><br><span class="line">    docker container run --network=host nginx</span><br><span class="line"><span class="comment">#2.使用macvlan 网络 </span></span><br><span class="line">  <span class="comment">#创建:</span></span><br><span class="line">    docker network create -d macvlan --subnet=192.168.10.0/24 \</span><br><span class="line">--gateway=192.168.100.1  -o parent=ens33 mac1</span><br><span class="line">  <span class="comment">#使用:</span></span><br><span class="line">    docker run --ip =192.168.100.2 --network mac1 nginx</span><br><span class="line"><span class="comment">#3.使用自定义桥接网络</span></span><br><span class="line">  <span class="comment">#创建:</span></span><br><span class="line">    docker network create --driver bridge \</span><br><span class="line">--subnet 192.168.10.0/24 --gateway 192.168.10.1 mybridge</span><br><span class="line">  <span class="comment">#使用:</span></span><br><span class="line">    docker run --network=mybridge -d nginx</span><br></pre></td></tr></table></figure><h1 id="docker-compose介绍以及应用"><a href="#docker-compose介绍以及应用" class="headerlink" title="docker compose介绍以及应用"></a>docker compose介绍以及应用</h1><p>​Docker Compose 是 Docker 官方推出的工具，用于<strong>定义和运行多容器 Docker 应用</strong>。通过单个 YAML 文件（通常命名为 <code>docker-compose.yml</code>），可以配置应用的服务、网络和卷，一键启动或停止整个应用栈，无需逐个操作容器。<br>Docker Compose 是管理多容器应用的必备工具，通过 YAML 配置简化部署流程，尤其适合开发和测试环境。对于生产环境，可结合 Kubernetes 等更强大的编排工具。</p><h2 id="yaml文件编辑规范"><a href="#yaml文件编辑规范" class="headerlink" title="yaml文件编辑规范"></a>yaml文件编辑规范</h2><ul><li>第一：YAML是一种标记性语言，类似于json数据描述语言，可读性高；　</li><li>第二：YAML数据结构通过缩进来表示，连续项目通过减号表示，键值对用冒号分隔，数组使用中括号<code>[]</code>括起来，bash用花括号<code>&#123;&#125;</code>括起来；　</li><li>第三：不支持制表符TAB缩进，只能使用空格缩进；</li><li>第四：字符后缩进一个空格(如冒号、逗号、横杠后须加空格)；</li><li>第五：使用#号表示注释；</li><li>第六：如果包含特殊字符用单引号<code>&#39; &#39;</code> 标记为普通字符,用双引号表示特殊字符本身的意思,布尔值必须使用双引号<code>&quot; &quot;</code>括起来；</li><li>第七：YAML 区分大小写；</li></ul><h2 id="docker-compose-yaml文件指令"><a href="#docker-compose-yaml文件指令" class="headerlink" title="docker compose yaml文件指令"></a>docker compose yaml文件指令</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">version：指定此yml文件基于的compose的版本</span></span><br><span class="line"><span class="string">services：指定创建容器的服务选项</span></span><br><span class="line"><span class="comment">#服务名：例如nginx等</span></span><br><span class="line"><span class="attr">network:</span> <span class="string">网络服务创建</span></span><br><span class="line"><span class="attr">volume:</span> <span class="string">数据卷服务创建</span></span><br><span class="line"><span class="string">hostname：容器主机名</span></span><br><span class="line"><span class="string">build</span> <span class="string">：指定构建镜像上下文路径</span></span><br><span class="line"><span class="string">context：上下文路径</span></span><br><span class="line"><span class="string">dockerfile：指定构建镜像的</span> <span class="string">Dockerfile</span> <span class="string">文件名</span></span><br><span class="line"><span class="string">ports：暴露容器端口，与-p相同，但端口不能低于60；例如：-</span> <span class="number">1234</span><span class="string">:80</span></span><br><span class="line"><span class="string">networks：加入顶级networks下配置的网络</span></span><br><span class="line"><span class="string">deploy：指定部署和运行服务相关配置，只能在Swarm模式使用</span></span><br><span class="line"><span class="string">volumes：挂载宿主机路径或命令卷</span></span><br><span class="line"><span class="string">image：指定容器运行的镜像</span></span><br><span class="line"><span class="string">command：执行命令，覆盖默认命令</span></span><br><span class="line"><span class="string">container_name：指定容器名称，由于容器名称是唯一的，如果指定自定义名称，则无法scale（扩展）</span></span><br><span class="line"><span class="string">environment：添加环境变量</span></span><br><span class="line"><span class="string">restart：重启策略，重启策略是no，always，no-failure，unless-stoped</span></span><br><span class="line"><span class="literal">no</span><span class="string">，默认策略，在容器退出时不重启容器。</span></span><br><span class="line"><span class="string">on-failure，在容器非正常退出时（退出状态非0），才会重启容器。可加(:3)</span> <span class="string">规定重启次数</span></span><br><span class="line"><span class="string">always，在容器退出时总是重启容器。</span></span><br><span class="line"><span class="string">unless-stopped，在容器退出时总是重启容器</span></span><br><span class="line"><span class="string">networks：配置网络，指定网卡设备等</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="compose命令"><a href="#compose命令" class="headerlink" title="compose命令"></a>compose命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.创建和启动服务</span></span><br><span class="line">docker compose up</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.删除和停止服务</span></span><br><span class="line">docker compose down</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.服务启动/停止/重启</span></span><br><span class="line">docker compose start/stop/restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.指定启动数量</span></span><br><span class="line">docker compose up --scale master=2 --scale slave=2</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.查看日志</span></span><br><span class="line">docker compose logs [ -f 容器名称 --<span class="built_in">tail</span> =50 ]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="mysql主从部署"><a href="#mysql主从部署" class="headerlink" title="mysql主从部署"></a>mysql主从部署</h1><h2 id="日志介绍"><a href="#日志介绍" class="headerlink" title="日志介绍"></a>日志介绍</h2><p><img src="/2025/07/14/docker/image-20250716105104999.png" alt="image-20250716105104999"></p><h3 id="binlog-日志、undo-日志、redo-日志、relay-日志的作用与区别："><a href="#binlog-日志、undo-日志、redo-日志、relay-日志的作用与区别：" class="headerlink" title="binlog 日志、undo 日志、redo 日志、relay 日志的作用与区别："></a>binlog 日志、undo 日志、redo 日志、relay 日志的作用与区别：</h3><p>在 MySQL 主从部署中，以下是几种关键日志的作用及区别：</p><h3 id="binlog-日志（二进制日志）"><a href="#binlog-日志（二进制日志）" class="headerlink" title="binlog 日志（二进制日志）"></a><strong>binlog 日志（二进制日志）</strong></h3><ul><li><strong>作用</strong>：记录数据库执行的变更（如 INSERT、UPDATE、DELETE 等），用于主从复制和数据恢复。</li><li><strong>主从复制中的角色</strong>：主库将 binlog 发送给从库，从库通过解析 binlog 来同步数据。</li><li>特点：<ul><li>逻辑格式（记录 SQL 语句）或二进制格式（记录物理变更）。</li><li>可通过<code>log_bin</code>参数启用，日志文件通常位于<code>datadir</code>目录下（如<code>mysql-bin.xxxxxx</code>）。</li></ul></li></ul><h3 id="undo-日志（回滚日志）"><a href="#undo-日志（回滚日志）" class="headerlink" title="undo 日志（回滚日志）"></a><strong>undo 日志（回滚日志）</strong></h3><ul><li><strong>作用</strong>：记录事务执行前的数据状态，用于回滚未提交的事务或 MVCC（多版本并发控制）。</li><li><strong>主从复制中的角色</strong>：不直接参与复制，仅用于本地事务回滚。</li><li>特点：<ul><li>保证事务的原子性（Atomicity）和一致性（Consistency）。</li><li>存储在<code>undo tablespace</code>中，可通过<code>innodb_undo_tablespaces</code>参数配置。</li></ul></li></ul><h3 id="redo-日志（重做日志）"><a href="#redo-日志（重做日志）" class="headerlink" title="redo 日志（重做日志）"></a><strong>redo 日志（重做日志）</strong></h3><ul><li><strong>作用</strong>：记录事务对数据页的物理修改，用于崩溃恢复（保证已提交事务不丢失）。</li><li><strong>主从复制中的角色</strong>：不直接参与复制，确保主库数据持久化后才通知从库。</li><li>特点：<ul><li>顺序写入，效率高，避免随机 IO。</li><li>存储在<code>ib_logfile*</code>文件中，可通过<code>innodb_log_files_in_group</code>和<code>innodb_log_file_size</code>参数配置。</li></ul></li></ul><h3 id="relay-日志（中继日志）"><a href="#relay-日志（中继日志）" class="headerlink" title="relay 日志（中继日志）"></a><strong>relay 日志（中继日志）</strong></h3><ul><li><strong>作用</strong>：从库用于存储从主库接收的 binlog 事件，供 SQL 线程执行。</li><li><strong>主从复制中的角色</strong>：从库 IO 线程将主库的 binlog 写入 relay log，SQL 线程从中读取并执行。</li><li>特点：<ul><li>临时存储，执行后可删除。</li><li>文件通常位于<code>datadir</code>目录下（如<code>relay-bin.xxxxxx</code>），可通过<code>relay_log</code>参数指定路径。</li></ul></li></ul><h3 id="主从复制流程中的协作"><a href="#主从复制流程中的协作" class="headerlink" title="主从复制流程中的协作"></a><strong>主从复制流程中的协作</strong></h3><ol><li><strong>主库</strong>：执行事务 → 写入 binlog → 发送 binlog 到从库。</li><li>从库：<ul><li>IO 线程接收 binlog → 写入 relay log。</li><li>SQL 线程读取 relay log → 执行 SQL 语句 → 更新数据。</li><li>写入 redo&#x2F;undo 日志保证本地事务的持久性和一致性。</li></ul></li></ol><h3 id="总结对比"><a href="#总结对比" class="headerlink" title="总结对比"></a><strong>总结对比</strong></h3><table><thead><tr><th>日志类型</th><th>用途</th><th>主从复制中的角色</th><th>存储位置</th></tr></thead><tbody><tr><td><strong>binlog</strong></td><td>记录变更，用于复制和恢复</td><td>主库生成，从库同步</td><td>主库<code>mysql-bin.*</code></td></tr><tr><td><strong>undo</strong></td><td>回滚事务，支持 MVCC</td><td>不参与复制</td><td><code>undo tablespace</code></td></tr><tr><td><strong>redo</strong></td><td>崩溃恢复，保证持久化</td><td>确保主库数据持久化</td><td><code>ib_logfile*</code></td></tr><tr><td><strong>relay</strong></td><td>临时存储主库 binlog，供从库执行</td><td>从库接收主库 binlog 后生成</td><td>从库<code>relay-bin.*</code></td></tr></tbody></table><p>合理配置这些日志对主从复制的性能和可靠性至关重要。例如，调整 binlog 格式（<code>binlog_format</code>）、redo 日志大小（<code>innodb_log_file_size</code>）等参数可优化复制效率。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p><img src="/2025/07/14/docker/image-20250716105032843.png" alt="image-20250716105032843"></p><h3 id="docker-compose-yaml"><a href="#docker-compose-yaml" class="headerlink" title="docker-compose.yaml"></a>docker-compose.yaml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2.27&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql_m:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql_m</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">mysql_m</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3336</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_net</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./my_m.conf:/etc/mysql/conf.d/my.cnf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_m_volume:/var/lib/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_m_volume:/var/log/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span> </span><br><span class="line">  </span><br><span class="line">  <span class="attr">mysql_s:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql_s</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">mysql_s</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3337</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_net</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./my_s.conf:/etc/mysql/conf.d/my.cnf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_s_volume:/var/lib/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_s_volume:/var/log/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=root</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">mysql_net:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mysql_net</span></span><br><span class="line">    <span class="attr">ipam:</span></span><br><span class="line">      <span class="attr">driver:</span> <span class="string">default</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">subnet:</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.0</span><span class="string">/24</span></span><br><span class="line">          <span class="attr">gateway:</span> <span class="number">192.168</span><span class="number">.100</span><span class="number">.1</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql_m_volume:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mysql_m_volume</span></span><br><span class="line">  <span class="attr">mysql_s_volume:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mysql_s_volume</span></span><br></pre></td></tr></table></figure><h3 id="修改主服务配置文件：my-m-conf"><a href="#修改主服务配置文件：my-m-conf" class="headerlink" title="修改主服务配置文件：my_m.conf"></a>修改主服务配置文件：my_m.conf</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">mysqld</span>]</span><br><span class="line"> <span class="comment">#主服务器唯一ID</span></span><br><span class="line"><span class="string">server_id=1</span></span><br><span class="line"> <span class="comment">#启用二进制日志</span></span><br><span class="line"><span class="string">log-bin=mysql-bin</span></span><br><span class="line"><span class="comment">#上面两行最重要，下面的可以不配置# 设置不要复制的数据库(可设置多个)</span></span><br><span class="line"><span class="string">binlog-ignore-db=mysql</span></span><br><span class="line"><span class="string">binlog-ignore-db=information_schema</span></span><br><span class="line"> <span class="comment">#设置需要复制的数据库 需要复制的主数据库名字</span></span><br><span class="line"><span class="string">binlog-do-db=test</span></span><br><span class="line"> <span class="comment">#设置logbin格式 Row、Statement、Mixed</span></span><br><span class="line"><span class="string">binlog_format=STATEMENT</span></span><br><span class="line"> <span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks 关闭配置外存储</span></span><br><span class="line"><span class="string">symbolic-links=0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改从服务配置文件：my-s-conf"><a href="#修改从服务配置文件：my-s-conf" class="headerlink" title="修改从服务配置文件：my_s.conf"></a>修改从服务配置文件：my_s.conf</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">mysqld</span>]</span><br><span class="line"><span class="string">server-id=2</span></span><br><span class="line"><span class="string">relay-log=relay-bin</span> <span class="comment">#启用二进制日志</span></span><br><span class="line"><span class="string">log-bin=mysql-bin</span> <span class="comment">#上面两行最重要，下面的可以不配置# 设置不要复制的数据库(可设置多个)</span></span><br><span class="line"><span class="comment"># read_only=1 #从服务器只读</span></span><br><span class="line"><span class="string">slave-skip-errors=</span> <span class="number">1032</span><span class="string">,1062,1007,1050</span> <span class="comment">#忽略报错</span></span><br></pre></td></tr></table></figure><h3 id="执行验证"><a href="#执行验证" class="headerlink" title="执行验证"></a>执行验证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> mysql_service/</span><br><span class="line">docker compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入主机容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql_m bash</span><br><span class="line"><span class="comment"># 登录mysql</span></span><br><span class="line">mysql -uroot -proot</span><br><span class="line"></span><br><span class="line">show master status;</span><br><span class="line"><span class="comment"># 出现以下内容说明my_m.conf、my_s.conf配置单已生效</span></span><br></pre></td></tr></table></figure><p><img src="/2025/07/14/docker/image-20250716110119283.png" alt="image-20250716110119283"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个账号（用户名：worker 密码：root）</span></span><br><span class="line">create user <span class="string">&#x27;worker&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified by <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="comment"># 给权限</span></span><br><span class="line">grant replication slave,replication client on *.* to <span class="string">&#x27;worker&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"><span class="comment"># 建库</span></span><br><span class="line">create database <span class="built_in">test</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要在执行以下配置前再查看一下状态（会变）</span></span><br><span class="line">show master status;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新开一个终端窗口进入从机容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql_s bash</span><br><span class="line"><span class="comment"># 登录mysql</span></span><br><span class="line">mysql -uroot -proot</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.登录从服务器配置执行</span></span><br><span class="line">CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;mysql_m&#x27;</span>,</span><br><span class="line">MASTER_USER=<span class="string">&#x27;worker&#x27;</span>,</span><br><span class="line">MASTER_PASSWORD=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">MASTER_PORT=3306, </span><br><span class="line">MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000001&#x27;</span>,MASTER_LOG_POS=778;</span><br><span class="line"></span><br><span class="line"><span class="comment">#起服务</span></span><br><span class="line">start slave;</span><br><span class="line"><span class="comment">#查看状态</span></span><br><span class="line">show slave status\G;</span><br><span class="line"></span><br><span class="line"><span class="comment">#从机建库不会同步，需要先手动建库</span></span><br><span class="line">create database <span class="built_in">test</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#在主机test库中键一张表</span></span><br><span class="line">use <span class="built_in">test</span>;</span><br><span class="line">create table <span class="built_in">test</span> (<span class="built_in">id</span> int);</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line"><span class="comment">#在从机中验证，会同步创建该表</span></span><br><span class="line">use <span class="built_in">test</span>;</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line"><span class="comment">#若之前同步失败，修正后可用以下命令重新同步</span></span><br><span class="line">stop slave;</span><br><span class="line">reset master;</span><br><span class="line">start slave;</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看状态</span></span><br><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure><p><img src="/2025/07/14/docker/image-20250716110205604.png" alt="image-20250716110205604"></p><h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><h2 id="redis介绍"><a href="#redis介绍" class="headerlink" title="redis介绍"></a>redis介绍</h2><p>​    REmote DIctionary Server(Redis) 是一个由 Salvatore Sanfilippo 写的 <strong>key-value 存储系统</strong>，是跨平台的<strong>非关系型数据库</strong>。</p><p>​    Redis 是一个开源的使用 ANSI C 语言编写、遵守 BSD 协议、支持网络、可基于内存、分布式、可选持久性的键值对(Key-Value)存储数据库，并提供多种语言的 API。</p><p>​    Redis 通常被称为<strong>数据结构服务器，因为值（value）可以是字符串(String)、哈希(Hash)、列表(list)、集合(sets)和有序集合(sorted sets)等类型</strong>。</p><h2 id="redis部署方案介绍"><a href="#redis部署方案介绍" class="headerlink" title="redis部署方案介绍"></a>redis部署方案介绍</h2><table><thead><tr><th>特性&#x2F;配置</th><th><strong>Redis</strong> <strong>主从复制</strong></th><th><strong>Redis</strong> <strong>哨兵</strong></th><th><strong>Redis</strong> <strong>集群</strong></th></tr></thead><tbody><tr><td><strong>主要目的</strong></td><td>数据备份与读写分离</td><td>高可用性和故障自动切换</td><td>高并发和数据分散处理</td></tr><tr><td><strong>架构</strong></td><td>一个主节点和多个从节点</td><td>监控主从结构并自动切换</td><td>多个主节点，数据分片</td></tr><tr><td><strong>数据复制</strong></td><td>主节点到从节点</td><td>监控并管理主从复制</td><td>每个主节点管理自己的数据集</td></tr><tr><td><strong>故障转移机制</strong></td><td>手动或哨兵自动切换</td><td>自动故障转移</td><td>自动处理节点故障</td></tr><tr><td><strong>可伸缩性</strong></td><td>有限，依赖主节点</td><td>为主从结构增加高可用性</td><td>高，因为数据分布式处理</td></tr><tr><td><strong>使用场景</strong></td><td>数据备份和读扩展</td><td>关键应用的高可用性</td><td>大规模应用的高性能需求</td></tr><tr><td><strong>设置复杂度</strong></td><td>相对简单</td><td>中等，需配置哨兵</td><td>复杂，需规划数据分区</td></tr></tbody></table><h2 id="redis一主两从三哨兵部署方案"><a href="#redis一主两从三哨兵部署方案" class="headerlink" title="redis一主两从三哨兵部署方案"></a>redis一主两从三哨兵部署方案</h2><p><img src="/2025/07/14/docker/image-20250716191145724.png" alt="image-20250716191145724"></p><h2 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h2><h3 id="配置docker-compose-yaml文件"><a href="#配置docker-compose-yaml文件" class="headerlink" title="配置docker-compose.yaml文件"></a>配置docker-compose.yaml文件</h3><ol><li><p>创建文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> redis_service</span><br><span class="line">vim redis_service/docker-compose.yaml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis1</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">redis1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">16379</span><span class="string">:16379</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis_net</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis1/conf:/etc/conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis1/data:/data</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">redis-server</span> <span class="string">/etc/conf/redis.conf</span></span><br><span class="line">  <span class="attr">redis2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis2</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">redis2</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6380</span><span class="string">:6380</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">16380</span><span class="string">:16380</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis_net</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis2/conf:/etc/conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis2/data:/data</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">redis-server</span> <span class="string">/etc/conf/redis.conf</span></span><br><span class="line">  <span class="attr">redis3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis3</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">redis3</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6381</span><span class="string">:6381</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">16381</span><span class="string">:16381</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis_net</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis3/conf:/etc/conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./redis3/data:/data</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">redis-server</span> <span class="string">/etc/conf/redis.conf</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">sentinel1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">sentinel1</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">sentinel1</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">26379</span><span class="string">:26379</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis_net</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./sentinel1/conf:/etc/conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./setinel1/data:/data</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">redis-sentinel</span> <span class="string">/etc/conf/sentinel.conf</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">sentinel2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">sentinel2</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">sentinel2</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">26380</span><span class="string">:26379</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis_net</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./sentinel2/conf:/etc/conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./setinel2/data:/data</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">redis-sentinel</span> <span class="string">/etc/conf/sentinel.conf</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">sentinel3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">sentinel3</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">sentinel3</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">26381</span><span class="string">:26379</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis_net</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./sentinel3/conf:/etc/conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./setinel3/data:/data</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="string">redis-sentinel</span> <span class="string">/etc/conf/sentinel.conf</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">redis_net:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">redis_net</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure></li><li><p>查看是否创建成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /redis_service</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure></li></ol><h3 id="redis-master配置文件"><a href="#redis-master配置文件" class="headerlink" title="redis_master配置文件"></a>redis_master配置文件</h3><p>配置文件名redis.conf，在redis1&#x2F;conf&#x2F;redis.conf</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">databases</span> <span class="number">10</span> </span><br><span class="line"><span class="string">bind</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment">#监听 </span></span><br><span class="line"><span class="string">port</span> <span class="number">6379</span></span><br><span class="line"><span class="comment">#访问密码 </span></span><br><span class="line"><span class="string">requirepass</span> <span class="number">123456</span></span><br><span class="line"><span class="string">masterauth</span> <span class="number">123456</span></span><br><span class="line"><span class="comment">#持久化文件路径</span></span><br><span class="line"><span class="string">dir</span> <span class="string">/data</span> </span><br><span class="line"><span class="comment">#持久化文件</span></span><br><span class="line"><span class="string">dbfilename</span> <span class="string">dump.rdb</span></span><br><span class="line"><span class="comment">#启用 RDB 持久化文件的压缩</span></span><br><span class="line"><span class="string">rdbcompression</span> <span class="literal">yes</span></span><br><span class="line"><span class="comment">#如果后台保存出错则停止写入</span></span><br><span class="line"><span class="string">stop-writes-on-bgsave-error</span> <span class="literal">yes</span></span><br><span class="line"><span class="comment">#关闭保护模式</span></span><br><span class="line"><span class="string">protected-mode</span> <span class="literal">no</span></span><br><span class="line"><span class="comment">#在空数据库时进行无盘复制加载</span></span><br><span class="line"><span class="string">repl-diskless-load</span> <span class="string">on-empty-db</span></span><br><span class="line"><span class="comment">#守护进程的方式运行</span></span><br><span class="line"><span class="comment">#daemonize yes</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#持久化策略</span></span><br><span class="line"><span class="comment">#表示如果在 900 秒（15 分钟）内有至少 1 次数据修改操作，则执行一次 RDB 持久化。</span></span><br><span class="line"><span class="string">save</span> <span class="number">900</span> <span class="number">1</span> </span><br><span class="line"><span class="comment">#在 300 秒（5 分钟）内有至少 10 次数据修改操作，就执行一次 RDB 持久化。</span></span><br><span class="line"><span class="string">save</span> <span class="number">300</span> <span class="number">10</span>     </span><br><span class="line"><span class="string">save</span> <span class="number">60</span> <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志</span></span><br><span class="line"><span class="string">logfile</span> <span class="string">redis.log</span></span><br></pre></td></tr></table></figure><h3 id="redis-slave配置文件"><a href="#redis-slave配置文件" class="headerlink" title="redis_slave配置文件"></a>redis_slave配置文件</h3><p>redis2和redis3</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实例化数据库</span></span><br><span class="line"><span class="string">databases</span> <span class="number">10</span></span><br><span class="line"><span class="string">bind</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> </span><br><span class="line"><span class="comment">#监听</span></span><br><span class="line"><span class="string">port</span> <span class="number">6380</span></span><br><span class="line"><span class="comment">#访问密码和主机密码</span></span><br><span class="line"><span class="string">requirepass</span> <span class="number">123456</span></span><br><span class="line"><span class="string">masterauth</span> <span class="number">123456</span></span><br><span class="line"><span class="comment">#持久化文件路径</span></span><br><span class="line"><span class="string">dir</span> <span class="string">/data</span> </span><br><span class="line"><span class="comment">#持久化文件</span></span><br><span class="line"><span class="string">dbfilename</span> <span class="string">dump.rdb</span></span><br><span class="line"><span class="comment">#指定本地数据存储压缩</span></span><br><span class="line"><span class="string">rdbcompression</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">stop-writes-on-bgsave-error</span> <span class="literal">yes</span></span><br><span class="line"><span class="string">protected-mode</span> <span class="literal">no</span></span><br><span class="line"><span class="string">repl-diskless-load</span> <span class="string">on-empty-db</span></span><br><span class="line"><span class="comment">#daemonize yes</span></span><br><span class="line"><span class="comment">#protected-mode</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#持久化策略</span></span><br><span class="line"><span class="string">save</span> <span class="number">900</span> <span class="number">1</span></span><br><span class="line"><span class="string">save</span> <span class="number">300</span> <span class="number">10</span></span><br><span class="line"><span class="string">save</span> <span class="number">60</span> <span class="number">10000</span></span><br><span class="line"><span class="comment">#日志路径</span></span><br><span class="line"><span class="string">logfile</span> <span class="string">redis.log</span></span><br><span class="line"><span class="string">replicaof</span> <span class="string">redis1</span> <span class="number">6379</span></span><br></pre></td></tr></table></figure><h3 id="sentinel配置文件"><a href="#sentinel配置文件" class="headerlink" title="sentinel配置文件"></a>sentinel配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#vim /usr/local/redis/etc/sentinel.conf</span></span><br><span class="line"> <span class="comment">#操作端口</span></span><br><span class="line"> <span class="comment">#绑定所有网络接口</span></span><br><span class="line"><span class="string">bind</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment">#哨兵服务监听的端口。</span></span><br><span class="line"><span class="string">port</span> <span class="number">26379</span></span><br><span class="line"><span class="comment">#指定进程 ID 文件的路径</span></span><br><span class="line"><span class="string">pidfile</span> <span class="string">&quot;/data/redis-sentinel.pid&quot;</span></span><br><span class="line"><span class="comment">#工作目录</span></span><br><span class="line"><span class="string">dir</span> <span class="string">&quot;/tmp&quot;</span> </span><br><span class="line"><span class="comment">#设置访问哨兵的密码</span></span><br><span class="line"><span class="string">requirepass</span> <span class="number">123456</span></span><br><span class="line"><span class="comment">#docker必关 不以后台进程方式运行</span></span><br><span class="line"><span class="string">daemonize</span> <span class="literal">no</span> </span><br><span class="line"><span class="comment">#关闭保护模式</span></span><br><span class="line"><span class="string">protected-mode</span> <span class="literal">no</span> </span><br><span class="line"><span class="comment">#指定日志文件路径</span></span><br><span class="line"><span class="string">logfile</span> <span class="string">&quot;/data/redis-sentinel.log&quot;</span></span><br><span class="line"><span class="comment">#启用主机名解析</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">resolve-hostnames</span> <span class="literal">yes</span></span><br><span class="line"><span class="comment">#监控名为redisMaster的主节点，节点名为redis1，端口为 6379，需要至少 2 个哨兵</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">monitor</span> <span class="string">redisMaster</span> <span class="string">redis1</span> <span class="number">6379 </span><span class="number">2</span></span><br><span class="line"><span class="comment">#该主节点的认证密码</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">auth-pass</span> <span class="string">redisMaster</span> <span class="number">123456</span></span><br><span class="line"><span class="comment">#在指定毫秒数后认为该主节点主观下线。</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">down-after-milliseconds</span> <span class="string">redisMaster</span> <span class="number">100</span> </span><br><span class="line"><span class="comment">#故障转移时同时同步的从节点数量为 1 个</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">parallel-syncs</span> <span class="string">redisMaster</span> <span class="number">1</span></span><br><span class="line"><span class="comment">#故障转移超时时间</span></span><br><span class="line"><span class="string">sentinel</span> <span class="string">failover-timeout</span> <span class="string">redisMaster</span> <span class="number">600</span> </span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis_service</span><br><span class="line">docker compose down </span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p><img src="/2025/07/14/docker/image-20250716193050241.png" alt="image-20250716193050241"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p><img src="/2025/07/14/docker/image-20250716194121868.png" alt="image-20250716194121868"></p><ol><li>查看从机</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7 ~]# docker <span class="built_in">exec</span> -it redis1 redis-cli -p 6379</span><br><span class="line">127.0.0.1:6380&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; info</span><br></pre></td></tr></table></figure><p><img src="/2025/07/14/docker/image-20250716194621403.png" alt="image-20250716194621403"></p><ol start="2"><li>查看从机</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7 ~]# docker <span class="built_in">exec</span> -it redis2 redis-cli -p 6380</span><br><span class="line">127.0.0.1:6380&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; info</span><br></pre></td></tr></table></figure><p><img src="/2025/07/14/docker/image-20250716195916911.png" alt="image-20250716195916911"></p><ol start="3"><li>查看哨兵</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7 redis_service]# docker <span class="built_in">exec</span> -it sentinel1 redis-cli -p 26379 </span><br><span class="line">127.0.0.1:26379&gt; info</span><br><span class="line">NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:26379&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:26379&gt; info</span><br></pre></td></tr></table></figure><p><img src="/2025/07/14/docker/image-20250716195114095.png" alt="image-20250716195114095"></p><ol start="4"><li>人为停掉一个redis</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker container redis1 stop</span><br><span class="line"><span class="comment"># 再次查看哨兵</span></span><br><span class="line">[root@CentOS7 redis_service]# docker <span class="built_in">exec</span> -it sentinel1 redis-cli -p 26379 </span><br><span class="line">127.0.0.1:26379&gt; info</span><br><span class="line">NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:26379&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:26379&gt; info</span><br></pre></td></tr></table></figure><p><img src="/2025/07/14/docker/image-20250716200102571.png" alt="image-20250716200102571"></p><h1 id="kubernetes介绍以及应用"><a href="#kubernetes介绍以及应用" class="headerlink" title="kubernetes介绍以及应用"></a>kubernetes介绍以及应用</h1><ul><li><p>Kubernetes（简称k8s）是一个<strong>开源的容器编排平台</strong>，用于<strong>自动化部署、扩展和管理容器化应用</strong>。</p></li><li><p>它的核心功能包括<strong>自动化容器部署、负载均衡、自我修复、存储编排以及跨集群资源管理</strong>。</p></li><li><p>通过Kubernetes，企业能够高效管理大规模的容器化应用，确保应用的高可用性和弹性扩展。</p></li></ul><p>核心功能：</p><ol><li><strong>自动调度</strong>：将容器放到K8S集群的任意节点中，并根据容器需要和节点负载决定目标节点。</li><li><strong>自动修复</strong>：当健康检查发现节点问题，系统会自动将节点上的资源进行转移，并恢复功能。</li><li><strong>自动缩扩容</strong>：通过预定义负载指标，根据指标自动触发动态缩扩容行为。</li></ol><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><h4 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h4><p>Master为控制节点，负责整个集群的管理控制。</p><p>Master节点由：APIserver、ETCD 、controller Manager、schedule等组件构成。</p><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><p>Node的作用是承接工作负载。</p><p>Node节点有由：kubelet、rumtime、kube-proxy组成。</p><p><img src="/2025/07/14/docker/image-20250717202918467.png" alt="image-20250717202918467"></p><p>客户端：Kubectl、UI：负责给API-Server发送指令。</p><p>API-Server：接受指令，K8s集群的核心，是集群的API入口。它负责处理来自各种客户端的REST API请求资源并对其进行验证、授权，并将有效的请求持久化到etcd数据库。</p><p>ETCD：分布式键值存储系统，用于保存Kubernetes集群的所有配置数据和状态信息。它存储了集群中的各种资源对象的元数据。</p><p>Scheduler：负责将未调度的Pods分配到合适的Node节点上运行。它根据一系列的调度算法和策略来进行决策。</p><p>Controller-Manager、controller：运行着一系列的控制器，这些控制器负责维护集群的状态。Controller-Manager负责容器数量。controller保证运行状态。</p><p>Kubelet：负责与kube-api通信，获取节点的Pods的信息,管理其生命周期,并按照Pod的定义创建、启停监控容器的运行状态等。并将状态上报给controller。</p><p>Kube-proxy：主要负责实现K8s Service的网络代理功能.它在每个Node节点上运行，维护网络规则，将对Service的请求转发到对应的Pod上。</p><p>RunTime：负责k8s中的资源隔离,确保每个容器有独立的网络,文件系统,进程空间从而避免相互干扰。</p><p>Pod：Pod是最小的可部署和可管理的计算单元。容器在同一主机上可以相互通信。多个容器封装成一个Pod，一般一个容器只放一个应用，为了让服务高可用，需要多个容器，满足使用需求，所以用Pod</p><p>打包多个容器统一管理。</p><p>Container：用于将应用程序以及所有依赖打包在一起,确保所有程序运行环境相同。</p><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><h4 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h4><h5 id="工作负载类：负责接受客户访问请求，返回客户需要的数据"><a href="#工作负载类：负责接受客户访问请求，返回客户需要的数据" class="headerlink" title="工作负载类：负责接受客户访问请求，返回客户需要的数据"></a>工作负载类：负责接受客户访问请求，返回客户需要的数据</h5><p>Pod、Deployment、ReplicaSet、StatefulSet、DaemonSet、Job、CronJob</p><h5 id="网络类"><a href="#网络类" class="headerlink" title="网络类"></a>网络类</h5><p>Service、Ingress、NetworkPolicy</p><h5 id="储存类"><a href="#储存类" class="headerlink" title="储存类"></a>储存类</h5><p>Volume、PersistentVolume (PV)、Persistent VolumeClaim (PVC)</p><h5 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h5><p>ConfigMap、Secret</p><h5 id="安全类"><a href="#安全类" class="headerlink" title="安全类"></a>安全类</h5><h5 id="扩展类"><a href="#扩展类" class="headerlink" title="扩展类"></a>扩展类</h5><h5 id="自动缩扩容类"><a href="#自动缩扩容类" class="headerlink" title="自动缩扩容类"></a>自动缩扩容类</h5><h5 id="层级关系"><a href="#层级关系" class="headerlink" title="层级关系"></a>层级关系</h5><p><img src="/2025/07/14/docker/image-20250717203132808.png" alt="image-20250717203132808"></p><p>pod：最小的部署单元，包含一个或多个容器。</p><p>Deployment：管理Pod的副本和滚动更新策略。</p><p>replicaSet：确保指定数量的Pod副本运行（Deployment的底层实现）。</p><p>DaemonSet：管理有状态应用的Pod，提供有序部署和唯一网络标识。</p><p>StatefulSet：确保每个节点运行一个Pod的副本。</p><p>Service：为Pod提供稳定的网络访问（如负载均衡、服务发现）</p><p>Ingress：管理外部访问集群内服务的路由规则（如 HTTP&#x2F;HTTPS 路由）。</p><p>Secret：存储敏感数据（如密码、Token），以 Base64 编码存储非敏感的配置数据（如环境变量、配置文件）。</p><p>Job&#x2F;CronJob：运行一次性任务，任务完成后 Pod 终止定时运行的 Job。</p><p>PV：集群中的持久化存储资源。</p><p>PVC：用户对存储资源的请求声明，绑定到 PV。</p><h2 id="kubernetes-集群信息查看"><a href="#kubernetes-集群信息查看" class="headerlink" title="kubernetes-集群信息查看"></a>kubernetes-集群信息查看</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods <span class="comment"># 查看所有 Pod</span></span><br><span class="line"></span><br><span class="line">kubectl get deployments <span class="comment"># 查看所有 Deployment</span></span><br><span class="line"></span><br><span class="line">kubectl get services <span class="comment"># 查看所有 Service</span></span><br><span class="line"></span><br><span class="line">kubectl get pvc <span class="comment"># 查看所有 PVC</span></span><br><span class="line"></span><br><span class="line">kubectl get nodes <span class="comment"># 查看所有 Node</span></span><br><span class="line"></span><br><span class="line">kubectl get namespaces <span class="comment"># 查看所有命名空间</span></span><br><span class="line"></span><br><span class="line">kubectl get configmap &lt;name&gt; -o yaml <span class="comment"># 查看 ConfigMap 内容</span></span><br><span class="line"></span><br><span class="line">kubectl logs &lt;pod-name&gt;<span class="comment"># 查看 Pod 日志</span></span><br></pre></td></tr></table></figure><h2 id="kubernetes-资源创建命"><a href="#kubernetes-资源创建命" class="headerlink" title="kubernetes-资源创建命"></a>kubernetes-资源创建命</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 创建 Pod</span></span><br><span class="line">kubectl create deployment my-pod --image=nginx</span><br><span class="line"><span class="comment">#2. 创建 Deployment</span></span><br><span class="line">kubectl create deployment my-deployment --image=nginx --replicas=3</span><br><span class="line"><span class="comment">#3. 创建 Service</span></span><br><span class="line">kubectl create service clusterip my-service --tcp=80:8080</span><br><span class="line"><span class="comment">#4. 创建 ConfigMap</span></span><br><span class="line">kubectl create configmap my-config --from-literal=key1=value1 --from-literal=key2=value2</span><br><span class="line"><span class="comment">#5. 创建 Secret</span></span><br><span class="line">kubectl create secret generic my-secret --from-literal=username=admin --from-literal=password=secret</span><br><span class="line"><span class="comment">#6. 创建 Namespace</span></span><br><span class="line">kubectl create namespace my-namespace</span><br></pre></td></tr></table></figure><h2 id="kubernetes-Pod信息查看"><a href="#kubernetes-Pod信息查看" class="headerlink" title="kubernetes-Pod信息查看"></a>kubernetes-Pod信息查看</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1. 列出特定命名空间中的 pod：</span><br><span class="line">kubectl get pods -n &lt;namespace&gt;</span><br><span class="line">2. 查看一个 Pod 详情：</span><br><span class="line">kubectl describe pod &lt;pod-name&gt; -n &lt;namespace&gt;</span><br><span class="line">3. 查看 Pod 日志：</span><br><span class="line">kubectl logs &lt;pod-name&gt; -n &lt;namespace&gt;</span><br><span class="line">4. 尾部 Pod 日志：</span><br><span class="line">kubectl logs -f &lt;pod-name&gt; -n &lt;namespace&gt;</span><br><span class="line">5. 在 pod 中执行命令：</span><br><span class="line">kubectl <span class="built_in">exec</span> -it &lt;pod-name&gt; -n &lt;namespace&gt; -- &lt;<span class="built_in">command</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="kubernetes-deploymen信息"><a href="#kubernetes-deploymen信息" class="headerlink" title="kubernetes-deploymen信息"></a>kubernetes-deploymen信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 列出命名空间中的所有Deployment：kubectl get deployments -n &lt;namespace&gt;</span><br><span class="line">2. 查看一个Deployment详情：kubectl describe deployment &lt;deployment-name&gt; -n &lt;namespace&gt;</span><br><span class="line">3. 查看滚动发布状态：kubectl rollout status deployment/&lt;deployment-name&gt; -n &lt;namespace&gt;</span><br><span class="line">4. 查看滚动发布历史记录：kubectl rollout <span class="built_in">history</span> deployment/&lt;deployment-name&gt; -n &lt;namespace&gt;</span><br></pre></td></tr></table></figure><h2 id="kubernetes-label指令"><a href="#kubernetes-label指令" class="headerlink" title="kubernetes-label指令"></a>kubernetes-label指令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给名为foo的Pod添加label unhealthy=true</span></span><br><span class="line">$ kubectl label pods foo unhealthy=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 给名为foo的Pod修改label 为 &#x27;status&#x27; value &#x27;unhealthy&#x27;，且覆盖现有的value</span></span><br><span class="line">$ kubectl label --overwrite pods foo status=unhealthy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给 namespace 中的所有 pod 添加 label</span></span><br><span class="line">$ kubectl label  pods --all status=unhealthy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅当resource-version=1时才更新 名为foo的Pod上的label</span></span><br><span class="line">$ kubectl label pods foo status=unhealthy --resource-version=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除名为“bar”的label 。（使用“ - ”减号相连）</span></span><br><span class="line">$ kubectl label pods foo bar-</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="kubernetes-基础指令"><a href="#kubernetes-基础指令" class="headerlink" title="kubernetes-基础指令"></a>kubernetes-基础指令</h2><p><strong>create，delete，get，run，expose，set，explain，edit</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建Deployment和Service资源</span></span><br><span class="line">$ kubectl create -f demo-deployment.yaml</span><br><span class="line">$ kubectl create -f demo-service.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据yaml文件删除对应的资源，但是yaml文件并不会被删除，这样更加高效</span></span><br><span class="line">$ kubectl delete -f demo-deployment.yaml </span><br><span class="line">$ kubectl delete -f demo-service.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以通过具体的资源名称来进行删除，使用这个删除资源，同时删除deployment和service资源</span></span><br><span class="line">$ kubectl delete 具体的资源名称</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="kubernetes-基础指令-1"><a href="#kubernetes-基础指令-1" class="headerlink" title="kubernetes-基础指令"></a>kubernetes-基础指令</h2><p><strong><a href="https://kubernetes.io/zh-cn/docs/reference/kubectl/quick-reference/">https://kubernetes.io/zh-cn/docs/reference/kubectl/quick-reference/</a></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建Deployment和Service资源</span></span><br><span class="line">$ kubectl create -f demo-deployment.yaml</span><br><span class="line">$ kubectl create -f demo-service.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据yaml文件删除对应的资源，但是yaml文件并不会被删除，这样更加高效</span></span><br><span class="line">$ kubectl delete -f demo-deployment.yaml </span><br><span class="line">$ kubectl delete -f demo-service.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以通过具体的资源名称来进行删除，使用这个删除资源，同时删除deployment和service资源</span></span><br><span class="line">$ kubectl delete 具体的资源名称</span><br></pre></td></tr></table></figure><h1 id="Nginx反向代理"><a href="#Nginx反向代理" class="headerlink" title="Nginx反向代理"></a>Nginx反向代理</h1><h2 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h2><p><img src="/2025/07/14/docker/image-20250717203940718.png" alt="image-20250717203940718"></p><h3 id="代理服务器功能"><a href="#代理服务器功能" class="headerlink" title="代理服务器功能"></a>代理服务器功能</h3><p>1.隐藏客户端身份： 正向代理可以隐藏客户端的真实IP地址，保护客户端的隐私。</p><p>2.访问控制： 正向代理可以根据一定的规则限制或允许客户端的访问请求，实现访问控制功能。</p><p>3.缓存加速： 正向代理可以缓存经常访问的页面或资源，提高访问速度，减轻服务器负担。</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>1.突破网络限制 </p><p>2.监控和管理员工的网络访问行为</p><p>3.隐藏客户端真实IP</p><p>4.防止敏感数据泄露</p><p>5.内容过滤</p><p>6.提高访问速度</p><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p><img src="/2025/07/14/docker/image-20250717204042655.png" alt="image-20250717204042655"></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>1.负载均衡： 反向代理可以根据后端服务器的负载情况，将请求分发到不同的服务器上，提高系统的整体性能。</p><p>2.安全性增强：隐藏后端服务器的真实地址和端口，防止直接攻击。同时，还可以实现SSL加密、访问控制等安全功能。</p><p>3.缓存优化：可以缓存静态资源，减少后端服务器的负载，提高响应速度。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop问答小测验</title>
      <link href="/2025/07/07/hadoop%E9%97%AE%E7%AD%94%E5%B0%8F%E6%B5%8B%E9%AA%8C/"/>
      <url>/2025/07/07/hadoop%E9%97%AE%E7%AD%94%E5%B0%8F%E6%B5%8B%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="hadoop问答小测验"><a href="#hadoop问答小测验" class="headerlink" title="hadoop问答小测验"></a>hadoop问答小测验</h1><h2 id="1-hadoop组件有哪些-分别有什么功能"><a href="#1-hadoop组件有哪些-分别有什么功能" class="headerlink" title="1. hadoop组件有哪些?分别有什么功能"></a>1. hadoop组件有哪些?分别有什么功能</h2><h3 id="一、核心组件"><a href="#一、核心组件" class="headerlink" title="一、核心组件"></a>一、核心组件</h3><p>由三个基础组件构成，它们是整个框架的基石：</p><ol><li><p><strong>Hadoop Distributed File System（HDFS）—— 分布式文件系统</strong></p><ul><li><strong>功能</strong>：<ul><li><p>专为存储海量数据设计的分布式文件系统，具有高容错性和高吞吐量。</p></li><li><p>将大文件分割成固定大小的 “块”（默认 128MB），分散存储在集群的多个节点上，每个块会有多个副本（默认 3 个），确保数据安全。<br>适合处理 “一次写入、多次读取” 的场景，不支持频繁的文件修改（更适合静态数据）。</p></li></ul></li></ul></li><li><p><strong>MapReduce—— 分布式计算框架</strong></p><ul><li><strong>功能：</strong></li></ul></li></ol><p>​基于 “分而治之” 思想的编程模型，用于并行处理大规模数据。</p><ul><li><strong>Map 阶段</strong>：将输入数据分割成多个子任务，并行处理后生成中间结果（键值对）。</li><li><strong>Reduce 阶段</strong>：汇总 Map 阶段的中间结果，合并计算得到最终输出。</li></ul><ol start="3"><li><strong>YARN（Yet Another Resource Negotiator）—— 资源管理器</strong></li></ol><ul><li><strong>功能 ：</strong><br>负责集群资源（CPU、内存等）的统一管理和任务调度，替代了早期 Hadoop 中的 JobTracker 和 TaskTracker。</li><li><strong>ResourceManager</strong>：全局资源管理器，分配资源给应用程序。</li><li><strong>NodeManager</strong>：每个节点上的资源管理器，监控节点资源使用情况。</li><li><strong>ApplicationMaster</strong>：为每个应用程序（如 MapReduce 任务）申请资源并协调任务执行。</li></ul><h3 id="二、生态系统组件"><a href="#二、生态系统组件" class="headerlink" title="二、生态系统组件"></a><strong>二、生态系统组件</strong></h3><h4 id="1-Hive——-数据仓库工具"><a href="#1-Hive——-数据仓库工具" class="headerlink" title="1. Hive—— 数据仓库工具"></a>1. <strong>Hive—— 数据仓库工具</strong></h4><ul><li><p>功能：</p><p>提供类 SQL（HQL）查询语言，将 SQL 语句转换为 MapReduce 任务，方便非程序员处理大数据。</p><ul><li>支持数据存储在 HDFS 或 HBase 中，适合离线数据分析和报表生成。</li><li>缺点：延迟较高，不适合实时查询。</li></ul></li></ul><h4 id="2-Sqoop——-数据迁移工具"><a href="#2-Sqoop——-数据迁移工具" class="headerlink" title="2. Sqoop—— 数据迁移工具"></a>2. <strong>Sqoop—— 数据迁移工具</strong></h4><ul><li><p>功能 ：</p><p>在关系型数据库（如 MySQL、Oracle）和 Hadoop 生态（HDFS、Hive、HBase）之间进行数据双向迁移。</p><ul><li>底层通过 MapReduce 任务实现高效并行传输，适合批量数据导入 &#x2F; 导出。</li></ul></li></ul><h4 id="3-Spark——-快速计算引擎（生态关联组件）"><a href="#3-Spark——-快速计算引擎（生态关联组件）" class="headerlink" title="3. Spark—— 快速计算引擎（生态关联组件）"></a>3. Spark—— 快速计算引擎（生态关联组件）</h4><p>功能：<br>虽然不属于 Hadoop 核心，但常与 Hadoop 配合使用，是基于内存的分布式计算引擎，比 MapReduce 快 10-100 倍。<br>支持批处理、流处理、机器学习等，兼容 HDFS、HBase 等存储系统，可通过 YARN 调度资源。</p><h2 id="2-分布式存储的组件是什么-有哪些进程-进程的作用是什么"><a href="#2-分布式存储的组件是什么-有哪些进程-进程的作用是什么" class="headerlink" title="2. 分布式存储的组件是什么 ?有哪些进程? 进程的作用是什么?"></a>2. 分布式存储的组件是什么 ?有哪些进程? 进程的作用是什么?</h2><p>在 Hadoop 生态中，分布式存储的核心组件是<strong>HDFS（Hadoop Distributed File System）</strong>，其架构包含多个关键进程。以下是详细介绍：</p><h3 id="一、HDFS-核心组件与进程"><a href="#一、HDFS-核心组件与进程" class="headerlink" title="一、HDFS 核心组件与进程"></a><strong>一、HDFS 核心组件与进程</strong></h3><p>HDFS 采用<strong>主从架构（Master-Slave）</strong>，主要由以下进程组成：</p><h4 id="1-NameNode（主节点进程）"><a href="#1-NameNode（主节点进程）" class="headerlink" title="1. NameNode（主节点进程）"></a>1. <strong>NameNode（主节点进程）</strong></h4><ul><li><p>作用：</p><p>作为 HDFS 的 “大脑”，管理文件系统的命名空间（文件目录结构）和客户端对文件的访问。</p><ul><li>维护文件元数据（如文件名、权限、块位置映射），但不存储实际数据。</li><li>处理客户端的读写请求，决定数据块的存储位置。</li></ul></li><li><p><strong>特点</strong>：<br>单点故障风险（HDFS 2.0 引入了 HA 高可用方案解决此问题）。</p></li></ul><h4 id="2-DataNode（从节点进程）"><a href="#2-DataNode（从节点进程）" class="headerlink" title="2. DataNode（从节点进程）"></a>2. <strong>DataNode（从节点进程）</strong></h4><ul><li><p>作用：</p><p>负责实际数据的存储和读写操作，分布在集群的各个节点上。</p><ul><li>将数据以 “块”（Block）形式存储在本地磁盘，默认每个块 128MB，并维护块的校验和。</li><li>根据 NameNode 的指令执行数据块的创建、删除和复制操作。</li></ul></li><li><p><strong>与客户端交互</strong>：<br>直接处理客户端的数据读写请求，不经过 NameNode（减轻 NameNode 负担）。</p></li></ul><h4 id="3-SecondaryNameNode（辅助名称节点进程）"><a href="#3-SecondaryNameNode（辅助名称节点进程）" class="headerlink" title="3. SecondaryNameNode（辅助名称节点进程）"></a>3. <strong>SecondaryNameNode（辅助名称节点进程）</strong></h4><ul><li><p>作用：</p><p>定期合并 NameNode 的编辑日志（edits log）和命名空间镜像（fsimage），辅助 NameNode 进行元数据管理。</p><ul><li>并非 NameNode 的热备，而是帮助减少 NameNode 重启时的恢复时间。</li></ul></li><li><p><strong>工作流程</strong>：<br>从 NameNode 获取最新的 fsimage 和 edits log，合并后返回给 NameNode。</p></li></ul><h4 id="4-JournalNode（高可用进程，HDFS-2-0-）"><a href="#4-JournalNode（高可用进程，HDFS-2-0-）" class="headerlink" title="4. JournalNode（高可用进程，HDFS 2.0+）"></a>4. <strong>JournalNode（高可用进程，HDFS 2.0+）</strong></h4><ul><li><p>作用：</p><p>在 HA（高可用）架构中，多个 JournalNode 组成 Quorum，存储 NameNode 的编辑日志（edits）。</p><ul><li>当 Active NameNode 更新元数据时，会同步写入 JournalNode 集群。</li><li>Standby NameNode 从 JournalNode 读取更新，保持与 Active NameNode 的状态同步。</li></ul></li></ul><h4 id="5-ZKFailoverController（高可用进程，HDFS-2-0-）"><a href="#5-ZKFailoverController（高可用进程，HDFS-2-0-）" class="headerlink" title="5. ZKFailoverController（高可用进程，HDFS 2.0+）"></a>5. <strong>ZKFailoverController（高可用进程，HDFS 2.0+）</strong></h4><ul><li><p>作用：</p><p>基于 ZooKeeper 实现 NameNode 的自动故障转移（Failover）。</p><ul><li>监控 NameNode 状态，当 Active NameNode 失效时，自动将 Standby NameNode 切换为 Active 状态。</li></ul></li></ul><h3 id="二、HDFS-高可用（HA）架构进程"><a href="#二、HDFS-高可用（HA）架构进程" class="headerlink" title="二、HDFS 高可用（HA）架构进程"></a><strong>二、HDFS 高可用（HA）架构进程</strong></h3><p>为避免单点故障，HDFS 2.0 引入了 HA 方案，涉及以下额外进程：</p><h4 id="1-Active-NameNode"><a href="#1-Active-NameNode" class="headerlink" title="1. Active NameNode"></a>1. <strong>Active NameNode</strong></h4><ul><li><strong>作用</strong>：<br>处理客户端请求的主 NameNode，负责实时更新元数据。</li></ul><h4 id="2-Standby-NameNode"><a href="#2-Standby-NameNode" class="headerlink" title="2. Standby NameNode"></a>2. <strong>Standby NameNode</strong></h4><ul><li><strong>作用</strong>：<br>作为 Active NameNode 的热备，通过 JournalNode 同步元数据，确保在 Active 故障时能快速接管。</li></ul><h4 id="3-ZooKeeper-集群"><a href="#3-ZooKeeper-集群" class="headerlink" title="3. ZooKeeper 集群"></a>3. <strong>ZooKeeper 集群</strong></h4><ul><li><strong>作用</strong>：<br>协调 Active 和 Standby NameNode 的状态，保证同一时刻只有一个 Active NameNode。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>HDFS 的核心进程通过分工协作，实现了大规模数据的可靠存储和高效访问：</p><ul><li><strong>NameNode</strong>：管理元数据，协调读写请求。</li><li><strong>DataNode</strong>：存储实际数据块，执行数据读写。</li><li><strong>SecondaryNameNode</strong>：辅助元数据管理。</li><li><strong>JournalNode&#x2F;ZKFC</strong>：保障高可用性。</li></ul><p>理解这些进程的角色和交互，是优化 HDFS 性能和排查故障的关键。</p><h2 id="3-资源调度使用什么组件-该组件有哪些进程-每个进程的作用是什么"><a href="#3-资源调度使用什么组件-该组件有哪些进程-每个进程的作用是什么" class="headerlink" title="3. 资源调度使用什么组件? 该组件有哪些进程?每个进程的作用是什么?"></a>3. 资源调度使用什么组件? 该组件有哪些进程?每个进程的作用是什么?</h2><p>在 Hadoop 生态中，资源调度主要由 <strong>YARN（Yet Another Resource Negotiator）</strong> 组件负责。它是 Hadoop 2.0 引入的资源管理系统，替代了早期 MapReduce 的 JobTracker&#x2F;Tracker 架构，实现了计算资源的统一管理和多框架共享。</p><h3 id="一、YARN-的核心组件与进程"><a href="#一、YARN-的核心组件与进程" class="headerlink" title="一、YARN 的核心组件与进程"></a><strong>一、YARN 的核心组件与进程</strong></h3><p>YARN 采用 <strong>主从架构（Master-Slave）</strong>，主要由以下进程组成：</p><h4 id="1-ResourceManager（RM，主节点进程）"><a href="#1-ResourceManager（RM，主节点进程）" class="headerlink" title="1. ResourceManager（RM，主节点进程）"></a>1. <strong>ResourceManager（RM，主节点进程）</strong></h4><ul><li><p>作用：</p><p>作为全局资源管理器，负责整个集群的资源分配和调度。</p><ul><li>接收来自各个 <strong>ApplicationMaster</strong> 的资源请求。</li><li>根据集群资源使用情况和预设的调度策略（如容量调度、公平调度），将资源分配给应用程序。</li><li>监控 NodeManager 的健康状态，处理节点故障。</li></ul></li><li><p>内部组件：</p><ul><li><strong>Scheduler</strong>：纯调度器，负责分配资源，不参与应用程序监控和状态管理。</li><li><strong>ApplicationsManager</strong>：管理所有应用程序的生命周期，接收新应用的提交请求。</li></ul></li></ul><h4 id="2-NodeManager（NM，从节点进程）"><a href="#2-NodeManager（NM，从节点进程）" class="headerlink" title="2. NodeManager（NM，从节点进程）"></a>2. <strong>NodeManager（NM，从节点进程）</strong></h4><ul><li><p>作用：</p><p>运行在每个计算节点上，负责本地资源管理和容器监控。</p><ul><li>启动和监控 <strong>Container</strong>（资源隔离单元，封装 CPU、内存等资源）。</li><li>向 ResourceManager 汇报节点资源使用情况和容器状态。</li><li>根据 ResourceManager 的指令，启动或停止 Container。</li></ul></li></ul><h4 id="3-ApplicationMaster（AM，每个应用独有的进程）"><a href="#3-ApplicationMaster（AM，每个应用独有的进程）" class="headerlink" title="3. ApplicationMaster（AM，每个应用独有的进程）"></a>3. <strong>ApplicationMaster（AM，每个应用独有的进程）</strong></h4><ul><li><p>作用：</p><p>每个应用程序（如 MapReduce 作业、Spark 任务）启动时都会创建一个 AM，负责该应用的资源申请和任务协调。</p><ul><li>向 ResourceManager 注册并请求资源（Container）。</li><li>与 NodeManager 通信，启动和监控任务容器。</li><li>跟踪应用程序的执行状态，向 ResourceManager 汇报进度。</li></ul></li><li><p><strong>示例</strong>：<br>MapReduce 作业的 AM 负责将任务拆分为 Map 和 Reduce 任务，并分配到合适的节点执行。</p></li></ul><h4 id="4-Container（资源容器）"><a href="#4-Container（资源容器）" class="headerlink" title="4. Container（资源容器）"></a>4. <strong>Container（资源容器）</strong></h4><ul><li><p>作用：</p><p>是 YARN 中的资源隔离单元，由 NodeManager 管理，运行具体的任务（如 Map&#x2F;Reduce 任务）。</p><ul><li>每个 Container 有严格的资源限制（CPU、内存），通过 Linux cgroups 实现隔离。</li><li>任务完成后，Container 被 NodeManager 回收。</li></ul></li></ul><h3 id="二、YARN-的调度器类型"><a href="#二、YARN-的调度器类型" class="headerlink" title="二、YARN 的调度器类型"></a><strong>二、YARN 的调度器类型</strong></h3><p>ResourceManager 的 <strong>Scheduler</strong> 支持多种调度策略，常见的有：</p><h4 id="1-容量调度器（Capacity-Scheduler）"><a href="#1-容量调度器（Capacity-Scheduler）" class="headerlink" title="1. 容量调度器（Capacity Scheduler）"></a>1. <strong>容量调度器（Capacity Scheduler）</strong></h4><ul><li><strong>特点</strong>：<br>将集群资源划分为多个队列，每个队列有固定的资源上限，支持层级队列和资源共享。</li><li><strong>应用场景</strong>：<br>多租户环境，不同部门 &#x2F; 用户共享集群，保证每个队列至少获得一定资源。</li></ul><h4 id="2-公平调度器（Fair-Scheduler）"><a href="#2-公平调度器（Fair-Scheduler）" class="headerlink" title="2. 公平调度器（Fair Scheduler）"></a>2. <strong>公平调度器（Fair Scheduler）</strong></h4><ul><li><strong>特点</strong>：<br>动态平衡资源分配，优先为资源不足的应用分配资源，实现 “公平” 共享。</li><li><strong>应用场景</strong>：<br>交互式作业与批处理作业共存的场景，避免大作业长时间占用资源。</li></ul><h4 id="3-层次调度器（Hierarchical-Scheduler）"><a href="#3-层次调度器（Hierarchical-Scheduler）" class="headerlink" title="3. 层次调度器（Hierarchical Scheduler）"></a>3. <strong>层次调度器（Hierarchical Scheduler）</strong></h4><ul><li><strong>特点</strong>：<br>结合容量调度和公平调度的优势，支持多级队列和资源继承。</li></ul><h3 id="三、YARN-高可用（HA）架构进程"><a href="#三、YARN-高可用（HA）架构进程" class="headerlink" title="三、YARN 高可用（HA）架构进程"></a><strong>三、YARN 高可用（HA）架构进程</strong></h3><p>为避免单点故障，YARN 支持 ResourceManager 的 HA 部署，涉及以下进程：</p><h4 id="1-Active-ResourceManager"><a href="#1-Active-ResourceManager" class="headerlink" title="1. Active ResourceManager"></a>1. <strong>Active ResourceManager</strong></h4><ul><li><strong>作用</strong>：<br>处理客户端请求的主 RM，负责实时资源调度。</li></ul><h4 id="2-Standby-ResourceManager"><a href="#2-Standby-ResourceManager" class="headerlink" title="2. Standby ResourceManager"></a>2. <strong>Standby ResourceManager</strong></h4><ul><li><strong>作用</strong>：<br>作为热备，同步 Active RM 的状态，在主节点故障时自动接管。</li></ul><h4 id="3-ZooKeeper-集群-1"><a href="#3-ZooKeeper-集群-1" class="headerlink" title="3. ZooKeeper 集群"></a>3. <strong>ZooKeeper 集群</strong></h4><ul><li><strong>作用</strong>：<br>协调 Active 和 Standby RM 的状态，确保同一时刻只有一个 Active RM。</li></ul><h4 id="4-ZKFC（ZooKeeper-Failover-Controller）"><a href="#4-ZKFC（ZooKeeper-Failover-Controller）" class="headerlink" title="4. ZKFC（ZooKeeper Failover Controller）"></a>4. <strong>ZKFC（ZooKeeper Failover Controller）</strong></h4><ul><li><strong>作用</strong>：<br>监控 RM 状态，基于 ZooKeeper 实现自动故障转移。</li></ul><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>YARN 通过分离资源管理和作业调度，实现了集群资源的高效利用和多框架协作：</p><ul><li><strong>ResourceManager</strong>：全局资源调度，负责资源分配。</li><li><strong>NodeManager</strong>：节点资源管理，运行容器。</li><li><strong>ApplicationMaster</strong>：应用程序的资源协调者。</li><li><strong>Container</strong>：资源隔离的基本单位。</li></ul><p>理解 YARN 的架构和调度机制，有助于优化集群资源利用率，提升大数据作业的执行效率。</p><h2 id="4-分布式计算分为几个步骤-shuffle有几个步骤"><a href="#4-分布式计算分为几个步骤-shuffle有几个步骤" class="headerlink" title="4. 分布式计算分为几个步骤? shuffle有几个步骤?"></a>4. 分布式计算分为几个步骤? shuffle有几个步骤?</h2><h3 id="一、分布式计算的典型步骤（以-MapReduce-为例）"><a href="#一、分布式计算的典型步骤（以-MapReduce-为例）" class="headerlink" title="一、分布式计算的典型步骤（以 MapReduce 为例）"></a>一、分布式计算的典型步骤（以 MapReduce 为例）</h3><p>分布式计算框架（如 MapReduce、Spark）通常将大规模数据处理任务分解为多个阶段，以实现并行化和容错性。以下是典型的分布式计算流程：</p><h4 id="1-数据分片（Data-Splitting）"><a href="#1-数据分片（Data-Splitting）" class="headerlink" title="1. 数据分片（Data Splitting）"></a>1. <strong>数据分片（Data Splitting）</strong></h4><ul><li>将输入数据划分为多个小块（如 HDFS 中的 Block），每个分片由一个 Map 任务处理。</li><li><strong>目的</strong>：实现数据的并行处理。</li></ul><h4 id="2-Map-阶段"><a href="#2-Map-阶段" class="headerlink" title="2. Map 阶段"></a>2. <strong>Map 阶段</strong></h4><ul><li>每个 Map 任务处理一个数据分片，执行用户定义的映射函数（如提取、转换数据）。</li><li><strong>输出</strong>：中间键值对（Key-Value）。</li></ul><h4 id="3-Shuffle-阶段"><a href="#3-Shuffle-阶段" class="headerlink" title="3. Shuffle 阶段"></a>3. <strong>Shuffle 阶段</strong></h4><ul><li><strong>核心作用</strong>：将 Map 输出的中间结果按 Key 分组，并分发到对应的 Reduce 任务。</li><li><strong>关键步骤</strong>（见下文详细拆解）。</li></ul><h4 id="4-Reduce-阶段"><a href="#4-Reduce-阶段" class="headerlink" title="4. Reduce 阶段"></a>4. <strong>Reduce 阶段</strong></h4><ul><li>每个 Reduce 任务处理一组具有相同 Key 的数据，执行聚合或计算逻辑。</li><li><strong>输出</strong>：最终结果数据。</li></ul><h4 id="5-结果合并与存储"><a href="#5-结果合并与存储" class="headerlink" title="5. 结果合并与存储"></a>5. <strong>结果合并与存储</strong></h4><ul><li>将所有 Reduce 任务的输出合并（可选），存储到分布式文件系统（如 HDFS）或其他存储介质。</li></ul><h3 id="二、Shuffle-阶段的详细步骤（以-MapReduce-为例）"><a href="#二、Shuffle-阶段的详细步骤（以-MapReduce-为例）" class="headerlink" title="二、Shuffle 阶段的详细步骤（以 MapReduce 为例）"></a>二、Shuffle 阶段的详细步骤（以 MapReduce 为例）</h3><p>Shuffle 是分布式计算中最关键且复杂的环节，负责数据的重组和分发。在 MapReduce 中，Shuffle 分为 Map 端和 Reduce 端两部分，共包含 6 个核心步骤：</p><h4 id="Map-端的-Shuffle-步骤"><a href="#Map-端的-Shuffle-步骤" class="headerlink" title="Map 端的 Shuffle 步骤"></a><strong>Map 端的 Shuffle 步骤</strong></h4><ol><li><strong>Map 输出写入内存缓冲区</strong><ul><li>Map 任务的输出首先写入内存中的环形缓冲区（默认 100MB）。</li><li>缓冲区同时存储数据和元数据（记录 Key 的分区信息、偏移量等）。</li></ul></li><li><strong>溢写（Spill）到磁盘</strong><ul><li>当缓冲区使用率达到阈值（默认 80%）时，触发溢写线程将数据写入本地磁盘。</li><li><strong>排序</strong>：在溢写前，数据按 Key 的哈希值进行分区（Partition），并对每个分区内的 Key 进行排序（如快速排序）。</li><li><strong>合并</strong>：如果配置了 Combiner（本地聚合函数），会在溢写前对相同 Key 的值进行预聚合。</li></ul></li><li><strong>磁盘文件合并</strong><ul><li>多个溢写文件（Spill File）最终合并为一个更大的分区排序文件（Partitioned &amp; Sorted File）。</li><li>合并过程中会保留分区和排序属性，减少 Reduce 端的处理负担。</li></ul></li></ol><h4 id="Reduce-端的-Shuffle-步骤"><a href="#Reduce-端的-Shuffle-步骤" class="headerlink" title="Reduce 端的 Shuffle 步骤"></a><strong>Reduce 端的 Shuffle 步骤</strong></h4><ol><li><strong>远程数据拉取（Fetch）</strong><ul><li>Reduce 任务启动后，通过 HTTP 从所有 Map 任务的输出文件中拉取属于自己分区的数据。</li><li><strong>并行拉取</strong>：多个线程同时从不同 Map 节点获取数据，提高效率。</li></ul></li><li><strong>内存与磁盘数据合并</strong><ul><li>拉取的数据首先存入内存缓冲区，当达到阈值时溢写到磁盘。</li><li>多次溢写会生成多个磁盘文件，最终合并为一个大文件。</li><li><strong>归并排序</strong>：合并过程中对数据按 Key 进行全局排序（如果需要）。</li></ul></li><li><strong>Reduce 处理</strong><ul><li>排序后的 Key-Value 按组（相同 Key 的所有 Value）输入到 Reduce 函数中进行计算。</li><li>最终结果输出到 HDFS 或其他存储系统。</li></ul></li></ol><h2 id="5-hdfs文件系统的读取数据流程是什么"><a href="#5-hdfs文件系统的读取数据流程是什么" class="headerlink" title="5. hdfs文件系统的读取数据流程是什么?"></a>5. hdfs文件系统的读取数据流程是什么?</h2><p>HDFS（Hadoop 分布式文件系统）的读取数据流程主要涉及客户端、NameNode（元数据节点）和 DataNode（数据节点）三个核心组件，流程可分为以下关键步骤：</p><h3 id="1-客户端发起读取请求"><a href="#1-客户端发起读取请求" class="headerlink" title="1. 客户端发起读取请求"></a><strong>1. 客户端发起读取请求</strong></h3><p>客户端通过调用 HDFS 提供的 API（如<code>FileSystem.open(path)</code>）发起文件读取请求。此时，客户端会先与 HDFS 的<code>DistributedFileSystem</code>（分布式文件系统抽象类）交互，告知需要读取的文件路径。</p><h3 id="2-获取文件元数据（与-NameNode-交互）"><a href="#2-获取文件元数据（与-NameNode-交互）" class="headerlink" title="2. 获取文件元数据（与 NameNode 交互）"></a><strong>2. 获取文件元数据（与 NameNode 交互）</strong></h3><p><code>DistributedFileSystem</code>收到请求后，会向<strong>NameNode</strong>发送请求，获取目标文件的元数据。元数据包括：</p><ul><li>文件被分割成的<strong>数据块（Block）列表</strong>（文件按固定大小分割，默认块大小为 128MB 或 256MB）；</li><li>每个数据块的<strong>副本存储位置</strong>（即该块的多个副本分别存放在哪些 DataNode 上）。</li></ul><p>NameNode 仅存储元数据，不存储实际数据，因此会直接返回上述信息。</p><h3 id="3-客户端初始化输入流"><a href="#3-客户端初始化输入流" class="headerlink" title="3. 客户端初始化输入流"></a><strong>3. 客户端初始化输入流</strong></h3><p><code>DistributedFileSystem</code>收到 NameNode 返回的元数据后，会为客户端返回一个<code>FSDataInputStream</code>（文件系统数据输入流）对象。该对象内部封装了<code>DFSInputStream</code>（分布式文件系统输入流），负责后续与 DataNode 的实际数据交互。</p><h3 id="4-客户端读取数据（与-DataNode-交互）"><a href="#4-客户端读取数据（与-DataNode-交互）" class="headerlink" title="4. 客户端读取数据（与 DataNode 交互）"></a><strong>4. 客户端读取数据（与 DataNode 交互）</strong></h3><p><code>DFSInputStream</code>根据 NameNode 返回的元数据，按顺序读取文件的各个数据块，具体过程如下：</p><ul><li><strong>选择最优 DataNode</strong>：对于每个数据块，<code>DFSInputStream</code>会优先选择距离客户端最近的 DataNode（例如同一机架的节点，减少跨机架网络传输），若该节点不可用则自动切换到其他副本所在的 DataNode。</li><li><strong>直接读取数据</strong>：客户端通过<code>DFSInputStream</code>与选中的 DataNode 建立连接，直接读取该块的数据（数据传输不经过 NameNode，减轻 NameNode 负担）。</li><li><strong>顺序读取所有块</strong>：一个块读取完成后，<code>DFSInputStream</code>会关闭与当前 DataNode 的连接，自动连接下一个块的最优 DataNode，继续读取，直到所有块均读取完毕。</li></ul><h3 id="5-容错处理"><a href="#5-容错处理" class="headerlink" title="5. 容错处理"></a><strong>5. 容错处理</strong></h3><p>在读取过程中，若某个 DataNode 出现故障（如网络中断、节点宕机），<code>DFSInputStream</code>会自动处理容错：</p><ul><li>立即关闭与故障 DataNode 的连接；</li><li>从该块的其他副本所在的 DataNode 重新读取数据；</li><li>记录故障节点，后续读取时避免使用。</li></ul><h3 id="6-读取完成，关闭流"><a href="#6-读取完成，关闭流" class="headerlink" title="6. 读取完成，关闭流"></a><strong>6. 读取完成，关闭流</strong></h3><p>当客户端读取完所有数据块（拼接为完整文件）后，调用<code>close()</code>方法关闭<code>FSDataInputStream</code>，结束本次读取流程。</p><h3 id="核心特点总结"><a href="#核心特点总结" class="headerlink" title="核心特点总结"></a><strong>核心特点总结</strong></h3><ul><li><strong>元数据与数据分离</strong>：NameNode 仅提供元数据（块位置），不参与实际数据传输，数据直接在客户端与 DataNode 之间传输，减轻 NameNode 压力。</li><li><strong>副本利用</strong>：通过多副本存储，保证了数据读取的可靠性（某节点故障时可切换到其他副本）。</li><li><strong>就近读取</strong>：优先选择距离客户端最近的 DataNode（如同一机架），减少网络开销，提升效率。</li></ul><p>简言之，HDFS 读取流程可概括为：<strong>客户端请求元数据→NameNode 返回块位置→客户端直接从 DataNode 按块读取→容错处理→完成读取</strong>。</p><h2 id="6-hdfs文件系统的写文件流程是什么"><a href="#6-hdfs文件系统的写文件流程是什么" class="headerlink" title="6. hdfs文件系统的写文件流程是什么?"></a>6. hdfs文件系统的写文件流程是什么?</h2><p>HDFS（Hadoop 分布式文件系统）的写文件流程同样涉及客户端、NameNode 和 DataNode，核心是通过<strong>元数据管理</strong>和<strong>副本机制</strong>保证数据的可靠性和一致性，具体流程如下：</p><h3 id="1-客户端发起写请求"><a href="#1-客户端发起写请求" class="headerlink" title="1. 客户端发起写请求"></a><strong>1. 客户端发起写请求</strong></h3><p>客户端通过 HDFS API（如<code>FileSystem.create(path)</code>）发起文件写入请求，首先与<code>DistributedFileSystem</code>（分布式文件系统抽象类）交互，告知需要写入的文件路径。</p><h3 id="2-向-NameNode-请求创建文件"><a href="#2-向-NameNode-请求创建文件" class="headerlink" title="2. 向 NameNode 请求创建文件"></a><strong>2. 向 NameNode 请求创建文件</strong></h3><p><code>DistributedFileSystem</code>向<strong>NameNode</strong>发送 “创建文件” 请求，NameNode 会进行一系列校验：</p><ul><li>检查文件路径是否已存在（避免覆盖）；</li><li>检查客户端是否有写权限；</li><li>检查父目录是否存在。</li></ul><p>若校验通过，NameNode 会在元数据中记录该文件的创建状态（标记为 “正在写入”），并返回 “允许创建” 的响应；若失败（如文件已存在），则返回错误信息。</p><h3 id="3-客户端初始化输出流并获取-DataNode-列表"><a href="#3-客户端初始化输出流并获取-DataNode-列表" class="headerlink" title="3. 客户端初始化输出流并获取 DataNode 列表"></a><strong>3. 客户端初始化输出流并获取 DataNode 列表</strong></h3><p><code>DistributedFileSystem</code>收到允许创建的响应后，为客户端返回<code>FSDataOutputStream</code>（文件系统数据输出流）对象，其内部封装了<code>DFSOutputStream</code>（分布式输出流），负责后续数据传输和副本管理。</p><p>此时，客户端通过<code>DFSOutputStream</code>向 NameNode 请求<strong>第一个数据块（Block）的存储位置</strong>。NameNode 根据副本放置策略（默认 3 副本），分配 3 个 DataNode 节点（例如：1 个本地机架节点、1 个同机架其他节点、1 个异机架节点，平衡可靠性与网络开销），并将这 3 个 DataNode 的地址返回给客户端。</p><h3 id="4-建立数据传输管道（Pipeline）"><a href="#4-建立数据传输管道（Pipeline）" class="headerlink" title="4. 建立数据传输管道（Pipeline）"></a><strong>4. 建立数据传输管道（Pipeline）</strong></h3><p>客户端的<code>DFSOutputStream</code>根据 NameNode 返回的 DataNode 列表，建立<strong>数据传输管道</strong>：</p><ul><li>客户端先与第一个 DataNode（“管道首节点”）建立 TCP 连接；</li><li>第一个 DataNode 再与第二个 DataNode 建立连接；</li><li>第二个 DataNode 与第三个 DataNode 建立连接；<br>最终形成 “客户端→DataNode1→DataNode2→DataNode3” 的链式管道，用于数据的逐级复制（保证副本一致性）。</li></ul><h3 id="5-客户端写入数据（分块-分数据包）"><a href="#5-客户端写入数据（分块-分数据包）" class="headerlink" title="5. 客户端写入数据（分块 + 分数据包）"></a><strong>5. 客户端写入数据（分块 + 分数据包）</strong></h3><p>客户端开始写入数据，过程如下：</p><ul><li><strong>数据分块</strong>：文件按固定大小（默认 128MB）分割为数据块（Block），逐个写入；</li><li><strong>数据包（Packet）传输</strong>：每个数据块被拆分为更小的数据包（默认 64KB），客户端先将数据包写入本地缓冲区，再通过管道发送给第一个 DataNode；</li><li><strong>副本复制</strong>：第一个 DataNode 接收数据包后，立即转发给第二个 DataNode，第二个再转发给第三个，实现副本的同步复制；</li><li><strong>确认机制</strong>：每个 DataNode 接收数据包并写入本地后，会向 “上游” 返回确认（ACK）。最终，第三个 DataNode 的确认会逐级传回客户端，确保数据包已被所有副本节点接收。</li></ul><h3 id="6-数据块写入完成，请求新块"><a href="#6-数据块写入完成，请求新块" class="headerlink" title="6. 数据块写入完成，请求新块"></a><strong>6. 数据块写入完成，请求新块</strong></h3><p>当一个数据块的所有数据包均写入完成（且收到所有副本的确认），<code>DFSOutputStream</code>会向 NameNode 报告 “当前块写入完成”，并请求分配<strong>下一个数据块的 DataNode 列表</strong>。重复步骤 4-5，直到所有数据块均写入完成。</p><h3 id="7-写入完成，关闭流并确认"><a href="#7-写入完成，关闭流并确认" class="headerlink" title="7. 写入完成，关闭流并确认"></a><strong>7. 写入完成，关闭流并确认</strong></h3><p>客户端写完所有数据后，调用<code>close()</code>方法关闭<code>FSDataOutputStream</code>：</p><ul><li><code>DFSOutputStream</code>会将缓冲区中剩余的数据包全部发送，并等待最后一批确认；</li><li>通知 NameNode “文件写入完成”，NameNode 更新元数据（记录文件的所有块信息、副本位置等），并将文件标记为 “已完成” 状态（此时文件可被读取）。</li></ul><h3 id="容错处理（关键机制）"><a href="#容错处理（关键机制）" class="headerlink" title="容错处理（关键机制）"></a><strong>容错处理（关键机制）</strong></h3><p>写入过程中若某个 DataNode 故障（如网络中断、节点宕机），<code>DFSOutputStream</code>会自动处理：</p><ul><li>立即关闭当前管道，标记故障节点；</li><li>通知 NameNode “该节点故障”，NameNode 会后续调度其他节点补充副本（维持默认 3 副本）；</li><li>客户端重新与剩余的健康 DataNode 建立新管道（例如：若 DataNode2 故障，新管道为 “客户端→DataNode1→DataNode3”），并重发未确认的数据包；</li><li>确保最终所有数据块的副本数量符合配置（默认 3 个）。</li></ul><h3 id="核心特点总结-1"><a href="#核心特点总结-1" class="headerlink" title="核心特点总结"></a><strong>核心特点总结</strong></h3><ul><li><strong>管道复制</strong>：数据通过链式管道逐级复制到副本节点，保证副本一致性；</li><li><strong>确认机制</strong>：每个数据包需经所有副本节点确认后才算完成，确保数据可靠；</li><li><strong>机架感知</strong>：副本分配考虑机架位置（同机架 + 异机架），平衡可靠性（避免单机架故障）与网络效率（减少跨机架传输）；</li><li><strong>NameNode 轻量参与</strong>：仅负责元数据管理和块分配，不参与实际数据传输，降低负担。</li></ul><p>简言之，HDFS 写流程可概括为：<strong>客户端请求创建→NameNode 分配节点→建立管道复制副本→分块分包写入→完成后确认元数据</strong>，通过容错机制确保数据可靠存储。</p><h2 id="7-hdfs文件系统-namenode的更新流程是什么"><a href="#7-hdfs文件系统-namenode的更新流程是什么" class="headerlink" title="7. hdfs文件系统 namenode的更新流程是什么?"></a>7. hdfs文件系统 namenode的更新流程是什么?</h2><p>HDFS 中 NameNode 的核心职责是管理元数据（如文件目录结构、数据块与文件的映射、块的副本位置等），其元数据的更新流程与客户端操作（如创建文件、写入数据、删除文件、重命名等）紧密绑定，同时依赖<strong>持久化机制</strong>（保证元数据不丢失）和<strong>一致性维护</strong>（确保元数据准确）。以下是 NameNode 元数据更新的核心流程：</p><h3 id="一、元数据的存储形式"><a href="#一、元数据的存储形式" class="headerlink" title="一、元数据的存储形式"></a><strong>一、元数据的存储形式</strong></h3><p>NameNode 的元数据分为两种形态，更新流程围绕这两种形态展开：</p><ol><li><p><strong>内存元数据（In-Memory Metadata）</strong>：实时维护的元数据快照，包含所有文件、目录、块的最新状态（如文件是否存在、块的副本位置、块的大小等），供客户端实时查询和操作，性能极高。</p></li><li><p>持久化存储</p><p>：</p><ul><li><strong>FsImage</strong>：元数据的 “快照文件”，定期将内存中的元数据序列化到磁盘，是元数据的持久化基线。</li><li><strong>EditLog</strong>：“操作日志文件”，记录所有对元数据的修改操作（如创建文件、删除块等），是内存元数据的 “变更记录”，确保元数据更新可追溯。</li></ul></li></ol><h3 id="二、元数据更新的核心流程（以-“文件写入”-为例）"><a href="#二、元数据更新的核心流程（以-“文件写入”-为例）" class="headerlink" title="二、元数据更新的核心流程（以 “文件写入” 为例）"></a><strong>二、元数据更新的核心流程（以 “文件写入” 为例）</strong></h3><p>客户端的任何操作（创建、写入、删除等）都会触发 NameNode 的元数据更新，以最典型的 “文件写入” 为例，流程如下：</p><h4 id="1-客户端发起操作请求"><a href="#1-客户端发起操作请求" class="headerlink" title="1. 客户端发起操作请求"></a><strong>1. 客户端发起操作请求</strong></h4><p>客户端通过 API（如<code>create</code>、<code>append</code>等）发起对 HDFS 的修改操作（如创建文件、写入数据块），请求首先到达<code>DistributedFileSystem</code>，再转发给 NameNode。</p><h4 id="2-NameNode-验证操作合法性"><a href="#2-NameNode-验证操作合法性" class="headerlink" title="2. NameNode 验证操作合法性"></a><strong>2. NameNode 验证操作合法性</strong></h4><p>NameNode 收到请求后，先进行合法性校验：</p><ul><li>权限校验（客户端是否有操作权限）；</li><li>状态校验（如创建文件时检查路径是否已存在，写入块时检查文件是否处于 “可写入” 状态）；</li><li>资源校验（如分配块时检查是否有足够的 DataNode 存储空间）。</li></ul><p>若校验失败，直接返回错误；若通过，进入下一步。</p><h4 id="3-记录操作到-EditLog（预写日志，Write-Ahead-Log）"><a href="#3-记录操作到-EditLog（预写日志，Write-Ahead-Log）" class="headerlink" title="3. 记录操作到 EditLog（预写日志，Write-Ahead Log）"></a><strong>3. 记录操作到 EditLog（预写日志，Write-Ahead Log）</strong></h4><p>为保证元数据更新的可靠性，NameNode 采用 <strong>“先写日志，再更新内存”</strong> 的机制（Write-Ahead Logging，WAL）：</p><ul><li>将当前操作（如 “创建文件”“分配块 1 到 DataNode A、B、C”）序列化后写入<strong>EditLog</strong>（默认存储在磁盘的<code>dfs.namenode.edits.dir</code>目录）。</li><li>只有当 EditLog 写入成功（确保操作被持久化），才会执行后续的内存元数据更新。</li></ul><p><em>注：EditLog 是顺序写入的，性能极高，且支持多目录备份（本地磁盘 + 远程存储），防止单点故障导致日志丢失。</em></p><h4 id="4-更新内存元数据"><a href="#4-更新内存元数据" class="headerlink" title="4. 更新内存元数据"></a><strong>4. 更新内存元数据</strong></h4><p>EditLog 写入成功后，NameNode 立即更新<strong>内存中的元数据</strong>：</p><ul><li>例如，创建文件时，内存中新增文件条目，标记为 “正在写入” 状态；</li><li>写入数据块时，为文件添加新的块映射（记录块 ID 与文件的关联），并记录块的副本位置（DataNode 列表）；</li><li>当文件写入完成时，将文件状态从 “正在写入” 改为 “已完成”。</li></ul><p>内存元数据的更新是实时的，确保后续客户端查询能获取最新状态。</p><h3 id="核心特点总结-2"><a href="#核心特点总结-2" class="headerlink" title="核心特点总结"></a><strong>核心特点总结</strong></h3><ol><li><strong>可靠性</strong>：依赖 EditLog 的预写机制（先写日志再更新内存），确保任何元数据修改都被持久化，避免宕机丢失。</li><li><strong>高效性</strong>：内存元数据实时更新，保证客户端操作的低延迟；EditLog 顺序写入、FsImage 定期合并，平衡性能与持久化开销。</li><li><strong>一致性</strong>：通过严格的操作校验和日志记录，确保元数据的状态与实际文件系统一致（如文件要么存在要么不存在，不会出现中间态）。</li></ol><p>简言之，NameNode 的元数据更新流程可概括为：<strong>客户端请求→校验→记录 EditLog→更新内存元数据→定期合并日志与镜像→故障时重放日志恢复</strong>。</p><h2 id="8-整个mapreduce阶段经历几次排序-分别在哪些阶段"><a href="#8-整个mapreduce阶段经历几次排序-分别在哪些阶段" class="headerlink" title="8. 整个mapreduce阶段经历几次排序?分别在哪些阶段?"></a>8. 整个mapreduce阶段经历几次排序?分别在哪些阶段?</h2><p>在 MapReduce 的整个流程中，排序是核心机制之一，共经历<strong>三次排序</strong>，分别发生在以下阶段：</p><ol><li><strong>Map 阶段的溢写（Spill）排序</strong><br>当 Map 任务的环形缓冲区使用率达到阈值（默认 80%）时，数据会被溢写到磁盘。溢写前会对缓冲区中的数据进行<strong>快速排序</strong>，排序依据是键（Key）和分区号（Partition）136。排序后的数据按分区聚集，每个分区内的键值对按 Key 升序排列。这一步确保每个溢写文件在分区内是有序的。</li><li><strong>Map 阶段的合并（Merge）排序</strong><br>Map 任务完成后，磁盘上可能存在多个溢写文件。此时会对这些文件进行<strong>归并排序</strong>，将同一分区的多个溢写文件合并为一个大文件。合并过程中，数据会按 Key 再次排序，最终生成一个分区有序的输出文件。</li><li><strong>Reduce 阶段的输入合并排序</strong><br>Reduce 任务拉取所有 Map 任务的输出数据后，会将同一分区的多个文件进行<strong>归并排序</strong>。这一步将分散的有序数据合并成一个全局有序的文件，确保输入到 Reducer 的数据按 Key 有序排列。合并过程可能涉及内存到磁盘或磁盘到磁盘的多次合并，但最终结果是一个完整的有序数据集。</li></ol><h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><ul><li><strong>排序的必要性</strong>：排序是 MapReduce 框架的默认行为，目的是将相同 Key 的数据聚集到同一个 Reducer 处理，确保数据处理的正确性和高效性。</li><li><strong>排序算法</strong>：Map 阶段的溢写使用快速排序，而合并阶段（包括 Map 和 Reduce）使用归并排序，这两种算法的结合保证了大规模数据处理的性能。</li><li><strong>输出排序</strong>：默认情况下，Reducer 的输出会按 Key 再次排序，但这属于框架自动完成的输出处理，通常不计入 MapReduce 阶段的排序次数。</li></ul><h2 id="9-hive中内部表和外部表有什么区别-分区表和分桶表有什么区别"><a href="#9-hive中内部表和外部表有什么区别-分区表和分桶表有什么区别" class="headerlink" title="9. hive中内部表和外部表有什么区别? 分区表和分桶表有什么区别?"></a>9. hive中内部表和外部表有什么区别? 分区表和分桶表有什么区别?</h2><p>在 Hive 中，内部表与外部表、分区表与分桶表是两组重要的概念，它们的区别如下：</p><h3 id="一、内部表（Managed-Table）-vs-外部表（External-Table）"><a href="#一、内部表（Managed-Table）-vs-外部表（External-Table）" class="headerlink" title="一、内部表（Managed Table） vs 外部表（External Table）"></a><strong>一、内部表（Managed Table） vs 外部表（External Table）</strong></h3><h4 id="1-数据管理方式"><a href="#1-数据管理方式" class="headerlink" title="1. 数据管理方式"></a><strong>1. 数据管理方式</strong></h4><ul><li><strong>内部表</strong><br>Hive 完全管理数据的生命周期，包括数据的存储路径、创建、删除等。当删除内部表时，数据文件也会被永久删除。</li><li><strong>外部表</strong><br>数据存储在 Hive 元数据指定的路径（如 HDFS），Hive 仅管理元数据（表结构）。删除外部表时，数据文件不会被删除，仅删除元数据。</li></ul><h4 id="2-创建语法差异"><a href="#2-创建语法差异" class="headerlink" title="2. 创建语法差异"></a><strong>2. 创建语法差异</strong></h4><ul><li><p>内部表</p><p>sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> internal_table (id <span class="type">INT</span>, name STRING);</span><br></pre></td></tr></table></figure></li><li><p>外部表</p><p>sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> external_table (id <span class="type">INT</span>, name STRING)</span><br><span class="line">LOCATION <span class="string">&#x27;/path/to/data&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-使用场景"><a href="#3-使用场景" class="headerlink" title="3. 使用场景"></a><strong>3. 使用场景</strong></h4><ul><li><strong>内部表</strong>：适合临时数据或测试数据，数据由 Hive 完全掌控。</li><li><strong>外部表</strong>：适合共享数据（如多个系统共同访问同一 HDFS 路径）或避免误删重要数据。</li></ul><h3 id="二、分区表（Partitioned-Table）-vs-分桶表（Bucketed-Table）"><a href="#二、分区表（Partitioned-Table）-vs-分桶表（Bucketed-Table）" class="headerlink" title="二、分区表（Partitioned Table） vs 分桶表（Bucketed Table）"></a><strong>二、分区表（Partitioned Table） vs 分桶表（Bucketed Table）</strong></h3><h4 id="1-数据组织方式"><a href="#1-数据组织方式" class="headerlink" title="1. 数据组织方式"></a><strong>1. 数据组织方式</strong></h4><ul><li><strong>分区表</strong><br>按指定字段（如日期、地区）将数据划分为多个子目录，查询时可通过分区过滤快速定位数据。<br><strong>示例</strong>：按日期分区的表，数据存储在 <code>/table/date=20230101/</code>、<code>/table/date=20230102/</code> 等目录。</li><li><strong>分桶表</strong><br>按指定字段的哈希值将数据分散到多个文件（桶）中，用于提高数据抽样和 JOIN 效率。<br><strong>示例</strong>：按用户 ID 分桶的表，数据被哈希到 <code>000000_0</code>、<code>000001_0</code> 等文件。</li></ul><h4 id="2-创建语法差异-1"><a href="#2-创建语法差异-1" class="headerlink" title="2. 创建语法差异"></a><strong>2. 创建语法差异</strong></h4><ul><li><p>分区表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> partitioned_table (id <span class="type">INT</span>, name STRING)</span><br><span class="line">PARTITIONED <span class="keyword">BY</span> (dt STRING);</span><br></pre></td></tr></table></figure></li><li><p>分桶表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> bucketed_table (id <span class="type">INT</span>, name STRING)</span><br><span class="line">CLUSTERED <span class="keyword">BY</span> (id) <span class="keyword">INTO</span> <span class="number">4</span> BUCKETS;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-使用场景-1"><a href="#3-使用场景-1" class="headerlink" title="3. 使用场景"></a><strong>3. 使用场景</strong></h4><ul><li><strong>分区表</strong>：适合过滤条件频繁涉及分区字段（如按日期查询）的场景，可大幅减少数据扫描范围。</li><li><strong>分桶表</strong>：适合 JOIN 操作（桶数相同且分桶字段一致时可直接匹配）或数据抽样（如 <code>TABLESAMPLE</code> 语句）。</li></ul><h3 id="三、核心区别总结"><a href="#三、核心区别总结" class="headerlink" title="三、核心区别总结"></a><strong>三、核心区别总结</strong></h3><table><thead><tr><th><strong>对比维度</strong></th><th><strong>内部表 vs 外部表</strong></th><th><strong>分区表 vs 分桶表</strong></th></tr></thead><tbody><tr><td><strong>数据管理</strong></td><td>内部表管理数据，外部表仅管理元数据</td><td>均不影响数据生命周期</td></tr><tr><td><strong>数据组织形式</strong></td><td>无特殊组织</td><td>分区按字段创建子目录，分桶按哈希分文件</td></tr><tr><td><strong>主要目的</strong></td><td>控制数据所有权和生命周期</td><td>优化查询性能（分区过滤、分桶 JOIN）</td></tr><tr><td><strong>删除操作影响</strong></td><td>内部表删除数据，外部表保留数据</td><td>均不删除数据</td></tr></tbody></table><h3 id="四、最佳实践建议"><a href="#四、最佳实践建议" class="headerlink" title="四、最佳实践建议"></a><strong>四、最佳实践建议</strong></h3><ol><li><strong>内部表 &#x2F; 外部表选择</strong><ul><li>若数据仅由 Hive 使用且需要自动管理，用内部表。</li><li>若数据需被其他系统共享或保护，用外部表。</li></ul></li><li><strong>分区表 &#x2F; 分桶表选择</strong><ul><li>过滤条件常涉及某字段（如日期）时，优先分区。</li><li>JOIN 操作频繁或需数据抽样时，考虑分桶。</li><li>复杂场景可组合使用（如分区 + 分桶）。</li></ul></li></ol><h2 id="10-数据倾斜是什么-如何规避和处理"><a href="#10-数据倾斜是什么-如何规避和处理" class="headerlink" title="10. 数据倾斜是什么? 如何规避和处理?"></a>10. 数据倾斜是什么? 如何规避和处理?</h2><p>在大数据处理场景中，<strong>数据倾斜</strong>是指由于数据分布极端不均匀，导致部分计算节点承担了远超其他节点的数据量或计算压力，进而拖慢整个任务执行效率（甚至导致节点内存溢出、任务失败）的现象。</p><h3 id="数据倾斜的表现与影响"><a href="#数据倾斜的表现与影响" class="headerlink" title="数据倾斜的表现与影响"></a><strong>数据倾斜的表现与影响</strong></h3><ul><li><strong>表现</strong>：任务进度长时间停留在 99%（少数节点未完成）、部分节点日志频繁报内存警告（OOM）、不同节点处理的数据量差异悬殊（如某节点处理 1000 万条数据，其他节点仅处理 1 万条）。</li><li><strong>影响</strong>：任务执行时间大幅延长、资源利用率极低（多数节点空闲）、极端情况导致任务失败。</li></ul><h3 id="数据倾斜的常见场景"><a href="#数据倾斜的常见场景" class="headerlink" title="数据倾斜的常见场景"></a><strong>数据倾斜的常见场景</strong></h3><p>数据倾斜通常发生在需要<strong>shuffle 操作</strong>的环节（如<code>group by</code>、<code>join</code>、<code>distinct</code>等），因为 shuffle 会根据 key 的哈希值分配数据到不同节点，若某个 key 的数量异常多（“大 key”），则会导致对应节点负载过高。常见场景包括：</p><ul><li><code>group by key</code>时，某类 key 的数量占比超过 90%；</li><li><code>join</code>操作中，某张表的某个关联 key 包含数百万条数据，而其他 key 仅数千条；</li><li><code>distinct</code>去重时，某个值的重复次数极高（如统计用户行为时，“未知用户 ID” 的记录量极大）。</li></ul><h3 id="数据倾斜的规避方法（事前预防）"><a href="#数据倾斜的规避方法（事前预防）" class="headerlink" title="数据倾斜的规避方法（事前预防）"></a><strong>数据倾斜的规避方法（事前预防）</strong></h3><p>规避的核心是<strong>减少 “大 key” 的产生</strong>，从数据源头或计算逻辑上避免极端不均匀的分布。</p><h4 id="1-数据预处理：过滤-清洗无效数据"><a href="#1-数据预处理：过滤-清洗无效数据" class="headerlink" title="1. 数据预处理：过滤 &#x2F; 清洗无效数据"></a>1. <strong>数据预处理：过滤 &#x2F; 清洗无效数据</strong></h4><ul><li><p>提前过滤掉无意义的 “脏数据”（如空值、默认值、异常值）。例如：用户行为日志中，“未知用户 ID（如 - 1）” 的记录可能占比极高，可提前过滤或单独标记处理。</p></li><li><p>示例：在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">join</span><br></pre></td></tr></table></figure><p>前，先过滤掉关联 key 为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">null</span><br></pre></td></tr></table></figure><p>或异常值的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 过滤无效key，避免参与shuffle</span></span><br><span class="line"><span class="keyword">SELECT</span> a.id, b.name </span><br><span class="line"><span class="keyword">FROM</span> table_a a</span><br><span class="line"><span class="keyword">JOIN</span> table_b b </span><br><span class="line"><span class="keyword">ON</span> a.id <span class="operator">=</span> b.id </span><br><span class="line"><span class="keyword">WHERE</span> a.id <span class="keyword">IS</span> <span class="keyword">NOT NULL</span> <span class="keyword">AND</span> a.id <span class="operator">!=</span> <span class="number">-1</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-拆分大-key：将集中的-key-分散化"><a href="#2-拆分大-key：将集中的-key-分散化" class="headerlink" title="2. 拆分大 key：将集中的 key 分散化"></a>2. <strong>拆分大 key：将集中的 key 分散化</strong></h4><ul><li>若某类 key 天然存在（如热门商品 ID），可通过 “拆分” 将其转化为多个子 key，分散到不同节点。例如：将大 key <code>key001</code>拆分为<code>key001_0</code>、<code>key001_1</code>、…、<code>key001_n</code>，每个子 key 的数据量均匀。</li><li>适用场景：已知某 key 是大 key（如业务上已知 “热门商品 ID”），可在数据写入时提前拆分，或在计算前通过规则拆分。</li></ul><h4 id="3-选择合适的计算逻辑：避免不必要的-shuffle"><a href="#3-选择合适的计算逻辑：避免不必要的-shuffle" class="headerlink" title="3. 选择合适的计算逻辑：避免不必要的 shuffle"></a>3. <strong>选择合适的计算逻辑：避免不必要的 shuffle</strong></h4><ul><li><p>小表广播（Broadcast Join）：若</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">join</span><br></pre></td></tr></table></figure><p>的两张表中，一张是小表（数据量 &lt;广播阈值，如 10GB），可将小表广播到所有节点，避免 shuffle（大表与本地小表直接关联）。适用于 “大表 join 小表” 场景（如维度表与事实表 join）。</p><ul><li><p>Spark 中可通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">broadcast()</span><br></pre></td></tr></table></figure><p>函数实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.sql.functions <span class="keyword">import</span> broadcast</span><br><span class="line">df = big_table.join(broadcast(small_table), on=<span class="string">&quot;key&quot;</span>, how=<span class="string">&quot;left&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>避免全局<code>distinct</code>：如需统计 “用户总数”，若直接用<code>count(distinct user_id)</code>，可能因某类用户 ID 重复过多导致倾斜，可改为<code>group by user_id</code>后<code>count</code>，分散计算压力。</p></li></ul><h3 id="数据倾斜的处理方法（事中解决）"><a href="#数据倾斜的处理方法（事中解决）" class="headerlink" title="数据倾斜的处理方法（事中解决）"></a><strong>数据倾斜的处理方法（事中解决）</strong></h3><p>当倾斜已发生时，核心是 <strong>“拆分大 key，分散负载”</strong> 或 <strong>“单独处理大 key”</strong>，以下是具体策略：</p><h4 id="1-大-key-拆分（加盐法）"><a href="#1-大-key-拆分（加盐法）" class="headerlink" title="1. 大 key 拆分（加盐法）"></a>1. <strong>大 key 拆分（加盐法）</strong></h4><p>对导致倾斜的大 key，通过添加随机前缀（“加盐”）将其拆分为多个子 key，分散到不同节点处理，最后合并结果。<br><strong>示例</strong>：<code>join</code>时某 key <code>K</code>有 100 万条数据，其他 key 仅 1 万条：</p><ul><li><strong>步骤 1</strong>：对左表的<code>K</code>添加随机前缀（如<code>K_0</code>、<code>K_1</code>、…、<code>K_9</code>），拆分为 10 个子 key（数据量各 10 万）；</li><li><strong>步骤 2</strong>：对右表的<code>K</code>复制 10 份，分别添加相同前缀（<code>K_0</code>到<code>K_9</code>）；</li><li><strong>步骤 3</strong>：两表按加盐后的 key 进行<code>join</code>，此时原大 key 的 100 万数据被分散到 10 个节点处理；</li><li><strong>步骤 4</strong>：去掉前缀，合并结果。</li></ul><h4 id="2-调整-shuffle-分区数"><a href="#2-调整-shuffle-分区数" class="headerlink" title="2. 调整 shuffle 分区数"></a>2. <strong>调整 shuffle 分区数</strong></h4><p>默认的 shuffle 分区数（如 Spark 默认 200，Hive 默认 100）可能导致分区数不足，加剧倾斜。可通过增加分区数让数据更均匀分布：</p><ul><li>Spark：<code>spark.sql.shuffle.partitions = 1000</code>（根据数据量调整，通常每分区 100MB~1GB）；</li><li>Hive：<code>set mapreduce.job.reduces = 1000</code>（reduce 数即分区数）。</li></ul><h4 id="3-框架级参数优化"><a href="#3-框架级参数优化" class="headerlink" title="3. 框架级参数优化"></a>3. <strong>框架级参数优化</strong></h4><p>主流大数据框架提供了自动处理倾斜的参数，可直接开启：</p><ul><li>Spark：<ul><li><code>spark.sql.adaptive.enabled = true</code>（自适应执行，动态调整分区数）；</li><li><code>spark.sql.adaptive.skewJoin.enabled = true</code>（自动检测并处理 join 倾斜，拆分大 key）。</li></ul></li><li>Hive：<ul><li><code>set hive.optimize.skewjoin = true</code>（开启倾斜 join 优化）；</li><li><code>set hive.skewjoin.key = 100000</code>（定义 “大 key” 阈值，超过该值则视为倾斜）。</li></ul></li></ul><h4 id="4-过滤或单独处理大-key"><a href="#4-过滤或单独处理大-key" class="headerlink" title="4. 过滤或单独处理大 key"></a>4. <strong>过滤或单独处理大 key</strong></h4><p>若大 key 的数据无实际业务意义（如测试数据、异常值），可直接过滤；若必须保留，可单独提取大 key 数据，用 “小表广播” 或 “Map 端 join” 单独处理，再与其他结果合并。</p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>数据倾斜的本质是 <strong>“数据分布不均匀”</strong>，核心解决思路是：</p><ol><li><strong>事前规避</strong>：通过数据清洗、逻辑优化减少大 key 产生；</li><li><strong>事中处理</strong>：通过拆分大 key、调整分区、框架参数优化等分散负载。</li></ol><p>实际处理中需结合具体业务场景（如数据特点、计算逻辑）和框架特性选择合适方案，最终目标是让数据在节点间分布尽可能均匀，提升整体计算效率。</p><h2 id="11-如何使用hdfs文件系统上传或下载数据-关闭hdfs文件系统安全模式"><a href="#11-如何使用hdfs文件系统上传或下载数据-关闭hdfs文件系统安全模式" class="headerlink" title="11. 如何使用hdfs文件系统上传或下载数据? 关闭hdfs文件系统安全模式"></a>11. 如何使用hdfs文件系统上传或下载数据? 关闭hdfs文件系统安全模式</h2><p>HDFS（Hadoop Distributed File System）是 Hadoop 生态系统的核心组件，用于存储和管理大规模数据集。下面介绍如何使用 HDFS 命令行工具上传 &#x2F; 下载数据，以及如何关闭安全模式。</p><h3 id="一、HDFS-数据上传与下载"><a href="#一、HDFS-数据上传与下载" class="headerlink" title="一、HDFS 数据上传与下载"></a><strong>一、HDFS 数据上传与下载</strong></h3><h4 id="1-上传数据到-HDFS（从本地到-HDFS）"><a href="#1-上传数据到-HDFS（从本地到-HDFS）" class="headerlink" title="1. 上传数据到 HDFS（从本地到 HDFS）"></a><strong>1. 上传数据到 HDFS（从本地到 HDFS）</strong></h4><p>使用<code>hdfs dfs -put</code>或<code>hdfs dfs -copyFromLocal</code>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法：hdfs dfs -put &lt;本地路径&gt; &lt;HDFS目标路径&gt;</span></span><br><span class="line">hdfs dfs -put /home/user/local_data.txt /user/hdfs/data/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或使用copyFromLocal（功能相同）</span></span><br><span class="line">hdfs dfs -copyFromLocal /home/user/local_data.txt /user/hdfs/data/</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><ul><li><code>-f</code>：强制覆盖 HDFS 上已存在的文件（若目标路径已存在同名文件）。</li><li><code>-p</code>：保留原始文件的权限、时间戳等属性。</li></ul><p><strong>示例</strong>：上传目录及其所有子文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -put /home/user/local_dir /user/hdfs/</span><br></pre></td></tr></table></figure><h4 id="2-从-HDFS-下载数据（从-HDFS-到本地）"><a href="#2-从-HDFS-下载数据（从-HDFS-到本地）" class="headerlink" title="2. 从 HDFS 下载数据（从 HDFS 到本地）"></a><strong>2. 从 HDFS 下载数据（从 HDFS 到本地）</strong></h4><p>使用<code>hdfs dfs -get</code>或<code>hdfs dfs -copyToLocal</code>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法：hdfs dfs -get &lt;HDFS路径&gt; &lt;本地目标路径&gt;</span></span><br><span class="line">hdfs dfs -get /user/hdfs/data.txt /home/user/downloads/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或使用copyToLocal（功能相同）</span></span><br><span class="line">hdfs dfs -get /user/hdfs/data.txt /home/user/downloads/</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><ul><li><code>-f</code>：强制覆盖本地已存在的文件。</li><li><code>-ignoreCrc</code>：忽略 CRC 校验（若文件损坏但仍需下载）。</li></ul><p><strong>示例</strong>：下载整个目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -get /user/hdfs/dir /home/user/downloads/</span><br></pre></td></tr></table></figure><h4 id="3-其他常用-HDFS-操作命令"><a href="#3-其他常用-HDFS-操作命令" class="headerlink" title="3. 其他常用 HDFS 操作命令"></a><strong>3. 其他常用 HDFS 操作命令</strong></h4><ul><li><p>查看 HDFS 文件列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">ls</span> /user/hdfs/</span><br></pre></td></tr></table></figure></li><li><p>查看文件内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">cat</span> /user/hdfs/data.txt</span><br></pre></td></tr></table></figure></li><li><p>创建目录:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">mkdir</span> -p /user/hdfs/new_dir</span><br></pre></td></tr></table></figure></li><li><p>删除文件 &#x2F; 目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">rm</span> -r /user/hdfs/to_delete</span><br></pre></td></tr></table></figure></li></ul><h3 id="二、关闭-HDFS-安全模式"><a href="#二、关闭-HDFS-安全模式" class="headerlink" title="二、关闭 HDFS 安全模式"></a><strong>二、关闭 HDFS 安全模式</strong></h3><h4 id="1-安全模式简介"><a href="#1-安全模式简介" class="headerlink" title="1. 安全模式简介"></a><strong>1. 安全模式简介</strong></h4><p>安全模式是 HDFS 的一种保护机制，用于在系统启动、故障恢复或维护期间防止数据被修改。在此模式下：</p><ul><li>客户端只能读取数据，不能写入或删除文件；</li><li>NameNode 不会执行块的复制或删除操作；</li><li>当集群中超过 99.9% 的块满足最小副本数要求时，安全模式可手动关闭。</li></ul><h4 id="2-查看当前安全模式状态"><a href="#2-查看当前安全模式状态" class="headerlink" title="2. 查看当前安全模式状态"></a><strong>2. 查看当前安全模式状态</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfsadmin -safemode get</span><br><span class="line"><span class="comment"># 输出示例：Safe mode is OFF（关闭）或Safe mode is ON（开启）</span></span><br></pre></td></tr></table></figure><h4 id="3-手动关闭安全模式（需管理员权限）"><a href="#3-手动关闭安全模式（需管理员权限）" class="headerlink" title="3. 手动关闭安全模式（需管理员权限）"></a><strong>3. 手动关闭安全模式（需管理员权限）</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfsadmin -safemode leave</span><br></pre></td></tr></table></figure><p><strong>执行流程</strong>：</p><ol><li>NameNode 检查集群中数据块的状态，确保足够的副本存在；</li><li>若满足条件（通常 99.9% 以上的块有足够副本），安全模式自动退出；</li><li>若不满足条件，需等待数据块复制完成或手动修复（如添加 DataNode）。</li></ol><h4 id="4-强制退出安全模式（谨慎使用）"><a href="#4-强制退出安全模式（谨慎使用）" class="headerlink" title="4. 强制退出安全模式（谨慎使用）"></a><strong>4. 强制退出安全模式（谨慎使用）</strong></h4><p>若集群处于异常状态（如数据块丢失），但仍需强制关闭安全模式，可使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfsadmin -safemode forceExit</span><br></pre></td></tr></table></figure><p><strong>风险提示</strong>：强制退出可能导致数据不一致或丢失，仅在紧急情况下使用。</p><h4 id="5-进入安全模式（用于维护）"><a href="#5-进入安全模式（用于维护）" class="headerlink" title="5. 进入安全模式（用于维护）"></a><strong>5. 进入安全模式（用于维护）</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfsadmin -safemode enter</span><br></pre></td></tr></table></figure><h3 id="三、常见问题与解决方案"><a href="#三、常见问题与解决方案" class="headerlink" title="三、常见问题与解决方案"></a><strong>三、常见问题与解决方案</strong></h3><h4 id="1-上传文件时提示-“安全模式开启”"><a href="#1-上传文件时提示-“安全模式开启”" class="headerlink" title="1. 上传文件时提示 “安全模式开启”"></a><strong>1. 上传文件时提示 “安全模式开启”</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot create file/user/hdfs/data.txt. Name node is in safe mode.</span><br></pre></td></tr></table></figure><p><strong>解决</strong>：执行<code>hdfs dfsadmin -safemode leave</code>关闭安全模式。</p><h4 id="2-安全模式无法自动退出"><a href="#2-安全模式无法自动退出" class="headerlink" title="2. 安全模式无法自动退出"></a><strong>2. 安全模式无法自动退出</strong></h4><p>可能原因：</p><ul><li>数据块副本不足，NameNode 持续等待复制完成；</li><li>DataNode 与 NameNode 通信异常（检查网络和日志）。<br><strong>解决</strong>：</li></ul><ol><li><p>检查数据块状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs fsck /</span><br></pre></td></tr></table></figure></li><li><p>若有丢失块，尝试修复或重新上传数据；</p></li><li><p>确认所有 DataNode 正常运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfsadmin -report</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-权限问题"><a href="#3-权限问题" class="headerlink" title="3. 权限问题"></a><strong>3. 权限问题</strong></h4><p>若提示<code>Permission denied</code>，需确保当前用户有操作权限，或使用<code>hdfs dfs -chmod</code>修改权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">chmod</span> 775 /user/hdfs/dir  <span class="comment"># 赋予读写执行权限</span></span><br></pre></td></tr></table></figure><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li><strong>上传数据</strong>：<code>hdfs dfs -put &lt;本地路径&gt; &lt;HDFS路径&gt;</code></li><li><strong>下载数据</strong>：<code>hdfs dfs -get &lt;HDFS路径&gt; &lt;本地路径&gt;</code></li><li><strong>关闭安全模式</strong>：<code>hdfs dfsadmin -safemode leave</code></li><li><strong>维护建议</strong>：定期检查 HDFS 健康状态（<code>hdfs dfsadmin -report</code>），确保数据块副本数达标，避免频繁进入安全模式。</li></ul><h2 id="12-order-by-和sort-by-的区别和使用场景"><a href="#12-order-by-和sort-by-的区别和使用场景" class="headerlink" title="12. order by 和sort by 的区别和使用场景?"></a>12. order by 和sort by 的区别和使用场景?</h2><p><code>ORDER BY</code> 和 <code>SORT BY</code> 是在数据处理和查询中用于排序的操作，但它们在功能、应用场景和实现机制上存在一些区别，下面为你详细介绍：</p><h3 id="1-SQL-中的-ORDER-BY"><a href="#1-SQL-中的-ORDER-BY" class="headerlink" title="1. SQL 中的 ORDER BY"></a>1. SQL 中的 <code>ORDER BY</code></h3><ul><li><p><strong>功能</strong>：对查询结果进行全局排序，确保最终输出的结果集完全有序。</p></li><li><p><strong>应用场景</strong>：需要最终结果严格有序的场景，如生成报表、导出排序后的数据等。</p></li><li><p>特点：</p><ul><li>对整个结果集进行排序，开销较大。</li><li>在分布式环境中，需要将所有数据收集到一个节点上进行排序，可能导致数据倾斜和性能问题。</li></ul></li><li><p>示例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-SQL-中的-SORT-BY（部分数据库支持）"><a href="#2-SQL-中的-SORT-BY（部分数据库支持）" class="headerlink" title="2. SQL 中的 SORT BY（部分数据库支持）"></a>2. SQL 中的 <code>SORT BY</code>（部分数据库支持）</h3><ul><li><p><strong>功能</strong>：在某些数据库（如 Hive）中，<code>SORT BY</code> 用于在每个分区内进行排序，而非全局排序。</p></li><li><p><strong>应用场景</strong>：在分布式处理中，不需要全局排序，但需要每个分区内部有序的场景。</p></li><li><p>特点：</p><ul><li>每个分区独立排序，不同分区之间的顺序无法保证。</li><li>性能优于 <code>ORDER BY</code>，因为不需要数据集中。</li></ul></li><li><p>示例</p><p>（Hive 语法）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line">DISTRIBUTE <span class="keyword">BY</span> department</span><br><span class="line">SORT <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>这个查询会将数据按部门分区，每个部门内按薪水降序排列。</p></li></ul><h3 id="3-编程语言中的-sort-by（如-Python、Java）"><a href="#3-编程语言中的-sort-by（如-Python、Java）" class="headerlink" title="3. 编程语言中的 sort by（如 Python、Java）"></a>3. 编程语言中的 <code>sort by</code>（如 Python、Java）</h3><ul><li><p><strong>功能</strong>：在编程语言中，通常使用类似 <code>sort by</code> 的语法对集合或数据结构进行排序。</p></li><li><p><strong>应用场景</strong>：在程序中对内存中的数据进行排序。</p></li><li><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">employees = [</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;salary&quot;</span>: <span class="number">5000</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;salary&quot;</span>: <span class="number">6000</span>&#125;</span><br><span class="line">]</span><br><span class="line">sorted_employees = <span class="built_in">sorted</span>(employees, key=<span class="keyword">lambda</span> x: x[<span class="string">&quot;salary&quot;</span>], reverse=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-主要区别总结"><a href="#4-主要区别总结" class="headerlink" title="4. 主要区别总结"></a>4. 主要区别总结</h3><table><thead><tr><th><strong>对比项</strong></th><th><strong>ORDER BY</strong></th><th><strong>SORT BY</strong></th></tr></thead><tbody><tr><td><strong>排序范围</strong></td><td>全局排序</td><td>分区内排序（数据库）或局部排序（编程语言）</td></tr><tr><td><strong>数据分布</strong></td><td>需收集所有数据</td><td>分区处理，数据无需集中</td></tr><tr><td><strong>性能</strong></td><td>低（尤其在大数据量时）</td><td>高</td></tr><tr><td><strong>结果保证</strong></td><td>完全有序</td><td>分区内有序，全局不一定有序</td></tr><tr><td><strong>典型场景</strong></td><td>生成最终报表、严格有序输出</td><td>中间处理步骤、提升性能</td></tr></tbody></table><h3 id="5-使用建议"><a href="#5-使用建议" class="headerlink" title="5. 使用建议"></a>5. 使用建议</h3><ul><li><strong>需要全局排序</strong>：使用 <code>ORDER BY</code>，但注意大数据量下的性能问题。</li><li><strong>分布式环境优化</strong>：使用 <code>DISTRIBUTE BY + SORT BY</code> 替代 <code>ORDER BY</code>，提升性能。</li><li><strong>编程语言中排序</strong>：使用内置的排序函数，根据需求选择升序或降序。</li></ul><p>理解这些区别后，你可以根据具体场景选择合适的排序方式，在保证结果正确性的同时优化性能。</p><h2 id="13-cluster-by-和distribute-by-的区别和使用场景"><a href="#13-cluster-by-和distribute-by-的区别和使用场景" class="headerlink" title="13. cluster by 和distribute by 的区别和使用场景?"></a>13. cluster by 和distribute by 的区别和使用场景?</h2><p>在数据处理中，<code>CLUSTER BY</code> 和 <code>DISTRIBUTE BY</code> 是用于控制数据分布和分组的操作，主要在分布式计算框架（如 Hive、Spark SQL）中使用。它们的区别和应用场景如下：</p><h3 id="1-DISTRIBUTE-BY-的功能与场景"><a href="#1-DISTRIBUTE-BY-的功能与场景" class="headerlink" title="1. DISTRIBUTE BY 的功能与场景"></a><strong>1. <code>DISTRIBUTE BY</code> 的功能与场景</strong></h3><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a><strong>功能</strong></h4><ul><li><strong>数据分区</strong>：将数据按照指定的字段分发到不同的分区（Partition）或节点中，确保相同字段值的数据被分配到同一个分区。</li><li><strong>不保证排序</strong>：只控制数据的分布，不保证分区内数据有序。</li></ul><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a><strong>应用场景</strong></h4><ul><li><strong>优化后续操作</strong>：例如，在执行 <code>JOIN</code> 或 <code>GROUP BY</code> 前，通过 <code>DISTRIBUTE BY</code> 将关联键相同的数据分到同一节点，减少数据传输开销。</li><li><strong>与 <code>SORT BY</code> 配合</strong>：在每个分区内进行排序（需搭配 <code>SORT BY</code>）。</li></ul><h4 id="示例（Hive-语法）"><a href="#示例（Hive-语法）" class="headerlink" title="示例（Hive 语法）"></a><strong>示例（Hive 语法）</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line">DISTRIBUTE <span class="keyword">BY</span> department;</span><br></pre></td></tr></table></figure><ul><li>数据会按 <code>department</code> 字段分发到不同分区，但每个分区内的数据是无序的。</li></ul><h3 id="2-CLUSTER-BY-的功能与场景"><a href="#2-CLUSTER-BY-的功能与场景" class="headerlink" title="2. CLUSTER BY 的功能与场景"></a><strong>2. <code>CLUSTER BY</code> 的功能与场景</strong></h3><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a><strong>功能</strong></h4><ul><li><strong>数据分区 + 排序</strong>：相当于 <code>DISTRIBUTE BY</code> 和 <code>SORT BY</code> 的组合，既按指定字段分区，又在每个分区内按该字段排序。</li><li><strong>等价写法</strong>：<code>CLUSTER BY col</code> 等价于 <code>DISTRIBUTE BY col SORT BY col</code>。</li></ul><h4 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a><strong>应用场景</strong></h4><ul><li><strong>简化语法</strong>：当分区字段和排序字段相同时，使用 <code>CLUSTER BY</code> 更简洁。</li><li><strong>数据聚类</strong>：使相同字段值的数据聚集在一起，且有序排列，便于后续处理。</li></ul><h4 id="示例（Hive-语法）-1"><a href="#示例（Hive-语法）-1" class="headerlink" title="示例（Hive 语法）"></a><strong>示例（Hive 语法）</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line">CLUSTER <span class="keyword">BY</span> department;</span><br></pre></td></tr></table></figure><ul><li><p>等价于：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line">DISTRIBUTE <span class="keyword">BY</span> department</span><br><span class="line">SORT <span class="keyword">BY</span> department;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-核心区别对比"><a href="#3-核心区别对比" class="headerlink" title="3. 核心区别对比"></a><strong>3. 核心区别对比</strong></h3><table><thead><tr><th><strong>对比项</strong></th><th><strong>DISTRIBUTE BY</strong></th><th><strong>CLUSTER BY</strong></th></tr></thead><tbody><tr><td><strong>数据分布</strong></td><td>按字段分区，确保相同值在同一分区</td><td>同上</td></tr><tr><td><strong>分区内排序</strong></td><td>不保证排序</td><td>按相同字段排序（升序）</td></tr><tr><td><strong>语法复杂度</strong></td><td>需搭配 <code>SORT BY</code> 实现排序</td><td>一步完成分区和排序，更简洁</td></tr><tr><td><strong>典型场景</strong></td><td>优化 <code>JOIN</code>、分区后自定义排序</td><td>数据聚类、简化语法</td></tr></tbody></table><h3 id="4-使用建议"><a href="#4-使用建议" class="headerlink" title="4. 使用建议"></a><strong>4. 使用建议</strong></h3><ol><li><p><strong>只需分区</strong>：使用 <code>DISTRIBUTE BY</code>，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line">DISTRIBUTE <span class="keyword">BY</span> department</span><br><span class="line">SORT <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;  <span class="comment">-- 分区后按薪水排序</span></span><br></pre></td></tr></table></figure></li><li><p><strong>分区 + 排序（字段相同）</strong>：使用 <code>CLUSTER BY</code>，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line">CLUSTER <span class="keyword">BY</span> department;  <span class="comment">-- 按部门分区并排序</span></span><br></pre></td></tr></table></figure></li><li><p><strong>分区 + 排序（字段不同）</strong>：使用 <code>DISTRIBUTE BY + SORT BY</code>，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees</span><br><span class="line">DISTRIBUTE <span class="keyword">BY</span> department</span><br><span class="line">SORT <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;  <span class="comment">-- 按部门分区，每个分区内按薪水排序</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-性能考虑"><a href="#5-性能考虑" class="headerlink" title="5. 性能考虑"></a><strong>5. 性能考虑</strong></h3><ul><li><strong>数据倾斜</strong>：若字段值分布不均（如 <code>department</code> 中某部门数据过多），可能导致部分分区处理压力过大。</li><li><strong>分布式计算</strong>：合理使用 <code>DISTRIBUTE BY</code> 可减少 <code>SHUFFLE</code> 开销，但过度分区会增加任务数。</li></ul><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li><strong>DISTRIBUTE BY</strong>：专注于数据分区，适用于优化数据分布。</li><li><strong>CLUSTER BY</strong>：分区 + 排序一步到位，适用于简化语法和数据聚类。</li></ul><p>根据具体需求选择，若需自定义排序规则或分区与排序字段不同，使用 <code>DISTRIBUTE BY + SORT BY</code>；否则使用 <code>CLUSTER BY</code> 更高效。</p><p>​                               </p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive</title>
      <link href="/2025/06/27/Hive/"/>
      <url>/2025/06/27/Hive/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是HIVE"><a href="#什么是HIVE" class="headerlink" title="什么是HIVE"></a>什么是HIVE</h1><p>Hive 是<strong>基于 Hadoop 的一个数据仓库工具</strong>。以下是具体介绍:</p><ul><li><strong>功能特点</strong>：Hive 可以<strong>将结构化的数据文件映射为一张数据库表</strong>，并提供完整的 SQL 查询功能，能将 SQL 语句转换为 MapReduce 任务进行运行。它允许熟悉 SQL 的用户方便地查询数据，也支持熟悉 MapReduce 的开发者自定义 mapper 和 reducer，以处理复杂的分析工作。</li><li><strong>优势</strong>：学习成本低，通过类 SQL 语句可快速实现简单的 MapReduce 统计，无需开发专门的 MapReduce 应用，十分适合数据仓库的统计分析。</li><li><strong>应用场景</strong>：常用于对时效性要求不高的数据分析场景。由于 <strong>Hive 底层依赖 Hadoop 的 HDFS 存储数据</strong>，利用 MapReduce 进行计算，因此能够处理大规模的数据，在处理海量结构化日志的数据统计等方面应用广泛。</li><li><strong>与数据库的区别</strong>：<ol><li>数据库一般用于在线应用，支持对某一行或某些行数据的更新、删除等操作，采用 “写时模式”，数据加载慢但查询快。</li><li>而 Hive 不支持对具体行的操作，也不支持事务和索引，采用 “读时模式”，适合处理非结构化或存储模式未知的数据，更侧重于对海量数据的批量处理和分析。</li></ol></li></ul><h1 id="HIVE安装"><a href="#HIVE安装" class="headerlink" title="HIVE安装"></a><a href="Hadoop.md#HIVE%E5%AE%89%E8%A3%85">HIVE安装</a></h1><h2 id="配置mysql安装源"><a href="#配置mysql安装源" class="headerlink" title="配置mysql安装源"></a>配置mysql安装源</h2><p>（在线安装方法）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载安装源</span></span><br><span class="line">wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 mysql 源</span></span><br><span class="line">yum localinstall mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line"><span class="comment"># 导入key</span></span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"><span class="comment"># 修改国内源</span></span><br><span class="line">vim /etc/yum.repos.d/mysql-community.repo</span><br><span class="line">修改 baseurl 为 https://mirrors.cloud.tencent.com/mysql/yum/mysql-5.7-community-el7-x86_64/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装mysql</span></span><br><span class="line">yum install -y mysql-community-server</span><br></pre></td></tr></table></figure><ol><li>安装mysql （本地安装方法）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">00#rpm包安装</span><br><span class="line"><span class="comment">#tar -zvxf mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz  -C /usr/local/mysql</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.解压：</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line">tar -zxvf mysql-5.7.22-linux-glibc2.12-x86_64.tar</span><br><span class="line"><span class="built_in">mv</span> mysql-5.7.22-linux-glibc2.12-x86_64 mysql-5.7.22</span><br><span class="line"><span class="built_in">ln</span> -s mysql-5.7.22 mysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.添加用户组和用户</span></span><br><span class="line"><span class="comment">#添加用户组</span></span><br><span class="line">groupadd mysql</span><br><span class="line"><span class="comment">#添加用户mysql 到用户组mysql</span></span><br><span class="line">useradd -g mysql mysql</span><br><span class="line"><span class="comment">#4.安装</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/mysql</span><br><span class="line"><span class="built_in">mkdir</span> data</span><br><span class="line"><span class="built_in">chown</span> -R mysql:mysql ./</span><br><span class="line">./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql/m<span class="string">&#x27;y&#x27;</span>s<span class="string">&#x27;q --datadir=/usr/local/mysql/data</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#将mysql/目录下除了data/目录的所有文件，改回root用户所有</span></span><br><span class="line"><span class="string">chown -R root .</span></span><br><span class="line"><span class="string">#mysql用户只需作为mysql-5.7.22/data/目录下所有文件的所有者</span></span><br><span class="line"><span class="string">chown -R mysql data</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#5.复制启动文件</span></span><br><span class="line"><span class="string">cp support-files/mysql.server /etc/init.d/mysqld</span></span><br><span class="line"><span class="string">chmod 755 /etc/init.d/mysqld</span></span><br><span class="line"><span class="string">cp bin/my_print_defaults /usr/bin/ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#6.修改启动脚本</span></span><br><span class="line"><span class="string">vi /etc/init.d/mysqld</span></span><br><span class="line"><span class="string">#修改项：</span></span><br><span class="line"><span class="string">basedir=/usr/local/mysql-5.7.22/</span></span><br><span class="line"><span class="string">datadir=/usr/local/mysql-5.7.22/data</span></span><br><span class="line"><span class="string">port=3306</span></span><br><span class="line"><span class="string">#加入环境变量，编辑 /etc/profile，这样可以在任何地方用mysql命令了</span></span><br><span class="line"><span class="string">vi ~/.bash_profile</span></span><br><span class="line"><span class="string">#添加mysql路径，加入下面内容，按ESC--&gt;:wq保存</span></span><br><span class="line"><span class="string">export PATH=$PATH:/usr/local/mysql-5.7.22/bin</span></span><br><span class="line"><span class="string">#刷新立即生效</span></span><br><span class="line"><span class="string">source ~/.bash_profile</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#7.修改mysql配置项</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">vi /etc/my.cnf</span></span><br><span class="line"><span class="string">#配置如下：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">basedir = /usr/local/mysql</span></span><br><span class="line"><span class="string">datadir = /usr/local/mysql/data</span></span><br><span class="line"><span class="string">socket = /tmp/mysql.sock</span></span><br><span class="line"><span class="string">user = mysql</span></span><br><span class="line"><span class="string">tmpdir = /tmp</span></span><br><span class="line"><span class="string">symbolic-links=0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[mysqld_safe]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">log-error = /usr/local/mysql/data/error.log</span></span><br><span class="line"><span class="string">pid-file = /usr/local/mysql/data/mysql.pid</span></span><br><span class="line"><span class="string">#!includedir /etc/my.cnf.d</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#8.启动mysql</span></span><br><span class="line"><span class="string">service mysqld start</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#如启动失败，删除 /usr/local/mysql-5.7.22/data下所有文件，重新执行./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data，再启动</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#9.进入mysql修改初始密码，修改远程连接的用户权限问题</span></span><br><span class="line"><span class="string">mysql -uroot -p</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ALTER USER &#x27;</span>root<span class="string">&#x27;@&#x27;</span>localhost<span class="string">&#x27; IDENTIFIED BY &#x27;</span>root<span class="string">&#x27;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">use mysql;</span></span><br><span class="line"><span class="string">UPDATE user SET host=&#x27;</span>%<span class="string">&#x27; WHERE user=&#x27;</span>root<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">flush privileges;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#开机自启动</span></span><br><span class="line"><span class="string">chkconfig --add mysqld</span></span><br><span class="line"><span class="string">chkconfig mysqld on</span></span><br><span class="line"><span class="string">chkconfig --list</span></span><br><span class="line"><span class="string">  mysqld          0:关    1:关    2:开    3:开    4:开    5:开    6:关</span></span><br></pre></td></tr></table></figure><ol><li>配置mysql</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动mysql 服务</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line"><span class="comment">#设置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line"><span class="comment"># 重载所有修改过的配置文件</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 关闭密码验证</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line"><span class="comment"># mysqld选项下加入</span></span><br><span class="line">validate_password=OFF</span><br><span class="line"><span class="comment">#重启mysql服务</span></span><br><span class="line">systemctl restart mysqld</span><br><span class="line"><span class="comment"># 得到临时密码</span></span><br><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br><span class="line"><span class="comment">#登录mysql</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment"># 开发环境 修改密码为root</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="comment">#修改root账号登录限制</span></span><br><span class="line">use mysql;</span><br><span class="line">UPDATE user SET host=<span class="string">&#x27;%&#x27;</span> WHERE user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">flush privileges; </span><br><span class="line"><span class="comment">#创建metastore元数据库</span></span><br><span class="line">create database metastore</span><br><span class="line">DEFAULT CHARACTER SET utf8</span><br><span class="line">DEFAULT COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure><h2 id="安装HIVE"><a href="#安装HIVE" class="headerlink" title="安装HIVE"></a>安装HIVE</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解压apache-hive-3.1.2-bin.tar.gz到/opt/module/目录下面</span></span><br><span class="line">   tar -zxvf apache-hive-3.1.2-bin.tar.gz -C /opt/module/</span><br><span class="line"><span class="comment">#修改`/etc/profile.d/my_env.sh`，添加环境变量</span></span><br><span class="line">   vim /etc/profile.d/my_env.sh</span><br><span class="line"><span class="comment">#添加内容</span></span><br><span class="line"><span class="comment">#HIVE_HOME</span></span><br><span class="line">   <span class="built_in">export</span> HIVE_HOME=/opt/module/apache-hive-3.1.2-bin</span><br><span class="line">   <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HIVE_HOME</span>/bin</span><br><span class="line"><span class="comment">#刷新环境变量</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><ol><li>hive基础配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解决日志Jar包冲突</span></span><br><span class="line"><span class="built_in">mv</span> <span class="variable">$HIVE_HOME</span>/lib/log4j-slf4j-impl-2.10.0.jar <span class="variable">$HIVE_HOME</span>/lib/log4j-slf4j-impl-2.10.0.bak</span><br><span class="line"></span><br><span class="line"><span class="comment">#拷贝mysql-connector.jar到lib库</span></span><br><span class="line"><span class="built_in">cp</span> /opt/software/mysql-connector-java-5.1.27-bin.jar <span class="variable">$HIVE_HOME</span>/lib</span><br></pre></td></tr></table></figure><ol><li><p>配置hive-site.xml</p><p>挑转到<code>/opt/module/apache-hive-3.1.2-bin/conf/</code>目录新建文件 hive-site.xml</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!--jdbc连接的URL--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://hadoop100:3306/metastore?useSSL=false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--jdbc连接的Driver--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--jdbc连接的username--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--jdbc连接的password--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Hive元数据存储版本的验证--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.schema.verification<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--元数据存储授权--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.event.db.notification.api.auth<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Hive默认在HDFS的工作目录--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/hive/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.enable.doAs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--取消本地模式改为false--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.mode.local.auto<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.map.child.java.opts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>-Xmx2048m<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>初始化Hive元数据库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schematool -initSchema -dbType mysql -verbose</span><br></pre></td></tr></table></figure><h2 id="优化mapreduce"><a href="#优化mapreduce" class="headerlink" title="优化mapreduce"></a>优化mapreduce</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="variable">$HADOOP_HOME</span>/etc/hadoop/mapred-site.xml</span><br></pre></td></tr></table></figure><p>增加配置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.memory.mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1536<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.java.opts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>-Xmx1024M<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.memory.mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>3072<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.java.opts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>-Xmx2560M<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置beeline"><a href="#配置beeline" class="headerlink" title="配置beeline"></a>配置beeline</h2><p>配置core-site.xml 使其任意节点都可以访问hadoop</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.proxyuser.root.hosts&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.proxyuser.root.groups&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><ol><li>启动 hiveserver2</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#前端启动</span></span><br><span class="line">hiveserver2</span><br><span class="line"><span class="comment">#后台启动</span></span><br><span class="line"><span class="built_in">nohup</span> hiveserver2 &amp;</span><br></pre></td></tr></table></figure><ol><li>登录命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">beeline -u jdbc:hive2://localhost:10000 -n root -p 123456 [密码随意]</span><br><span class="line">beeline -u jdbc:hive2://localhost:10000 -n root -p 123456  -e <span class="string">&#x27;show tables;&#x27;</span> </span><br></pre></td></tr></table></figure><ol><li>dbeaver登录</li></ol><ul><li>获取文件 hadoop-common-3.1.3.jar</li><li>获取文件 hive-jdbc-3.1.2-standalone.jar</li><li>添加hive数据库链接</li></ul><h1 id="hive-数据操作语句"><a href="#hive-数据操作语句" class="headerlink" title="hive 数据操作语句"></a><strong>hive</strong> 数据操作语句</h1><h2 id="元数据查看语句"><a href="#元数据查看语句" class="headerlink" title="元数据查看语句"></a>元数据查看语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查看数据库</span></span><br><span class="line"><span class="keyword">show</span>  database db_hive</span><br><span class="line"><span class="comment">--过滤查看数据库</span></span><br><span class="line"><span class="keyword">show</span> databases <span class="keyword">like</span> <span class="string">&#x27;db_hive*&#x27;</span>;</span><br><span class="line"><span class="comment">--查看详情</span></span><br><span class="line"><span class="keyword">desc</span> database db_hive</span><br><span class="line"><span class="keyword">desc</span> database extended db_hive;</span><br><span class="line"><span class="comment">--查看表</span></span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="comment">--查看表列详情</span></span><br><span class="line"><span class="keyword">desc</span> dept;</span><br><span class="line"><span class="comment">--查看表所有详细信息</span></span><br><span class="line"><span class="keyword">desc</span> extended emp;</span><br><span class="line"><span class="keyword">show</span> formatted emp;</span><br><span class="line"><span class="comment">--查看分区信息</span></span><br><span class="line"><span class="keyword">show</span> partitions emp;</span><br></pre></td></tr></table></figure><h2 id="建库操作"><a href="#建库操作" class="headerlink" title="建库操作"></a>建库操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] database_name</span><br><span class="line">[COMMENT database_comment]</span><br><span class="line">[LOCATION hdfs_path]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="建表操作"><a href="#建表操作" class="headerlink" title="建表操作"></a>建表操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">EXTERNAL</span>] <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] table_name <span class="comment">--内部表</span></span><br><span class="line">[(col_name data_type [COMMENT col_comment], ...)] <span class="comment">--数据类型 </span></span><br><span class="line">[COMMENT table_comment] </span><br><span class="line">[PARTITIONED <span class="keyword">BY</span> (col_name data_type [COMMENT col_comment], ...)] <span class="comment">--分区表</span></span><br><span class="line">[CLUSTERED <span class="keyword">BY</span> (col_name, col_name, ...) </span><br><span class="line">[SORTED <span class="keyword">BY</span> (col_name [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], ...)] <span class="keyword">INTO</span> num_buckets BUCKETS] <span class="comment">--分桶表</span></span><br><span class="line">[<span class="type">ROW</span> FORMAT DELIMITED <span class="comment">--数据格式</span></span><br><span class="line">[FIELDS TERMINATED <span class="keyword">BY</span> <span class="type">char</span>] <span class="comment">--列分隔</span></span><br><span class="line">[COLLECTION ITEMS TERMINATED <span class="keyword">BY</span> <span class="type">char</span>] <span class="comment">--复合数据item分隔</span></span><br><span class="line">[MAP KEYS TERMINATED <span class="keyword">BY</span> <span class="type">char</span>] <span class="comment">--复合数据key分隔</span></span><br><span class="line">[LINES TERMINATED <span class="keyword">BY</span> <span class="type">char</span>]] <span class="comment">--行分隔</span></span><br><span class="line">[STORED <span class="keyword">AS</span> file_format] <span class="comment">--压缩格式</span></span><br><span class="line">[LOCATION hdfs_path] <span class="comment">--表数据文件存储路径</span></span><br><span class="line">[TBLPROPERTIES (property_name<span class="operator">=</span>property_value, ...)] <span class="comment">--内外部表转换</span></span><br><span class="line">[<span class="keyword">AS</span> select_statement]</span><br></pre></td></tr></table></figure><h2 id="上传数据"><a href="#上传数据" class="headerlink" title="上传数据"></a>上传数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--load</span></span><br><span class="line">load data [<span class="keyword">local</span>] inpath <span class="string">&#x27;数据的path&#x27;</span> [overwrite] <span class="keyword">into</span> <span class="keyword">table</span> student [<span class="keyword">partition</span> (partcol1<span class="operator">=</span>val1,…)];</span><br><span class="line"></span><br><span class="line"><span class="comment">--上传hdfs</span></span><br><span class="line">dfs <span class="operator">-</span>put <span class="operator">/</span>opt<span class="operator">/</span><span class="keyword">module</span><span class="operator">/</span>hive<span class="operator">/</span>datas<span class="operator">/</span>student.txt <span class="operator">/</span><span class="keyword">user</span><span class="operator">/</span>atguigu<span class="operator">/</span>hive;</span><br><span class="line"></span><br><span class="line"><span class="comment">--插入数据</span></span><br><span class="line"><span class="keyword">insert into</span> <span class="keyword">table</span>  student_par <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;wangwu&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;zhaoliu&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--覆盖插入并且使用结果集进行插入</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> student_par <span class="keyword">select</span> id, name <span class="keyword">from</span> student ;</span><br></pre></td></tr></table></figure><h2 id="下载数据"><a href="#下载数据" class="headerlink" title="下载数据"></a>下载数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> directory <span class="string">&#x27;数据的path&#x27;</span></span><br><span class="line"><span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span> dql_command;</span><br><span class="line"></span><br><span class="line"><span class="comment">--hadoop 导出</span></span><br><span class="line">dfs <span class="operator">-</span><span class="keyword">get</span> <span class="operator">/</span><span class="keyword">user</span><span class="operator">/</span>hive<span class="operator">/</span>warehouse<span class="operator">/</span>student<span class="operator">/</span>student.txt</span><br><span class="line"><span class="operator">/</span>opt<span class="operator">/</span><span class="keyword">module</span><span class="operator">/</span>datas<span class="operator">/</span>export<span class="operator">/</span>student3.txt;</span><br><span class="line"></span><br><span class="line"><span class="comment">--hive shell导出</span></span><br><span class="line">bin<span class="operator">/</span>hive <span class="operator">-</span>e <span class="string">&#x27;select * from default.student;&#x27;</span> <span class="operator">&gt;</span></span><br><span class="line"><span class="operator">/</span>opt<span class="operator">/</span><span class="keyword">module</span><span class="operator">/</span>hive<span class="operator">/</span>datas<span class="operator">/</span>export<span class="operator">/</span>student4.txt;</span><br><span class="line"></span><br><span class="line"><span class="comment">--export导出</span></span><br><span class="line"> export <span class="keyword">table</span> default.student <span class="keyword">to</span></span><br><span class="line"> <span class="string">&#x27;/user/hive/warehouse/export/student&#x27;</span>; </span><br></pre></td></tr></table></figure><h2 id="select语句"><a href="#select语句" class="headerlink" title="select语句"></a>select语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>] select_expr, select_expr, ...</span><br><span class="line">  <span class="keyword">FROM</span> table_reference</span><br><span class="line">  [<span class="keyword">WHERE</span> where_condition]</span><br><span class="line">  [<span class="keyword">GROUP</span> <span class="keyword">BY</span> col_list]</span><br><span class="line">  [<span class="keyword">ORDER</span> <span class="keyword">BY</span> col_list]</span><br><span class="line">  [CLUSTER <span class="keyword">BY</span> col_list</span><br><span class="line">    <span class="operator">|</span> [DISTRIBUTE <span class="keyword">BY</span> col_list] [SORT <span class="keyword">BY</span> col_list]</span><br><span class="line">  ]</span><br><span class="line"> [LIMIT number]</span><br></pre></td></tr></table></figure><h1 id="Hive复合数据类型"><a href="#Hive复合数据类型" class="headerlink" title="Hive复合数据类型"></a>Hive复合数据类型</h1><ul><li><p><strong>数组array</strong>: <strong>array&lt;value数据类型&gt;</strong></p><ol><li>相同数据类型</li><li>有序的排列</li><li>下标为数字</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询复合数据</span></span><br><span class="line"><span class="keyword">select</span>  a_score[<span class="number">0</span>] <span class="keyword">from</span> student2</span><br><span class="line"></span><br><span class="line"><span class="comment">--构造复合数据-array</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">array</span>(值,值) <span class="keyword">from</span> student</span><br></pre></td></tr></table></figure></li><li><p><strong>集合struct</strong>:                         <strong>struct&lt;key值:value数据类型,key值:value数据类型&gt;</strong></p><ol><li><p>预定义个数</p></li><li><p>预定义顺序</p></li><li><p>key预定义</p></li><li><p>数据类型可不同</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询复合数据</span></span><br><span class="line"><span class="keyword">select</span>  s_score.chinese <span class="keyword">from</span> student2</span><br><span class="line"></span><br><span class="line"><span class="comment">--构造复合数据</span></span><br><span class="line"><span class="keyword">select</span> named_struct(key,<span class="keyword">value</span>,key,<span class="keyword">value</span>)</span><br><span class="line"><span class="keyword">from</span> student</span><br></pre></td></tr></table></figure></li><li><p><strong>字典map</strong>:                              <strong>map&lt;key数据类型,value数据类型&gt;</strong></p><ol><li><p>标准字典类型</p></li><li><p>key自定义</p></li><li><p>数据类型可不同</p></li><li><p>个数不限</p></li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询复合数据</span></span><br><span class="line"><span class="keyword">select</span>  m_score[<span class="string">&#x27;语文&#x27;</span>] <span class="keyword">from</span> student2</span><br><span class="line"></span><br><span class="line"><span class="comment">--构造复合数据</span></span><br><span class="line"><span class="keyword">select</span> map(key,<span class="keyword">value</span>,key,<span class="keyword">value</span>)</span><br><span class="line"><span class="keyword">from</span> student</span><br></pre></td></tr></table></figure><h2 id="hive-内置函数"><a href="#hive-内置函数" class="headerlink" title="hive 内置函数"></a><strong>hive</strong> 内置函数</h2>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看系统自带的函数</span></span><br><span class="line"><span class="keyword">show</span> functions;</span><br><span class="line"><span class="comment">-- 显示自带的函数的用法</span></span><br><span class="line"><span class="keyword">desc</span> <span class="keyword">function</span> upper;</span><br><span class="line"><span class="comment">-- 详细显示自带的函数的用法</span></span><br><span class="line"><span class="keyword">desc</span> <span class="keyword">function</span> extended upper;</span><br></pre></td></tr></table></figure></li></ul><h1 id="python连接hive"><a href="#python连接hive" class="headerlink" title="python连接hive"></a>python连接hive</h1><h2 id="linux环境安装python"><a href="#linux环境安装python" class="headerlink" title="linux环境安装python"></a>linux环境安装python</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载安装包 或上传安装包</span></span><br><span class="line">wget https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://www.python.org/ftp/python/3.9.9/Python-3.9.9.tgz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf Python-3.9.10.tgz -C /opt/module/</span><br><span class="line"><span class="comment"># 支撑包</span></span><br><span class="line">yum install openssl-devel libffi-devel bzip2-devel gcc gcc-c++ wget -y</span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">./configure --enable-optimizations</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">make altinstall</span><br></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line">vim  /etc/profile.d/my_env.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$PATH</span>:/opt/python39/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line"></span><br><span class="line"><span class="comment">#生效 环境变量</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#或者进行软连接 配置 </span></span><br><span class="line"><span class="built_in">cp</span> libpython3.9.a  /usr/lib64/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">ln</span> -s /root/software/python3.9/Python-3.9.10/python /usr/bin/python3</span><br><span class="line"><span class="built_in">ln</span> -s /opt/module/Python-3.9.10/python /usr/bin/python3</span><br></pre></td></tr></table></figure><h2 id="安装pyhive库"><a href="#安装pyhive库" class="headerlink" title="安装pyhive库"></a>安装pyhive库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pip3 install  -i https://mirrors.aliyun.com/pypi/simple/  thrift</span><br><span class="line">pip3 install  -i https://mirrors.aliyun.com/pypi/simple/  thrift-sasl</span><br><span class="line">pip3 install   -i https://mirrors.aliyun.com/pypi/simple/ PyHive</span><br><span class="line">pip3 install   -i https://mirrors.aliyun.com/pypi/simple/ PyM</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyhive <span class="keyword">import</span> hive</span><br><span class="line">conn=hive.connect(host=<span class="string">&#x27;localhost&#x27;</span>,port=<span class="number">10000</span>,username=<span class="string">&#x27;root&#x27;</span>,database=<span class="string">&#x27;db_hive&#x27;</span>)</span><br><span class="line">cursor=conn.cursor()</span><br><span class="line">sql=<span class="string">&#x27;show tables&#x27;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"><span class="built_in">print</span>(cursor.fetchall())</span><br></pre></td></tr></table></figure><h1 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h1><ul><li><p>分区是将一个表或索引物理地分解为多个更小、更可管理的部分。</p></li><li><p>分区对应用透明，即对访问数据库的应用而言，逻辑上讲只有一个表或一个索引（相当于应用“看到”的只是一个表或索引），但在物理上这个表或索引可能由数十个物理分区组成。</p></li></ul><h2 id="分区应用场景"><a href="#分区应用场景" class="headerlink" title="分区应用场景"></a>分区应用场景</h2><p><img src="/Hadoop/image-20250701152059542.png" alt="image-20250701152059542"></p><h2 id="oracle分区表种类"><a href="#oracle分区表种类" class="headerlink" title="oracle分区表种类"></a><strong>oracle</strong>分区表种类</h2><ol><li><strong>范围分区</strong>(range)</li><li><strong>列表分区</strong>(list)</li><li><strong>散列分区</strong>(hash)</li><li><strong>组合组合分区</strong>(subpartition)</li></ol><h2 id="oracle分区-范围分区"><a href="#oracle分区-范围分区" class="headerlink" title="oracle分区-范围分区"></a><em>oracle</em>分区-范围分区</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> ORDER_ACTIVITIES   </span><br><span class="line">(  ORDER_ID      NUMBER(<span class="number">7</span>) <span class="keyword">NOT NULL</span>,   </span><br><span class="line">    ORDER_DATE    <span class="type">DATE</span>,   </span><br><span class="line">    TOTAL_AMOUNT NUMBER,   </span><br><span class="line">    CUSTOTMER_ID NUMBER(<span class="number">7</span>),   </span><br><span class="line">    PAID   <span class="type">CHAR</span>(<span class="number">1</span>)   </span><br><span class="line">)   <span class="comment">-- 建表语句不变</span></span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span> (ORDER_DATE) <span class="comment">-- 范围分区创建 语句 关键字 range(列名)</span></span><br><span class="line">(  </span><br><span class="line">  <span class="keyword">PARTITION</span> ORD_ACT_PART01 <span class="keyword">VALUES</span> LESS THAN (TO_DATE(<span class="string">&#x27;01- MAY -2003&#x27;</span>,<span class="string">&#x27;DD-MON-YYYY&#x27;</span>)) TABLESPACE ORD_TS01,  </span><br><span class="line">    <span class="comment">-- 分区名 （时间值）表空间</span></span><br><span class="line">  <span class="keyword">PARTITION</span> ORD_ACT_PART02 <span class="keyword">VALUES</span> LESS THAN (TO_DATE(<span class="string">&#x27;01-JUN-2003&#x27;</span>,<span class="string">&#x27;DD-MON-YYYY&#x27;</span>)) TABLESPACE ORD_TS02,  </span><br><span class="line">  <span class="keyword">PARTITION</span> ORD_ACT_PART02 <span class="keyword">VALUES</span> LESS THAN (MAXVALUE) TABLESPACE ORD_TS03   <span class="comment">--使用maxvalue 将其他不符合上述范围的值放入其中</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="oracle分区-列表分区"><a href="#oracle分区-列表分区" class="headerlink" title="oracle分区-列表分区"></a>oracle分区-列表分区</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> ORDER_ACTIVITIES  </span><br><span class="line">(  PROBLEM_ID   NUMBER(<span class="number">7</span>) <span class="keyword">NOT NULL</span> <span class="keyword">PRIMARY KEY</span>,   </span><br><span class="line">    CUSTOMER_ID  NUMBER(<span class="number">7</span>) <span class="keyword">NOT NULL</span>,     </span><br><span class="line">    STATUS       VARCHAR2(<span class="number">20</span>))   </span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> LIST (STATUS)    <span class="comment">-- 范围分区创建 语句 关键字 LIST(列名)</span></span><br><span class="line">(    <span class="keyword">PARTITION</span> PROB_ACTIVE   <span class="keyword">VALUES</span> (<span class="string">&#x27;ACTIVE&#x27;</span>) TABLESPACE PROB_TS01,  <span class="comment">-- </span></span><br><span class="line">      <span class="keyword">PARTITION</span> PROB_INACTIVE <span class="keyword">VALUES</span> (<span class="string">&#x27;INACTIVE&#x27;</span>,<span class="string">&#x27;unknow&#x27;</span>) TABLESPACE PROB_TS02  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="oracle分区-散列分区"><a href="#oracle分区-散列分区" class="headerlink" title="oracle分区-散列分区"></a>oracle分区-散列分区</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> HASH_TABLE   </span><br><span class="line">( COL NUMBER(<span class="number">8</span>),   </span><br><span class="line">  INF VARCHAR2(<span class="number">100</span>)   </span><br><span class="line">)   </span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> HASH (COL)    <span class="comment">-- 范围分区创建 语句 关键字 HASH(列名) </span></span><br><span class="line">(   </span><br><span class="line">  <span class="keyword">PARTITION</span> PART01 TABLESPACE HASH_TS01,   </span><br><span class="line">  <span class="keyword">PARTITION</span> PART02 TABLESPACE HASH_TS02,   </span><br><span class="line">  <span class="keyword">PARTITION</span> PART03 TABLESPACE HASH_TS03   </span><br><span class="line">) </span><br></pre></td></tr></table></figure><h2 id="oracle分区-组合分区"><a href="#oracle分区-组合分区" class="headerlink" title="oracle分区-组合分区"></a><strong>oracle</strong>分区-组合分区</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> SALES   </span><br><span class="line">(  </span><br><span class="line">PRODUCT_ID VARCHAR2(<span class="number">5</span>),  </span><br><span class="line">SALES_DATE <span class="type">DATE</span>,  </span><br><span class="line">SALES_COST NUMBER(<span class="number">10</span>),  </span><br><span class="line">STATUS VARCHAR2(<span class="number">20</span>)  </span><br><span class="line">)  </span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span>(SALES_DATE) SUBPARTITION <span class="keyword">BY</span> LIST (STATUS)  </span><br><span class="line">(  </span><br><span class="line">   <span class="keyword">PARTITION</span> P1 <span class="keyword">VALUES</span> LESS THAN(TO_DATE(<span class="string">&#x27;2003-01-01&#x27;</span>,<span class="string">&#x27;YYYY-MM-DD&#x27;</span>))TABLESPACE rptfact2009   </span><br><span class="line">  (   </span><br><span class="line">      SUBPARTITION P1SUB1 <span class="keyword">VALUES</span> (<span class="string">&#x27;ACTIVE&#x27;</span>) TABLESPACE rptfact2009,   </span><br><span class="line">      SUBPARTITION P1SUB2 <span class="keyword">VALUES</span> (<span class="string">&#x27;INACTIVE&#x27;</span>) TABLESPACE rptfact2009   </span><br><span class="line">  ),   </span><br><span class="line">   <span class="keyword">PARTITION</span> P2 <span class="keyword">VALUES</span> LESS THAN (TO_DATE(<span class="string">&#x27;2003-03-01&#x27;</span>,<span class="string">&#x27;YYYY-MM-DD&#x27;</span>)) TABLESPACE rptfact2009   </span><br><span class="line">  (   </span><br><span class="line">      SUBPARTITION P2SUB1 <span class="keyword">VALUES</span> (<span class="string">&#x27;ACTIVE&#x27;</span>) TABLESPACE rptfact2009,   </span><br><span class="line">      SUBPARTITION P2SUB2 <span class="keyword">VALUES</span> (<span class="string">&#x27;INACTIVE&#x27;</span>) TABLESPACE rptfact2009   </span><br><span class="line">  )   </span><br><span class="line">)  </span><br></pre></td></tr></table></figure><h2 id="oracle分区-分区表操作"><a href="#oracle分区-分区表操作" class="headerlink" title="oracle分区-分区表操作"></a><em>oracle</em>分区-分区表操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加分区</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> SALES <span class="keyword">ADD</span> <span class="keyword">PARTITION</span> P3 <span class="keyword">VALUES</span> LESS THAN(TO_DATE(<span class="string">&#x27;2003-06-01&#x27;</span>,<span class="string">&#x27;YYYY-MM-DD&#x27;</span>));  </span><br><span class="line"><span class="comment">--注意：以上添加的分区界限应该高于最后一个 分区界限。</span></span><br><span class="line"><span class="comment">-- 添加了一个P3SUB1子分区</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> SALES MODIFY <span class="keyword">PARTITION</span> P3 <span class="keyword">ADD</span> SUBPARTITION P3SUB1 <span class="keyword">VALUES</span>(<span class="string">&#x27;COMPLETE&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除分区</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> SALES <span class="keyword">DROP</span> <span class="keyword">PARTITION</span> P3;  </span><br><span class="line"><span class="keyword">ALTER TABLE</span> SALES <span class="keyword">DROP</span> SUBPARTITION P4SUB1;</span><br><span class="line"><span class="comment">-- 注意：如果删除的分区是表中唯一的分区，那么此分区将不能被删除，要想删除此分区，必须删除表。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 交换分区</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> table_name EXCHANGE <span class="keyword">PARTITION</span> partition_name <span class="keyword">WITH</span> <span class="keyword">TABLE</span> nonpartition_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">--将一个分区(子分区)和非分区表进行数据交换，oracle交换的方法是其实是对逻辑存储段进行交换。使用INCLUDEING INDEXES子句可以同步将本地索引也进行交换，使用WITH VALIDATATION子句还可以实现行数据的验证。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--交换分区时如果不带UPDATE INDEXES子句，则全局索引或全局索引基于的分区将变为不可用。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="hive分区-创建分区表"><a href="#hive分区-创建分区表" class="headerlink" title="hive分区-创建分区表"></a>hive分区-创建分区表</h2><p><strong>在 Hadoop 中，Hive 分区表通常以特定的目录结构来存储。</strong></p><p><strong>每个分区对应一个独立的目录，目录名通常包含分区列的值。数据文件会存储在相应的分区目录下。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建分区表</span></span><br><span class="line"><span class="keyword">create table</span> dept_partition(</span><br><span class="line">deptno <span class="type">int</span>, dname string, loc string</span><br><span class="line">)</span><br><span class="line">partitioned <span class="keyword">by</span> (<span class="keyword">day</span> string)</span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="hive分区-分区表操作"><a href="#hive分区-分区表操作" class="headerlink" title="hive分区-分区表操作"></a>hive分区-分区表操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 分区表数据导入</span></span><br><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;/opt/module/hive/datas/dept_20200401.log&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> dept_partition <span class="keyword">partition</span>(<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200401&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--select分区表插入数据</span></span><br><span class="line"><span class="keyword">insert into</span> <span class="keyword">table</span> log_list_6 <span class="keyword">partition</span>(dat<span class="operator">=</span><span class="string">&#x27;20221231&#x27;</span>) <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> log_list_tmp</span><br><span class="line"><span class="comment">--多表分区插入 </span></span><br><span class="line"><span class="keyword">from</span> student </span><br><span class="line">  <span class="keyword">insert</span> overwrite <span class="keyword">table</span> student <span class="keyword">partition</span>(<span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201707&#x27;</span>)<span class="keyword">select</span> id, name <span class="keyword">where</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201707&#x27;</span></span><br><span class="line">  <span class="keyword">insert</span> overwrite <span class="keyword">table</span> student <span class="keyword">partition</span>(<span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201706&#x27;</span>)<span class="keyword">select</span> id, name <span class="keyword">where</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201706&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查看分区</span></span><br><span class="line"><span class="keyword">show</span> partitions tab_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">--添加分区</span></span><br><span class="line"><span class="keyword">alter table</span> dept_partition <span class="keyword">add</span> <span class="keyword">partition</span>(<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200404&#x27;</span>) ;</span><br><span class="line"><span class="comment">--添加多分区</span></span><br><span class="line"><span class="keyword">alter table</span> dept_partition <span class="keyword">add</span> <span class="keyword">partition</span>(<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200405&#x27;</span>) <span class="keyword">partition</span>(<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200406&#x27;</span>);</span><br><span class="line"><span class="comment">--删除分区</span></span><br><span class="line"><span class="keyword">alter table</span> dept_partition <span class="keyword">drop</span> <span class="keyword">partition</span> (<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200406&#x27;</span>);</span><br><span class="line"><span class="comment">--查看分区表信息</span></span><br><span class="line"><span class="keyword">show</span> partitions dept_partition;</span><br><span class="line"><span class="comment">--查看分区表结构</span></span><br><span class="line"><span class="keyword">desc</span> formatted dept_partition;</span><br><span class="line"><span class="comment">--修改分区表</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> table_name <span class="keyword">PARTITION</span> (dt<span class="operator">=</span><span class="string">&#x27;2008-08-08&#x27;</span>) <span class="keyword">SET</span> LOCATION &quot;new location&quot;;</span><br><span class="line"><span class="keyword">ALTER TABLE</span> table_name <span class="keyword">PARTITION</span> (dt<span class="operator">=</span><span class="string">&#x27;2008-08-08&#x27;</span>) RENAME <span class="keyword">TO</span> <span class="keyword">PARTITION</span> (dt<span class="operator">=</span><span class="string">&#x27;20080808&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="超市分区表示例"><a href="#超市分区表示例" class="headerlink" title="超市分区表示例"></a>超市分区表示例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> supermarket_p (</span><br><span class="line">id string, <span class="comment">-- 行 ID  </span></span><br><span class="line">ord_id string comment <span class="string">&#x27;订单 ID&#x27;</span>,  </span><br><span class="line">ord_date string comment <span class="string">&#x27;订单日期&#x27;</span>, </span><br><span class="line">exch_date string comment <span class="string">&#x27;发货日期&#x27;</span>,</span><br><span class="line">exch_type string comment <span class="string">&#x27;邮寄方式&#x27;</span>,</span><br><span class="line">cust_id string comment <span class="string">&#x27;客户 ID &#x27;</span>,</span><br><span class="line">cust_name string comment <span class="string">&#x27;客户名称&#x27;</span>,</span><br><span class="line">d_type string comment <span class="string">&#x27;细分&#x27;</span>,</span><br><span class="line">city string comment <span class="string">&#x27;城市&#x27;</span>, </span><br><span class="line">prov string comment <span class="string">&#x27;省/自治区&#x27;</span>,  </span><br><span class="line">country string comment<span class="string">&#x27;国家&#x27;</span>,</span><br><span class="line">area string comment <span class="string">&#x27;地区&#x27;</span>, </span><br><span class="line">pro_id string comment <span class="string">&#x27;产品 ID&#x27;</span>,  </span><br><span class="line">type1 string comment <span class="string">&#x27;类别&#x27;</span>,</span><br><span class="line">type2 string comment <span class="string">&#x27;子类别&#x27;</span>, </span><br><span class="line">pro_name string comment <span class="string">&#x27;产品名称&#x27;</span>,</span><br><span class="line">sales <span class="type">float</span> comment <span class="string">&#x27;销售额&#x27;</span>,  </span><br><span class="line">count1 <span class="type">int</span> comment <span class="string">&#x27;数量  &#x27;</span>,</span><br><span class="line">discount <span class="type">float</span> comment <span class="string">&#x27;折扣  &#x27;</span>,</span><br><span class="line">profit <span class="type">float</span> comment <span class="string">&#x27;利润&#x27;</span></span><br><span class="line">)</span><br><span class="line">partitioned <span class="keyword">by</span> (c_type1 string)</span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="动态分区配置"><a href="#动态分区配置" class="headerlink" title="动态分区配置"></a>动态分区配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">--开启动态分区(默认开启)</span><br><span class="line"><span class="built_in">set</span> hive.exec.dynamic.partition=<span class="literal">true</span></span><br><span class="line">--指定非严格模式 nonstrict模式表示允许所有的分区字段都可以使用动态分区</span><br><span class="line"><span class="built_in">set</span> hive.exec.dynamic.partition.mode=nonstrict</span><br><span class="line">--在所有执行MR的节点上，最大一共可以创建多少个动态分区。默认1000</span><br><span class="line"><span class="built_in">set</span> hive.exec.max.dynamic.partitions=1000</span><br><span class="line">--在每个执行MR的节点上，最大可以创建多少个动态分区(分区字段有多少种设多少个)</span><br><span class="line"><span class="built_in">set</span> hive.exec.max.dynamic.partitions.pernode=100</span><br><span class="line">--整个MR Job中，最大可以创建多少个HDFS文件。默认100000</span><br><span class="line"><span class="built_in">set</span> hive.exec.max.created.files=100000</span><br><span class="line">--当有空分区生成时，是否抛出异常</span><br><span class="line"><span class="built_in">set</span> hive.error.on.empty.partition=<span class="literal">false</span></span><br><span class="line">--打开正则查询模式`(dt|hr)?+.+`</span><br><span class="line"><span class="built_in">set</span> hive.support.quoted.identifiers=none</span><br></pre></td></tr></table></figure><h1 id="分桶表"><a href="#分桶表" class="headerlink" title="分桶表"></a>分桶表</h1><ul><li><p>分区提供一个隔离数据和优化查询的便利方式。不过，并非所有的数据集都可形成合理的分区。对于一张表或者分区，Hive 可以进一步组织成桶，也就是更为细粒度的数据范围划分。</p></li><li><p>分桶是将数据集分解成更容易管理的若干部分的另一个技术。</p></li><li><p>分区<strong>针对的是数据的存储路径</strong>；分桶<strong>针对的是数据文件</strong>。</p></li></ul><h2 id="分桶表注意事项"><a href="#分桶表注意事项" class="headerlink" title="分桶表注意事项"></a><strong>分桶表注意事项</strong></h2><ul><li><p><strong>分桶策略</strong></p></li><li><p><strong>Hive的分桶采用对分桶字段的值进行哈希，然后除以桶的个数求余的方 式决定该条记录存放在哪个桶当中</strong></p><p>&#x3D;&#x3D;reduce的个数设置为-1,让Job自行决定需要用多少个reduce或者将reduce的个数设置为大于等于分桶表的桶数&#x3D;&#x3D;</p><p>&#x3D;&#x3D;<strong>从hdfs中load数据到分桶表中，避免本地文件找不到问题</strong>&#x3D;&#x3D;</p><p>&#x3D;&#x3D;<strong>不要使用本地模式</strong>&#x3D;&#x3D;</p></li></ul><h2 id="hive分桶表-创建分桶表"><a href="#hive分桶表-创建分桶表" class="headerlink" title="hive分桶表-创建分桶表"></a>hive分桶表-创建分桶表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建4个分桶的分桶表</span></span><br><span class="line"><span class="keyword">create table</span> stu_bucket(id <span class="type">int</span>, name string)</span><br><span class="line">clustered <span class="keyword">by</span>(id) </span><br><span class="line"><span class="keyword">into</span> <span class="number">4</span> buckets</span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--设置mapreduce数量(二选一)</span></span><br><span class="line"><span class="keyword">set</span> mapreduce.job.reduces<span class="operator">=</span><span class="number">3</span></span><br><span class="line"> <span class="keyword">set</span> mapred.reduce.tasks<span class="operator">=</span><span class="number">3</span></span><br><span class="line"><span class="comment">--向分桶表导入数据</span></span><br><span class="line">load data inpath   <span class="string">&#x27;/student.txt&#x27;</span> </span><br><span class="line"><span class="keyword">into</span> <span class="keyword">table</span> stu_bucket;</span><br></pre></td></tr></table></figure><h2 id="hive排序关键字"><a href="#hive排序关键字" class="headerlink" title="hive排序关键字"></a>hive排序关键字</h2><p><img src="/Hadoop/image-20250701153814791.png" alt="image-20250701153814791"></p><hr><p>##<strong>hive****排序语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--使用order by 排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student2 <span class="keyword">order</span> <span class="keyword">by</span> id</span><br><span class="line"><span class="comment">--使用sort by 排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student2 sort <span class="keyword">by</span> class_name <span class="keyword">desc</span></span><br><span class="line"><span class="comment">--使用distribute by 分组</span></span><br><span class="line"><span class="keyword">set</span> mapreduce.job.reduces<span class="operator">=</span><span class="number">15</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student2 distribute <span class="keyword">by</span> class_name sort <span class="keyword">by</span> id <span class="keyword">desc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite  <span class="keyword">local</span> directory <span class="string">&#x27;/root/student2/&#x27;</span></span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student2_b </span><br><span class="line">distribute <span class="keyword">by</span> sex </span><br><span class="line">sort <span class="keyword">by</span> chinese <span class="keyword">desc</span></span><br><span class="line"><span class="comment">--使用cluster by 分组并排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student2 cluster <span class="keyword">by</span> class_name</span><br></pre></td></tr></table></figure><h2 id="使用awk-清洗-log"><a href="#使用awk-清洗-log" class="headerlink" title="使用awk 清洗 log"></a>使用awk 清洗 log</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> 2021-05-20.<span class="built_in">log</span> | awk -F <span class="string">&quot;\&quot;-\&quot;&quot;</span> <span class="string">&#x27;&#123;split($1, arr, &quot; &quot;);\</span></span><br><span class="line"><span class="string">split(substr(arr[4],2),dd,&quot;:&quot;);\</span></span><br><span class="line"><span class="string">split(dd[1],ee,&quot;/&quot;);\</span></span><br><span class="line"><span class="string">print arr[1]&quot;\t&quot;ee[1]&quot;-</span></span><br><span class="line"><span class="string">&quot;ee[2]&quot;-&quot;ee[3]&quot; &quot;dd[2]&quot;:&quot;dd[3]&quot;:&quot;dd[4]&quot;\t&quot;arr[7]&quot;\t&quot;$2&#125;&#x27;</span> | \</span><br><span class="line">awk -F <span class="string">&quot;\t&quot;</span> <span class="string">&#x27;&#123;&quot;date -d \&quot;&quot;$2&quot;\&quot; +%Y%m%d%H%M%S&quot; | getline d;print</span></span><br><span class="line"><span class="string">$1&quot;\t&quot;d&quot;\t&quot;$3&quot;\t&quot;$4 &#125;&#x27;</span> | \</span><br><span class="line">awk -F <span class="string">&quot;\t&quot;</span> <span class="string">&#x27;&#123;print $1&quot;\t&quot;$2&quot;\t&quot;$3&quot;\t&quot;(index($4,&quot;Windows&quot;)?&quot;Windows&quot;:</span></span><br><span class="line"><span class="string">(index($4,&quot;Linux&quot;)?&quot;Linux&quot;:&quot;Mac&quot;))&quot;\t&quot;(index($4,&quot;Chrome&quot;)?&quot;Chrome&quot;:</span></span><br><span class="line"><span class="string">(index($4,&quot;Version&quot;)?&quot;Safari&quot;:(index($4,&quot;Firefox&quot;)?&quot;Firefox&quot;:&quot;Opera&quot;)))&#125;&#x27;</span> &gt;</span><br><span class="line">new_2021-05-20.log</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
            <tag> Python </tag>
            
            <tag> MySQL </tag>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop</title>
      <link href="/2025/06/24/Hadoop/"/>
      <url>/2025/06/24/Hadoop/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop简介"><a href="#Hadoop简介" class="headerlink" title="Hadoop简介"></a>Hadoop简介</h1><ul><li>Hadoop是一个由Apache基金会所开发的分布式系统基础架构</li><li>主要解决，<strong>海量数据的存储和海量数据的分析计算问题</strong></li><li>广义上来说，Hadoop通常是指一个更广泛的概念-Hadoop生态圈</li></ul><h2 id="分布式存储"><a href="#分布式存储" class="headerlink" title="分布式存储"></a>分布式存储</h2><p>Hadoop 的分布式存储主要基于 HDFS（分布式文件系统）:<br>HDFS将数据<strong>分割成多个数据块（block）</strong>，这些数据块<strong>分散存储在集群中的不同节点上</strong>。每个数据块会有多个副本，通常默认是 3 个副本.采用分布式存储在不同的节点上，提高了数据的可靠性和容错性。</p><p><img src="/2025/06/24/Hadoop/image-20250701140958694.png" alt="image-20250701140958694"></p><p>Hadoop的分布式核心组件是MapReduce编程模型:<br>在MapReduce任务中，数据被切分为多个任务，每个任务由或多个节点并行。每个节点负责将输入数据映射为键-值对生成中间结果。最后，中间结果按照键的排序进行合并和归并。</p><p><img src="/2025/06/24/Hadoop/image-20250701141052158.png" alt="image-20250701141052158"></p><p><img src="/2025/06/24/Hadoop/image-20250701141243480.png" alt="image-20250701141243480"></p><h1 id="Hadoop组件-面试重点"><a href="#Hadoop组件-面试重点" class="headerlink" title="Hadoop组件(面试重点)"></a>Hadoop组件(面试重点)</h1><p><a href="hadoop%E9%97%AE%E7%AD%94%E5%B0%8F%E6%B5%8B%E9%AA%8C.md">hadoop问答小测验</a></p><h2 id="HDFS-架构概述"><a href="#HDFS-架构概述" class="headerlink" title="HDFS 架构概述"></a>HDFS 架构概述</h2><p>HDFS组件用于存储数据,主要由NameNode,DataNode,SecondaryNameNode 组成</p><ul><li><strong>NameNode (nn)</strong>: <strong>存储文件的元数据</strong>，如文件名，文件目录结构，文件属性 (生成时间、副本数、文件权限)，以及每个文件的块列表和块所在的DataNode等。</li><li><strong>DataNode(dn)</strong>: 在本地文件系统<strong>存储文件块数据，以及块数据的校验。</strong></li><li><strong>SecondaryNameNode(2nn)</strong>: 每隔一段时间<strong>对NameNode元数据进行备份</strong></li></ul><h2 id="Yarn-架构概述"><a href="#Yarn-架构概述" class="headerlink" title="Yarn 架构概述"></a>Yarn 架构概述</h2><p><strong>Yet Another Resource Negotiator 简称YARN ，另一种资源协调者，是Hadoop 的资源管理器。</strong></p><p>Yarn资源调度负责硬件资源管理,主要由:ResourceManager,NodeManager,ApplicationMaster组成<br><img src="/2025/06/24/Hadoop/file-20250810003459589.png"></p><ul><li><strong>ResourceManager</strong> (资源管理器):<strong>.<strong>YARN集群中的中心调度器和资源管理器。</strong>负责整个集群的资源分配和调度 监控集群中的计算资源任务的运行状态</strong>。</li><li><strong>NodeManager</strong> (节点管理器):<strong>单个节点服务器资源的管理者。</strong>每个计算节点上运行的代理程序<strong>负责管理和监控节点上的资源和任务</strong>。接收来自RM的任务调度请求;启动、停止和监控任务的执行;发送节点的状态和可用资源报告</li><li><strong>ApplicationMaster</strong> (应用程序管理器)：<strong>单个任务运行的管理者</strong>。每个应用程序在YARN中都有一个对应的AM.AppMaster负责协调和管理应用程序的执行。它与RM交互申请资源并监任务的执行。它还<strong>负责任务的划分和调度、容错和恢复、进度跟踪</strong>等。</li><li><strong><code>Container</code><strong>：容器，相当于一台独立的服务器，里面封装了任务运行所需要的资源，如</strong>内存、CPU、磁盘、网络</strong>等。</li></ul><p>说明：<br>（1）客户端可以有多个<br>（2）集群上可以运行多个ApplicationMaster<br>（3）每个NodeManager上可以有多个Container</p><h2 id="MapReduce-架构概述"><a href="#MapReduce-架构概述" class="headerlink" title="MapReduce 架构概述"></a>MapReduce 架构概述</h2><p>MapReduce 将计算过程分为两个阶段：Map 和Reduce  </p><ol><li>Map 阶段并行处理输入数据  </li><li>Reduce 阶段对Map 结果进行汇总<br><img src="/2025/06/24/Hadoop/file-20250810004014162.png"></li></ol><h2 id="HDFS、YARN、MapReduce-三者关系"><a href="#HDFS、YARN、MapReduce-三者关系" class="headerlink" title="HDFS、YARN、MapReduce 三者关系"></a>HDFS、YARN、MapReduce 三者关系</h2><p><img src="/2025/06/24/Hadoop/file-20250810004101508.png"></p><h2 id="大数据技术生态体系"><a href="#大数据技术生态体系" class="headerlink" title="大数据技术生态体系"></a>大数据技术生态体系</h2><p><img src="/2025/06/24/Hadoop/file-20250810004247220.png"><br>图中涉及的技术名词解释如下：</p><ol><li><code>Sqoop</code>：Sqoop 是一款开源的工具，主要用于在Hadoop、Hive 与传统的数据库（MySQL）间进行数据的传递，可以将一个关系型数据库（例如 ：MySQL，Oracle 等）中的数据导进到Hadoop 的HDFS 中，也可以将HDFS 的数据导进到关系型数据库中。</li><li><code>Flume</code>：Flume 是一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume 支持在日志系统中定制各类数据发送方，用于收集数据。</li><li><code>Kafka</code>：Kafka 是一种高吞吐量的分布式发布订阅消息系统。</li><li><code>Spark</code>：Spark 是当前最流行的开源大数据内存计算框架。可以基于Hadoop 上存储的大数据进行计算。</li><li><code>Flink</code>：Flink 是当前最流行的开源大数据内存计算框架。用于实时计算的场景较多。</li><li><code>Oozie</code>：Oozie 是一个管理Hadoop 作业（job）的工作流程调度管理系统。</li><li><code>Hbase</code>：HBase 是一个分布式的、面向列的开源数据库。HBase 不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。</li><li><code>Hive</code>：Hive 是基于Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的SQL 查询功能，可以将SQL 语句转换为MapReduce 任务进行运行。其优点是学习成本低，可以通过类SQL 语句快速实现简单的MapReduce 统计，不必开发专门的MapReduce 应用，十分适合数据仓库的统计分析。</li><li><code>ZooKeeper</code>：它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、分布式同步、组服务等。</li></ol><h2 id="推荐系统框架图"><a href="#推荐系统框架图" class="headerlink" title="推荐系统框架图"></a>推荐系统框架图</h2><p>推荐系统项目框架<br><img src="/2025/06/24/Hadoop/file-20250810004351655.png"></p><h1 id="三个虚拟机配置分布式-环境搭建-开发重点"><a href="#三个虚拟机配置分布式-环境搭建-开发重点" class="headerlink" title="三个虚拟机配置分布式(环境搭建:开发重点)"></a>三个虚拟机配置分布式(环境搭建:开发重点)</h1><p><img src="/2025/06/24/Hadoop/image-20250626092139322.png" alt="image-20250626092139322"> </p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li><p>操作系统环境</p><ol><li>操作系统以及软件系统环境搭建</li><li>ssh免密操作</li></ol></li><li><p>hadoop软件</p><ol><li><p>软件安装</p></li><li><p>集群配置</p></li></ol></li></ol><p><strong>环境配置</strong></p><ol><li><p>打开虚拟机-&gt;2.虚拟网络编辑-&gt;3.更改配置-&gt;</p></li><li><p><img src="/2025/06/24/Hadoop/image-20250626093107076.png" alt="image-20250626093107076"></p></li><li><p>本机网络更改适配器选项，找到</p></li><li><p><img src="/2025/06/24/Hadoop/image-20250626093422694.png" alt="image-20250626093422694"></p></li><li><p>新建虚拟机-&gt;稍后安装操作系统-&gt;虚拟机名称改为hadoop100，位置改为D:vmware&#x2F;hadoop100,<img src="/2025/06/24/Hadoop/image-20250626094736868.png" alt="image-20250626094736868"></p></li></ol><p><img src="/2025/06/24/Hadoop/image-20250626094807272.png" alt="image-20250626094807272"><img src="/2025/06/24/Hadoop/image-20250626094854252.png" alt="image-20250626094854252"><img src="/2025/06/24/Hadoop/image-20250626094926569.png" alt="image-20250626094926569"></p><p><strong>启动虚拟机</strong></p><ol><li><p>最小化安装</p></li><li><p><strong>网络配置</strong></p><p><img src="/2025/06/24/Hadoop/image-20250626095142289.png" alt="image-20250626095142289"></p></li></ol><p><img src="/2025/06/24/Hadoop/image-20250626095226047.png" alt="image-20250626095226047"></p><p>开始安装-&gt;<strong>用户和密码都改为root</strong></p><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="软件准备-上传文件"><a href="#软件准备-上传文件" class="headerlink" title="软件准备&#x2F;上传文件"></a>软件准备&#x2F;上传文件</h3><ol><li><p>jdk-8u212-linux-x64.tar.gz</p></li><li><p>hadoop-3.1.3.tar.gz</p></li><li><p>CentOS-Base.repo</p></li></ol><h3 id="hadoop安装过程"><a href="#hadoop安装过程" class="headerlink" title="hadoop安装过程"></a>hadoop安装过程</h3><h4 id="系统环境配置"><a href="#系统环境配置" class="headerlink" title="系统环境配置"></a>系统环境配置</h4><ol><li><p>下载源的调整</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.拷贝一份新的阿里云的 下载源 到 /etc/yum.repos.d/下 </span></span><br><span class="line"><span class="built_in">mv</span> /etc/yum.repos.d/CentOS-Base.repo</span><br><span class="line"><span class="comment">#2.清空原下载池</span></span><br><span class="line"><span class="built_in">sudo</span> yum clean all</span><br><span class="line"><span class="comment">#3. 加载新源</span></span><br><span class="line"><span class="built_in">sudo</span> yum makecache</span><br></pre></td></tr></table></figure></li><li><p>安装epel-release(软件仓库)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure></li><li><p>安装必要工具</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y net-tools rsync vim wget ntp</span><br></pre></td></tr></table></figure></li><li><p>关闭防火墙</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure></li><li><p>关闭selinux</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/selinux/config</span><br><span class="line"><span class="comment"># 将SELINUX=enforcing改为</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line"><span class="comment">#wq保存</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="软件安装-1"><a href="#软件安装-1" class="headerlink" title="软件安装"></a>软件安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置主机名映射</span></span><br><span class="line">vim /etc/hosts</span><br><span class="line">ip hostname</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u212-linux-x64.tar.gz -C /opt/module/</span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line">vim /etc/profile.d/my_env.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#JAVA_HOME</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/module/jdk1.8.0_212</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line">tar -zxvf hadoop-3.1.3.tar.gz -C /opt/module/</span><br><span class="line"></span><br><span class="line">vim /etc/profile.d/my_env.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#HADOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/opt/module/hadoop-3.1.3</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HADOOP_HOME</span>/sbin</span><br><span class="line"></span><br><span class="line"><span class="comment">#更新环境变量</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment">#测试环境变量配置</span></span><br><span class="line">hadoop version</span><br></pre></td></tr></table></figure><h4 id="主机克隆操作"><a href="#主机克隆操作" class="headerlink" title="主机克隆操作"></a>主机克隆操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"></span><br><span class="line">IPADDR=<span class="string">&quot;192.168.200.102&quot;</span></span><br><span class="line"></span><br><span class="line">hostnamectl set-hostname hadoop101</span><br></pre></td></tr></table></figure><h4 id="SSH协议免密配置"><a href="#SSH协议免密配置" class="headerlink" title="SSH协议免密配置"></a>SSH协议免密配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成密钥对</span></span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line"><span class="comment">#传输密钥</span></span><br><span class="line">ssh-copy-id hadoop100</span><br></pre></td></tr></table></figure><p><img src="/2025/06/24/Hadoop/image-20250701141804317.png" alt="image-20250701141804317"></p><h4 id="配置集群文件"><a href="#配置集群文件" class="headerlink" title="配置集群文件"></a>配置集群文件</h4><h3 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim core-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定NameNode的地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://hadoop100:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定hadoop数据的存储目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/opt/module/hadoop-3.1.3/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置HDFS网页登录使用的静态用户为root --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.http.staticuser.user<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim hdfs-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nn web端访问地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop100:9870<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2nn web端访问地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop102:9868<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim yarn-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定MR走shuffle --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定ResourceManager的地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop101<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 环境变量的继承 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.env-whitelist<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim mapred-site.xml</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定MapReduce程序运行在Yarn上 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="workers"><a href="#workers" class="headerlink" title="workers"></a>workers</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/module/hadoop-3.1.3/etc/hadoop/workers</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop100</span><br><span class="line">hadoop101</span><br><span class="line">hadoop102</span><br></pre></td></tr></table></figure><h3 id="格式化hdfs文件系统-谨慎使用"><a href="#格式化hdfs文件系统-谨慎使用" class="headerlink" title="格式化hdfs文件系统(谨慎使用)"></a>格式化hdfs文件系统(<em><strong>谨慎使用</strong></em>)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format</span><br><span class="line"><span class="comment">#hdfs 安全模式 关闭</span></span><br><span class="line">hdfs dfsadmin -safemode leave</span><br><span class="line"><span class="comment">#hdfs 安全模式 强制关闭</span></span><br><span class="line">hdfs dfsadmin -safemode forceExit</span><br></pre></td></tr></table></figure><h3 id="启动集群"><a href="#启动集群" class="headerlink" title="启动集群"></a>启动集群</h3><h4 id="start-dfs-sh-stop-dfs-sh"><a href="#start-dfs-sh-stop-dfs-sh" class="headerlink" title="start-dfs.sh stop-dfs.sh"></a>start-dfs.sh stop-dfs.sh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim sbin/start-dfs.sh </span><br><span class="line">vim sbin/stop-dfs.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HDFS_DATANODE_USER=root</span><br><span class="line">HADOOP_SECURE_DN_USER=hdfs</span><br><span class="line">HDFS_NAMENODE_USER=root</span><br><span class="line">HDFS_SECONDARYNAMENODE_USER=root</span><br></pre></td></tr></table></figure><h4 id="start-yarn-sh-stop-yarn-sh"><a href="#start-yarn-sh-stop-yarn-sh" class="headerlink" title="start-yarn.sh stop-yarn.sh"></a>start-yarn.sh stop-yarn.sh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim sbin/start-yarn.sh</span><br><span class="line">vim sbin/stop-yarn.sh</span><br><span class="line"></span><br><span class="line">YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">HADOOP_SECURE_DN_USER=yarn</span><br><span class="line">YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure><h3 id="配置历史服务器"><a href="#配置历史服务器" class="headerlink" title="配置历史服务器"></a>配置历史服务器</h3><h4 id="mapred-site-xml-1"><a href="#mapred-site-xml-1" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim mapred-site.xml</span><br><span class="line">mapred --daemon start historyserver</span><br><span class="line"><span class="comment">&lt;!-- 历史服务器端地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop100:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 历史服务器web端地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop100:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置历史聚集"><a href="#配置历史聚集" class="headerlink" title="配置历史聚集"></a>配置历史聚集</h3><h4 id="yarn-site-xml-1"><a href="#yarn-site-xml-1" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim yarn-site.xml</span><br><span class="line"><span class="comment">&lt;!-- 开启日志聚集功能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置日志聚集服务器地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://hadoop101:19888/jobhistory/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置日志保留时间为7天 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="启停脚本"><a href="#启停脚本" class="headerlink" title="启停脚本"></a>启停脚本</h3><h4 id="myhadoop-sh"><a href="#myhadoop-sh" class="headerlink" title="myhadoop.sh"></a>myhadoop.sh</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">if [ $# -lt 1 ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;No Args Input...&quot;</span><br><span class="line">    exit ;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">    echo &quot; =================== 启动 hadoop集群 ===================&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    echo &quot; --------------- 启动 hdfs ---------------&quot;</span><br><span class="line">    ssh hadoop100 &quot;/opt/module/hadoop-3.1.3/sbin/start-dfs.sh&quot;</span><br><span class="line">    echo &quot; --------------- 启动 yarn ---------------&quot;</span><br><span class="line">    ssh hadoop101 &quot;/opt/module/hadoop-3.1.3/sbin/start-yarn.sh&quot;</span><br><span class="line">    echo &quot; --------------- 启动 historyserver ---------------&quot;</span><br><span class="line">    ssh hadoop100 &quot;/opt/module/hadoop-3.1.3/bin/mapred --daemon start historyserver&quot;</span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">    echo &quot; =================== 关闭 hadoop集群 ===================&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    echo &quot; --------------- 关闭 historyserver ---------------&quot;</span><br><span class="line">    ssh hadoop100 &quot;/opt/module/hadoop-3.1.3/bin/mapred --daemon stop historyserver&quot;</span><br><span class="line">    echo &quot; --------------- 关闭 yarn ---------------&quot;</span><br><span class="line">    ssh hadoop101 &quot;/opt/module/hadoop-3.1.3/sbin/stop-yarn.sh&quot;</span><br><span class="line">    echo &quot; --------------- 关闭 hdfs ---------------&quot;</span><br><span class="line">    ssh hadoop100 &quot;/opt/module/hadoop-3.1.3/sbin/stop-dfs.sh&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;status&quot;)</span><br><span class="line">    echo &quot; =================== hadoop集群状态 ===================&quot;</span><br><span class="line">   for host in hadoop100 hadoop101 hadoop102</span><br><span class="line">do</span><br><span class="line">        echo =============== $host ===============</span><br><span class="line">        ssh $host jps </span><br><span class="line">done</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h3 id="同步脚本"><a href="#同步脚本" class="headerlink" title="同步脚本"></a>同步脚本</h3><p>在<code>/root/bin</code>目录下创建<code>xsync</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1. 判断参数个数</span></span><br><span class="line">if [ $# -lt 1 ]</span><br><span class="line">then</span><br><span class="line">    echo &quot;请输入文件目录的路径&quot;</span><br><span class="line">    exit;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2. 遍历集群所有机器</span></span><br><span class="line">for host in hadoop100 hadoop101 hadoop102 </span><br><span class="line">do</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    echo ==================== $host ====================</span><br><span class="line">    #3. 遍历所有⽬录，挨个发送</span><br><span class="line">    for file in $@</span><br><span class="line">    do</span><br><span class="line">        #4. 判断⽂件是否存在</span><br><span class="line">        if [ -e $file ]</span><br><span class="line">        then</span><br><span class="line">            #5. 获取父目录</span><br><span class="line">            pdir=$(cd -P $(dirname $file); pwd)</span><br><span class="line">            #6. 获取当前⽂件的名称</span><br><span class="line">            fname=$(basename $file)</span><br><span class="line">            rsync -av $pdir/$fname $host:$pdir</span><br><span class="line">        else</span><br><span class="line">            echo &quot;文件不存在 $file&quot;</span><br><span class="line">        fi</span><br><span class="line">     done</span><br><span class="line">done</span><br><span class="line">xsync abc </span><br></pre></td></tr></table></figure><hr><p>修改脚本<code>xsync</code>具有执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x xsync</span><br></pre></td></tr></table></figure><h4 id="结果截图"><a href="#结果截图" class="headerlink" title="结果截图"></a>结果截图</h4><p><img src="/2025/06/24/Hadoop/image-20250701144157828.png" alt="image-20250701144157828"></p><p><img src="/2025/06/24/Hadoop/image-20250701144252469.png" alt="image-20250701144252469"></p><p><img src="/2025/06/24/Hadoop/image-20250701144309728.png" alt="image-20250701144309728"></p><h1 id="hadoop大数据平台-hive组件部署介绍"><a href="#hadoop大数据平台-hive组件部署介绍" class="headerlink" title="hadoop大数据平台-hive组件部署介绍"></a>hadoop大数据平台-hive组件部署介绍</h1><p><img src="/2025/06/24/Hadoop/image-20250701143412258.png" alt="image-20250701143412258"></p><h1 id="Hadoop平台-进程启停命令"><a href="#Hadoop平台-进程启停命令" class="headerlink" title="Hadoop平台-进程启停命令"></a>Hadoop平台-进程启停命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.日志服务启停命令</span></span><br><span class="line">mapred --daemon start historyserver</span><br><span class="line"><span class="comment">#2.HDFS文件系统服务启停命令</span></span><br><span class="line">hdfs --daemon start namenode/datanode/secondarynamenode</span><br><span class="line"><span class="comment">#4.Yarn服务启停命令</span></span><br><span class="line">yarn --daemon start/stop  resourcemanager/nodemanager</span><br></pre></td></tr></table></figure><h1 id="Hadoop平台-HDFS文件系统命令"><a href="#Hadoop平台-HDFS文件系统命令" class="headerlink" title="Hadoop平台-HDFS文件系统命令"></a>Hadoop平台-HDFS文件系统命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">-<span class="built_in">ls</span> [-C] [-d] [-h] [-q] [-R] [-t] [-S] [-r] [-u] [-e] [&lt;path&gt; ...]:  <span class="comment">#查看指定路径的文件或目录列表。</span></span><br><span class="line">-<span class="built_in">mkdir</span> [-p] &lt;path&gt; ...:  <span class="comment">#创建新的文件夹。</span></span><br><span class="line">-moveFromLocal &lt;localsrc&gt; ... &lt;dst&gt;:  <span class="comment">#从本地移动文件到HDFS。</span></span><br><span class="line">-moveToLocal &lt;src&gt; &lt;localdst&gt;:  <span class="comment">#将文件从HDFS移动到本地。</span></span><br><span class="line">-<span class="built_in">mv</span> &lt;src&gt; ... &lt;dst&gt;:  <span class="comment">#在HDFS文件系统内移动文件。</span></span><br><span class="line">-put [-f] [-p] [-l] [-d] &lt;localsrc&gt; ... &lt;dst&gt;:  <span class="comment">#上传文件到HDFS。</span></span><br><span class="line">-renameSnapshot &lt;snapshotDir&gt; &lt;oldName&gt; &lt;newName&gt;:  <span class="comment">#重命名指定目录下的快照。</span></span><br><span class="line">-<span class="built_in">rm</span> [-f] [-r|-R] [-skipTrash] [-safely] &lt;src&gt; ...:  <span class="comment">#删除文件或目录（只能删除空文件夹）。</span></span><br><span class="line">-<span class="built_in">rmdir</span> [--ignore-fail-on-non-empty] &lt;<span class="built_in">dir</span>&gt; ...:  <span class="comment">#删除空文件夹，可以使用`--ignore-fail-on-non-empty`选项删除非空文件夹。</span></span><br><span class="line">-setfacl [-R] [&#123;-b|-k&#125; &#123;-m|-x &lt;acl_spec&gt;&#125; &lt;path&gt;]|[--<span class="built_in">set</span> &lt;acl_spec&gt; &lt;path&gt;]:  <span class="comment">#设置文件或目录的ACL（访问控制列表）。</span></span><br><span class="line">-setfattr &#123;-n name [-v value] | -x name&#125; &lt;path&gt;:  <span class="comment">#设置文件或目录的扩展属性。</span></span><br><span class="line">-setrep [-R] [-w] &lt;rep&gt; &lt;path&gt; ...:  <span class="comment">#设置文件的副本数量。</span></span><br><span class="line">-<span class="built_in">stat</span> [format] &lt;path&gt; ...:  <span class="comment">#显示文件或目录的状态信息。</span></span><br><span class="line">-<span class="built_in">tail</span> [-f] [-s &lt;<span class="built_in">sleep</span> interval&gt;] &lt;file&gt;:  <span class="comment">#查看文件的末尾部分内容。</span></span><br><span class="line">-<span class="built_in">test</span> -[defsz] &lt;path&gt;:  <span class="comment">#测试文件的存在性、目录的空或非空等属性。</span></span><br><span class="line">-text [-ignoreCrc] &lt;src&gt; ...:  <span class="comment">#以文本形式查看文件的内容。</span></span><br><span class="line">-<span class="built_in">touch</span> [-a] [-m] [-t TIMESTAMP ] [-c] &lt;path&gt; ...:  <span class="comment">#创建一个空文件或者更新已有文件的时间戳。</span></span><br><span class="line">-touchz &lt;path&gt; ...:  <span class="comment">#创建一个空文件。</span></span><br><span class="line">-<span class="built_in">truncate</span> [-w] &lt;length&gt; &lt;path&gt; ...:  <span class="comment">#清空文件内容或者将文件截断到指定的长度。</span></span><br><span class="line">-usage [cmd ...]:  <span class="comment">#显示HDFS命令的用法信息。</span></span><br><span class="line"></span><br><span class="line">-appendToFile &lt;localsrc&gt; ... &lt;dst&gt;:  <span class="comment">#将本地目录追加到HDFS下的某个文件中。</span></span><br><span class="line">-<span class="built_in">cat</span> [-ignoreCrc] &lt;src&gt; ...:  <span class="comment">#查看某个文件的内容。</span></span><br><span class="line">-checksum &lt;src&gt; ...:  <span class="comment">#计算并确认文件的校验和。</span></span><br><span class="line">-<span class="built_in">chgrp</span> [-R] GROUP PATH...:  <span class="comment">#修改文件或目录的所属用户组。</span></span><br><span class="line">-<span class="built_in">chmod</span> [-R] &lt;MODE[,MODE]... | OCTALMODE&gt; PATH...:  <span class="comment">#修改文件或目录的权限。</span></span><br><span class="line">-<span class="built_in">chown</span> [-R] [OWNER][:[GROUP]] PATH...:  <span class="comment">#修改文件或目录的所属用户。</span></span><br><span class="line">-copyFromLocal [-f] [-p] [-l] [-d] [-t &lt;thread count&gt;] &lt;localsrc&gt; ... &lt;dst&gt;:  <span class="comment">#从本地复制文件到HDFS。</span></span><br><span class="line">-copyToLocal [-f] [-p] [-ignoreCrc] [-crc] &lt;src&gt; ... &lt;localdst&gt;:  <span class="comment">#从HDFS复制文件到本地。</span></span><br><span class="line">-count [-q] [-h] [-v] [-t [&lt;storage <span class="built_in">type</span>&gt;]] [-u] [-x] [-e] &lt;path&gt; ...:  <span class="comment">#统计文件或目录的数量。</span></span><br><span class="line">-<span class="built_in">cp</span> [-f] [-p | -p[topax]] [-d] &lt;src&gt; ... &lt;dst&gt;:  <span class="comment">#在HDFS文件系统中拷贝文件。</span></span><br><span class="line">-createSnapshot &lt;snapshotDir&gt; [&lt;snapshotName&gt;]:  <span class="comment">#创建指定目录的快照。</span></span><br><span class="line">-deleteSnapshot &lt;snapshotDir&gt; &lt;snapshotName&gt;:  <span class="comment">#删除指定目录下的快照。</span></span><br><span class="line">-<span class="built_in">df</span> [-h] [&lt;path&gt; ...]:  <span class="comment">#查看文件系统剩余空间。</span></span><br><span class="line">-<span class="built_in">du</span> [-s] [-h] [-v] [-x] &lt;path&gt; ...:  <span class="comment">#计算文件或目录的磁盘使用情况。</span></span><br><span class="line">-expunge:  <span class="comment">#清空HDFS垃圾箱。</span></span><br><span class="line">-find &lt;path&gt; ... &lt;expression&gt; ...:  <span class="comment">#在指定路径下查找符合条件的文件。</span></span><br><span class="line">-get [-f] [-p] [-ignoreCrc] [-crc] &lt;src&gt; ... &lt;localdst&gt;:  <span class="comment">#从HDFS下载文件到本地。</span></span><br><span class="line">-getfacl [-R] &lt;path&gt;:  <span class="comment">#获取文件或目录的ACL（访问控制列表）信息。</span></span><br><span class="line">-getfattr [-R] &#123;-n name | -d&#125; [-e en] &lt;path&gt;:  <span class="comment">#获取文件或目录的扩展属性信息。</span></span><br><span class="line">-getmerge [-<span class="built_in">nl</span>] [-skip-empty-file] &lt;src&gt; &lt;localdst&gt;:  <span class="comment">#将多个文件合并为一个文件并下载到本地。</span></span><br><span class="line">-<span class="built_in">head</span> &lt;file&gt;:  <span class="comment">#查看文件的开头部分内容。</span></span><br><span class="line">-<span class="built_in">help</span> [cmd ...]:  <span class="comment">#获取HDFS命令的帮助。</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Hadoop平台-HDFS优缺点"><a href="#Hadoop平台-HDFS优缺点" class="headerlink" title="Hadoop平台-HDFS优缺点"></a>Hadoop平台-HDFS优缺点</h1><p><strong>HDFS组件用于存储数据,主要由*NameNode,DataNode,SecondaryNameNode 组成</strong></p><p><img src="/2025/06/24/Hadoop/image-20250701144959041.png" alt="image-20250701144959041"></p><h1 id="Hadoop平台-HDFS读取流程"><a href="#Hadoop平台-HDFS读取流程" class="headerlink" title="Hadoop平台-HDFS读取流程"></a>Hadoop平台-HDFS读取流程</h1><p><img src="/2025/06/24/Hadoop/image-20250701145056181.png" alt="image-20250701145056181"></p><h1 id="Hadoop平台-NameNode更新流程"><a href="#Hadoop平台-NameNode更新流程" class="headerlink" title="Hadoop平台-NameNode更新流程"></a>Hadoop平台-NameNode更新流程</h1><p><img src="/2025/06/24/Hadoop/image-20250701145144059.png" alt="image-20250701145144059"></p><h1 id="Hadoop平台-yarn工作流程"><a href="#Hadoop平台-yarn工作流程" class="headerlink" title="Hadoop平台-yarn工作流程"></a>Hadoop平台-yarn工作流程</h1><p><img src="/2025/06/24/Hadoop/image-20250701145303204.png" alt="image-20250701145303204"></p><h1 id="Hadoop平台-mapreduce工作流程"><a href="#Hadoop平台-mapreduce工作流程" class="headerlink" title="Hadoop平台-mapreduce工作流程"></a>Hadoop平台-mapreduce工作流程</h1><p><img src="/2025/06/24/Hadoop/image-20250701145353344.png" alt="image-20250701145353344"></p><h1 id="什么是HIVE"><a href="#什么是HIVE" class="headerlink" title="什么是HIVE"></a>什么是HIVE</h1><p>Hive 是<strong>基于 Hadoop 的一个数据仓库工具</strong>。以下是具体介绍:</p><ul><li><strong>功能特点</strong>：Hive 可以<strong>将结构化的数据文件映射为一张数据库表</strong>，并提供完整的 SQL 查询功能，能将 SQL 语句转换为 MapReduce 任务进行运行。它允许熟悉 SQL 的用户方便地查询数据，也支持熟悉 MapReduce 的开发者自定义 mapper 和 reducer，以处理复杂的分析工作。</li><li><strong>优势</strong>：学习成本低，通过类 SQL 语句可快速实现简单的 MapReduce 统计，无需开发专门的 MapReduce 应用，十分适合数据仓库的统计分析。</li><li><strong>应用场景</strong>：常用于对时效性要求不高的数据分析场景。由于 <strong>Hive 底层依赖 Hadoop 的 HDFS 存储数据</strong>，利用 MapReduce 进行计算，因此能够处理大规模的数据，在处理海量结构化日志的数据统计等方面应用广泛。</li><li><strong>与数据库的区别</strong>：<ol><li>数据库一般用于在线应用，支持对某一行或某些行数据的更新、删除等操作，采用 “写时模式”，数据加载慢但查询快。</li><li>而 Hive 不支持对具体行的操作，也不支持事务和索引，采用 “读时模式”，适合处理非结构化或存储模式未知的数据，更侧重于对海量数据的批量处理和分析。</li></ol></li></ul><h1 id="HIVE安装"><a href="#HIVE安装" class="headerlink" title="HIVE安装"></a>HIVE安装</h1><h2 id="配置mysql安装源"><a href="#配置mysql安装源" class="headerlink" title="配置mysql安装源"></a>配置mysql安装源</h2><p>（在线安装方法）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载安装源</span></span><br><span class="line">wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 mysql 源</span></span><br><span class="line">yum localinstall mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line"><span class="comment"># 导入key</span></span><br><span class="line">rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</span><br><span class="line"><span class="comment"># 修改国内源</span></span><br><span class="line">vim /etc/yum.repos.d/mysql-community.repo</span><br><span class="line">修改 baseurl 为 https://mirrors.cloud.tencent.com/mysql/yum/mysql-5.7-community-el7-x86_64/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装mysql</span></span><br><span class="line">yum install -y mysql-community-server</span><br></pre></td></tr></table></figure><ol><li>安装mysql （本地安装方法）</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">00#rpm包安装</span><br><span class="line"><span class="comment">#tar -zvxf mysql-5.7.22-linux-glibc2.12-x86_64.tar.gz  -C /usr/local/mysql</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2.解压：</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line">tar -zxvf mysql-5.7.22-linux-glibc2.12-x86_64.tar</span><br><span class="line"><span class="built_in">mv</span> mysql-5.7.22-linux-glibc2.12-x86_64 mysql-5.7.22</span><br><span class="line"><span class="built_in">ln</span> -s mysql-5.7.22 mysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#3.添加用户组和用户</span></span><br><span class="line"><span class="comment">#添加用户组</span></span><br><span class="line">groupadd mysql</span><br><span class="line"><span class="comment">#添加用户mysql 到用户组mysql</span></span><br><span class="line">useradd -g mysql mysql</span><br><span class="line"><span class="comment">#4.安装</span></span><br><span class="line"><span class="built_in">cd</span> /usr/local/mysql</span><br><span class="line"><span class="built_in">mkdir</span> data</span><br><span class="line"><span class="built_in">chown</span> -R mysql:mysql ./</span><br><span class="line">./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql/m<span class="string">&#x27;y&#x27;</span>s<span class="string">&#x27;q --datadir=/usr/local/mysql/data</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#将mysql/目录下除了data/目录的所有文件，改回root用户所有</span></span><br><span class="line"><span class="string">chown -R root .</span></span><br><span class="line"><span class="string">#mysql用户只需作为mysql-5.7.22/data/目录下所有文件的所有者</span></span><br><span class="line"><span class="string">chown -R mysql data</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#5.复制启动文件</span></span><br><span class="line"><span class="string">cp support-files/mysql.server /etc/init.d/mysqld</span></span><br><span class="line"><span class="string">chmod 755 /etc/init.d/mysqld</span></span><br><span class="line"><span class="string">cp bin/my_print_defaults /usr/bin/ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#6.修改启动脚本</span></span><br><span class="line"><span class="string">vi /etc/init.d/mysqld</span></span><br><span class="line"><span class="string">#修改项：</span></span><br><span class="line"><span class="string">basedir=/usr/local/mysql-5.7.22/</span></span><br><span class="line"><span class="string">datadir=/usr/local/mysql-5.7.22/data</span></span><br><span class="line"><span class="string">port=3306</span></span><br><span class="line"><span class="string">#加入环境变量，编辑 /etc/profile，这样可以在任何地方用mysql命令了</span></span><br><span class="line"><span class="string">vi ~/.bash_profile</span></span><br><span class="line"><span class="string">#添加mysql路径，加入下面内容，按ESC--&gt;:wq保存</span></span><br><span class="line"><span class="string">export PATH=$PATH:/usr/local/mysql-5.7.22/bin</span></span><br><span class="line"><span class="string">#刷新立即生效</span></span><br><span class="line"><span class="string">source ~/.bash_profile</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#7.修改mysql配置项</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">vi /etc/my.cnf</span></span><br><span class="line"><span class="string">#配置如下：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">basedir = /usr/local/mysql</span></span><br><span class="line"><span class="string">datadir = /usr/local/mysql/data</span></span><br><span class="line"><span class="string">socket = /tmp/mysql.sock</span></span><br><span class="line"><span class="string">user = mysql</span></span><br><span class="line"><span class="string">tmpdir = /tmp</span></span><br><span class="line"><span class="string">symbolic-links=0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[mysqld_safe]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">log-error = /usr/local/mysql/data/error.log</span></span><br><span class="line"><span class="string">pid-file = /usr/local/mysql/data/mysql.pid</span></span><br><span class="line"><span class="string">#!includedir /etc/my.cnf.d</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#8.启动mysql</span></span><br><span class="line"><span class="string">service mysqld start</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#如启动失败，删除 /usr/local/mysql-5.7.22/data下所有文件，重新执行./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data，再启动</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#9.进入mysql修改初始密码，修改远程连接的用户权限问题</span></span><br><span class="line"><span class="string">mysql -uroot -p</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ALTER USER &#x27;</span>root<span class="string">&#x27;@&#x27;</span>localhost<span class="string">&#x27; IDENTIFIED BY &#x27;</span>root<span class="string">&#x27;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">use mysql;</span></span><br><span class="line"><span class="string">UPDATE user SET host=&#x27;</span>%<span class="string">&#x27; WHERE user=&#x27;</span>root<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">flush privileges;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#开机自启动</span></span><br><span class="line"><span class="string">chkconfig --add mysqld</span></span><br><span class="line"><span class="string">chkconfig mysqld on</span></span><br><span class="line"><span class="string">chkconfig --list</span></span><br><span class="line"><span class="string">  mysqld          0:关    1:关    2:开    3:开    4:开    5:开    6:关</span></span><br></pre></td></tr></table></figure><ol><li>配置mysql</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动mysql 服务</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line"><span class="comment">#设置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line"><span class="comment"># 重载所有修改过的配置文件</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 关闭密码验证</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line"><span class="comment"># mysqld选项下加入</span></span><br><span class="line">validate_password=OFF</span><br><span class="line"><span class="comment">#重启mysql服务</span></span><br><span class="line">systemctl restart mysqld</span><br><span class="line"><span class="comment"># 得到临时密码</span></span><br><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/log/mysqld.log</span><br><span class="line"><span class="comment">#登录mysql</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="comment"># 开发环境 修改密码为root</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="comment">#修改root账号登录限制</span></span><br><span class="line">use mysql;</span><br><span class="line">UPDATE user SET host=<span class="string">&#x27;%&#x27;</span> WHERE user=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">flush privileges; </span><br><span class="line"><span class="comment">#创建metastore元数据库</span></span><br><span class="line">create database metastore</span><br><span class="line">DEFAULT CHARACTER SET utf8</span><br><span class="line">DEFAULT COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure><h2 id="安装HIVE"><a href="#安装HIVE" class="headerlink" title="安装HIVE"></a>安装HIVE</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解压apache-hive-3.1.2-bin.tar.gz到/opt/module/目录下面</span></span><br><span class="line">   tar -zxvf apache-hive-3.1.2-bin.tar.gz -C /opt/module/</span><br><span class="line"><span class="comment">#修改`/etc/profile.d/my_env.sh`，添加环境变量</span></span><br><span class="line">   vim /etc/profile.d/my_env.sh</span><br><span class="line"><span class="comment">#添加内容</span></span><br><span class="line"><span class="comment">#HIVE_HOME</span></span><br><span class="line">   <span class="built_in">export</span> HIVE_HOME=/opt/module/apache-hive-3.1.2-bin</span><br><span class="line">   <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HIVE_HOME</span>/bin</span><br><span class="line"><span class="comment">#刷新环境变量</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><ol><li>hive基础配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解决日志Jar包冲突</span></span><br><span class="line"><span class="built_in">mv</span> <span class="variable">$HIVE_HOME</span>/lib/log4j-slf4j-impl-2.10.0.jar <span class="variable">$HIVE_HOME</span>/lib/log4j-slf4j-impl-2.10.0.bak</span><br><span class="line"></span><br><span class="line"><span class="comment">#拷贝mysql-connector.jar到lib库</span></span><br><span class="line"><span class="built_in">cp</span> /opt/software/mysql-connector-java-5.1.27-bin.jar <span class="variable">$HIVE_HOME</span>/lib</span><br></pre></td></tr></table></figure><ol><li><p>配置hive-site.xml</p><p>挑转到<code>/opt/module/apache-hive-3.1.2-bin/conf/</code>目录新建文件 hive-site.xml</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/xsl&quot;</span> href=<span class="string">&quot;configuration.xsl&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span> </span><br><span class="line">  <span class="comment">&lt;!--jdbc连接的URL--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://hadoop100:3306/metastore?useSSL=false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--jdbc连接的Driver--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--jdbc连接的username--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--jdbc连接的password--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Hive元数据存储版本的验证--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.schema.verification<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--元数据存储授权--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.event.db.notification.api.auth<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Hive默认在HDFS的工作目录--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/user/hive/warehouse<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.enable.doAs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--取消本地模式改为false--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.exec.mode.local.auto<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.map.child.java.opts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>-Xmx2048m<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>初始化Hive元数据库</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schematool -initSchema -dbType mysql -verbose</span><br></pre></td></tr></table></figure><h2 id="优化mapreduce"><a href="#优化mapreduce" class="headerlink" title="优化mapreduce"></a>优化mapreduce</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="variable">$HADOOP_HOME</span>/etc/hadoop/mapred-site.xml</span><br></pre></td></tr></table></figure><p>增加配置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.memory.mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1536<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.java.opts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>-Xmx1024M<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.memory.mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>3072<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.java.opts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>-Xmx2560M<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置beeline"><a href="#配置beeline" class="headerlink" title="配置beeline"></a>配置beeline</h2><p>配置core-site.xml 使其任意节点都可以访问hadoop</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.proxyuser.root.hosts&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.proxyuser.root.groups&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><ol><li>启动 hiveserver2</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#前端启动</span></span><br><span class="line">hiveserver2</span><br><span class="line"><span class="comment">#后台启动</span></span><br><span class="line"><span class="built_in">nohup</span> hiveserver2 &amp;</span><br></pre></td></tr></table></figure><ol><li>登录命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">beeline -u jdbc:hive2://localhost:10000 -n root -p 123456 [密码随意]</span><br><span class="line">beeline -u jdbc:hive2://localhost:10000 -n root -p 123456  -e <span class="string">&#x27;show tables;&#x27;</span> </span><br></pre></td></tr></table></figure><ol><li>dbeaver登录</li></ol><ul><li>获取文件 hadoop-common-3.1.3.jar</li><li>获取文件 hive-jdbc-3.1.2-standalone.jar</li><li>添加hive数据库链接</li></ul><h1 id="hive-数据操作语句"><a href="#hive-数据操作语句" class="headerlink" title="hive 数据操作语句"></a><strong>hive</strong> 数据操作语句</h1><h2 id="元数据查看语句"><a href="#元数据查看语句" class="headerlink" title="元数据查看语句"></a>元数据查看语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查看数据库</span></span><br><span class="line"><span class="keyword">show</span>  database db_hive</span><br><span class="line"><span class="comment">--过滤查看数据库</span></span><br><span class="line"><span class="keyword">show</span> databases <span class="keyword">like</span> <span class="string">&#x27;db_hive*&#x27;</span>;</span><br><span class="line"><span class="comment">--查看详情</span></span><br><span class="line"><span class="keyword">desc</span> database db_hive</span><br><span class="line"><span class="keyword">desc</span> database extended db_hive;</span><br><span class="line"><span class="comment">--查看表</span></span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="comment">--查看表列详情</span></span><br><span class="line"><span class="keyword">desc</span> dept;</span><br><span class="line"><span class="comment">--查看表所有详细信息</span></span><br><span class="line"><span class="keyword">desc</span> extended emp;</span><br><span class="line"><span class="keyword">show</span> formatted emp;</span><br><span class="line"><span class="comment">--查看分区信息</span></span><br><span class="line"><span class="keyword">show</span> partitions emp;</span><br></pre></td></tr></table></figure><h2 id="建库操作"><a href="#建库操作" class="headerlink" title="建库操作"></a>建库操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] database_name</span><br><span class="line">[COMMENT database_comment]</span><br><span class="line">[LOCATION hdfs_path]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="建表操作"><a href="#建表操作" class="headerlink" title="建表操作"></a>建表操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">EXTERNAL</span>] <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] table_name <span class="comment">--内部表</span></span><br><span class="line">[(col_name data_type [COMMENT col_comment], ...)] <span class="comment">--数据类型 </span></span><br><span class="line">[COMMENT table_comment] </span><br><span class="line">[PARTITIONED <span class="keyword">BY</span> (col_name data_type [COMMENT col_comment], ...)] <span class="comment">--分区表</span></span><br><span class="line">[CLUSTERED <span class="keyword">BY</span> (col_name, col_name, ...) </span><br><span class="line">[SORTED <span class="keyword">BY</span> (col_name [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>], ...)] <span class="keyword">INTO</span> num_buckets BUCKETS] <span class="comment">--分桶表</span></span><br><span class="line">[<span class="type">ROW</span> FORMAT DELIMITED <span class="comment">--数据格式</span></span><br><span class="line">[FIELDS TERMINATED <span class="keyword">BY</span> <span class="type">char</span>] <span class="comment">--列分隔</span></span><br><span class="line">[COLLECTION ITEMS TERMINATED <span class="keyword">BY</span> <span class="type">char</span>] <span class="comment">--复合数据item分隔</span></span><br><span class="line">[MAP KEYS TERMINATED <span class="keyword">BY</span> <span class="type">char</span>] <span class="comment">--复合数据key分隔</span></span><br><span class="line">[LINES TERMINATED <span class="keyword">BY</span> <span class="type">char</span>]] <span class="comment">--行分隔</span></span><br><span class="line">[STORED <span class="keyword">AS</span> file_format] <span class="comment">--压缩格式</span></span><br><span class="line">[LOCATION hdfs_path] <span class="comment">--表数据文件存储路径</span></span><br><span class="line">[TBLPROPERTIES (property_name<span class="operator">=</span>property_value, ...)] <span class="comment">--内外部表转换</span></span><br><span class="line">[<span class="keyword">AS</span> select_statement]</span><br></pre></td></tr></table></figure><h2 id="上传数据"><a href="#上传数据" class="headerlink" title="上传数据"></a>上传数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--load</span></span><br><span class="line">load data [<span class="keyword">local</span>] inpath <span class="string">&#x27;数据的path&#x27;</span> [overwrite] <span class="keyword">into</span> <span class="keyword">table</span> student [<span class="keyword">partition</span> (partcol1<span class="operator">=</span>val1,…)];</span><br><span class="line"></span><br><span class="line"><span class="comment">--上传hdfs</span></span><br><span class="line">dfs <span class="operator">-</span>put <span class="operator">/</span>opt<span class="operator">/</span><span class="keyword">module</span><span class="operator">/</span>hive<span class="operator">/</span>datas<span class="operator">/</span>student.txt <span class="operator">/</span><span class="keyword">user</span><span class="operator">/</span>atguigu<span class="operator">/</span>hive;</span><br><span class="line"></span><br><span class="line"><span class="comment">--插入数据</span></span><br><span class="line"><span class="keyword">insert into</span> <span class="keyword">table</span>  student_par <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;wangwu&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;zhaoliu&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--覆盖插入并且使用结果集进行插入</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> student_par <span class="keyword">select</span> id, name <span class="keyword">from</span> student ;</span><br></pre></td></tr></table></figure><h2 id="下载数据"><a href="#下载数据" class="headerlink" title="下载数据"></a>下载数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">local</span> directory <span class="string">&#x27;数据的path&#x27;</span></span><br><span class="line"><span class="type">ROW</span> FORMAT DELIMITED FIELDS TERMINATED <span class="keyword">BY</span> <span class="string">&#x27;\t&#x27;</span> dql_command;</span><br><span class="line"></span><br><span class="line"><span class="comment">--hadoop 导出</span></span><br><span class="line">dfs <span class="operator">-</span><span class="keyword">get</span> <span class="operator">/</span><span class="keyword">user</span><span class="operator">/</span>hive<span class="operator">/</span>warehouse<span class="operator">/</span>student<span class="operator">/</span>student.txt</span><br><span class="line"><span class="operator">/</span>opt<span class="operator">/</span><span class="keyword">module</span><span class="operator">/</span>datas<span class="operator">/</span>export<span class="operator">/</span>student3.txt;</span><br><span class="line"></span><br><span class="line"><span class="comment">--hive shell导出</span></span><br><span class="line">bin<span class="operator">/</span>hive <span class="operator">-</span>e <span class="string">&#x27;select * from default.student;&#x27;</span> <span class="operator">&gt;</span></span><br><span class="line"><span class="operator">/</span>opt<span class="operator">/</span><span class="keyword">module</span><span class="operator">/</span>hive<span class="operator">/</span>datas<span class="operator">/</span>export<span class="operator">/</span>student4.txt;</span><br><span class="line"></span><br><span class="line"><span class="comment">--export导出</span></span><br><span class="line"> export <span class="keyword">table</span> default.student <span class="keyword">to</span></span><br><span class="line"> <span class="string">&#x27;/user/hive/warehouse/export/student&#x27;</span>; </span><br></pre></td></tr></table></figure><h2 id="select语句"><a href="#select语句" class="headerlink" title="select语句"></a>select语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>] select_expr, select_expr, ...</span><br><span class="line">  <span class="keyword">FROM</span> table_reference</span><br><span class="line">  [<span class="keyword">WHERE</span> where_condition]</span><br><span class="line">  [<span class="keyword">GROUP</span> <span class="keyword">BY</span> col_list]</span><br><span class="line">  [<span class="keyword">ORDER</span> <span class="keyword">BY</span> col_list]</span><br><span class="line">  [CLUSTER <span class="keyword">BY</span> col_list</span><br><span class="line">    <span class="operator">|</span> [DISTRIBUTE <span class="keyword">BY</span> col_list] [SORT <span class="keyword">BY</span> col_list]</span><br><span class="line">  ]</span><br><span class="line"> [LIMIT number]</span><br></pre></td></tr></table></figure><h1 id="Hive复合数据类型"><a href="#Hive复合数据类型" class="headerlink" title="Hive复合数据类型"></a>Hive复合数据类型</h1><ul><li><p><strong>数组array</strong>: <strong>array&lt;value数据类型&gt;</strong></p><ol><li>相同数据类型</li><li>有序的排列</li><li>下标为数字</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询复合数据</span></span><br><span class="line"><span class="keyword">select</span>  a_score[<span class="number">0</span>] <span class="keyword">from</span> student2</span><br><span class="line"></span><br><span class="line"><span class="comment">--构造复合数据-array</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">array</span>(值,值) <span class="keyword">from</span> student</span><br></pre></td></tr></table></figure></li><li><p><strong>集合struct</strong>:                         <strong>struct&lt;key值:value数据类型,key值:value数据类型&gt;</strong></p><ol><li><p>预定义个数</p></li><li><p>预定义顺序</p></li><li><p>key预定义</p></li><li><p>数据类型可不同</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询复合数据</span></span><br><span class="line"><span class="keyword">select</span>  s_score.chinese <span class="keyword">from</span> student2</span><br><span class="line"></span><br><span class="line"><span class="comment">--构造复合数据</span></span><br><span class="line"><span class="keyword">select</span> named_struct(key,<span class="keyword">value</span>,key,<span class="keyword">value</span>)</span><br><span class="line"><span class="keyword">from</span> student</span><br></pre></td></tr></table></figure></li><li><p><strong>字典map</strong>:                              <strong>map&lt;key数据类型,value数据类型&gt;</strong></p><ol><li><p>标准字典类型</p></li><li><p>key自定义</p></li><li><p>数据类型可不同</p></li><li><p>个数不限</p></li></ol>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询复合数据</span></span><br><span class="line"><span class="keyword">select</span>  m_score[<span class="string">&#x27;语文&#x27;</span>] <span class="keyword">from</span> student2</span><br><span class="line"></span><br><span class="line"><span class="comment">--构造复合数据</span></span><br><span class="line"><span class="keyword">select</span> map(key,<span class="keyword">value</span>,key,<span class="keyword">value</span>)</span><br><span class="line"><span class="keyword">from</span> student</span><br></pre></td></tr></table></figure><h2 id="hive-内置函数"><a href="#hive-内置函数" class="headerlink" title="hive 内置函数"></a><strong>hive</strong> 内置函数</h2>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看系统自带的函数</span></span><br><span class="line"><span class="keyword">show</span> functions;</span><br><span class="line"><span class="comment">-- 显示自带的函数的用法</span></span><br><span class="line"><span class="keyword">desc</span> <span class="keyword">function</span> upper;</span><br><span class="line"><span class="comment">-- 详细显示自带的函数的用法</span></span><br><span class="line"><span class="keyword">desc</span> <span class="keyword">function</span> extended upper;</span><br></pre></td></tr></table></figure></li></ul><h1 id="python连接hive"><a href="#python连接hive" class="headerlink" title="python连接hive"></a>python连接hive</h1><h2 id="linux环境安装python"><a href="#linux环境安装python" class="headerlink" title="linux环境安装python"></a>linux环境安装python</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载安装包 或上传安装包</span></span><br><span class="line">wget https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tgz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://www.python.org/ftp/python/3.9.9/Python-3.9.9.tgz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf Python-3.9.10.tgz -C /opt/module/</span><br><span class="line"><span class="comment"># 支撑包</span></span><br><span class="line">yum install openssl-devel libffi-devel bzip2-devel gcc gcc-c++ wget -y</span><br><span class="line"><span class="comment"># 配置</span></span><br><span class="line">./configure --enable-optimizations</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">make altinstall</span><br></pre></td></tr></table></figure><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line">vim  /etc/profile.d/my_env.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$PATH</span>:/opt/python39/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line"></span><br><span class="line"><span class="comment">#生效 环境变量</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#或者进行软连接 配置 </span></span><br><span class="line"><span class="built_in">cp</span> libpython3.9.a  /usr/lib64/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">ln</span> -s /root/software/python3.9/Python-3.9.10/python /usr/bin/python3</span><br><span class="line"><span class="built_in">ln</span> -s /opt/module/Python-3.9.10/python /usr/bin/python3</span><br></pre></td></tr></table></figure><h2 id="安装pyhive库"><a href="#安装pyhive库" class="headerlink" title="安装pyhive库"></a>安装pyhive库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pip3 install  -i https://mirrors.aliyun.com/pypi/simple/  thrift</span><br><span class="line">pip3 install  -i https://mirrors.aliyun.com/pypi/simple/  thrift-sasl</span><br><span class="line">pip3 install   -i https://mirrors.aliyun.com/pypi/simple/ PyHive</span><br><span class="line">pip3 install   -i https://mirrors.aliyun.com/pypi/simple/ PyM</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyhive <span class="keyword">import</span> hive</span><br><span class="line">conn=hive.connect(host=<span class="string">&#x27;localhost&#x27;</span>,port=<span class="number">10000</span>,username=<span class="string">&#x27;root&#x27;</span>,database=<span class="string">&#x27;db_hive&#x27;</span>)</span><br><span class="line">cursor=conn.cursor()</span><br><span class="line">sql=<span class="string">&#x27;show tables&#x27;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"><span class="built_in">print</span>(cursor.fetchall())</span><br></pre></td></tr></table></figure><h1 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h1><ul><li><p>分区是将一个表或索引物理地分解为多个更小、更可管理的部分。</p></li><li><p>分区对应用透明，即对访问数据库的应用而言，逻辑上讲只有一个表或一个索引（相当于应用“看到”的只是一个表或索引），但在物理上这个表或索引可能由数十个物理分区组成。</p></li></ul><h2 id="分区应用场景"><a href="#分区应用场景" class="headerlink" title="分区应用场景"></a>分区应用场景</h2><p><img src="/2025/06/24/Hadoop/image-20250701152059542.png" alt="image-20250701152059542"></p><h2 id="oracle分区表种类"><a href="#oracle分区表种类" class="headerlink" title="oracle分区表种类"></a><strong>oracle</strong>分区表种类</h2><ol><li><strong>范围分区</strong>(range)</li><li><strong>列表分区</strong>(list)</li><li><strong>散列分区</strong>(hash)</li><li><strong>组合组合分区</strong>(subpartition)</li></ol><h2 id="oracle分区-范围分区"><a href="#oracle分区-范围分区" class="headerlink" title="oracle分区-范围分区"></a><em>oracle</em>分区-范围分区</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> ORDER_ACTIVITIES   </span><br><span class="line">(  ORDER_ID      NUMBER(<span class="number">7</span>) <span class="keyword">NOT NULL</span>,   </span><br><span class="line">    ORDER_DATE    <span class="type">DATE</span>,   </span><br><span class="line">    TOTAL_AMOUNT NUMBER,   </span><br><span class="line">    CUSTOTMER_ID NUMBER(<span class="number">7</span>),   </span><br><span class="line">    PAID   <span class="type">CHAR</span>(<span class="number">1</span>)   </span><br><span class="line">)   <span class="comment">-- 建表语句不变</span></span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span> (ORDER_DATE) <span class="comment">-- 范围分区创建 语句 关键字 range(列名)</span></span><br><span class="line">(  </span><br><span class="line">  <span class="keyword">PARTITION</span> ORD_ACT_PART01 <span class="keyword">VALUES</span> LESS THAN (TO_DATE(<span class="string">&#x27;01- MAY -2003&#x27;</span>,<span class="string">&#x27;DD-MON-YYYY&#x27;</span>)) TABLESPACE ORD_TS01,  </span><br><span class="line">    <span class="comment">-- 分区名 （时间值）表空间</span></span><br><span class="line">  <span class="keyword">PARTITION</span> ORD_ACT_PART02 <span class="keyword">VALUES</span> LESS THAN (TO_DATE(<span class="string">&#x27;01-JUN-2003&#x27;</span>,<span class="string">&#x27;DD-MON-YYYY&#x27;</span>)) TABLESPACE ORD_TS02,  </span><br><span class="line">  <span class="keyword">PARTITION</span> ORD_ACT_PART02 <span class="keyword">VALUES</span> LESS THAN (MAXVALUE) TABLESPACE ORD_TS03   <span class="comment">--使用maxvalue 将其他不符合上述范围的值放入其中</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="oracle分区-列表分区"><a href="#oracle分区-列表分区" class="headerlink" title="oracle分区-列表分区"></a>oracle分区-列表分区</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> ORDER_ACTIVITIES  </span><br><span class="line">(  PROBLEM_ID   NUMBER(<span class="number">7</span>) <span class="keyword">NOT NULL</span> <span class="keyword">PRIMARY KEY</span>,   </span><br><span class="line">    CUSTOMER_ID  NUMBER(<span class="number">7</span>) <span class="keyword">NOT NULL</span>,     </span><br><span class="line">    STATUS       VARCHAR2(<span class="number">20</span>))   </span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> LIST (STATUS)    <span class="comment">-- 范围分区创建 语句 关键字 LIST(列名)</span></span><br><span class="line">(    <span class="keyword">PARTITION</span> PROB_ACTIVE   <span class="keyword">VALUES</span> (<span class="string">&#x27;ACTIVE&#x27;</span>) TABLESPACE PROB_TS01,  <span class="comment">-- </span></span><br><span class="line">      <span class="keyword">PARTITION</span> PROB_INACTIVE <span class="keyword">VALUES</span> (<span class="string">&#x27;INACTIVE&#x27;</span>,<span class="string">&#x27;unknow&#x27;</span>) TABLESPACE PROB_TS02  </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="oracle分区-散列分区"><a href="#oracle分区-散列分区" class="headerlink" title="oracle分区-散列分区"></a>oracle分区-散列分区</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> HASH_TABLE   </span><br><span class="line">( COL NUMBER(<span class="number">8</span>),   </span><br><span class="line">  INF VARCHAR2(<span class="number">100</span>)   </span><br><span class="line">)   </span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> HASH (COL)    <span class="comment">-- 范围分区创建 语句 关键字 HASH(列名) </span></span><br><span class="line">(   </span><br><span class="line">  <span class="keyword">PARTITION</span> PART01 TABLESPACE HASH_TS01,   </span><br><span class="line">  <span class="keyword">PARTITION</span> PART02 TABLESPACE HASH_TS02,   </span><br><span class="line">  <span class="keyword">PARTITION</span> PART03 TABLESPACE HASH_TS03   </span><br><span class="line">) </span><br></pre></td></tr></table></figure><h2 id="oracle分区-组合分区"><a href="#oracle分区-组合分区" class="headerlink" title="oracle分区-组合分区"></a><strong>oracle</strong>分区-组合分区</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> SALES   </span><br><span class="line">(  </span><br><span class="line">PRODUCT_ID VARCHAR2(<span class="number">5</span>),  </span><br><span class="line">SALES_DATE <span class="type">DATE</span>,  </span><br><span class="line">SALES_COST NUMBER(<span class="number">10</span>),  </span><br><span class="line">STATUS VARCHAR2(<span class="number">20</span>)  </span><br><span class="line">)  </span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span>(SALES_DATE) SUBPARTITION <span class="keyword">BY</span> LIST (STATUS)  </span><br><span class="line">(  </span><br><span class="line">   <span class="keyword">PARTITION</span> P1 <span class="keyword">VALUES</span> LESS THAN(TO_DATE(<span class="string">&#x27;2003-01-01&#x27;</span>,<span class="string">&#x27;YYYY-MM-DD&#x27;</span>))TABLESPACE rptfact2009   </span><br><span class="line">  (   </span><br><span class="line">      SUBPARTITION P1SUB1 <span class="keyword">VALUES</span> (<span class="string">&#x27;ACTIVE&#x27;</span>) TABLESPACE rptfact2009,   </span><br><span class="line">      SUBPARTITION P1SUB2 <span class="keyword">VALUES</span> (<span class="string">&#x27;INACTIVE&#x27;</span>) TABLESPACE rptfact2009   </span><br><span class="line">  ),   </span><br><span class="line">   <span class="keyword">PARTITION</span> P2 <span class="keyword">VALUES</span> LESS THAN (TO_DATE(<span class="string">&#x27;2003-03-01&#x27;</span>,<span class="string">&#x27;YYYY-MM-DD&#x27;</span>)) TABLESPACE rptfact2009   </span><br><span class="line">  (   </span><br><span class="line">      SUBPARTITION P2SUB1 <span class="keyword">VALUES</span> (<span class="string">&#x27;ACTIVE&#x27;</span>) TABLESPACE rptfact2009,   </span><br><span class="line">      SUBPARTITION P2SUB2 <span class="keyword">VALUES</span> (<span class="string">&#x27;INACTIVE&#x27;</span>) TABLESPACE rptfact2009   </span><br><span class="line">  )   </span><br><span class="line">)  </span><br></pre></td></tr></table></figure><h2 id="oracle分区-分区表操作"><a href="#oracle分区-分区表操作" class="headerlink" title="oracle分区-分区表操作"></a><em>oracle</em>分区-分区表操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加分区</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> SALES <span class="keyword">ADD</span> <span class="keyword">PARTITION</span> P3 <span class="keyword">VALUES</span> LESS THAN(TO_DATE(<span class="string">&#x27;2003-06-01&#x27;</span>,<span class="string">&#x27;YYYY-MM-DD&#x27;</span>));  </span><br><span class="line"><span class="comment">--注意：以上添加的分区界限应该高于最后一个 分区界限。</span></span><br><span class="line"><span class="comment">-- 添加了一个P3SUB1子分区</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> SALES MODIFY <span class="keyword">PARTITION</span> P3 <span class="keyword">ADD</span> SUBPARTITION P3SUB1 <span class="keyword">VALUES</span>(<span class="string">&#x27;COMPLETE&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除分区</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> SALES <span class="keyword">DROP</span> <span class="keyword">PARTITION</span> P3;  </span><br><span class="line"><span class="keyword">ALTER TABLE</span> SALES <span class="keyword">DROP</span> SUBPARTITION P4SUB1;</span><br><span class="line"><span class="comment">-- 注意：如果删除的分区是表中唯一的分区，那么此分区将不能被删除，要想删除此分区，必须删除表。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 交换分区</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> table_name EXCHANGE <span class="keyword">PARTITION</span> partition_name <span class="keyword">WITH</span> <span class="keyword">TABLE</span> nonpartition_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">--将一个分区(子分区)和非分区表进行数据交换，oracle交换的方法是其实是对逻辑存储段进行交换。使用INCLUDEING INDEXES子句可以同步将本地索引也进行交换，使用WITH VALIDATATION子句还可以实现行数据的验证。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--交换分区时如果不带UPDATE INDEXES子句，则全局索引或全局索引基于的分区将变为不可用。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="hive分区-创建分区表"><a href="#hive分区-创建分区表" class="headerlink" title="hive分区-创建分区表"></a>hive分区-创建分区表</h2><p><strong>在 Hadoop 中，Hive 分区表通常以特定的目录结构来存储。</strong></p><p><strong>每个分区对应一个独立的目录，目录名通常包含分区列的值。数据文件会存储在相应的分区目录下。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建分区表</span></span><br><span class="line"><span class="keyword">create table</span> dept_partition(</span><br><span class="line">deptno <span class="type">int</span>, dname string, loc string</span><br><span class="line">)</span><br><span class="line">partitioned <span class="keyword">by</span> (<span class="keyword">day</span> string)</span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="hive分区-分区表操作"><a href="#hive分区-分区表操作" class="headerlink" title="hive分区-分区表操作"></a>hive分区-分区表操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 分区表数据导入</span></span><br><span class="line">load data <span class="keyword">local</span> inpath <span class="string">&#x27;/opt/module/hive/datas/dept_20200401.log&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> dept_partition <span class="keyword">partition</span>(<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200401&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--select分区表插入数据</span></span><br><span class="line"><span class="keyword">insert into</span> <span class="keyword">table</span> log_list_6 <span class="keyword">partition</span>(dat<span class="operator">=</span><span class="string">&#x27;20221231&#x27;</span>) <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> log_list_tmp</span><br><span class="line"><span class="comment">--多表分区插入 </span></span><br><span class="line"><span class="keyword">from</span> student </span><br><span class="line">  <span class="keyword">insert</span> overwrite <span class="keyword">table</span> student <span class="keyword">partition</span>(<span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201707&#x27;</span>)<span class="keyword">select</span> id, name <span class="keyword">where</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201707&#x27;</span></span><br><span class="line">  <span class="keyword">insert</span> overwrite <span class="keyword">table</span> student <span class="keyword">partition</span>(<span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201706&#x27;</span>)<span class="keyword">select</span> id, name <span class="keyword">where</span> <span class="keyword">month</span><span class="operator">=</span><span class="string">&#x27;201706&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查看分区</span></span><br><span class="line"><span class="keyword">show</span> partitions tab_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">--添加分区</span></span><br><span class="line"><span class="keyword">alter table</span> dept_partition <span class="keyword">add</span> <span class="keyword">partition</span>(<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200404&#x27;</span>) ;</span><br><span class="line"><span class="comment">--添加多分区</span></span><br><span class="line"><span class="keyword">alter table</span> dept_partition <span class="keyword">add</span> <span class="keyword">partition</span>(<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200405&#x27;</span>) <span class="keyword">partition</span>(<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200406&#x27;</span>);</span><br><span class="line"><span class="comment">--删除分区</span></span><br><span class="line"><span class="keyword">alter table</span> dept_partition <span class="keyword">drop</span> <span class="keyword">partition</span> (<span class="keyword">day</span><span class="operator">=</span><span class="string">&#x27;20200406&#x27;</span>);</span><br><span class="line"><span class="comment">--查看分区表信息</span></span><br><span class="line"><span class="keyword">show</span> partitions dept_partition;</span><br><span class="line"><span class="comment">--查看分区表结构</span></span><br><span class="line"><span class="keyword">desc</span> formatted dept_partition;</span><br><span class="line"><span class="comment">--修改分区表</span></span><br><span class="line"><span class="keyword">ALTER TABLE</span> table_name <span class="keyword">PARTITION</span> (dt<span class="operator">=</span><span class="string">&#x27;2008-08-08&#x27;</span>) <span class="keyword">SET</span> LOCATION &quot;new location&quot;;</span><br><span class="line"><span class="keyword">ALTER TABLE</span> table_name <span class="keyword">PARTITION</span> (dt<span class="operator">=</span><span class="string">&#x27;2008-08-08&#x27;</span>) RENAME <span class="keyword">TO</span> <span class="keyword">PARTITION</span> (dt<span class="operator">=</span><span class="string">&#x27;20080808&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="超市分区表示例"><a href="#超市分区表示例" class="headerlink" title="超市分区表示例"></a>超市分区表示例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> supermarket_p (</span><br><span class="line">id string, <span class="comment">-- 行 ID  </span></span><br><span class="line">ord_id string comment <span class="string">&#x27;订单 ID&#x27;</span>,  </span><br><span class="line">ord_date string comment <span class="string">&#x27;订单日期&#x27;</span>, </span><br><span class="line">exch_date string comment <span class="string">&#x27;发货日期&#x27;</span>,</span><br><span class="line">exch_type string comment <span class="string">&#x27;邮寄方式&#x27;</span>,</span><br><span class="line">cust_id string comment <span class="string">&#x27;客户 ID &#x27;</span>,</span><br><span class="line">cust_name string comment <span class="string">&#x27;客户名称&#x27;</span>,</span><br><span class="line">d_type string comment <span class="string">&#x27;细分&#x27;</span>,</span><br><span class="line">city string comment <span class="string">&#x27;城市&#x27;</span>, </span><br><span class="line">prov string comment <span class="string">&#x27;省/自治区&#x27;</span>,  </span><br><span class="line">country string comment<span class="string">&#x27;国家&#x27;</span>,</span><br><span class="line">area string comment <span class="string">&#x27;地区&#x27;</span>, </span><br><span class="line">pro_id string comment <span class="string">&#x27;产品 ID&#x27;</span>,  </span><br><span class="line">type1 string comment <span class="string">&#x27;类别&#x27;</span>,</span><br><span class="line">type2 string comment <span class="string">&#x27;子类别&#x27;</span>, </span><br><span class="line">pro_name string comment <span class="string">&#x27;产品名称&#x27;</span>,</span><br><span class="line">sales <span class="type">float</span> comment <span class="string">&#x27;销售额&#x27;</span>,  </span><br><span class="line">count1 <span class="type">int</span> comment <span class="string">&#x27;数量  &#x27;</span>,</span><br><span class="line">discount <span class="type">float</span> comment <span class="string">&#x27;折扣  &#x27;</span>,</span><br><span class="line">profit <span class="type">float</span> comment <span class="string">&#x27;利润&#x27;</span></span><br><span class="line">)</span><br><span class="line">partitioned <span class="keyword">by</span> (c_type1 string)</span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="动态分区配置"><a href="#动态分区配置" class="headerlink" title="动态分区配置"></a>动态分区配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">--开启动态分区(默认开启)</span><br><span class="line"><span class="built_in">set</span> hive.exec.dynamic.partition=<span class="literal">true</span></span><br><span class="line">--指定非严格模式 nonstrict模式表示允许所有的分区字段都可以使用动态分区</span><br><span class="line"><span class="built_in">set</span> hive.exec.dynamic.partition.mode=nonstrict</span><br><span class="line">--在所有执行MR的节点上，最大一共可以创建多少个动态分区。默认1000</span><br><span class="line"><span class="built_in">set</span> hive.exec.max.dynamic.partitions=1000</span><br><span class="line">--在每个执行MR的节点上，最大可以创建多少个动态分区(分区字段有多少种设多少个)</span><br><span class="line"><span class="built_in">set</span> hive.exec.max.dynamic.partitions.pernode=100</span><br><span class="line">--整个MR Job中，最大可以创建多少个HDFS文件。默认100000</span><br><span class="line"><span class="built_in">set</span> hive.exec.max.created.files=100000</span><br><span class="line">--当有空分区生成时，是否抛出异常</span><br><span class="line"><span class="built_in">set</span> hive.error.on.empty.partition=<span class="literal">false</span></span><br><span class="line">--打开正则查询模式`(dt|hr)?+.+`</span><br><span class="line"><span class="built_in">set</span> hive.support.quoted.identifiers=none</span><br></pre></td></tr></table></figure><h1 id="分桶表"><a href="#分桶表" class="headerlink" title="分桶表"></a>分桶表</h1><ul><li><p>分区提供一个隔离数据和优化查询的便利方式。不过，并非所有的数据集都可形成合理的分区。对于一张表或者分区，Hive 可以进一步组织成桶，也就是更为细粒度的数据范围划分。</p></li><li><p>分桶是将数据集分解成更容易管理的若干部分的另一个技术。</p></li><li><p>分区<strong>针对的是数据的存储路径</strong>；分桶<strong>针对的是数据文件</strong>。</p></li></ul><h2 id="分桶表注意事项"><a href="#分桶表注意事项" class="headerlink" title="分桶表注意事项"></a><strong>分桶表注意事项</strong></h2><ul><li><p><strong>分桶策略</strong></p></li><li><p><strong>Hive的分桶采用对分桶字段的值进行哈希，然后除以桶的个数求余的方 式决定该条记录存放在哪个桶当中</strong></p><p>&#x3D;&#x3D;reduce的个数设置为-1,让Job自行决定需要用多少个reduce或者将reduce的个数设置为大于等于分桶表的桶数&#x3D;&#x3D;</p><p>&#x3D;&#x3D;<strong>从hdfs中load数据到分桶表中，避免本地文件找不到问题</strong>&#x3D;&#x3D;</p><p>&#x3D;&#x3D;<strong>不要使用本地模式</strong>&#x3D;&#x3D;</p></li></ul><h2 id="hive分桶表-创建分桶表"><a href="#hive分桶表-创建分桶表" class="headerlink" title="hive分桶表-创建分桶表"></a>hive分桶表-创建分桶表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建4个分桶的分桶表</span></span><br><span class="line"><span class="keyword">create table</span> stu_bucket(id <span class="type">int</span>, name string)</span><br><span class="line">clustered <span class="keyword">by</span>(id) </span><br><span class="line"><span class="keyword">into</span> <span class="number">4</span> buckets</span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--设置mapreduce数量(二选一)</span></span><br><span class="line"><span class="keyword">set</span> mapreduce.job.reduces<span class="operator">=</span><span class="number">3</span></span><br><span class="line"> <span class="keyword">set</span> mapred.reduce.tasks<span class="operator">=</span><span class="number">3</span></span><br><span class="line"><span class="comment">--向分桶表导入数据</span></span><br><span class="line">load data inpath   <span class="string">&#x27;/student.txt&#x27;</span> </span><br><span class="line"><span class="keyword">into</span> <span class="keyword">table</span> stu_bucket;</span><br></pre></td></tr></table></figure><h2 id="hive排序关键字"><a href="#hive排序关键字" class="headerlink" title="hive排序关键字"></a>hive排序关键字</h2><p><img src="/2025/06/24/Hadoop/image-20250701153814791.png" alt="image-20250701153814791"></p><hr><p>##<strong>hive****排序语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--使用order by 排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student2 <span class="keyword">order</span> <span class="keyword">by</span> id</span><br><span class="line"><span class="comment">--使用sort by 排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student2 sort <span class="keyword">by</span> class_name <span class="keyword">desc</span></span><br><span class="line"><span class="comment">--使用distribute by 分组</span></span><br><span class="line"><span class="keyword">set</span> mapreduce.job.reduces<span class="operator">=</span><span class="number">15</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student2 distribute <span class="keyword">by</span> class_name sort <span class="keyword">by</span> id <span class="keyword">desc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> overwrite  <span class="keyword">local</span> directory <span class="string">&#x27;/root/student2/&#x27;</span></span><br><span class="line"><span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student2_b </span><br><span class="line">distribute <span class="keyword">by</span> sex </span><br><span class="line">sort <span class="keyword">by</span> chinese <span class="keyword">desc</span></span><br><span class="line"><span class="comment">--使用cluster by 分组并排序</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student2 cluster <span class="keyword">by</span> class_name</span><br></pre></td></tr></table></figure><h2 id="使用awk-清洗-log"><a href="#使用awk-清洗-log" class="headerlink" title="使用awk 清洗 log"></a>使用awk 清洗 log</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> 2021-05-20.<span class="built_in">log</span> | awk -F <span class="string">&quot;\&quot;-\&quot;&quot;</span> <span class="string">&#x27;&#123;split($1, arr, &quot; &quot;);\</span></span><br><span class="line"><span class="string">split(substr(arr[4],2),dd,&quot;:&quot;);\</span></span><br><span class="line"><span class="string">split(dd[1],ee,&quot;/&quot;);\</span></span><br><span class="line"><span class="string">print arr[1]&quot;\t&quot;ee[1]&quot;-</span></span><br><span class="line"><span class="string">&quot;ee[2]&quot;-&quot;ee[3]&quot; &quot;dd[2]&quot;:&quot;dd[3]&quot;:&quot;dd[4]&quot;\t&quot;arr[7]&quot;\t&quot;$2&#125;&#x27;</span> | \</span><br><span class="line">awk -F <span class="string">&quot;\t&quot;</span> <span class="string">&#x27;&#123;&quot;date -d \&quot;&quot;$2&quot;\&quot; +%Y%m%d%H%M%S&quot; | getline d;print</span></span><br><span class="line"><span class="string">$1&quot;\t&quot;d&quot;\t&quot;$3&quot;\t&quot;$4 &#125;&#x27;</span> | \</span><br><span class="line">awk -F <span class="string">&quot;\t&quot;</span> <span class="string">&#x27;&#123;print $1&quot;\t&quot;$2&quot;\t&quot;$3&quot;\t&quot;(index($4,&quot;Windows&quot;)?&quot;Windows&quot;:</span></span><br><span class="line"><span class="string">(index($4,&quot;Linux&quot;)?&quot;Linux&quot;:&quot;Mac&quot;))&quot;\t&quot;(index($4,&quot;Chrome&quot;)?&quot;Chrome&quot;:</span></span><br><span class="line"><span class="string">(index($4,&quot;Version&quot;)?&quot;Safari&quot;:(index($4,&quot;Firefox&quot;)?&quot;Firefox&quot;:&quot;Opera&quot;)))&#125;&#x27;</span> &gt;</span><br><span class="line">new_2021-05-20.log</span><br></pre></td></tr></table></figure><h1 id="sqoop"><a href="#sqoop" class="headerlink" title="sqoop"></a>sqoop</h1><ol><li><p>安装sqoop</p></li><li><p>sqoop介绍</p><ol><li>Sqoop 是 Apache 旗下一款<strong>专为 Hadoop 设计的数据同步工具</strong>，全称为 “SQL to Hadoop”，主要用于在<strong>关系型数据库</strong>（如 MySQL、Oracle）和<strong>Hadoop 生态系统</strong>（如 HDFS、Hive、HBase）之间高效传输数据。它通过 MapReduce 任务并行处理数据，支持大规模数据的批量导入导出，是 Hadoop 生态中连接结构化数据和非结构化数据的重要桥梁。</li><li><h3 id="核心功能与特点"><a href="#核心功能与特点" class="headerlink" title="核心功能与特点"></a>核心功能与特点</h3><ol><li><strong>数据导入（Import）</strong><br>将关系型数据库中的数据抽取到 Hadoop 中（如 HDFS 存储为文件，或直接导入 Hive 表、HBase 表）。<ul><li><strong>支持增量导入</strong>：可基于时间戳或主键增量同步变化的数据。</li><li><strong>并行处理</strong>：通过 MapReduce 并行读取数据库分片，提升传输效率。</li></ul></li><li><strong>数据导出（Export）</strong><br>将 Hadoop 中的数据（如 HDFS 文件、Hive 表）写回到关系型数据库。<ul><li><strong>事务支持</strong>：确保导出操作的原子性，失败时可回滚。</li></ul></li><li><strong>多种数据库支持</strong><br>支持主流关系型数据库，如 MySQL、Oracle、PostgreSQL、SQL Server 等，也可通过 JDBC 连接其他数据库。</li><li><strong>元数据映射</strong><br>自动将数据库表结构映射为 Hive 表或 HDFS 文件格式（如 Avro、Parquet），简化数据建模。</li><li><strong>与 Hadoop 生态集成</strong><br>无缝集成 Hive、HBase、Spark 等组件，可作为 ETL（抽取 - 转换 - 加载）工具链的核心环节。</li></ol></li></ol></li></ol><p><strong>总结</strong><br>         Sqoop 是 Hadoop 生态中连接结构化数据源（如数据库）与分布式计算平台的关键工具，尤其适合批量数据迁移和周期性 ETL 任务。通过简单的命令行接口，它让数据工程师能够高效地在 Hadoop 与传统 IT 系统间交换数据，降低了大数据应用的集成门槛。</p><ol start="3"><li>sqoop使用</li></ol><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>配置mysql</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database test</span><br><span class="line"><span class="keyword">DEFAULT</span> <span class="keyword">CHARACTER SET</span> utf8</span><br><span class="line"><span class="keyword">DEFAULT</span> <span class="keyword">COLLATE</span> utf8_general_ci;</span><br><span class="line"><span class="comment">--创建数据库</span></span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"><span class="comment">--创建账号</span></span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">user</span> <span class="string">&#x27;test&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="keyword">Grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> test.<span class="operator">*</span> <span class="keyword">to</span> test@<span class="string">&#x27;%&#x27;</span> </span><br><span class="line">identified <span class="keyword">by</span> <span class="string">&#x27;test&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.拷贝安装包以及mysql的jar到/root目录 并解压</span></span><br><span class="line">tar -zvxf sqoop-1.4.6.bin__hadoop-2.0.4-alpha.tar.gz -C /opt/module/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.配置环境变量</span></span><br><span class="line"></span><br><span class="line">vim /etc/profile.d/my_env.sh</span><br><span class="line"><span class="comment"># 加入 sqoop 路径</span></span><br><span class="line"><span class="comment">#SQOOP_HOME</span></span><br><span class="line"><span class="built_in">export</span> SQOOP_HOME=/opt/module/sqoop-1.4.6.bin__hadoop-2.0.4-alpha</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$SQOOP_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><hr><h2 id="安装sqoop"><a href="#安装sqoop" class="headerlink" title="安装sqoop"></a>安装sqoop</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3.配置sqoop</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$SQOOP_HOME</span>/conf</span><br><span class="line"><span class="built_in">cp</span> sqoop-env-template.sh sqoop-env.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_HOME=/opt/module/hadoop-3.1.3</span><br><span class="line"><span class="built_in">export</span> HADOOP_MAPRED_HOME=/opt/module/hadoop-3.1.3</span><br><span class="line"><span class="built_in">export</span> HIVE_HOME=/opt/module/apache-hive-3.1.2-bin</span><br><span class="line"><span class="comment">#export ZOOKEEPER_HOME=/opt/module/zookeeper-3.4.10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拷贝 jdbc 驱动到 sqoop 的 lib 目录下</span></span><br><span class="line"><span class="built_in">cp</span> mysql-connector-java-5.1.27-bin.jar /opt/module/sqoop-1.4.6.bin__hadoop-2.0.4-alpha/lib/</span><br></pre></td></tr></table></figure><p>4.测试连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqoop list-databases --connect jdbc:mysql://localhost:3306/ --username root --password root</span><br></pre></td></tr></table></figure><hr><h3 id="分区重构"><a href="#分区重构" class="headerlink" title="分区重构"></a>分区重构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">beeline -u <span class="string">&quot;jdbc:hive2://hadoop100:10000/db_hive&quot;</span> \</span><br><span class="line"> --outputformat=csv2 --showHeader=<span class="literal">false</span> -n root -p 123456 -e <span class="string">&quot;msck repair table log_sqoop&quot;</span></span><br></pre></td></tr></table></figure><h1 id="DataX"><a href="#DataX" class="headerlink" title="DataX"></a>DataX</h1><p>项目地址：<a href="https://github.com/alibaba/DataX">https://github.com/alibaba/DataX</a><br>官方文档：<a href="https://github.com/alibaba/DataX/blob/master/introduction.md">https://github.com/alibaba/DataX/blob/master/introduction.md</a></p><p>DataX 是阿里巴巴开源的一个<strong>异构数据源离线同步工具</strong>，致力于实现包括关系型数据库(MySQL、Oracle等)、HDFS、Hive、ODPS、HBase、FTP等各种异构数据源之间稳定高效的数据同步功能。</p><p> DataX本身作为数据同步框架，将不同数据源的同步抽象为<strong>从源头数据源读取数据的Reader插件，以及向目标端写入数据的Writer插件</strong>，理论上DataX框架可以支持任意数据源类型的数据同步工作。同时DataX插件体系作为一套生态系统, 每接入一套新数据源该新加入的数据源即可实现和现有的数据源互通。</p><h2 id="安装-datax"><a href="#安装-datax" class="headerlink" title="安装 datax"></a>安装 datax</h2><p>确保hadoop集群没有问题</p><p>将 <code>datax.tar.gz</code> 上传到 hadoop100 的 <code>/root</code>目录下, 解压安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf datax.tar.gz -C /opt/moudule</span><br><span class="line"><span class="comment"># 同步到其他机器</span></span><br><span class="line">xsync /opt/moudule/datax</span><br></pre></td></tr></table></figure><h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><p>开发目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /zhiyun/lijinquan</span><br><span class="line"><span class="built_in">cd</span> /zhiyun/lijinquan</span><br><span class="line"><span class="comment"># 创建几个目录</span></span><br><span class="line"><span class="built_in">mkdir</span> <span class="built_in">jobs</span> sql python shell data</span><br></pre></td></tr></table></figure><p>datax的配置文件需要放在 jobs 目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /zhiyun/lijinquan/jobs/c_org_busi.json</span><br></pre></td></tr></table></figure><p>加入内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;setting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;speed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                 <span class="attr">&quot;channel&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;errorLimit&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;record&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;percentage&quot;</span><span class="punctuation">:</span> <span class="number">0.02</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysqlreader&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhiyun&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zhiyun&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="string">&quot;*&quot;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;connection&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                    <span class="string">&quot;c_org_busi&quot;</span></span><br><span class="line">                                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;jdbcUrl&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                    <span class="string">&quot;jdbc:mysql://192.168.50.179:3306/his?useSSL=false&quot;</span></span><br><span class="line">                                <span class="punctuation">]</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;writer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hdfswriter&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;defaultFS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hdfs://hadoop100:8020&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fileType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;orc&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/zhiyun/lijinquan/ods/c_org_busi&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fileName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c_org_busi.data&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;col1&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TINYINT&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                           ..</span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;writeMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;truncate`&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fieldDelimiter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\t&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python /opt/datax/bin/datax.py /zhiyun/lijinquan/jobs/c_org_busi.json</span><br></pre></td></tr></table></figure><p>列名的处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 一个列一个列的处理</span><br><span class="line">2. vscode多行编辑  alt+shift+鼠标拖动</span><br></pre></td></tr></table></figure><p>抽取 <code>c_org_busi</code> 表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">您配置的path: [/zhiyun/lijinquan/ods/c_org_busi] 不存在, 请先在hive端创建对应的数据库和表.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">datax不会自动创建HDFS上的路径, 需要手动创建</span><br><span class="line">hadoop fs -<span class="built_in">mkdir</span> -p /zhiyun/lijinquan/ods/c_org_busi</span><br></pre></td></tr></table></figure><p>确保抽取成功, 没有报错</p><h3 id="Hive建表"><a href="#Hive建表" class="headerlink" title="Hive建表"></a>Hive建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 确保数据库存在</span></span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> ods_lijinquan location &quot;/zhiyun/lijinquan/ods&quot;;</span><br><span class="line"><span class="comment">-- 建表</span></span><br><span class="line"><span class="comment">-- ods层的表都应该是外部表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> ods_lijinquan.c_org_busi(</span><br><span class="line">...</span><br><span class="line">) <span class="type">row</span> format delimited fields terminated <span class="keyword">by</span> &quot;\t&quot;</span><br><span class="line">lines terminated <span class="keyword">by</span> &quot;\n&quot;</span><br><span class="line">stored <span class="keyword">as</span> orc</span><br><span class="line">location &quot;/zhiyun/lijinquan/ods/c_org_busi&quot;;</span><br></pre></td></tr></table></figure><h3 id="验证数据"><a href="#验证数据" class="headerlink" title="验证数据"></a>验证数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> ods_lijinquan.c_org_busi limit <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> ods_lijinquan.c_org_busi;</span><br></pre></td></tr></table></figure><h3 id="调度平台的安装"><a href="#调度平台的安装" class="headerlink" title="调度平台的安装"></a>调度平台的安装</h3><p>将目录 <code>\07_医药\xxl-job-student-20221220</code>上传到 hadoop100的 <code>/opt</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改名</span></span><br><span class="line"><span class="built_in">mv</span> /opt/xxl-job-student-20221220 /opt/xxljob</span><br><span class="line"><span class="comment"># 导入到mysql</span></span><br><span class="line"><span class="comment"># 确保mysql的密码为root</span></span><br><span class="line">mysql -uroot -proot</span><br><span class="line"><span class="comment"># 在mysql里执行:</span></span><br><span class="line"><span class="built_in">source</span> /opt/xxljob/tables_xxl_job.sql;</span><br><span class="line">quit;</span><br></pre></td></tr></table></figure><p>编写启停脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /root/bin/xxl</span><br></pre></td></tr></table></figure><p>内容:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">act=$1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">start()&#123;</span><br><span class="line">    echo &quot;starting xxl-job&quot;</span><br><span class="line">    ssh root@hadoop100 &quot;cd /opt/xxljob; nohup java -jar xxl-job-admin-2.3.0.jar &gt; xxl-job.log 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">    ssh root@hadoop100 &quot;cd /opt/xxljob; nohup java -jar xxl-job-executor-sample-springboot-2.3.0.jar &gt; xxl-job-executor.log 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">    ssh root@hadoop101 &quot;cd /opt/xxljob; nohup java -jar xxl-job-executor-sample-springboot-2.3.0.jar &gt; xxl-job-executor.log 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">    ssh root@hadoop102 &quot;cd /opt/xxljob; nohup java -jar xxl-job-executor-sample-springboot-2.3.0.jar &gt; xxl-job-executor.log 2&gt;&amp;1 &amp;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stop()&#123;</span><br><span class="line">    echo &quot;stopping xxl-job&quot;</span><br><span class="line">    ssh root@hadoop100 &quot;ps -aux | grep xxl-job-admin | grep -v grep | awk &#x27;&#123;print \$2&#125;&#x27; | xargs kill -9&quot;</span><br><span class="line">    ssh root@hadoop100 &quot;ps -aux | grep xxl-job-executor-sample | grep -v grep | awk &#x27;&#123;print \$2&#125;&#x27; | xargs kill -9&quot;</span><br><span class="line">    ssh root@hadoop101 &quot;ps -aux | grep xxl-job-executor-sample | grep -v grep | awk &#x27;&#123;print \$2&#125;&#x27; | xargs kill -9&quot;</span><br><span class="line">    ssh root@hadoop102 &quot;ps -aux | grep xxl-job-executor-sample | grep -v grep | awk &#x27;&#123;print \$2&#125;&#x27; | xargs kill -9&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">status()&#123;</span><br><span class="line">    echo &quot;=============== hadoop102 =================&quot;</span><br><span class="line">    ssh root@hadoop102 &quot;ps -aux | grep xxl-job-executor-sample | grep -v grep&quot;</span><br><span class="line">    echo &quot;=============== hadoop101 =================&quot;</span><br><span class="line">    ssh root@hadoop101 &quot;ps -aux | grep xxl-job-executor-sample | grep -v grep&quot;</span><br><span class="line">    echo &quot;=============== hadoop100 =================&quot;</span><br><span class="line">    ssh root@hadoop100 &quot;ps -aux | grep xxl-job | grep -v grep&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case $act in</span><br><span class="line">start)</span><br><span class="line">    start</span><br><span class="line">    status</span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">    stop</span><br><span class="line">    status</span><br><span class="line">;;</span><br><span class="line">restart)</span><br><span class="line">    stop</span><br><span class="line">    start</span><br><span class="line">    status</span><br><span class="line">;;</span><br><span class="line">status)</span><br><span class="line">    status</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>加权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /root/bin/xxl</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">同步</span></span><br><span class="line">xsync /opt/xxljob</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">xxl start</span><br><span class="line"></span><br><span class="line">=============== hadoop102 =================</span><br><span class="line">root       2340  0.0  1.2 2679420 22952 ?       Sl   15:40   0:00 java -jar xxl-job-executor-sample-springboot-2.3.0.jar</span><br><span class="line">=============== hadoop101 =================</span><br><span class="line">root       2293  134  2.2 2679420 42324 ?       Sl   15:40   0:01 java -jar xxl-job-executor-sample-springboot-2.3.0.jar</span><br><span class="line">=============== hadoop100 =================</span><br><span class="line">root      20685  146  2.0 2679452 38340 ?       Sl   15:40   0:01 java -jar xxl-job-admin-2.3.0.jar</span><br><span class="line">root      20710  150  2.1 2679424 40340 ?       Sl   15:40   0:01 java -jar xxl-job-executor-sample-springboot-2.3.0.jar</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">状态</span></span><br><span class="line">xxl status</span><br></pre></td></tr></table></figure><p>等到 8080 端口启动成功后, 可以访问:</p><p><a href="http://192.168.200.100:8080/xxl-job-admin">http://192.168.200.100:8080/xxl-job-admin</a></p><p>登录 admin &#x2F; 123456</p><p>执行器: 调度平台会随机使用任一执行器去执行任务</p><h1 id="Hive-表导出到-MySQL-数据库"><a href="#Hive-表导出到-MySQL-数据库" class="headerlink" title="Hive 表导出到 MySQL 数据库"></a>Hive 表导出到 MySQL 数据库</h1><h2 id="test-read-hdfs-json"><a href="#test-read-hdfs-json" class="headerlink" title="test_read_hdfs.json"></a><code>test_read_hdfs.json</code></h2><p>将 HDFS 中的数据同步到 MySQL 数据库</p><ol><li>从 HDFS 路径 <code>/user/hive/warehouse/db_hive.db/sqoop_emp</code> 读取数据</li><li>按制表符分隔解析文本行，提取 8 个字段</li><li>通过 3 个并发通道将数据传输到 MySQL</li><li>将数据插入到 MySQL 的 <code>test.emp</code> 表中</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;setting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;speed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;channel&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hdfsreader&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/user/hive/warehouse/db_hive.db/sqoop_emp&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;defaultFS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hdfs://hadoop100:8020&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fileType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fieldDelimiter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\t&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;writer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysqlwriter&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;writeMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;insert&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="string">&quot;empno&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="string">&quot;ename&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="string">&quot;job&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="string">&quot;mgr&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="string">&quot;hiredate&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="string">&quot;sal&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="string">&quot;comm&quot;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="string">&quot;deptno&quot;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;session&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="string">&quot;set session sql_mode=&#x27;ANSI&#x27;&quot;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;connection&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;jdbcUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jdbc:mysql://hadoop100:3306/test?useSSL=False&amp;useUnicode=true&amp;characterEncoding=utf-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;table&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                    <span class="string">&quot;emp&quot;</span></span><br><span class="line">                                <span class="punctuation">]</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2025/06/24/Hadoop/image-20250707111745049.png" alt="image-20250707111745049"></p><h2 id="exp-log-sh"><a href="#exp-log-sh" class="headerlink" title="exp_log.sh"></a><code>exp_log.sh</code></h2><ol><li><strong>生成配置文件</strong>：根据传入的日期分区参数 <code>$1</code>，动态生成 DataX 配置文件 <code>exp_log.json</code>，配置从 HDFS 读取指定日期分区的数据，并写入 MySQL 表。</li><li><strong>创建目标表</strong>：在 MySQL 中创建 <code>log</code> 表（如果不存在），定义五个 VARCHAR 类型的字段用于存储日志数据。</li><li><strong>执行数据同步</strong>：调用 DataX 工具执行数据导出任务，将 HDFS 上的文本格式数据（<code>/user/hive/warehouse/db_hive.db/log/dt=$part</code>）按字段映射关系写入 MySQL 的 <code>log</code> 表。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">part=<span class="variable">$1</span> </span><br><span class="line"><span class="comment"># 创建一个json，用来给datax调用</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;job&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;setting&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;speed&quot;: &#123;</span></span><br><span class="line"><span class="string">                &quot;channel&quot;: 3</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;content&quot;: [</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &quot;reader&quot;: &#123;</span></span><br><span class="line"><span class="string">                    &quot;name&quot;: &quot;hdfsreader&quot;,</span></span><br><span class="line"><span class="string">                    &quot;parameter&quot;: &#123;</span></span><br><span class="line"><span class="string">                        &quot;path&quot;: &quot;/user/hive/warehouse/db_hive.db/log/dt=&#x27;</span><span class="variable">$part</span><span class="string">&#x27;&quot;,</span></span><br><span class="line"><span class="string">                        &quot;defaultFS&quot;: &quot;hdfs://hadoop100:8020&quot;,</span></span><br><span class="line"><span class="string">                        &quot;column&quot;: [</span></span><br><span class="line"><span class="string">                            &#123;</span></span><br><span class="line"><span class="string">                                &quot;index&quot;: 0,</span></span><br><span class="line"><span class="string">                                &quot;type&quot;: &quot;string&quot;</span></span><br><span class="line"><span class="string">                            &#125;,</span></span><br><span class="line"><span class="string">                            &#123;</span></span><br><span class="line"><span class="string">                                &quot;index&quot;: 1,</span></span><br><span class="line"><span class="string">                                &quot;type&quot;: &quot;string&quot;</span></span><br><span class="line"><span class="string">                            &#125;,</span></span><br><span class="line"><span class="string">                            &#123;</span></span><br><span class="line"><span class="string">                                &quot;index&quot;: 2,</span></span><br><span class="line"><span class="string">                                &quot;type&quot;: &quot;string&quot;</span></span><br><span class="line"><span class="string">                            &#125;,</span></span><br><span class="line"><span class="string">                            &#123;</span></span><br><span class="line"><span class="string">                                &quot;index&quot;: 3,</span></span><br><span class="line"><span class="string">                                &quot;type&quot;: &quot;string&quot;</span></span><br><span class="line"><span class="string">                            &#125;,</span></span><br><span class="line"><span class="string">                            &#123;</span></span><br><span class="line"><span class="string">                                &quot;index&quot;: 4,</span></span><br><span class="line"><span class="string">                                &quot;type&quot;: &quot;string&quot;</span></span><br><span class="line"><span class="string">                            &#125;</span></span><br><span class="line"><span class="string">                        ],</span></span><br><span class="line"><span class="string">                        &quot;fileType&quot;: &quot;text&quot;,</span></span><br><span class="line"><span class="string">                        &quot;encoding&quot;: &quot;UTF-8&quot;,</span></span><br><span class="line"><span class="string">                        &quot;fieldDelimiter&quot;: &quot;\t&quot;</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;,</span></span><br><span class="line"><span class="string">                &quot;writer&quot;: &#123;</span></span><br><span class="line"><span class="string">                    &quot;name&quot;: &quot;mysqlwriter&quot;,</span></span><br><span class="line"><span class="string">                    &quot;parameter&quot;: &#123;</span></span><br><span class="line"><span class="string">                        &quot;writeMode&quot;: &quot;insert&quot;,</span></span><br><span class="line"><span class="string">                        &quot;username&quot;: &quot;test&quot;,</span></span><br><span class="line"><span class="string">                        &quot;password&quot;: &quot;test&quot;,</span></span><br><span class="line"><span class="string">                        &quot;column&quot;: [</span></span><br><span class="line"><span class="string">                            &quot;ip&quot;,</span></span><br><span class="line"><span class="string">                            &quot;date_l&quot;,</span></span><br><span class="line"><span class="string">                            &quot;url&quot;,</span></span><br><span class="line"><span class="string">                            &quot;osinfo&quot;,</span></span><br><span class="line"><span class="string">                            &quot;bowser&quot;</span></span><br><span class="line"><span class="string">                        ],</span></span><br><span class="line"><span class="string">                        &quot;session&quot;: [</span></span><br><span class="line"><span class="string">                            &quot;set session sql_mode=&#x27;</span><span class="string">&quot;&#x27;ANSI&#x27;&quot;</span><span class="string">&#x27;&quot;</span></span><br><span class="line"><span class="string">                        ],</span></span><br><span class="line"><span class="string">                        &quot;connection&quot;: [</span></span><br><span class="line"><span class="string">                            &#123;</span></span><br><span class="line"><span class="string">                                &quot;jdbcUrl&quot;: &quot;jdbc:mysql://hadoop100:3306/test?useSSL=False&amp;useUnicode=true&amp;characterEncoding=utf-8&quot;,</span></span><br><span class="line"><span class="string">                                &quot;table&quot;: [</span></span><br><span class="line"><span class="string">                                    &quot;log&quot;</span></span><br><span class="line"><span class="string">                                ]</span></span><br><span class="line"><span class="string">                            &#125;</span></span><br><span class="line"><span class="string">                        ]</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> &gt; /root/datax/json/exp_log.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写一个建表语句，再mysql建表</span></span><br><span class="line">mysql -utest -ptest --database=<span class="built_in">test</span> -e \</span><br><span class="line"><span class="string">&#x27;create table if not exists log (</span></span><br><span class="line"><span class="string">    ip varchar(500),</span></span><br><span class="line"><span class="string">    date_l varchar(500),</span></span><br><span class="line"><span class="string">    url varchar(500),</span></span><br><span class="line"><span class="string">    osinfo varchar(500),</span></span><br><span class="line"><span class="string">    bowser varchar(500)</span></span><br><span class="line"><span class="string">)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动datax程序，完成操作</span></span><br><span class="line">/usr/local/bin/python3.9 /opt/module/datax/bin/datax.py /root/datax/json/exp_log.json</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2025/06/24/Hadoop/image-20250707111856490.png" alt="image-20250707111856490"></p><h2 id="xxl-job-任务调度中心-新增任务管理"><a href="#xxl-job-任务调度中心-新增任务管理" class="headerlink" title="xxl-job-任务调度中心-新增任务管理"></a>xxl-job-任务调度中心-新增任务管理</h2><p><img src="/2025/06/24/Hadoop/image-20250707111920017.png" alt="image-20250707111920017"></p><p><strong>GLUE IDE</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;xxl-job: hello shell&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;脚本位置：<span class="variable">$0</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;任务参数：<span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;分片序号 = <span class="variable">$2</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;分片总数 = <span class="variable">$3</span>&quot;</span></span><br><span class="line">/root/datax/shell/exp_log.sh <span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Good bye!&quot;</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>分别手动执行一次\</p><p><img src="/2025/06/24/Hadoop/image-20250707112014506.png" alt="image-20250707112014506"></p><p>mysql.test中查询log数据量</p><p><img src="/2025/06/24/Hadoop/image-20250707112033577.png" alt="image-20250707112033577"></p><h1 id="动态分区表导入导出"><a href="#动态分区表导入导出" class="headerlink" title="动态分区表导入导出"></a>动态分区表导入导出</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;job&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;setting&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;speed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;channel&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;errorLimit&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;record&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;percentage&quot;</span><span class="punctuation">:</span> <span class="number">0.02</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysqlreader&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="string">&quot;*&quot;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;splitPk&quot;</span><span class="punctuation">:</span> <span class="string">&quot;db_id&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;connection&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;querySql&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                    <span class="string">&quot;select * from log where osinfo = &#x27;Windows&#x27;;&quot;</span></span><br><span class="line">                                <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;jdbcUrl&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                                    <span class="string">&quot;jjdbc:mysql://hadoop100:3306/test?useSSL=False&amp;useUnicode=true&amp;characterEncoding=utf-8&quot;</span></span><br><span class="line">                                <span class="punctuation">]</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;writer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hdfswriter&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;parameter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;defaultFS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hdfs://hadoop100:8020&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fileType&quot;</span><span class="punctuation">:</span> <span class="string">&quot;orc&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/user/hive/warehouse/db_hive.db/log_tmp&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fileName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;log_p&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;column&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ip&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date_l&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;url&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;osinfo&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="punctuation">&#123;</span></span><br><span class="line">                                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;browser&quot;</span><span class="punctuation">,</span></span><br><span class="line">                                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">                            <span class="punctuation">&#125;</span></span><br><span class="line">                        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;writeMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;truncate&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;fieldDelimiter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\t&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;compress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NONE&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在db_hive中建log_temp表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> log_tmp(</span><br><span class="line">ip string,</span><br><span class="line">date_l string,</span><br><span class="line">url string,</span><br><span class="line">osinfo string,</span><br><span class="line">browser string</span><br><span class="line">)</span><br><span class="line"><span class="type">row</span> format delimited</span><br><span class="line">fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span></span><br><span class="line">lines terminated <span class="keyword">by</span> <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">stored <span class="keyword">as</span> orc</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行脚本<br><code>/usr/local/bin/python3.9 /opt/module/datax/bin/datax.py /root/datax/json/imp_log.json</code></p><p><img src="/2025/06/24/Hadoop/image-20250707112144219.png" alt="image-20250707112144219"></p><h2 id="imp-log-sh"><a href="#imp-log-sh" class="headerlink" title="imp_log.sh"></a><code>imp_log.sh</code></h2><ol><li><strong>JSON 配置文件生成</strong>：创建 DataX 任务配置文件 <code>imp_log.json</code>，配置从 MySQL 读取数据并写入 HDFS 的 ORC 文件格式。</li><li>Hive 表创建：使用 Beeline 连接 Hive，创建两个 ORC 格式的表：<ul><li><code>log_tmp</code>：临时表，用于存储从 MySQL 导入的原始数据</li><li><code>log_p</code>：分区表，按操作系统类型 (<code>os_tp</code>) 分区</li></ul></li><li><strong>数据抽取与导入</strong>：调用 DataX 工具执行数据同步任务，将 MySQL 的 <code>log</code> 表数据导入到 Hive 的 <code>log_tmp</code> 表。</li><li><strong>动态分区插入</strong>：配置 Hive 动态分区参数，将 <code>log_tmp</code> 表的数据按 <code>osinfo</code> 字段的值自动分配到 <code>log_tmp2</code> 表的不同分区中。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#创建json文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    &quot;job&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;setting&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;speed&quot;: &#123;</span></span><br><span class="line"><span class="string">                &quot;channel&quot;: 3</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            &quot;errorLimit&quot;: &#123;</span></span><br><span class="line"><span class="string">                &quot;record&quot;: 0,</span></span><br><span class="line"><span class="string">                &quot;percentage&quot;: 0.02</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;content&quot;: [</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">                &quot;reader&quot;: &#123;</span></span><br><span class="line"><span class="string">                    &quot;name&quot;: &quot;mysqlreader&quot;,</span></span><br><span class="line"><span class="string">                    &quot;parameter&quot;: &#123;</span></span><br><span class="line"><span class="string">                        &quot;username&quot;: &quot;test&quot;,</span></span><br><span class="line"><span class="string">                        &quot;password&quot;: &quot;test&quot;,</span></span><br><span class="line"><span class="string">                        &quot;column&quot;: [</span></span><br><span class="line"><span class="string">                            &quot;*&quot;</span></span><br><span class="line"><span class="string">                        ],</span></span><br><span class="line"><span class="string">                        //&quot;splitPk&quot;: &quot;db_id&quot;,</span></span><br><span class="line"><span class="string">                        &quot;connection&quot;: [</span></span><br><span class="line"><span class="string">                            &#123;</span></span><br><span class="line"><span class="string">                                &quot;table&quot;: [</span></span><br><span class="line"><span class="string">                                    &quot;log;&quot;</span></span><br><span class="line"><span class="string">                                ],</span></span><br><span class="line"><span class="string">                                &quot;jdbcUrl&quot;: [</span></span><br><span class="line"><span class="string">                                    &quot;jdbc:mysql://hadoop100:3306/test?useSSL=False&amp;useUnicode=true&amp;characterEncoding=utf-8&quot;</span></span><br><span class="line"><span class="string">                                ]</span></span><br><span class="line"><span class="string">                            &#125;</span></span><br><span class="line"><span class="string">                        ]</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;,</span></span><br><span class="line"><span class="string">                &quot;writer&quot;: &#123;</span></span><br><span class="line"><span class="string">                    &quot;name&quot;: &quot;hdfswriter&quot;,</span></span><br><span class="line"><span class="string">                    &quot;parameter&quot;: &#123;</span></span><br><span class="line"><span class="string">                        &quot;defaultFS&quot;: &quot;hdfs://hadoop100:8020&quot;,</span></span><br><span class="line"><span class="string">                        &quot;fileType&quot;: &quot;orc&quot;,</span></span><br><span class="line"><span class="string">                        &quot;path&quot;: &quot;/user/hive/warehouse/db_hive.db/log_tmp&quot;,</span></span><br><span class="line"><span class="string">                        &quot;fileName&quot;: &quot;log_tmp&quot;,</span></span><br><span class="line"><span class="string">                        &quot;column&quot;: [</span></span><br><span class="line"><span class="string">                            &#123;</span></span><br><span class="line"><span class="string">                                &quot;name&quot;: &quot;ip&quot;,</span></span><br><span class="line"><span class="string">                                &quot;type&quot;: &quot;string&quot;</span></span><br><span class="line"><span class="string">                            &#125;,</span></span><br><span class="line"><span class="string">                            &#123;</span></span><br><span class="line"><span class="string">                                &quot;name&quot;: &quot;date_l&quot;,</span></span><br><span class="line"><span class="string">                                &quot;type&quot;: &quot;string&quot;</span></span><br><span class="line"><span class="string">                            &#125;,</span></span><br><span class="line"><span class="string">                            &#123;</span></span><br><span class="line"><span class="string">                                &quot;name&quot;: &quot;url&quot;,</span></span><br><span class="line"><span class="string">                                &quot;type&quot;: &quot;string&quot;</span></span><br><span class="line"><span class="string">                            &#125;,</span></span><br><span class="line"><span class="string">                            &#123;</span></span><br><span class="line"><span class="string">                                &quot;name&quot;: &quot;osinfo&quot;,</span></span><br><span class="line"><span class="string">                                &quot;type&quot;: &quot;string&quot;</span></span><br><span class="line"><span class="string">                            &#125;,</span></span><br><span class="line"><span class="string">                            &#123;</span></span><br><span class="line"><span class="string">                                &quot;name&quot;: &quot;browser&quot;,</span></span><br><span class="line"><span class="string">                                &quot;type&quot;: &quot;string&quot;</span></span><br><span class="line"><span class="string">                            &#125;</span></span><br><span class="line"><span class="string">                        ],</span></span><br><span class="line"><span class="string">                        &quot;writeMode&quot;: &quot;truncate&quot;,</span></span><br><span class="line"><span class="string">                        &quot;fieldDelimiter&quot;: &quot;\t&quot;,</span></span><br><span class="line"><span class="string">                        &quot;compress&quot;: &quot;NONE&quot;</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> &gt; /root/datax/json/imp_log.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建临时表和分区表</span></span><br><span class="line">beeline -u jdbc:hive2://hadoop100:10000/db_hive -u root -p 545456 -e \</span><br><span class="line"><span class="string">&quot;CREATE TABLE if not exists log_tmp(</span></span><br><span class="line"><span class="string">ip string,</span></span><br><span class="line"><span class="string">date_l string,</span></span><br><span class="line"><span class="string">url string,</span></span><br><span class="line"><span class="string">osinfo string,</span></span><br><span class="line"><span class="string">browser string</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">row format delimited</span></span><br><span class="line"><span class="string">fields terminated by &#x27;\t&#x27;</span></span><br><span class="line"><span class="string">lines TERMINATED by &#x27;\n&#x27;</span></span><br><span class="line"><span class="string">STORED AS orc;</span></span><br><span class="line"><span class="string">CREATE TABLE if not exists log_p(</span></span><br><span class="line"><span class="string">ip string,</span></span><br><span class="line"><span class="string">date_l string,</span></span><br><span class="line"><span class="string">url string, </span></span><br><span class="line"><span class="string">osinfo string,</span></span><br><span class="line"><span class="string">browser string</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">partitioned by (os_tp string)</span></span><br><span class="line"><span class="string">row format delimited</span></span><br><span class="line"><span class="string">fields terminated by &#x27;\t&#x27;</span></span><br><span class="line"><span class="string">lines TERMINATED by &#x27;\n&#x27;</span></span><br><span class="line"><span class="string">STORED AS orc &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;*******************建表完成--***********************&#x27;</span></span><br><span class="line"><span class="comment">#导入数据</span></span><br><span class="line">/bin/python3 /opt/module/datax/bin/datax.py /root/datax/json/imp_log.json</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;*****************数据导入成功************************&#x27;</span></span><br><span class="line"><span class="comment">#动态分区</span></span><br><span class="line">beeline -u jdbc:hive2://hadoop100:10000/db_hive -u root -p 545456 -e \</span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"><span class="string">set hive.exec.dynamic.partition=true;</span></span><br><span class="line"><span class="string">set hive.exec.dynamic.partition.mode=nonstrict;</span></span><br><span class="line"><span class="string">set hive.exec.max.dynamic.partitions=200;</span></span><br><span class="line"><span class="string">set hive.exec.max.dynamic.partitions.pernode=50;</span></span><br><span class="line"><span class="string">set hive.exec.max.created.files=1000;</span></span><br><span class="line"><span class="string">set hive.error.on.empty.partition=false;</span></span><br><span class="line"><span class="string">set hive.support.quoted.identifiers=none;</span></span><br><span class="line"><span class="string">insert into log_p partition (os_tp) select l.*,osinfo from log_tmp l;</span></span><br><span class="line"><span class="string">&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;------------------完成------------------&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2025/06/24/Hadoop/image-20250707112233843.png" alt="image-20250707112233843"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2025/05/28/Python/"/>
      <url>/2025/05/28/Python/</url>
      
        <content type="html"><![CDATA[<h1 id="国内常用镜像源"><a href="#国内常用镜像源" class="headerlink" title="国内常用镜像源"></a>国内常用镜像源</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">清华大学 ：https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="line"></span><br><span class="line">阿里云：http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">中国科学技术大学 ：http://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line"></span><br><span class="line">华中科技大学：http://pypi.hustunique.com/</span><br><span class="line"></span><br><span class="line">豆瓣源：http://pypi.douban.com/simple/</span><br><span class="line"></span><br><span class="line">腾讯源：http://mirrors.cloud.tencent.com/pypi/simple</span><br><span class="line"></span><br><span class="line">华为镜像源：https://repo.huaweicloud.com/repository/pypi/simple/</span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul><li><p><strong>数字型： bool int float</strong> </p></li><li><p><strong>⾮数字型： str list tuple set dict</strong> </p></li><li><p><strong>⽇期型： time datetime</strong></p></li></ul><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sno=<span class="number">1</span></span><br><span class="line">age=<span class="number">18</span></span><br><span class="line">sname=<span class="string">&quot;小明&quot;</span></span><br><span class="line">high=<span class="number">1.786</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;sname&#125;</span>学号为<span class="subst">&#123;sno&#125;</span>,年龄为<span class="subst">&#123;age&#125;</span>岁,身高为<span class="subst">&#123;high&#125;</span>米&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;sname&#125;</span>学号为<span class="subst">&#123;sno:05d&#125;</span>，年龄为<span class="subst">&#123;age&#125;</span>岁，身高为<span class="subst">&#123;high:<span class="number">.2</span>f&#125;</span>米&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">f&#x27;<span class="subst">&#123;value&#125;</span>&#x27;</span>格式化输出</span><br></pre></td></tr></table></figure><h1 id="输⼊"><a href="#输⼊" class="headerlink" title="输⼊"></a>输⼊</h1><p>使⽤ input 函数来接收⽤⼾从键盘输⼊ ,input 输⼊的内容是字符串型 </p><p>passwd&#x3D;input(“ 请输⼊密码： “) print(type(passwd)) 我们使⽤ int() 、 float() 、 str()  等转换。 </p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><ul><li>算数： + - * &#x2F; %( 取余 ) **( 幂 ) &#x2F;&#x2F;( 取商 ) </li><li>⽐较： &#x3D;&#x3D; !&#x3D; &gt; &gt;&#x3D; &lt; &lt;&#x3D; </li><li>赋值： &#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; **&#x3D; &#x2F;&#x2F;&#x3D; </li><li>逻辑： and or not</li></ul><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="选择结构-if"><a href="#选择结构-if" class="headerlink" title="选择结构 if"></a>选择结构 if</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sex=<span class="string">&quot;女&quot;</span></span><br><span class="line"> <span class="keyword">if</span> sex==<span class="string">&quot;男&quot;</span>:</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;打游戏&quot;</span>)</span><br><span class="line"> <span class="keyword">elif</span> sex==<span class="string">&quot;女&quot;</span>:</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;去逛街&quot;</span>)</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;其他&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="循环结构-while-和-for"><a href="#循环结构-while-和-for" class="headerlink" title="循环结构 while 和 for"></a>循环结构 while 和 for</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 循环输出1-10数字</span></span><br><span class="line">i= 1</span><br><span class="line"> <span class="keyword">while</span>  i&lt;=10:</span><br><span class="line"> <span class="built_in">print</span>(i)</span><br><span class="line"> i+=1</span><br><span class="line"> <span class="comment"># 字符串可以直接循环输出里面的字符</span></span><br><span class="line">names=<span class="string">&quot;hello world*你好&quot;</span></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> names:</span><br><span class="line"> <span class="built_in">print</span>(i)</span><br><span class="line"> <span class="comment"># 数值范围</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(10): </span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h1 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串 (String)"></a>字符串 (String)</h1><ul><li>拼接 * 复制 “”” 保留格式 </li><li>字符串的索引截取，变量名 [ 头下标 : 尾下标 ] </li><li>索引值以 0  为开始值，-1  为从末尾的开始位置。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#索引切片</span></span><br><span class="line">s=<span class="string">&quot;abcsdfsdf&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>:<span class="number">4</span>]) <span class="comment">#做切片的时候，是左闭右开的，也就是不包括右边数字对应的下标索引</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">2</span>:]) </span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>:<span class="number">6</span>:<span class="number">2</span>]) <span class="comment">#步长为2</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>字符串函数</th><th>含义</th></tr></thead><tbody><tr><td><strong>len(str)</strong></td><td>获取字符串长度</td></tr><tr><td><strong>str.find(‘str’,int1,int2)</strong></td><td>字符查找 ,找到返回索引，没找到返回-1.。<strong>int1，int2分别代表开始索引和结束索引</strong></td></tr><tr><td><strong>str.rfind()</strong></td><td>代表从右侧开始查找</td></tr><tr><td><strong>str.isdigit()</strong></td><td>所有字符都是数字</td></tr><tr><td><strong>str.count()</strong></td><td>统计字符串里某个字符或子字符串出现的次数</td></tr></tbody></table><h1 id="Python-中的字符-ASCII-码运算"><a href="#Python-中的字符-ASCII-码运算" class="headerlink" title="Python 中的字符 ASCII 码运算"></a>Python 中的字符 ASCII 码运算</h1><h2 id="ASCII码表"><a href="#ASCII码表" class="headerlink" title="ASCII码表"></a>ASCII码表</h2><p><img src="/2025/05/28/Python/image-20250601011246268.png" alt="image-20250601011246268"></p><p>在 Python 中，字符的 ASCII 码运算可以通过 <code>ord()</code> 和 <code>chr()</code> 函数实现，允许你对字符进行数值操作。以下是详细解释和示例：</p><h2 id="核心函数"><a href="#核心函数" class="headerlink" title="核心函数"></a>核心函数</h2><ol><li><p><strong><code>ord(char)</code></strong> - 获取字符的 ASCII 码值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))  <span class="comment"># 输出: 65 (大写字母 A)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))  <span class="comment"># 输出: 97 (小写字母 a)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>))  <span class="comment"># 输出: 48 (数字 0)</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>chr(code)</code></strong> - 将 ASCII 码转换为字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">65</span>))  <span class="comment"># 输出: &#x27;A&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">97</span>))  <span class="comment"># 输出: &#x27;a&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">48</span>))  <span class="comment"># 输出: &#x27;0&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="ASCII-码运算示例"><a href="#ASCII-码运算示例" class="headerlink" title="ASCII 码运算示例"></a>ASCII 码运算示例</h2><h3 id="1-字符大小写转换"><a href="#1-字符大小写转换" class="headerlink" title="1. 字符大小写转换"></a>1. 字符大小写转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 大写转小写</span></span><br><span class="line">char = <span class="string">&#x27;B&#x27;</span></span><br><span class="line">lower_char = <span class="built_in">chr</span>(<span class="built_in">ord</span>(char) + <span class="number">32</span>)</span><br><span class="line"><span class="built_in">print</span>(lower_char)  <span class="comment"># 输出: &#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 小写转大写</span></span><br><span class="line">char = <span class="string">&#x27;z&#x27;</span></span><br><span class="line">upper_char = <span class="built_in">chr</span>(<span class="built_in">ord</span>(char) - <span class="number">32</span>)</span><br><span class="line"><span class="built_in">print</span>(upper_char)  <span class="comment"># 输出: &#x27;Z&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2-字符移位（凯撒密码）"><a href="#2-字符移位（凯撒密码）" class="headerlink" title="2. 字符移位（凯撒密码）"></a>2. 字符移位（凯撒密码）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">caesar_cipher</span>(<span class="params">text, shift</span>):</span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">        <span class="keyword">if</span> char.isalpha():</span><br><span class="line">            base = <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) <span class="keyword">if</span> char.isupper() <span class="keyword">else</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            shifted = (<span class="built_in">ord</span>(char) - base + shift) % <span class="number">26</span> + base</span><br><span class="line">            result += <span class="built_in">chr</span>(shifted)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result += char</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">encrypted = caesar_cipher(<span class="string">&quot;Hello, World!&quot;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(encrypted)  <span class="comment"># 输出: &quot;Khoor, Zruog!&quot;</span></span><br><span class="line"></span><br><span class="line">decrypted = caesar_cipher(encrypted, -<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(decrypted)  <span class="comment"># 输出: &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3-字符比较"><a href="#3-字符比较" class="headerlink" title="3. 字符比较"></a>3. 字符比较</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">char1 = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">char2 = <span class="string">&#x27;z&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较 ASCII 码值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(char1) &lt; <span class="built_in">ord</span>(char2))  <span class="comment"># 输出: True (97 &lt; 122)</span></span><br></pre></td></tr></table></figure><h3 id="4-计算字符位置"><a href="#4-计算字符位置" class="headerlink" title="4. 计算字符位置"></a>4. 计算字符位置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">letter = <span class="string">&#x27;G&#x27;</span></span><br><span class="line">position = <span class="built_in">ord</span>(letter) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;&#x27;<span class="subst">&#123;letter&#125;</span>&#x27; 是字母表中的第 <span class="subst">&#123;position&#125;</span> 个字母&quot;</span>)</span><br><span class="line"><span class="comment"># 输出: &#x27;G&#x27; 是字母表中的第 7 个字母</span></span><br></pre></td></tr></table></figure><h3 id="5-生成字母序列"><a href="#5-生成字母序列" class="headerlink" title="5. 生成字母序列"></a>5. 生成字母序列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成 A 到 Z</span></span><br><span class="line">uppercase = [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>)+<span class="number">1</span>)]</span><br><span class="line"><span class="built_in">print</span>(uppercase)  <span class="comment"># [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, ..., &#x27;Z&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成 a 到 z</span></span><br><span class="line">lowercase = [<span class="built_in">chr</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>)+<span class="number">1</span>)]</span><br><span class="line"><span class="built_in">print</span>(lowercase)  <span class="comment"># [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, ..., &#x27;z&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="ASCII-码表摘要"><a href="#ASCII-码表摘要" class="headerlink" title="ASCII 码表摘要"></a>ASCII 码表摘要</h2><table><thead><tr><th align="left">字符范围</th><th align="left">ASCII 范围</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">数字 0-9</td><td align="left">48-57</td><td align="left"><code>ord(&#39;0&#39;) = 48</code></td></tr><tr><td align="left">大写字母 A-Z</td><td align="left">65-90</td><td align="left"><code>ord(&#39;A&#39;) = 65</code></td></tr><tr><td align="left">小写字母 a-z</td><td align="left">97-122</td><td align="left"><code>ord(&#39;a&#39;) = 97</code></td></tr><tr><td align="left">特殊符号</td><td align="left">32-47, 58-64, 91-96, 123-126</td><td align="left"><code>ord(&#39;@&#39;) = 64</code></td></tr></tbody></table><h2 id="重要注意事项"><a href="#重要注意事项" class="headerlink" title="重要注意事项"></a>重要注意事项</h2><ol><li><p><strong>Unicode 支持</strong>：</p><ul><li>Python 3 使用 Unicode，<code>ord()</code> 返回 Unicode 码点</li><li>ASCII 字符的 Unicode 码点与 ASCII 值相同</li></ul></li><li><p><strong>超出 ASCII 范围</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理非 ASCII 字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;中&#x27;</span>))  <span class="comment"># 输出: 20013 (中文字符的 Unicode)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">20013</span>))  <span class="comment"># 输出: &#x27;中&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>边界检查</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确保在有效范围内操作</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>) + <span class="number">1</span>))  <span class="comment"># 超出小写字母范围</span></span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="实际应用场景"><a href="#实际应用场景" class="headerlink" title="实际应用场景"></a>实际应用场景</h2><ol><li><strong>数据加密&#x2F;解密</strong>：实现简单的替换密码</li><li><strong>文本处理</strong>：大小写转换、字符分类</li><li><strong>算法实现</strong>：排序、搜索、字符串比较</li><li><strong>编码转换</strong>：在不同字符编码间转换</li><li><strong>输入验证</strong>：检查字符类型和范围</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实用函数：检查字符是否为数字</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_digit</span>(<span class="params">char</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ord</span>(<span class="string">&#x27;0&#x27;</span>) &lt;= <span class="built_in">ord</span>(char) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(is_digit(<span class="string">&#x27;5&#x27;</span>))  <span class="comment"># 输出: True</span></span><br><span class="line"><span class="built_in">print</span>(is_digit(<span class="string">&#x27;a&#x27;</span>))  <span class="comment"># 输出: False</span></span><br></pre></td></tr></table></figure><h1 id="list-（列表）"><a href="#list-（列表）" class="headerlink" title="list （列表）"></a>list （列表）</h1><p> List （列表）  是 Python  中使⽤最频繁的数据类型。</p><p>专⻔⽤于存储⼀串数据，存储的数据称为元素 </p><p><strong>列表⽤ [] 定义，元素之间⽤逗号分隔</strong> </p><p>列表可以完成⼤多数集合类的数据结构实现。列表中元素的类型可以不相同，它⽀持数 字，字符串甚⾄可以包含列表（所谓嵌套）。 列表和字符串⼀样，<strong>索引从 0 开始，列表同样可以被索引和截取，列表被截取后返回⼀个 包含所需元素的新列表。</strong> </p><ul><li><strong>List 可以使⽤ + 操作符进⾏拼接。</strong></li><li><strong>⽤星号 * 是重复操作</strong> </li><li><strong>创建空列表： []</strong></li></ul><h2 id="列表的常⽤操作"><a href="#列表的常⽤操作" class="headerlink" title="列表的常⽤操作"></a>列表的常⽤操作</h2><table><thead><tr><th>分类</th><th>关键字&#x2F;函数&#x2F;方法</th><th>说明</th></tr></thead><tbody><tr><td>增加</td><td>列表.append(值)</td><td>向列表末尾追加单个元素</td></tr><tr><td></td><td>列表.extend(值1,值2···，值n)</td><td>向列表后面追加多个元素</td></tr><tr><td></td><td>列表.insert(index,值)</td><td>将某个元素插放到指定位置</td></tr><tr><td></td><td>列表.pop(index)</td><td>删除索引对应的元素，如果不加索引，默认删除最后元素，同时返回删除元素的引用关系</td></tr><tr><td></td><td>del 列表[1:2]</td><td>按照切片指定索引删除列表元素</td></tr><tr><td></td><td>列表.clear()</td><td>按照切片指定索引删除列表元素</td></tr><tr><td>修改</td><td>列表[索引]&#x3D;值</td><td>修改指定索引的数据，数据不存在会报错</td></tr><tr><td>查询</td><td>列表[索引]</td><td>根据索引取值，索引不存在会报错</td></tr><tr><td></td><td><strong>列表.index(值)</strong></td><td>根据值取索引，值不存在会报错</td></tr><tr><td></td><td>列表.count(值）</td><td>返回列表中包含某个值的个数</td></tr><tr><td></td><td>列表.sort()</td><td>将列表中的元素进行排序，reverse&#x3D;True代表降序</td></tr><tr><td></td><td>列表.reverse()</td><td>列表的反转，用来改变原列表的先后顺序</td></tr><tr><td></td><td>len(列表)</td><td>列表长度（元素个数）</td></tr><tr><td></td><td>max(列表）</td><td>返回列表元素最大值</td></tr><tr><td></td><td>min(列表)</td><td>返回列表元素最小值</td></tr><tr><td></td><td>sum(列表)</td><td>返回列表元素的总和</td></tr></tbody></table><h1 id="字符串与列表转换"><a href="#字符串与列表转换" class="headerlink" title="字符串与列表转换"></a>字符串与列表转换</h1><ul><li><p><strong>split  分割字符串为列表</strong> </p></li><li><p><strong>join  拼接列表为字符串</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">txt = <span class="string">&quot;Google#Run,oob#Taobao#Facebook&quot;</span></span><br><span class="line">stxt=txt.split(<span class="string">&quot;#&quot;</span>) <span class="comment">#列表类型</span></span><br><span class="line"><span class="built_in">print</span>(stxt[2]) <span class="comment">#同字符串一样切片</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> stxt:</span><br><span class="line"><span class="built_in">print</span>(i) <span class="comment">#单词打印而不是字符打印</span></span><br><span class="line">n=<span class="string">&quot;.&quot;</span>.<span class="built_in">join</span>(stxt) <span class="comment">#字符串类型</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure><h1 id="tuple-（元组）只读的列表。"><a href="#tuple-（元组）只读的列表。" class="headerlink" title="tuple （元组）只读的列表。"></a>tuple （元组）只读的列表。</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">34</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(tuple1))</span><br><span class="line"><span class="built_in">print</span>(tuple1[<span class="number">3</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tuple1:</span><br><span class="line"> <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h1 id="set-（集合）-⽆序，去掉重复数据。"><a href="#set-（集合）-⽆序，去掉重复数据。" class="headerlink" title="set （集合）  ⽆序，去掉重复数据。"></a>set （集合）  ⽆序，去掉重复数据。</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(set1))</span><br><span class="line"><span class="built_in">print</span>(set1)</span><br><span class="line">set2.add(<span class="number">66666</span>)</span><br><span class="line">set2.remove(<span class="number">55</span>)</span><br></pre></td></tr></table></figure><p>不能使用下标访问set，所以修改操作一般为<strong>remove操作 + add操作</strong></p><p><strong>问题：如何定义一个空集合？</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set1=<span class="built_in">set</span>()</span><br><span class="line"><span class="comment"># 正确的类型声明是类型关键字()</span></span><br></pre></td></tr></table></figure><p>正确的类型声明是<strong>类型关键字()</strong></p><h1 id="dict-（字典）"><a href="#dict-（字典）" class="headerlink" title="dict （字典）"></a>dict （字典）</h1><p> 字典（ dict ）是 Python 中另⼀个⾮常有⽤的内置数据类型。</p><ol><li><p><strong>字典是键 (key) :  值 (value) 的 集合。</strong> </p></li><li><p>在同⼀个字典中，<strong>键 (key) 必须是唯⼀的</strong>。重复的后面的会覆盖前面的</p></li><li><p>创建空字典使⽤ { } 。</p></li></ol><table><thead><tr><th>分类</th><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>增加</td><td><strong>dict[key]&#x3D;value</strong></td><td>键不存在，会添加键值对</td></tr><tr><td>修改</td><td><strong>dict[key]&#x3D;value</strong></td><td>键存在，会修改键值对</td></tr><tr><td>删除</td><td><strong>pop&#x2F;del&#x2F;clear</strong></td><td>没有索引</td></tr><tr><td>查询</td><td><strong>dict .keys()</strong></td><td>获取所有键，是一个视图</td></tr><tr><td></td><td><strong>dict.values()</strong></td><td>获取所有值，是一个视图</td></tr><tr><td></td><td><strong>dict.items()</strong></td><td>获取键值对</td></tr></tbody></table><p><strong>在Python中，<code>for i in dict:</code> 循环迭代的是字典的键</strong>‌。在Python中，字典是一种键值对集合，每个键对应一个值。当你使用 <code>for i in dict:</code> 语法时，循环会遍历字典中的所有键，并将每个键依次赋值给变量 <code>i</code>‌12。</p><p>此外，Python还提供了其他几种遍历字典的方法：</p><ol><li>‌<strong>遍历键</strong>‌：使用 <code>.keys()</code> 方法，例如 <code>for key in dict.keys():</code>。</li><li>‌<strong>遍历值</strong>‌：使用 <code>.values()</code> 方法，例如 <code>for value in dict.values():</code>。</li><li>‌<strong>遍历键值对</strong>‌：使用 <code>.items()</code> 方法，例如 <code>for key, value in dict.items():</code>‌12。</li></ol><h1 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h1><p>推导式格式为：<strong>表达式 for  变量 in  输⼊源 if  条件</strong> </p><p>推导式格式为：<strong>表达式 for  变量 in  输⼊源 if  条件 for  变量 in  输⼊源 if  条件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给定一个列表,将每一位数字变成它的平方 alist = [1, 2, 3, 4, 5, 6, 7]</span></span><br><span class="line"><span class="comment"># 输出结果：[1, 4, 9, 16, 25, 36, 49]</span></span><br><span class="line">alist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="built_in">print</span>([i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> alist])</span><br><span class="line"><span class="built_in">print</span>([i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> alist <span class="keyword">if</span> i+<span class="number">2</span>&gt;<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(&#123;i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> alist&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>((i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> alist)))</span><br><span class="line"><span class="built_in">print</span>(&#123;i**<span class="number">2</span>:<span class="string">f&quot;test<span class="subst">&#123;i&#125;</span>&quot;</span> <span class="keyword">for</span> i <span class="keyword">in</span> alist&#125;)</span><br><span class="line"><span class="comment">#推导 30 以内可以被 3 整除的整数为列表：</span></span><br><span class="line"><span class="built_in">print</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>) <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span>])</span><br></pre></td></tr></table></figure><p><strong>数据源使⽤字典</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">d1=&#123;<span class="string">&quot;张三&quot;</span>:<span class="number">20</span>,<span class="string">&quot;李四&quot;</span>:<span class="number">30</span>,<span class="string">&quot;王五&quot;</span>:<span class="number">40</span>&#125;</span><br><span class="line"> <span class="comment"># 推导列表</span></span><br><span class="line"><span class="built_in">print</span>([i <span class="keyword">for</span> i <span class="keyword">in</span> d1.values()])</span><br><span class="line"> <span class="comment"># 推导字典</span></span><br><span class="line"><span class="built_in">print</span>(&#123;i:i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> d1.values() <span class="keyword">if</span> i&gt;<span class="number">20</span>&#125;)</span><br><span class="line"> <span class="comment"># 推导集合</span></span><br><span class="line"><span class="built_in">print</span>(&#123;i <span class="keyword">for</span> i <span class="keyword">in</span> d1.values() <span class="keyword">if</span> i&gt;<span class="number">20</span>&#125;)</span><br><span class="line"> <span class="comment"># 推导元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>((i <span class="keyword">for</span> i <span class="keyword">in</span> d1.values() <span class="keyword">if</span> i&gt;<span class="number">20</span>)))</span><br><span class="line"> <span class="comment"># 二重循环 提取数字为列表[45,67,45,34,65,78]</span></span><br><span class="line">l1=[[<span class="number">45</span>,<span class="number">67</span>,<span class="number">45</span>,<span class="string">&quot;hhh&quot;</span>],[<span class="number">34</span>,<span class="number">65</span>,<span class="number">78</span>,<span class="string">&quot;test&quot;</span>]]</span><br><span class="line"><span class="built_in">print</span>([j <span class="keyword">for</span> i <span class="keyword">in</span> l1 <span class="keyword">for</span> j <span class="keyword">in</span> i <span class="keyword">if</span> <span class="built_in">type</span>(j)==<span class="built_in">int</span>])</span><br></pre></td></tr></table></figure><h1 id="list-、tuple、set、dict的区别"><a href="#list-、tuple、set、dict的区别" class="headerlink" title="list 、tuple、set、dict的区别"></a><strong>list 、tuple、set、dict的区别</strong></h1><p>在 Python 中，<code>list</code>（列表）、<code>tuple</code>（元组）、<code>set</code>（集合）和 <code>dict</code>（字典）是四种核心数据结构，它们在特性、用途和性能上有显著区别：</p><h3 id="📋-1-List（列表）"><a href="#📋-1-List（列表）" class="headerlink" title="📋 1. List（列表）"></a>📋 1. <strong>List（列表）</strong></h3><ul><li><p><strong>特性</strong>：有序集合，可变（可修改）</p></li><li><p><strong>语法</strong>：<code>[元素1, 元素2, ...]</code></p></li><li><p><strong>特点</strong>：</p><ul><li>保持元素插入顺序</li><li>允许重复元素</li><li>元素可以是不同类型</li><li>通过索引访问（<code>list[0]</code>）</li></ul></li><li><p><strong>操作</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line">fruits.append(<span class="string">&quot;orange&quot;</span>)    <span class="comment"># 添加元素</span></span><br><span class="line">fruits[<span class="number">1</span>] = <span class="string">&quot;mango&quot;</span>       <span class="comment"># 修改元素</span></span><br></pre></td></tr></table></figure></li><li><p><strong>时间复杂度</strong>：</p><ul><li>访问：O(1)</li><li>插入&#x2F;删除末尾：O(1)</li><li>插入&#x2F;删除中间：O(n)</li></ul></li><li><p><strong>使用场景</strong>：需要保持顺序且可能修改的数据集合</p></li></ul><h3 id="📦-2-Tuple（元组）"><a href="#📦-2-Tuple（元组）" class="headerlink" title="📦 2. Tuple（元组）"></a>📦 2. <strong>Tuple（元组）</strong></h3><ul><li><p><strong>特性</strong>：有序集合，<strong>不可变</strong>（创建后不能修改）</p></li><li><p><strong>语法</strong>：<code>(元素1, 元素2, ...)</code> 或 单元素 <code>(元素,)</code></p></li><li><p><strong>特点</strong>：</p><ul><li>比列表更节省内存</li><li>可哈希（可作为字典键）</li><li>保持元素插入顺序</li><li>允许重复元素</li></ul></li><li><p><strong>操作</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">colors = (<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(colors[<span class="number">0</span>])          <span class="comment"># 访问元素</span></span><br><span class="line"><span class="comment"># colors[1] = &quot;yellow&quot;    # 错误！不可修改</span></span><br></pre></td></tr></table></figure></li><li><p><strong>时间复杂度</strong>：访问 O(1)</p></li><li><p><strong>使用场景</strong>：固定数据集合（如坐标点、数据库记录）、字典键</p></li></ul><h3 id="🧺-3-Set（集合）"><a href="#🧺-3-Set（集合）" class="headerlink" title="🧺 3. Set（集合）"></a>🧺 3. <strong>Set（集合）</strong></h3><ul><li><p><strong>特性</strong>：无序集合，可变，<strong>元素唯一</strong></p></li><li><p><strong>语法</strong>：<code>&#123;元素1, 元素2, ...&#125;</code> 或 <code>set(iterable)</code></p></li><li><p><strong>特点</strong>：</p><ul><li>自动去重</li><li>不支持索引访问</li><li>只能包含可哈希对象（不可变类型）</li><li>支持集合运算（并集、交集等）</li></ul></li><li><p><strong>操作</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vowels = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;u&quot;</span>&#125;</span><br><span class="line">vowels.add(<span class="string">&quot;y&quot;</span>)           <span class="comment"># 添加元素</span></span><br><span class="line">vowels.discard(<span class="string">&quot;i&quot;</span>)       <span class="comment"># 删除元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a&quot;</span> <span class="keyword">in</span> vowels)      <span class="comment"># 成员检测</span></span><br></pre></td></tr></table></figure></li><li><p><strong>时间复杂度</strong>：</p><ul><li>添加&#x2F;删除&#x2F;成员检测：平均 O(1)</li></ul></li><li><p><strong>使用场景</strong>：去重、成员检测、集合运算</p></li></ul><h3 id="📖-4-Dict（字典）"><a href="#📖-4-Dict（字典）" class="headerlink" title="📖 4. Dict（字典）"></a>📖 4. <strong>Dict（字典）</strong></h3><ul><li><p><strong>特性</strong>：键值对集合，<strong>无序</strong>（Python 3.7+ 保持插入顺序），可变</p></li><li><p><strong>语法</strong>：<code>&#123;键1: 值1, 键2: 值2, ...&#125;</code></p></li><li><p><strong>特点</strong>：</p><ul><li>键必须是可哈希对象（通常为不可变类型）</li><li>键唯一，值可重复</li><li>通过键快速访问值</li></ul></li><li><p><strong>操作</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;</span><br><span class="line">person[<span class="string">&quot;email&quot;</span>] = <span class="string">&quot;alice@example.com&quot;</span>  <span class="comment"># 添加/修改</span></span><br><span class="line"><span class="built_in">print</span>(person.get(<span class="string">&quot;age&quot;</span>))               <span class="comment"># 访问值</span></span><br></pre></td></tr></table></figure></li><li><p><strong>时间复杂度</strong>：</p><ul><li>访问&#x2F;添加&#x2F;删除：平均 O(1)</li></ul></li><li><p><strong>使用场景</strong>：键值映射、快速查找、JSON 数据表示</p></li></ul><h3 id="🆚-核心区别总结"><a href="#🆚-核心区别总结" class="headerlink" title="🆚 核心区别总结"></a>🆚 核心区别总结</h3><table><thead><tr><th align="left">特性</th><th align="left">List</th><th align="left">Tuple</th><th align="left">Set</th><th align="left">Dict</th></tr></thead><tbody><tr><td align="left"><strong>有序性</strong></td><td align="left">✔️ 保持顺序</td><td align="left">✔️ 保持顺序</td><td align="left">❌ 无序</td><td align="left">❌ 无序（3.6+ 保持插入顺序）</td></tr><tr><td align="left"><strong>可变性</strong></td><td align="left">✔️ 可变</td><td align="left">❌ 不可变</td><td align="left">✔️ 可变</td><td align="left">✔️ 可变</td></tr><tr><td align="left"><strong>元素唯一性</strong></td><td align="left">❌ 允许重复</td><td align="left">❌ 允许重复</td><td align="left">✔️ 唯一</td><td align="left">键唯一，值可重复</td></tr><tr><td align="left"><strong>索引访问</strong></td><td align="left">✔️ 支持</td><td align="left">✔️ 支持</td><td align="left">❌ 不支持</td><td align="left">通过键访问</td></tr><tr><td align="left"><strong>内存效率</strong></td><td align="left">一般</td><td align="left">✅ 较高</td><td align="left">中等</td><td align="left">中等</td></tr><tr><td align="left"><strong>典型操作</strong></td><td align="left">增删改查</td><td align="left">只读访问</td><td align="left">集合运算&#x2F;去重</td><td align="left">键值查找</td></tr><tr><td align="left"><strong>可哈希性</strong></td><td align="left">❌ 不可哈希</td><td align="left">✅ 可哈希</td><td align="left">❌ 不可哈希</td><td align="left">❌ 不可哈希</td></tr><tr><td align="left"><strong>空对象创建</strong></td><td align="left"><code>[]</code></td><td align="left"><code>()</code></td><td align="left"><code>set()</code></td><td align="left"><code>&#123;&#125;</code></td></tr></tbody></table><h3 id="💡-选择指南"><a href="#💡-选择指南" class="headerlink" title="💡 选择指南"></a>💡 选择指南</h3><ul><li>需要<strong>有序且可修改</strong> → 用 <strong>List</strong></li><li>需要<strong>有序且不可变</strong> → 用 <strong>Tuple</strong>（更安全、更快）</li><li>需要<strong>去重&#x2F;成员检测</strong> → 用 <strong>Set</strong></li><li>需要<strong>键值映射</strong> → 用 <strong>Dict</strong></li></ul><h3 id="⚡-性能对比（10万元素操作）"><a href="#⚡-性能对比（10万元素操作）" class="headerlink" title="⚡ 性能对比（10万元素操作）"></a>⚡ 性能对比（10万元素操作）</h3><table><thead><tr><th align="left">操作</th><th align="left">List</th><th align="left">Tuple</th><th align="left">Set</th><th align="left">Dict</th></tr></thead><tbody><tr><td align="left">查找元素</td><td align="left">O(n)</td><td align="left">O(n)</td><td align="left">O(1)</td><td align="left">O(1)</td></tr><tr><td align="left">插入元素</td><td align="left">O(1)*</td><td align="left">N&#x2F;A</td><td align="left">O(1)</td><td align="left">O(1)</td></tr><tr><td align="left">内存占用(MB)</td><td align="left">~8.5</td><td align="left">~7.2</td><td align="left">~4.2</td><td align="left">~4.8</td></tr></tbody></table><p><strong>列表插入末尾为 O(1)，插入中间为 O(n)</strong></p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p><strong>函数代码块以 def 关键词开头</strong> </p><p><strong>return [ 表达式 ] 结束函数并返回，返回⼀个或多个值给调⽤⽅，不带表达式的 return  相 当于返回 None ，多个值为元组。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sayHello</span>():</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;你好&quot;</span>)</span><br><span class="line"> <span class="comment"># 调用</span></span><br><span class="line">sayHello()</span><br></pre></td></tr></table></figure><p><strong>不定⻓参数</strong></p><ul><li>加了星号 * 的参数会以<strong>元组 (tuple) 的形式导⼊，存放所有未命名的变量参数。</strong></li><li>加了两个 星号 ** 的参数会以<strong>字典的形式导⼊</strong>。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getNumTuple</span>(<span class="params">n1,*n</span>):</span><br><span class="line"> <span class="built_in">print</span>(n1)</span><br><span class="line"> <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">getNumTuple(<span class="number">8</span>,<span class="number">9</span>,<span class="number">90</span>,<span class="number">100</span>,<span class="string">&quot;hello&quot;</span>,<span class="literal">True</span>,<span class="number">3.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getNumDict</span>(<span class="params">n1,**n</span>):</span><br><span class="line"> <span class="built_in">print</span>(n1)</span><br><span class="line"> <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">getNumDict(<span class="number">8</span>,age=<span class="number">40</span>,name=<span class="string">&quot;周杰伦&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="值传递与引⽤传递"><a href="#值传递与引⽤传递" class="headerlink" title="值传递与引⽤传递"></a>值传递与引⽤传递</h1><ul><li><strong>值传递：传递的是数值，适⽤于实参类型为不可变类型（ int,float,bool,str,tuple ）</strong></li><li><strong>引⽤传递：传递的是地址，适⽤于实参类型为可变类型（ list,set,dict,class ）</strong></li><li><strong>函数传参，能不传就不传，实在不行在传参。</strong></li></ul><h1 id="main-函数–-程序的⼊⼝"><a href="#main-函数–-程序的⼊⼝" class="headerlink" title="main 函数– 程序的⼊⼝"></a>main 函数– 程序的⼊⼝</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="File-⽂件-读写"><a href="#File-⽂件-读写" class="headerlink" title="File( ⽂件 )  读写"></a>File( ⽂件 )  读写</h1><p>如果文件不存在，它会帮忙创建一个。</p><p>mode参数：</p><ul><li><strong>w：覆盖写</strong></li><li><strong>a(append)：追加</strong></li></ul><table><thead><tr><th align="left">模式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">t</td><td align="left">文本模式 (默认)。</td></tr><tr><td align="left">x</td><td align="left">写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td align="left">b</td><td align="left">二进制模式。</td></tr><tr><td align="left">+</td><td align="left">打开一个文件进行更新(可读可写)。</td></tr><tr><td align="left">U</td><td align="left">通用换行模式（<strong>Python 3 不支持</strong>）。</td></tr><tr><td align="left">r</td><td align="left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="left">rb</td><td align="left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td></tr><tr><td align="left">r+</td><td align="left">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="left">rb+</td><td align="left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td align="left">w</td><td align="left">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">wb</td><td align="left">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td align="left">w+</td><td align="left">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="left">wb+</td><td align="left">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td align="left">a</td><td align="left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">ab</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="left">a+</td><td align="left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td align="left">ab+</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><p>默认为文本模式，如果要以<strong>二进制模式打开，加上 b</strong> 。</p><ol><li><p><strong>⽂本⽂件写</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:\\wtest.txt&quot;</span>,mode=<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span>  f :</span><br><span class="line"> f.write(<span class="string">&quot;ccccccccccccccc\n&quot;</span>)</span><br><span class="line"> f.write(<span class="string">&quot;ccccccccccccccc\n&quot;</span>)</span><br><span class="line"> f.close()</span><br></pre></td></tr></table></figure></li><li><p><strong>⽂本⽂件读</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/root/python/test.txt&quot;</span>,mode=<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"> result = f.read()</span><br><span class="line"> <span class="comment"># resutl = f.readlines()</span></span><br><span class="line"> <span class="built_in">print</span>(resutl)</span><br><span class="line"> f.close()</span><br></pre></td></tr></table></figure><ol><li><strong>“相对路径不起作用”的真相</strong>：<ul><li>问题不在 <code>open()</code>，而在于<strong>当前工作目录(CWD)</strong> 与你的预期不同</li><li>CWD 是运行脚本时的终端路径，不是脚本所在路径</li></ul></li></ol></li></ol><h1 id="Python-库-标准库-扩展库-⾃定义库"><a href="#Python-库-标准库-扩展库-⾃定义库" class="headerlink" title="Python 库 :  标准库  扩展库  ⾃定义库"></a>Python 库 :  标准库  扩展库  ⾃定义库</h1><p>在 python  ⽤ import 或者 from … import 来导⼊相应的库。</p><ul><li><strong>fieldnames在写的时候要提前准备好fieldnames列表，读的时候不用准备。</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"> <span class="comment">#写csv文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/root/python/user.csv&quot;</span>,mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"> result=csv.DictWriter(f,fieldnames=[<span class="string">&quot;id&quot;</span>,<span class="string">&quot;passwd&quot;</span>,<span class="string">&quot;bat&quot;</span>]) <span class="comment">#fieldnames在写的时候要提前准备好fieldnames列表，读的时候不用准备。</span></span><br><span class="line"> result.writeheader()</span><br><span class="line"> result.writerows(data)</span><br><span class="line"> f.close()</span><br><span class="line"> <span class="comment">#读csv文件</span></span><br><span class="line">result = csv.DictReader(f)</span><br></pre></td></tr></table></figure><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><ol><li><p><strong>一般是整个项目开发完，基础功能开发完，才开始做异常。不让整个程序崩溃。</strong></p></li><li><p><strong>这种异常一般是给用户提示用的。</strong></p></li></ol><p> 程序崩溃</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line"> x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数字: &quot;</span>))</span><br><span class="line"> z=<span class="number">100</span>/x</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;您输入的不是数字,请再次尝试输入！&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;除数不能为零&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;未知错误&quot;</span>)</span><br><span class="line"> <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><p><strong>⾃定义异常</strong> </p><p>使⽤ raise  语句抛出⼀个指定的异常 raise Exception(“ 不能是负数 “)</p><p>让程序崩溃，发生异常</p><h1 id="⾯向对象-OOP-封装、继承、多态"><a href="#⾯向对象-OOP-封装、继承、多态" class="headerlink" title="⾯向对象 OOP 封装、继承、多态"></a>⾯向对象 OOP 封装、继承、多态</h1><p>类是抽象的，对象是具体的，先有类才有对象 </p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a><strong>封装</strong></h2><p>类及对象包含属性和⽅法 </p><ul><li><p>属性：静态特征  全局变量  成员 </p><p>给类定义私有属性可以通过在属性名前加上<strong>双下划线<code>__</code>来定义一个私有属性</strong>。这样做可以防止这个属性被外部代码直接访问和修改，从而保护类的内部状态。私有属性在类的外部是不可见的，但仍然可以在类的内部方法中使用。</p></li><li><p>⽅法：动态特征  函数  功能 </p></li><li><p>魔法⽅法：不需要调⽤就可以⾃动执⾏。</p></li><li><p>作⽤：<strong>初始化对象的成员 ( 给对象添加属性 )</strong></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span>:</span><br><span class="line"> name=<span class="string">&quot;&quot;</span></span><br><span class="line"> age=<span class="number">0</span></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,xingming,nianling</span>):</span><br><span class="line"> <span class="variable language_">self</span>.name=xingming</span><br><span class="line"> <span class="variable language_">self</span>.age=nianling</span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">f&quot;姓名是<span class="subst">&#123;self.name&#125;</span>,年龄是<span class="subst">&#123;self.age&#125;</span>&quot;</span>)</span><br><span class="line"> <span class="comment">#调用</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"> ldh=People(<span class="string">&quot;刘德华&quot;</span>,<span class="number">50</span>)</span><br><span class="line"> ldh.show()</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p><strong>class  ⼦类名 ( ⽗类名 ):</strong> </p><p>⼦类直接具备⽗类的属性和⽅法 </p><p>解决代码重⽤问题，提⾼开发效率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(<span class="title class_ inherited__">People</span>):</span><br><span class="line"> grade=<span class="string">&quot;&quot;</span></span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, xingming, nianling,nianji</span>):</span><br><span class="line"> <span class="built_in">super</span>().__init__(xingming,nianling)</span><br><span class="line"> <span class="variable language_">self</span>.grade=nianji</span><br><span class="line"> <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">f&quot;年级是<span class="subst">&#123;self.grade&#125;</span>&quot;</span>)</span><br><span class="line"> <span class="comment"># 方法重写</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">f&quot;姓名是<span class="subst">&#123;self.name&#125;</span>,年龄是<span class="subst">&#123;self.age&#125;</span>,年级是<span class="subst">&#123;self.grade&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态从字⾯上理解就是⼀个事物可以呈现多种状态。 </p><p><strong>没有继承就没有多态。</strong> </p><p><strong>多态是能⾃⼰进⾏判断该去执⾏什么 , 创建⼀个列表来体现 , ⾯向对象的列表。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l1=[ldh,zjl]</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> l1:</span><br><span class="line"> <span class="comment"># 多态</span></span><br><span class="line"><span class="built_in">print</span>(i.name)</span><br><span class="line"> i.show()</span><br></pre></td></tr></table></figure><h2 id="类的专有方法"><a href="#类的专有方法" class="headerlink" title="类的专有方法"></a>类的专有方法</h2><ul><li><strong><strong>init</strong> :</strong> 构造函数，在生成对象时调用</li><li><strong><strong>del</strong> :</strong> 析构函数，释放对象时使用</li><li><strong><strong>repr</strong> :</strong> 打印，转换</li><li><strong><strong>setitem</strong> :</strong> 按照索引赋值</li><li><strong><strong>getitem</strong>:</strong> 按照索引获取值</li><li><strong><strong>len</strong>:</strong> 获得长度</li><li><strong><strong>cmp</strong>:</strong> 比较运算</li><li><strong><strong>call</strong>:</strong> 函数调用</li><li><strong><strong>add</strong>:</strong> 加运算</li><li><strong><strong>sub</strong>:</strong> 减运算</li><li><strong><strong>mul</strong>:</strong> 乘运算</li><li><strong><strong>truediv</strong>:</strong> 除运算</li><li><strong><strong>mod</strong>:</strong> 求余运算</li><li><strong><strong>pow</strong>:</strong> 乘方</li></ul><p>作业：</p><ol><li>定义⼀个⽔果类，定义属性（名称和颜⾊），使⽤魔法⽅法，然后通过⽔果类，创建 苹果对象、橘⼦对象、西⽠对象并分别添加上颜⾊属性，定义⼀个⽅法分别输出 如：</li></ol><p>​红⾊的苹果真好吃 </p><p>​橙⾊的橘⼦真好吃 </p><p>​绿⾊的西⽠真好吃</p><ol start="2"><li><p>猫类 Cat 。属性 : ⽑的颜⾊ color ，品种 breed ，亲和度 love 。⽅法 : 吃饭 eat() </p><p>狗类 Dog 。属性 : ⽑的颜⾊ color ，品种 breed ，忠诚度 loyal 。⽅法 : 吃饭 eat() </p><p>要求 :  使⽤封装、继承和多态 </p><p>根据以上要求抽取⽗类为 Animal </p><p>重写 eat ⽅法 </p><p>输出打印如下： </p><p>有⼀只亲和度是 10 级的花⾊的波斯猫正在吃⻥ ….. </p><p>有⼀只忠诚度是 9 级的⿊⾊的藏獒正在啃⻣头 ….. </p><p>有⼀只亲和度是 8 级的⽩⾊的加菲猫正在吃⻥ ….. </p><p>有⼀只忠诚度是 6 级的棕⾊的茶杯⽝正在啃⻣头 …..</p></li></ol><h1 id="time-datetime-库"><a href="#time-datetime-库" class="headerlink" title="time&amp;datetime 库"></a>time&amp;datetime 库</h1><p>Python 中处理时间的标准库 </p><ol><li>提供获取系统时间并格式化输出功能 </li><li>提供系统级精确计时功能，⽤于程序性能分析</li></ol><h1 id="time-库"><a href="#time-库" class="headerlink" title="time 库"></a>time 库</h1><p>包含三类函数 </p><ol><li>时间获取： <strong>localtime()</strong> </li><li>时间格式化： <strong>strftime()  strptime()</strong>    string   format time 格式化字符串   string parse time 解析字符串</li><li>程序计时： <strong>sleep()  perf_counter(</strong>)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> <span class="comment"># 日期类型与字符串直接互相转化</span></span><br><span class="line">t1= time.localtime()</span><br><span class="line"> <span class="built_in">print</span>(time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>,t1))</span><br><span class="line"> timeStr = <span class="string">&#x27;2018-01-26 12:55:20&#x27;</span></span><br><span class="line"> t2=time.strptime(timeStr, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"> <span class="comment">#测试程序执行时间差</span></span><br><span class="line">t_start = time.perf_counter()</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;测试&quot;</span>)</span><br><span class="line"> <span class="comment">#开始休眠</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;休眠完毕&quot;</span>)</span><br><span class="line"> t_end =  time.perf_counter()</span><br><span class="line"> <span class="built_in">print</span>( t_end-t_start )</span><br><span class="line"> <span class="keyword">import</span> datetime</span><br><span class="line"> t = datetime.datetime.now()</span><br><span class="line"> <span class="built_in">print</span>(datetime.datetime.strftime(t,<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>))</span><br><span class="line"> <span class="built_in">print</span>(datetime.datetime.strptime(<span class="string">&quot;20230211&quot;</span>,<span class="string">&quot;%Y%m%d&quot;</span>))</span><br></pre></td></tr></table></figure><h1 id="连接-MySQL-操作"><a href="#连接-MySQL-操作" class="headerlink" title="连接 MySQL 操作"></a>连接 MySQL 操作</h1><p>pymysql  是在 Python3.x  版本中⽤于连接 MySQL  服务器的⼀个库 在 vscode 终端下⾯直接运⾏ pip3 install pymysql 安装即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  pymysql</span><br><span class="line"> <span class="comment"># 连接database</span></span><br><span class="line"> conn = pymysql.connect(</span><br><span class="line"> host=<span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line"> user=<span class="string">&quot;root&quot;</span>,password=<span class="string">&quot;root123456&quot;</span>,</span><br><span class="line"> database=<span class="string">&quot;test&quot;</span>,</span><br><span class="line"> charset=<span class="string">&quot;utf8&quot;</span>)</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;打开数据库&quot;</span>)</span><br><span class="line"> <span class="comment">#关闭数据库</span></span><br><span class="line">conn.close()</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;关闭数据库&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="结构操作"><a href="#结构操作" class="headerlink" title="结构操作"></a>结构操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用预处理语句创建表</span></span><br><span class="line">sql1 = <span class="string">&quot;&quot;&quot;create table if not exists MovieType(</span></span><br><span class="line"><span class="string"> tid int primary key,</span></span><br><span class="line"><span class="string"> tname varchar(20),</span></span><br><span class="line"><span class="string"> tcontent varchar(500),</span></span><br><span class="line"><span class="string"> tdate datetime</span></span><br><span class="line"><span class="string"> )&quot;&quot;&quot;</span></span><br><span class="line"> baoma.execute(sql1)</span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;操作成功&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="数据增删改操作"><a href="#数据增删改操作" class="headerlink" title="数据增删改操作"></a>数据增删改操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="string">&quot;insert into MovieType values(1,&#x27;喜剧&#x27;,&#x27;这是一种搞笑的视频&#x27;,now())&quot;</span></span><br><span class="line"> result=baoma.execute(c)</span><br><span class="line"> conn.commit() <span class="comment">#需要提交才到数据库，有错则rollback</span></span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;插入成功&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="数据查询操作"><a href="#数据查询操作" class="headerlink" title="数据查询操作"></a>数据查询操作</h2><p>baoma.fetchone(): 执⾏完毕返回的结果集默认以元组显⽰ </p><p>baoma.fetchall(): 元组的元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  pymysql</span><br><span class="line"> sql = <span class="string">&quot;select * from MovieType order by tdate desc&quot;</span></span><br><span class="line"> baoma.execute(sql)</span><br><span class="line"> <span class="comment"># data = baoma.fetchone()#读一行</span></span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line"> data = baoma.fetchall()<span class="comment">#读所有</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"> <span class="keyword">for</span>  i <span class="keyword">in</span>  data:</span><br><span class="line"> <span class="built_in">print</span>(i[<span class="number">0</span>],i[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>上机练习 9 </p><ol><li><p>灵活使⽤ pymyql 来完成创建表、添加数据、查询数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table <span class="keyword">if</span> <span class="keyword">not</span> exists MovieType(</span><br><span class="line"> tid <span class="built_in">int</span> primary key,</span><br><span class="line"> tname varchar(<span class="number">20</span>),</span><br><span class="line"> tcontent varchar(<span class="number">200</span>),</span><br><span class="line"> tdate datetime</span><br><span class="line"> )</span><br><span class="line"> insert into MovieType values(<span class="number">1</span>,<span class="string">&#x27;喜剧&#x27;</span>,<span class="string">&#x27;这是一个搞笑的电影&#x27;</span>,now())</span><br><span class="line"> insert into MovieType values(<span class="number">2</span>,<span class="string">&#x27;动作&#x27;</span>,<span class="string">&#x27;这是一个打斗的电影&#x27;</span>,now())</span><br><span class="line"> select * <span class="keyword">from</span> MovieType</span><br></pre></td></tr></table></figure></li><li><p>查询数据时⽇期处理成如下格式：</p><p>1  喜剧  这是⼀个搞笑的电影 2023 年 08 ⽉ 21 ⽇ </p><p>2  动作  这是⼀个打⽃的电影 2023 年 08 ⽉ 21 ⽇</p></li></ol><h1 id="三层架构–面向对象思想"><a href="#三层架构–面向对象思想" class="headerlink" title="三层架构–面向对象思想"></a>三层架构–面向对象思想</h1><p><img src="/2025/05/28/Python/image-20250613000538572.png" alt="image-20250613000538572"></p><h1 id="os库"><a href="#os库" class="headerlink" title="os库"></a>os库</h1><p><strong>os （ operating system ）是 Python 程序与操作系统进⾏交互的接⼝</strong> </p><p><strong>1 、 os.listdir （）返回对应⽬录下的所有⽂件及⽂件夹</strong> </p><p><strong>2 、 os.mkdir （）创建⽬录（只⽀持⼀层创建）即新建⼀个路径</strong> </p><p><strong>3 、 os.open （）创建⽂件相当于全局函数 open() （ IO 流） os.open(“t.txt”,os.O_CREAT)</strong> </p><p><strong>4 、 os.remove （⽂件名或路径）删除⽂件</strong> </p><p><strong>5 、 os.rmdir （）删除⽬录</strong> </p><p><strong>6 、 os.system （）执⾏终端命令 os.system(“touch a.txt”)</strong></p><h1 id="pandas库"><a href="#pandas库" class="headerlink" title="pandas库"></a>pandas库</h1><p>Pandas  是 Python  语⾔的⼀个扩展程序库，⽤于数据分析。</p><p>Pandas  名字衍⽣⾃术语 “panel data” （⾯板数据） </p><p>Pandas  可以从各种⽂件格式⽐如 CSV 、 JSON 、 Excel</p><h2 id="Pandas-数据结构-DataFrame"><a href="#Pandas-数据结构-DataFrame" class="headerlink" title="Pandas  数据结构 - DataFrame"></a>Pandas  数据结构 - DataFrame</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;<span class="string">&quot;Site&quot;</span>:[<span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Runoob&quot;</span>, <span class="string">&quot;Wiki&quot;</span>], <span class="string">&quot;Age&quot;</span>:[<span class="number">10</span>, <span class="number">12</span>, <span class="number">13</span>],<span class="string">&quot;sss&quot;</span>:[<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="number">1</span>]) <span class="comment">#一行</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[[<span class="number">0</span>,<span class="number">1</span>]]) <span class="comment"># 多行</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;Age&quot;</span>]) <span class="comment"># 一列</span></span><br><span class="line"><span class="built_in">print</span>(df[[<span class="string">&quot;Age&quot;</span>,<span class="string">&quot;Site&quot;</span>]]) <span class="comment"># 多列</span></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;Age&quot;</span>][<span class="number">1</span>]) <span class="comment"># 一个值</span></span><br><span class="line"><span class="built_in">print</span>(df[(df.Age&gt;<span class="number">11</span>) &amp; (df.sss&gt;<span class="number">35</span>)])<span class="comment"># 带条件筛选</span></span><br><span class="line"><span class="built_in">print</span>(df[(df.Age&gt;<span class="number">11</span>) &amp; (df.sss&gt;<span class="number">35</span>)][<span class="string">&quot;Age&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(df[(df.Age.astype(<span class="built_in">int</span>)&gt;<span class="number">11</span>) &amp; (df.sss&gt;<span class="number">35</span>)])<span class="comment">#如果需要转换数据类型如下</span></span><br><span class="line"><span class="comment">#修改值-查出来后，右侧给左侧赋值即可，不存在的列即为添加</span></span><br><span class="line">df[<span class="string">&quot;Age&quot;</span>]=<span class="number">100</span></span><br><span class="line">df[<span class="string">&quot;Age&quot;</span>][<span class="number">1</span>]=<span class="number">99</span></span><br><span class="line"> <span class="comment">#添加列</span></span><br><span class="line">df[<span class="string">&quot;tid&quot;</span>]=<span class="number">2</span></span><br><span class="line">df[<span class="string">&quot;Score&quot;</span>]=[<span class="number">90</span>,<span class="number">40</span>,<span class="number">99</span>]</span><br><span class="line">df.insert(<span class="number">1</span>,<span class="string">&quot;Sex&quot;</span>,[<span class="string">&quot;男&quot;</span>,<span class="string">&quot;女&quot;</span>,<span class="string">&quot;男&quot;</span>])</span><br><span class="line"> <span class="comment"># 1代表列 0代表行</span></span><br><span class="line">df.drop(<span class="number">1</span>,axis=<span class="number">0</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">df.drop([<span class="number">0</span>,<span class="number">1</span>],axis=<span class="number">0</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">df.drop(<span class="string">&quot;Age&quot;</span>,axis=<span class="number">1</span>,inplace=<span class="literal">True</span>)</span><br><span class="line">df.drop(df[df.Age&gt;<span class="number">10</span>].index,axis=<span class="number">0</span>,inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="Pandas-CSV-⽂件"><a href="#Pandas-CSV-⽂件" class="headerlink" title="Pandas CSV  ⽂件"></a>Pandas CSV  ⽂件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;/root/shell/douban.csv&quot;</span>)</span><br><span class="line">df = df[[<span class="string">&quot;id&quot;</span>,<span class="string">&quot;title&quot;</span>,<span class="string">&quot;rate&quot;</span>]]</span><br><span class="line">df.to_csv(<span class="string">&quot;/root/python/db.csv&quot;</span>,index=<span class="literal">False</span>)</span><br><span class="line">df.to_csv(<span class="string">&quot;/root/python/db.csv&quot;</span>,mode=<span class="string">&quot;a&quot;</span>, header=<span class="literal">False</span>, index=<span class="literal">False</span>)<span class="comment">#追加</span></span><br></pre></td></tr></table></figure><h2 id="Pandas-JSON"><a href="#Pandas-JSON" class="headerlink" title="Pandas JSON"></a>Pandas JSON</h2><p> <strong>json.loads() 函数是将字符串转化为字典</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">d2 = [</span><br><span class="line"> &#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;Year 1&quot;</span>, <span class="string">&quot;student number&quot;</span>: <span class="number">20</span>, <span class="string">&quot;room&quot;</span>: <span class="string">&quot;Yellow&quot;</span>&#125;,</span><br><span class="line"> &#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;Year 2&quot;</span>, <span class="string">&quot;student number&quot;</span>: <span class="number">25</span>, <span class="string">&quot;room&quot;</span>: <span class="string">&quot;Blue&quot;</span>&#125;</span><br><span class="line"> ]</span><br><span class="line">df = pd.DataFrame(d2)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><h2 id="Pandas-excel-⽂件"><a href="#Pandas-excel-⽂件" class="headerlink" title="Pandas excel ⽂件"></a>Pandas excel ⽂件</h2><ul><li>sheet_name 指定了读取 excel ⾥⾯的哪⼀个 sheet </li><li>usecols 指定了读取哪些列 nrows 指定了总共读取多少⾏ </li><li>header 指定了列名在第⼏⾏，并且只读取这⼀⾏往下的数据 </li><li>index_col 指定了 index 在第⼏列 </li><li>engine&#x3D;”openpyxl”  指定了使⽤什么引擎来读取 excel ⽂件</li></ul><p><strong>安装： pip3 install openpyxl</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.read_excel(<span class="string">&quot;student.xlsx&quot;</span>,sheet_name=<span class="string">&quot;Sheet1&quot;</span>,header=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">df.to_excel(<span class="string">&quot;student1.xlsx&quot;</span>,sheet_name=<span class="string">&quot;xs&quot;</span>,index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h1 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h1><ol><li><ul><li><p>NumPy（<strong>Num</strong>erical <strong>Py</strong>thon）是 Python 中用于<strong>科学计算</strong>的基础且<strong>极其核心</strong>的库。它提供了一个强大的 <strong>N 维数组对象</strong>以及一系列操作这些数组的函数和工具。几乎所有处理数值数据的 Python 库（如 Pandas, SciPy, Matplotlib, scikit-learn, TensorFlow, PyTorch 等）都建立在 NumPy 之上或与其深度集成。</p><p>以下是 NumPy 的关键特性和介绍：</p><ol><li><p><strong>核心对象：<code>ndarray</code> (N-dimensional array)</strong></p><ul><li><strong>多维同质数组：</strong> 这是 NumPy 的核心数据结构。它是一个包含<strong>相同类型</strong>元素的表格（通常是数字），可以通过非负整数元组进行索引。</li><li><strong>维度 (axes)：</strong> 数组有维度。例如：<ul><li>一维数组：<code>[1, 2, 3]</code> (1 个轴)</li><li>二维数组：<code>[[1, 2, 3], [4, 5, 6]]</code> (2 个轴：行、列)</li><li>三维数组：想象一个立方体的数据 (3 个轴)。</li></ul></li><li><strong>形状 (shape)：</strong> 一个表示每个维度大小的元组。例如，上面的二维数组形状是 <code>(2, 3)</code>（2 行，3 列）。</li><li><strong>数据类型 (dtype)：</strong> 数组中元素的类型，如 <code>int32</code>, <code>int64</code>, <code>float32</code>, <code>float64</code>, <code>bool_</code>, <code>string_</code> 等。定义类型对于内存占用和计算效率至关重要。</li><li><strong>内存效率与速度：</strong> <code>ndarray</code> 在内存中连续存储（或按特定步幅存储），并使用编译后的低级代码（C&#x2F;Fortran）进行操作，这比 Python 原生的列表 (<code>list</code>) 处理数值数据要<strong>快得多</strong>，<strong>内存效率高得多</strong>，尤其是对于大型数据集。</li></ul></li><li><p><strong>矢量化操作 (Vectorization)</strong></p><ul><li><p>NumPy 最重要的特性之一。它允许你对整个数组执行操作（加、减、乘、除、比较、函数应用等），<strong>无需编写显式的循环</strong>。</p></li><li><p><strong>优势：</strong></p><ul><li><strong>简洁性：</strong> 代码更短，更易读，更接近数学表达式。</li><li><strong>高性能：</strong> 底层使用高效的预编译例程，避免了 Python 循环的解释器开销。</li></ul></li><li><p><strong>示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">b = np.array([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 矢量化加法 - 对整个数组操作</span></span><br><span class="line">c = a + b  <span class="comment"># 结果: array([6, 8, 10, 12])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 矢量化乘法</span></span><br><span class="line">d = a * <span class="number">2</span>  <span class="comment"># 结果: array([2, 4, 6, 8])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数学函数作用于整个数组</span></span><br><span class="line">e = np.sin(a)  <span class="comment"># 计算每个元素的正弦值</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>广播 (Broadcasting)</strong></p><ul><li><p>这是一组强大的规则，允许 NumPy 对<strong>形状不同</strong>的数组执行算术运算。</p></li><li><p>核心思想：将较小的数组“广播”到较大数组的形状，使它们具有<strong>兼容的形状</strong>，然后进行逐元素操作。</p></li><li><p><strong>规则（简化）：</strong></p><ol><li>如果两个数组维度数不同，小维度数组的形状会在其<strong>左边</strong>填充 <code>1</code>。</li><li>如果两个数组在某个维度上的大小相同，或者其中一个的大小为 <code>1</code>，则认为它们在该维度上是<strong>兼容的</strong>。</li><li>数组只能在所有维度都兼容的情况下广播。</li><li>广播后，每个数组的行为就像它拥有和最大数组一样的形状。</li></ol></li><li><p><strong>示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],  <span class="comment"># shape (2, 3)</span></span><br><span class="line">              [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">b = np.array([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>])  <span class="comment"># shape (3,) -&gt; 广播为 (1, 3) -&gt; (2, 3)</span></span><br><span class="line"></span><br><span class="line">c = a + b</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line"><span class="comment"># [[1+10, 2+20, 3+30],</span></span><br><span class="line"><span class="comment">#  [4+10, 5+20, 6+30]]</span></span><br><span class="line"><span class="comment"># = [[11, 22, 33],</span></span><br><span class="line"><span class="comment">#    [14, 25, 36]]</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>丰富的函数库</strong></p><ul><li><strong>数学运算：</strong> <code>np.add()</code>, <code>np.subtract()</code>, <code>np.multiply()</code>, <code>np.divide()</code>, <code>np.exp()</code>, <code>np.log()</code>, <code>np.sin()</code>, <code>np.cos()</code>, <code>np.sum()</code>, <code>np.mean()</code>, <code>np.std()</code>, <code>np.min()</code>, <code>np.max()</code> 等。</li><li><strong>线性代数：</strong> <code>np.dot()</code> (点积&#x2F;矩阵乘法), <code>np.linalg.inv()</code> (矩阵求逆), <code>np.linalg.det()</code> (行列式), <code>np.linalg.eig()</code> (特征值&#x2F;特征向量) 等 (主要在 <code>numpy.linalg</code> 子模块)。</li><li><strong>数组操作：</strong> <code>np.reshape()</code>, <code>np.concatenate()</code>, <code>np.split()</code>, <code>np.transpose()</code>, <code>np.sort()</code>, <code>np.ravel()</code> (展平), 切片、索引（基础索引、布尔索引、花式索引）。</li><li><strong>随机数生成：</strong> <code>np.random.rand()</code>, <code>np.random.randn()</code>, <code>np.random.randint()</code>, <code>np.random.normal()</code> 等 (在 <code>numpy.random</code> 子模块)。</li><li><strong>逻辑运算：</strong> <code>np.logical_and()</code>, <code>np.logical_or()</code>, <code>np.logical_not()</code>, 比较运算符 (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>) 返回布尔数组。</li><li><strong>文件 I&#x2F;O：</strong> <code>np.loadtxt()</code>, <code>np.savetxt()</code>, <code>np.load()</code> (用于 <code>.npy</code> 格式), <code>np.save()</code> (用于 <code>.npy</code> 格式)，方便读写数组数据。</li></ul></li><li><p><strong>与其他库的互操作性</strong></p><ul><li>NumPy 数组是 Python 科学计算生态系统的<strong>通用数据交换格式</strong>。</li><li>Pandas 的 <code>DataFrame</code> 和 <code>Series</code> 可以轻松转换为 NumPy 数组 (<code>.values</code> 或 <code>.to_numpy()</code>)。</li><li>SciPy 为科学计算（优化、积分、插值、信号处理等）提供了更多高级函数，通常直接操作 NumPy 数组。</li><li>Matplotlib 等绘图库直接接受 NumPy 数组进行绘图。</li><li>scikit-learn、TensorFlow、PyTorch 等机器学习&#x2F;深度学习框架的核心数据结构通常基于或兼容 NumPy 数组 (<code>numpy.ndarray</code> 或能与之转换的 tensor 类型)。</li></ul></li></ol><h1 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h1><p>Matplotlib 是 Python 生态系统中最<strong>核心的数据可视化库</strong>，由 John D. Hunter 于 2003 年创建。它提供了类似 MATLAB 的绘图接口，同时具备 Python 的灵活性和强大功能，已成为科学计算、数据分析和机器学习领域的<strong>标准可视化工具</strong>。</p><h2 id="核心特点"><a href="#核心特点" class="headerlink" title="核心特点"></a>核心特点</h2><ol><li><strong>全面的图表支持</strong>：<ul><li>基础图表：折线图、散点图、柱状图、饼图、直方图</li><li>高级图表：等高线图、热力图、3D图、矢量场图</li><li>统计图表：箱线图、误差棒图、小提琴图</li><li>地理绘图：基础地图投影（需配合 Basemap 或 Cartopy）</li></ul></li><li><strong>多平台兼容</strong>：<ul><li>Jupyter Notebook 内嵌显示</li><li>独立的 GUI 窗口</li><li>多种格式导出：PNG, PDF, SVG, EPS 等</li><li>Web 应用集成（通过 Agg 后端）</li></ul></li><li><strong>高度可定制</strong>：<ul><li>细粒度控制每个图表元素</li><li>支持 LaTeX 数学公式</li><li>丰富的样式和颜色配置</li></ul></li><li><strong>与科学计算栈无缝集成</strong>：<ul><li>原生支持 NumPy 数组</li><li>与 Pandas DataFrame 深度集成</li><li>作为 Seaborn、Plotly 等高级库的基础</li></ul></li></ol></li></ul></li></ol><h3 id="关键对象"><a href="#关键对象" class="headerlink" title="关键对象"></a>关键对象</h3><ul><li><strong>Figure（图形）</strong>：顶级容器，相当于画布</li><li><strong>Axes（坐标系）</strong>：实际绘图区域，包含坐标轴、标题等</li><li><strong>Axis（坐标轴）</strong>：处理刻度、标签和网格线</li><li><strong>Artist（艺术家）</strong>：所有可见元素的基类</li></ul><h2 id="基本使用模式"><a href="#基本使用模式" class="headerlink" title="基本使用模式"></a>基本使用模式</h2><h3 id="1-快速绘图（pyplot-方式）"><a href="#1-快速绘图（pyplot-方式）" class="headerlink" title="1. 快速绘图（pyplot 方式）"></a>1. 快速绘图（pyplot 方式）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图形</span></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">4</span>))  <span class="comment"># 设置图形大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制折线图</span></span><br><span class="line">plt.plot(x, y, label=<span class="string">&#x27;sin(x)&#x27;</span>, color=<span class="string">&#x27;blue&#x27;</span>, linestyle=<span class="string">&#x27;-&#x27;</span>, linewidth=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加标题和标签</span></span><br><span class="line">plt.title(<span class="string">&#x27;Sine Wave&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;X-axis&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Y-axis&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加图例和网格</span></span><br><span class="line">plt.legend()</span><br><span class="line">plt.grid(<span class="literal">True</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="2-面向对象方式（推荐用于复杂图表）"><a href="#2-面向对象方式（推荐用于复杂图表）" class="headerlink" title="2. 面向对象方式（推荐用于复杂图表）"></a>2. 面向对象方式（推荐用于复杂图表）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建图形和坐标系</span></span><br><span class="line">fig, ax = plt.subplots(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在坐标系上绘图</span></span><br><span class="line">ax.plot(x, np.sin(x), label=<span class="string">&#x27;Sine&#x27;</span>, color=<span class="string">&#x27;royalblue&#x27;</span>)</span><br><span class="line">ax.plot(x, np.cos(x), label=<span class="string">&#x27;Cosine&#x27;</span>, color=<span class="string">&#x27;crimson&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置坐标系属性</span></span><br><span class="line">ax.set_title(<span class="string">&#x27;Trigonometric Functions&#x27;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;X values&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;Function values&#x27;</span>)</span><br><span class="line">ax.legend(loc=<span class="string">&#x27;upper right&#x27;</span>)</span><br><span class="line">ax.grid(<span class="literal">True</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置坐标轴范围</span></span><br><span class="line">ax.set_xlim(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">ax.set_ylim(-<span class="number">1.5</span>, <span class="number">1.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加注释</span></span><br><span class="line">ax.annotate(<span class="string">&#x27;Local max&#x27;</span>, xy=(np.pi/<span class="number">2</span>, <span class="number">1</span>), xytext=(<span class="number">4</span>, <span class="number">1.2</span>),</span><br><span class="line">            arrowprops=<span class="built_in">dict</span>(facecolor=<span class="string">&#x27;black&#x27;</span>, shrink=<span class="number">0.05</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存高质量图片</span></span><br><span class="line">fig.savefig(<span class="string">&#x27;trig_functions.png&#x27;</span>, dpi=<span class="number">300</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="常用图表类型示例"><a href="#常用图表类型示例" class="headerlink" title="常用图表类型示例"></a>常用图表类型示例</h2><h3 id="1-多子图布局"><a href="#1-多子图布局" class="headerlink" title="1. 多子图布局"></a>1. 多子图布局</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">fig, axes = plt.subplots(<span class="number">2</span>, <span class="number">2</span>, figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子图1：散点图</span></span><br><span class="line">x = np.random.randn(<span class="number">100</span>)</span><br><span class="line">y = np.random.randn(<span class="number">100</span>)</span><br><span class="line">colors = np.random.rand(<span class="number">100</span>)</span><br><span class="line">sizes = <span class="number">100</span> * np.random.rand(<span class="number">100</span>)</span><br><span class="line">axes[<span class="number">0</span>, <span class="number">0</span>].scatter(x, y, c=colors, s=sizes, alpha=<span class="number">0.6</span>)</span><br><span class="line">axes[<span class="number">0</span>, <span class="number">0</span>].set_title(<span class="string">&#x27;Scatter Plot&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子图2：柱状图</span></span><br><span class="line">categories = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]</span><br><span class="line">values = [<span class="number">25</span>, <span class="number">40</span>, <span class="number">30</span>, <span class="number">45</span>]</span><br><span class="line">axes[<span class="number">0</span>, <span class="number">1</span>].bar(categories, values, color=[<span class="string">&#x27;skyblue&#x27;</span>, <span class="string">&#x27;salmon&#x27;</span>, <span class="string">&#x27;lightgreen&#x27;</span>, <span class="string">&#x27;gold&#x27;</span>])</span><br><span class="line">axes[<span class="number">0</span>, <span class="number">1</span>].set_title(<span class="string">&#x27;Bar Chart&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子图3：直方图</span></span><br><span class="line">data = np.random.randn(<span class="number">1000</span>)</span><br><span class="line">axes[<span class="number">1</span>, <span class="number">0</span>].hist(data, bins=<span class="number">30</span>, color=<span class="string">&#x27;purple&#x27;</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line">axes[<span class="number">1</span>, <span class="number">0</span>].set_title(<span class="string">&#x27;Histogram&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 子图4：饼图</span></span><br><span class="line">sizes = [<span class="number">15</span>, <span class="number">30</span>, <span class="number">25</span>, <span class="number">20</span>]</span><br><span class="line">explode = (<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 突出第二部分</span></span><br><span class="line">axes[<span class="number">1</span>, <span class="number">1</span>].pie(sizes, explode=explode, labels=categories, autopct=<span class="string">&#x27;%1.1f%%&#x27;</span>,</span><br><span class="line">               shadow=<span class="literal">True</span>, startangle=<span class="number">90</span>)</span><br><span class="line">axes[<span class="number">1</span>, <span class="number">1</span>].set_title(<span class="string">&#x27;Pie Chart&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.tight_layout()  <span class="comment"># 自动调整子图间距</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="2-高级可视化：3D-曲面图"><a href="#2-高级可视化：3D-曲面图" class="headerlink" title="2. 高级可视化：3D 曲面图"></a>2. 高级可视化：3D 曲面图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据</span></span><br><span class="line">x = np.linspace(-<span class="number">5</span>, <span class="number">5</span>, <span class="number">100</span>)</span><br><span class="line">y = np.linspace(-<span class="number">5</span>, <span class="number">5</span>, <span class="number">100</span>)</span><br><span class="line">X, Y = np.meshgrid(x, y)</span><br><span class="line">Z = np.sin(np.sqrt(X**<span class="number">2</span> + Y**<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制3D曲面</span></span><br><span class="line">surf = ax.plot_surface(X, Y, Z, cmap=<span class="string">&#x27;viridis&#x27;</span>, edgecolor=<span class="string">&#x27;none&#x27;</span>, alpha=<span class="number">0.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加等高线</span></span><br><span class="line">ax.contour(X, Y, Z, <span class="number">10</span>, offset=-<span class="number">1</span>, cmap=<span class="string">&#x27;coolwarm&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加标签</span></span><br><span class="line">ax.set_title(<span class="string">&#x27;3D Surface Plot&#x27;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加颜色条</span></span><br><span class="line">fig.colorbar(surf, shrink=<span class="number">0.5</span>, aspect=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="unittest"><a href="#unittest" class="headerlink" title="unittest"></a>unittest</h1><p><code>unittest</code> 是 Python 标准库中的一个单元测试框架，也称为 PyUnit（受 JUnit 启发）。它提供了一套完整的工具来编写、组织和运行测试用例，帮助开发者验证代码的正确性，确保代码在修改或扩展后仍然能按预期工作。</p><h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><h3 id="1-TestCase-类"><a href="#1-TestCase-类" class="headerlink" title="1. TestCase 类"></a>1. <strong>TestCase 类</strong></h3><ul><li>每个测试用例都继承自 <code>unittest.TestCase</code>。</li><li>测试方法必须以 <code>test_</code> 开头，例如 <code>test_addition()</code>。</li><li>包含断言方法（如 <code>assertEqual</code>、<code>assertTrue</code> 等）来验证预期结果。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTestCase</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_addition</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(<span class="number">1</span> + <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="2-TestSuite-类"><a href="#2-TestSuite-类" class="headerlink" title="2. TestSuite 类"></a>2. <strong>TestSuite 类</strong></h3><ul><li>用于组合多个测试用例或测试套件，形成更大的测试集合。</li><li>可以通过 <code>addTest()</code> 方法动态添加测试。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">suite = unittest.TestSuite()</span><br><span class="line">suite.addTest(MyTestCase(<span class="string">&quot;test_addition&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="3-TestLoader-类"><a href="#3-TestLoader-类" class="headerlink" title="3. TestLoader 类"></a>3. <strong>TestLoader 类</strong></h3><ul><li>自动发现和加载测试用例。</li><li>可以扫描指定目录或模块，查找所有继承自 <code>TestCase</code> 的类和方法。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loader = unittest.TestLoader()</span><br><span class="line">suite = loader.discover(<span class="string">&quot;tests&quot;</span>, pattern=<span class="string">&quot;test_*.py&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="4-TextTestRunner-类"><a href="#4-TextTestRunner-类" class="headerlink" title="4. TextTestRunner 类"></a>4. <strong>TextTestRunner 类</strong></h3><ul><li>用于运行测试套件并输出结果。</li><li>支持多种输出格式（如文本、XML、HTML 等）。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">runner = unittest.TextTestRunner()</span><br><span class="line">runner.run(suite)</span><br></pre></td></tr></table></figure><h2 id="常用断言方法"><a href="#常用断言方法" class="headerlink" title="常用断言方法"></a>常用断言方法</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>assertEqual(a, b)</code></td><td>验证 <code>a == b</code></td></tr><tr><td><code>assertNotEqual(a, b)</code></td><td>验证 <code>a != b</code></td></tr><tr><td><code>assertTrue(x)</code></td><td>验证 <code>x</code> 为真</td></tr><tr><td><code>assertFalse(x)</code></td><td>验证 <code>x</code> 为假</td></tr><tr><td><code>assertIs(a, b)</code></td><td>验证 <code>a</code> 和 <code>b</code> 是同一个对象</td></tr><tr><td><code>assertIsNot(a, b)</code></td><td>验证 <code>a</code> 和 <code>b</code> 不是同一个对象</td></tr><tr><td><code>assertIsNone(x)</code></td><td>验证 <code>x</code> 是 <code>None</code></td></tr><tr><td><code>assertIsNotNone(x)</code></td><td>验证 <code>x</code> 不是 <code>None</code></td></tr><tr><td><code>assertIn(a, b)</code></td><td>验证 <code>a</code> 在 <code>b</code> 中</td></tr><tr><td><code>assertNotIn(a, b)</code></td><td>验证 <code>a</code> 不在 <code>b</code> 中</td></tr><tr><td><code>assertRaises(exc, fun, *args, **kwargs)</code></td><td>验证 <code>fun(*args, **kwargs)</code> 抛出异常 <code>exc</code></td></tr></tbody></table><h2 id="测试夹具（Fixtures）"><a href="#测试夹具（Fixtures）" class="headerlink" title="测试夹具（Fixtures）"></a>测试夹具（Fixtures）</h2><ul><li>**<code>setUp()</code>**：在每个测试方法运行前执行，用于初始化测试环境。</li><li>**<code>tearDown()</code>**：在每个测试方法运行后执行，用于清理测试环境。</li><li><strong><code>setUpClass()</code></strong> 和 **<code>tearDownClass()</code>**：在类级别执行，分别用于类级别的初始化和清理（需使用 <code>@classmethod</code> 装饰器）。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyTestCase</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;类级别的初始化&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;每个测试前的初始化&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_example</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;运行测试&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;每个测试后的清理&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;类级别的清理&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><h3 id="1-命令行运行"><a href="#1-命令行运行" class="headerlink" title="1. 命令行运行"></a>1. <strong>命令行运行</strong></h3><ul><li><p>使用 <code>python -m unittest</code> 运行测试。</p></li><li><p>可以指定模块、类或方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python -m unittest tests.test_module</span><br><span class="line">python -m unittest tests.test_module.MyTestCase</span><br><span class="line">python -m unittest tests.test_module.MyTestCase.test_method</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-发现测试"><a href="#2-发现测试" class="headerlink" title="2. 发现测试"></a>2. <strong>发现测试</strong></h3><ul><li><p>使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">discover</span><br></pre></td></tr></table></figure><p>选项自动发现测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line">python -m unittest discover -s tests -p <span class="string">&quot;test_*.py&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="示例：完整测试流程"><a href="#示例：完整测试流程" class="headerlink" title="示例：完整测试流程"></a>示例：完整测试流程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件：math_operations.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">subtract</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 文件：tests/test_math_operations.py</span></span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> math_operations <span class="keyword">import</span> add, subtract</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestMathOperations</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_add</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(add(<span class="number">1</span>, <span class="number">2</span>), <span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_subtract</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(subtract(<span class="number">5</span>, <span class="number">3</span>), <span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p>运行测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">python -m unittest tests.test_math_operations</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">..</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 2 tests in 0.000s</span><br><span class="line"> </span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><strong>内置支持</strong>：<code>unittest</code> 是 Python 标准库的一部分，无需额外安装。</li><li><strong>结构清晰</strong>：通过继承 <code>TestCase</code> 和方法命名约定，测试代码结构清晰。</li><li><strong>功能丰富</strong>：提供多种断言方法和测试夹具，满足复杂测试需求。</li><li><strong>易于集成</strong>：可以与持续集成工具（如 Jenkins、GitHub Actions）无缝集成。</li></ol><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>单元测试：验证单个函数或方法的正确性。</li><li>集成测试：验证多个模块或组件的交互。</li><li>回归测试：确保代码修改后不会引入新的问题。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>unittest</code> 是 Python 中功能强大且易于使用的单元测试框架，适合大多数 Python 项目的测试需求。通过合理组织测试用例和利用测试夹具，可以显著提高代码的可靠性和可维护性。</p><h1 id="Setuptools：Python-打包与分发的核心工具"><a href="#Setuptools：Python-打包与分发的核心工具" class="headerlink" title="Setuptools：Python 打包与分发的核心工具"></a>Setuptools：Python 打包与分发的核心工具</h1><p>Setuptools 是 Python 生态系统中最重要且<strong>广泛使用的包构建工具</strong>，它扩展了 Python 标准库中的 distutils 模块，为开发者提供了强大的项目打包、依赖管理和分发能力。几乎所有现代 Python 包都依赖于 Setuptools 进行构建和分发。</p><h2 id="核心功能与价值"><a href="#核心功能与价值" class="headerlink" title="核心功能与价值"></a>核心功能与价值</h2><h3 id="1-项目打包"><a href="#1-项目打包" class="headerlink" title="1. 项目打包"></a>1. <strong>项目打包</strong></h3><ul><li>将 Python 代码组织成可分发的格式（源码包、wheel 等）</li><li>自动包含项目文件和非代码资源</li><li>支持复杂项目结构（命名空间包、多包项目）</li></ul><h3 id="2-依赖管理"><a href="#2-依赖管理" class="headerlink" title="2. 依赖管理"></a>2. <strong>依赖管理</strong></h3><ul><li>声明项目依赖（<code>install_requires</code>）</li><li>指定可选依赖组（<code>extras_require</code>）</li><li>自动解决依赖关系树</li></ul><h3 id="3-元数据管理"><a href="#3-元数据管理" class="headerlink" title="3. 元数据管理"></a>3. <strong>元数据管理</strong></h3><ul><li>定义项目元数据（名称、版本、作者等）</li><li>提供分类信息（PyPI 分类器）</li><li>支持许可证和项目URL</li></ul><h3 id="4-可执行文件创建"><a href="#4-可执行文件创建" class="headerlink" title="4. 可执行文件创建"></a>4. <strong>可执行文件创建</strong></h3><ul><li>自动生成平台相关的可执行脚本</li><li>通过入口点（entry points）创建命令行工具</li></ul><h3 id="5-扩展构建"><a href="#5-扩展构建" class="headerlink" title="5. 扩展构建"></a>5. <strong>扩展构建</strong></h3><ul><li>编译和打包 C&#x2F;C++ 扩展</li><li>集成 Cython 等工具</li></ul><h2 id="核心组件解析"><a href="#核心组件解析" class="headerlink" title="核心组件解析"></a>核心组件解析</h2><h3 id="1-setup-py-项目构建脚本"><a href="#1-setup-py-项目构建脚本" class="headerlink" title="1. setup.py - 项目构建脚本"></a>1. <code>setup.py</code> - 项目构建脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup, find_packages</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    name=<span class="string">&quot;my_project&quot;</span>,  <span class="comment"># 包名称</span></span><br><span class="line">    version=<span class="string">&quot;1.0.0&quot;</span>,    <span class="comment"># 版本号</span></span><br><span class="line">    author=<span class="string">&quot;Your Name&quot;</span>,</span><br><span class="line">    author_email=<span class="string">&quot;your@email.com&quot;</span>,</span><br><span class="line">    description=<span class="string">&quot;A short description of your project&quot;</span>,</span><br><span class="line">    long_description=<span class="built_in">open</span>(<span class="string">&quot;README.md&quot;</span>).read(),</span><br><span class="line">    long_description_content_type=<span class="string">&quot;text/markdown&quot;</span>,</span><br><span class="line">    url=<span class="string">&quot;https://github.com/you/my_project&quot;</span>,</span><br><span class="line">    packages=find_packages(where=<span class="string">&quot;src&quot;</span>),  <span class="comment"># 自动发现包</span></span><br><span class="line">    package_dir=&#123;<span class="string">&quot;&quot;</span>: <span class="string">&quot;src&quot;</span>&#125;,             <span class="comment"># 包位置</span></span><br><span class="line">    install_requires=[                   <span class="comment"># 依赖声明</span></span><br><span class="line">        <span class="string">&quot;requests&gt;=2.25.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;numpy&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    extras_require=&#123;                     <span class="comment"># 可选依赖组</span></span><br><span class="line">        <span class="string">&quot;dev&quot;</span>: [<span class="string">&quot;pytest&quot;</span>, <span class="string">&quot;flake8&quot;</span>],</span><br><span class="line">        <span class="string">&quot;plot&quot;</span>: [<span class="string">&quot;matplotlib&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    classifiers=[                        <span class="comment"># PyPI 分类器</span></span><br><span class="line">        <span class="string">&quot;Programming Language :: Python :: 3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;License :: OSI Approved :: MIT License&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Operating System :: OS Independent&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    python_requires=<span class="string">&quot;&gt;=3.6&quot;</span>,            <span class="comment"># Python 版本要求</span></span><br><span class="line">    entry_points=&#123;                       <span class="comment"># 命令行入口点</span></span><br><span class="line">        <span class="string">&quot;console_scripts&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;mycli=my_project.cli:main&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    include_package_data=<span class="literal">True</span>,          <span class="comment"># 包含数据文件</span></span><br><span class="line">    package_data=&#123;<span class="string">&quot;my_project&quot;</span>: [<span class="string">&quot;data/*.json&quot;</span>]&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="2-setup-cfg-声明式配置（推荐）"><a href="#2-setup-cfg-声明式配置（推荐）" class="headerlink" title="2. setup.cfg - 声明式配置（推荐）"></a>2. <code>setup.cfg</code> - 声明式配置（推荐）</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[metadata]</span></span><br><span class="line"><span class="attr">name</span> = my_project</span><br><span class="line"><span class="attr">version</span> = attr: my_project.__version__</span><br><span class="line"><span class="attr">author</span> = Your Name</span><br><span class="line"><span class="attr">author_email</span> = your@email.com</span><br><span class="line"><span class="attr">description</span> = Project description</span><br><span class="line"><span class="attr">long_description</span> = file: README.md</span><br><span class="line"><span class="attr">long_description_content_type</span> = text/markdown</span><br><span class="line"><span class="attr">url</span> = https://github.com/you/my_project</span><br><span class="line"><span class="attr">license</span> = MIT</span><br><span class="line"><span class="attr">license_file</span> = LICENSE.txt</span><br><span class="line"><span class="attr">classifiers</span> =</span><br><span class="line">    Programming Language :: Python :: 3</span><br><span class="line">    License :: OSI Approved :: MIT License</span><br><span class="line"></span><br><span class="line"><span class="section">[options]</span></span><br><span class="line"><span class="attr">package_dir</span> =</span><br><span class="line">    = src</span><br><span class="line"><span class="attr">packages</span> = find:</span><br><span class="line"><span class="attr">install_requires</span> =</span><br><span class="line">    requests&gt;=2.25.1</span><br><span class="line">    numpy</span><br><span class="line"><span class="attr">python_requires</span> = &gt;=<span class="number">3.6</span></span><br><span class="line"><span class="attr">include_package_data</span> = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="section">[options.packages.find]</span></span><br><span class="line"><span class="attr">where</span> = src</span><br><span class="line"></span><br><span class="line"><span class="section">[options.extras_require]</span></span><br><span class="line"><span class="attr">dev</span> = pytest<span class="comment">; flake8</span></span><br><span class="line"><span class="attr">plot</span> = matplotlib</span><br><span class="line"></span><br><span class="line"><span class="section">[options.entry_points]</span></span><br><span class="line"><span class="attr">console_scripts</span> =</span><br><span class="line">    <span class="attr">mycli</span> = my_project.cli:main</span><br></pre></td></tr></table></figure><h3 id="3-pyproject-toml-现代构建配置（PEP-517-518）"><a href="#3-pyproject-toml-现代构建配置（PEP-517-518）" class="headerlink" title="3. pyproject.toml - 现代构建配置（PEP 517&#x2F;518）"></a>3. <code>pyproject.toml</code> - 现代构建配置（PEP 517&#x2F;518）</h3><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[build-system]</span></span><br><span class="line"><span class="attr">requires</span> = [<span class="string">&quot;setuptools&gt;=61.0&quot;</span>, <span class="string">&quot;wheel&quot;</span>]</span><br><span class="line"><span class="attr">build-backend</span> = <span class="string">&quot;setuptools.build_meta&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[project]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;my_project&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line"><span class="attr">authors</span> = [</span><br><span class="line">    &#123;name = <span class="string">&quot;Your Name&quot;</span>, email = <span class="string">&quot;your@email.com&quot;</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="attr">description</span> = <span class="string">&quot;Project description&quot;</span></span><br><span class="line"><span class="attr">readme</span> = <span class="string">&quot;README.md&quot;</span></span><br><span class="line"><span class="attr">requires-python</span> = <span class="string">&quot;&gt;=3.6&quot;</span></span><br><span class="line"><span class="attr">license</span> = &#123;text = <span class="string">&quot;MIT&quot;</span>&#125;</span><br><span class="line"><span class="attr">classifiers</span> = [</span><br><span class="line">    <span class="string">&quot;Programming Language :: Python :: 3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;License :: OSI Approved :: MIT License&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="attr">dependencies</span> = [</span><br><span class="line">    <span class="string">&quot;requests&gt;=2.25.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;numpy&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="section">[project.optional-dependencies]</span></span><br><span class="line"><span class="attr">dev</span> = [<span class="string">&quot;pytest&quot;</span>, <span class="string">&quot;flake8&quot;</span>]</span><br><span class="line"><span class="attr">plot</span> = [<span class="string">&quot;matplotlib&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="section">[project.scripts]</span></span><br><span class="line"><span class="attr">mycli</span> = <span class="string">&quot;my_project.cli:main&quot;</span></span><br></pre></td></tr></table></figure><h2 id="关键功能详解"><a href="#关键功能详解" class="headerlink" title="关键功能详解"></a>关键功能详解</h2><h3 id="1-包发现与组织"><a href="#1-包发现与组织" class="headerlink" title="1. 包发现与组织"></a>1. 包发现与组织</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自动发现所有包</span></span><br><span class="line">packages = find_packages(where=<span class="string">&quot;src&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含指定包</span></span><br><span class="line">packages = [<span class="string">&quot;my_pkg&quot;</span>, <span class="string">&quot;my_pkg.subpkg&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命名空间包</span></span><br><span class="line">packages = find_namespace_packages(include=[<span class="string">&quot;my_namespace.*&quot;</span>])</span><br></pre></td></tr></table></figure><h3 id="2-依赖管理最佳实践"><a href="#2-依赖管理最佳实践" class="headerlink" title="2. 依赖管理最佳实践"></a>2. 依赖管理最佳实践</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">install_requires = [</span><br><span class="line">    <span class="comment"># 基本要求</span></span><br><span class="line">    <span class="string">&quot;requests&gt;=2.25.1&quot;</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 版本约束示例</span></span><br><span class="line">    <span class="string">&quot;numpy&gt;=1.18; python_version&gt;&#x27;3.6&#x27;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;numpy&gt;=1.16; python_version&lt;=&#x27;3.6&#x27;&quot;</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 环境标记</span></span><br><span class="line">    <span class="string">&quot;pywin32 &gt;= 1.0; platform_system==&#x27;Windows&#x27;&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">extras_require = &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: [<span class="string">&quot;pytest&quot;</span>, <span class="string">&quot;pytest-cov&quot;</span>],</span><br><span class="line">    <span class="string">&quot;docs&quot;</span>: [<span class="string">&quot;sphinx&quot;</span>, <span class="string">&quot;sphinx-rtd-theme&quot;</span>],</span><br><span class="line">    <span class="string">&quot;all&quot;</span>: [<span class="string">&quot;pandas&quot;</span>, <span class="string">&quot;matplotlib&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-入口点机制"><a href="#3-入口点机制" class="headerlink" title="3. 入口点机制"></a>3. 入口点机制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">entry_points = &#123;</span><br><span class="line">    # 命令行工具</span><br><span class="line">    &quot;console_scripts&quot;: [</span><br><span class="line">        &quot;mycli = my_pkg.cli:main&quot;</span><br><span class="line">    ],</span><br><span class="line">    </span><br><span class="line">    # GUI 应用</span><br><span class="line">    &quot;gui_scripts&quot;: [</span><br><span class="line">        &quot;myapp = my_pkg.gui:launch&quot;</span><br><span class="line">    ],</span><br><span class="line">    </span><br><span class="line">    # 插件系统</span><br><span class="line">    &quot;my_framework.plugins&quot;: [</span><br><span class="line">        &quot;csv_import = my_pkg.plugins.csv:CSVImporter&quot;,</span><br><span class="line">        &quot;json_export = my_pkg.plugins.json:JSONExporter&quot;</span><br><span class="line">    ],</span><br><span class="line">    </span><br><span class="line">    # 测试框架集成</span><br><span class="line">    &quot;pytest11&quot;: [</span><br><span class="line">        &quot;myplugin = my_pkg.pytest_plugin&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-数据文件与资源管理"><a href="#4-数据文件与资源管理" class="headerlink" title="4. 数据文件与资源管理"></a>4. 数据文件与资源管理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 包含包内数据文件</span></span><br><span class="line">package_data = &#123;</span><br><span class="line">    <span class="string">&quot;my_pkg&quot;</span>: [<span class="string">&quot;data/*.csv&quot;</span>, <span class="string">&quot;templates/*.html&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含项目级数据文件</span></span><br><span class="line">data_files = [</span><br><span class="line">    (<span class="string">&quot;config&quot;</span>, [<span class="string">&quot;conf/app.cfg&quot;</span>]),</span><br><span class="line">    (<span class="string">&quot;/etc/myapp&quot;</span>, [<span class="string">&quot;system/myapp.conf&quot;</span>]),</span><br><span class="line">    (<span class="string">&quot;share/icons&quot;</span>, [<span class="string">&quot;icons/app_icon.png&quot;</span>])</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用MANIFEST.in控制源码分发内容</span></span><br><span class="line">include_package_data = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="工作流程与命令"><a href="#工作流程与命令" class="headerlink" title="工作流程与命令"></a>工作流程与命令</h2><h3 id="1-开发模式安装"><a href="#1-开发模式安装" class="headerlink" title="1. 开发模式安装"></a>1. 开发模式安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可编辑安装（代码变更实时生效）</span></span><br><span class="line">pip install -e .</span><br></pre></td></tr></table></figure><h3 id="2-构建分发包"><a href="#2-构建分发包" class="headerlink" title="2. 构建分发包"></a>2. 构建分发包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装构建工具</span></span><br><span class="line">pip install build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建源码分发（sdist）和wheel包</span></span><br><span class="line">python -m build</span><br></pre></td></tr></table></figure><h3 id="3-发布到PyPI"><a href="#3-发布到PyPI" class="headerlink" title="3. 发布到PyPI"></a>3. 发布到PyPI</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装发布工具</span></span><br><span class="line">pip install twine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传到PyPI</span></span><br><span class="line">twine upload dist/*</span><br></pre></td></tr></table></figure><h3 id="4-常用开发命令"><a href="#4-常用开发命令" class="headerlink" title="4. 常用开发命令"></a>4. 常用开发命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装开发依赖</span></span><br><span class="line">pip install -e <span class="string">&quot;.[dev]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行测试</span></span><br><span class="line">pytest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成文档</span></span><br><span class="line">sphinx-build docs build/docs</span><br></pre></td></tr></table></figure><h2 id="现代打包最佳实践"><a href="#现代打包最佳实践" class="headerlink" title="现代打包最佳实践"></a>现代打包最佳实践</h2><h3 id="1-项目结构推荐"><a href="#1-项目结构推荐" class="headerlink" title="1. 项目结构推荐"></a>1. 项目结构推荐</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">my_project/</span><br><span class="line">├── src/</span><br><span class="line">│   └── my_pkg/</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       ├── module.py</span><br><span class="line">│       └── data/</span><br><span class="line">│           └── config.json</span><br><span class="line">├── tests/</span><br><span class="line">│   ├── test_module.py</span><br><span class="line">│   └── conftest.py</span><br><span class="line">├── docs/</span><br><span class="line">│   └── conf.py</span><br><span class="line">├── .gitignore</span><br><span class="line">├── pyproject.toml       # PEP 518 构建配置</span><br><span class="line">├── setup.cfg            # 主要配置</span><br><span class="line">├── setup.py             # 最小化（可选）</span><br><span class="line">├── LICENSE</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure><h3 id="2-版本管理策略"><a href="#2-版本管理策略" class="headerlink" title="2. 版本管理策略"></a>2. 版本管理策略</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 __init__.py 中定义版本</span></span><br><span class="line">__version__ = <span class="string">&quot;1.2.3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setup.cfg 中动态获取版本</span></span><br><span class="line">[metadata]</span><br><span class="line">version = attr: my_pkg.__version__</span><br></pre></td></tr></table></figure><h3 id="3-兼容性处理"><a href="#3-兼容性处理" class="headerlink" title="3. 兼容性处理"></a>3. 兼容性处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理不同Python版本的依赖</span></span><br><span class="line">install_requires = [</span><br><span class="line">    <span class="string">&quot;importlib_metadata; python_version&lt;&#x27;3.8&#x27;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typing_extensions; python_version&lt;&#x27;3.8&#x27;&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平台特定依赖</span></span><br><span class="line">extras_require = &#123;</span><br><span class="line">    <span class="string">&quot;:sys_platform == &#x27;win32&#x27;&quot;</span>: [<span class="string">&quot;pywin32&quot;</span>],</span><br><span class="line">    <span class="string">&quot;:sys_platform == &#x27;darwin&#x27;&quot;</span>: [<span class="string">&quot;pyobjc&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h2><h3 id="1-C扩展集成"><a href="#1-C扩展集成" class="headerlink" title="1. C扩展集成"></a>1. C扩展集成</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> Extension, setup</span><br><span class="line"></span><br><span class="line">module = Extension(</span><br><span class="line">    <span class="string">&quot;my_extension&quot;</span>,</span><br><span class="line">    sources=[<span class="string">&quot;src/extension.c&quot;</span>],</span><br><span class="line">    include_dirs=[<span class="string">&quot;include&quot;</span>],</span><br><span class="line">    libraries=[<span class="string">&quot;m&quot;</span>],  <span class="comment"># 链接数学库</span></span><br><span class="line">    define_macros=[(<span class="string">&quot;DEBUG&quot;</span>, <span class="string">&quot;1&quot;</span>)],</span><br><span class="line">    extra_compile_args=[<span class="string">&quot;-O3&quot;</span>]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    ...,</span><br><span class="line">    ext_modules=[module]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="2-自定义构建命令"><a href="#2-自定义构建命令" class="headerlink" title="2. 自定义构建命令"></a>2. 自定义构建命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</span><br><span class="line"><span class="keyword">from</span> setuptools.command.build_py <span class="keyword">import</span> build_py</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomBuild</span>(<span class="title class_ inherited__">build_py</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;自定义构建过程&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 预处理步骤</span></span><br><span class="line">        <span class="variable language_">self</span>.run_command(<span class="string">&quot;generate_protos&quot;</span>)</span><br><span class="line">        <span class="comment"># 标准构建</span></span><br><span class="line">        <span class="built_in">super</span>().run()</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    ...,</span><br><span class="line">    cmdclass=&#123;</span><br><span class="line">        <span class="string">&quot;build_py&quot;</span>: CustomBuild,</span><br><span class="line">        <span class="string">&quot;generate_protos&quot;</span>: GenerateProtosCommand</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="3-动态元数据"><a href="#3-动态元数据" class="headerlink" title="3. 动态元数据"></a>3. 动态元数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setup.py 中动态生成元数据</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_version</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;从文件读取版本号&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;src/my_pkg/__init__.py&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">match</span> = re.search(<span class="string">r&#x27;__version__ = [&quot;\&#x27;](.+)[&quot;\&#x27;]&#x27;</span>, f.read())</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    version=get_version(),</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="常见问题解决"><a href="#常见问题解决" class="headerlink" title="常见问题解决"></a>常见问题解决</h2><h3 id="1-包找不到问题"><a href="#1-包找不到问题" class="headerlink" title="1. 包找不到问题"></a>1. 包找不到问题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确设置包目录</span></span><br><span class="line">package_dir = &#123;<span class="string">&quot;&quot;</span>: <span class="string">&quot;src&quot;</span>&#125;</span><br><span class="line">packages = find_packages(where=<span class="string">&quot;src&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-数据文件未包含"><a href="#2-数据文件未包含" class="headerlink" title="2. 数据文件未包含"></a>2. 数据文件未包含</h3><p>ini</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setup.cfg 中启用包数据</span></span><br><span class="line"><span class="section">[options]</span></span><br><span class="line"><span class="attr">include_package_data</span> = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 MANIFEST.in</span></span><br><span class="line">include *.txt</span><br><span class="line">recursive-include docs *.rst</span><br></pre></td></tr></table></figure><h3 id="3-入口点不工作"><a href="#3-入口点不工作" class="headerlink" title="3. 入口点不工作"></a>3. 入口点不工作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确保函数路径正确</span></span><br><span class="line">entry_points = &#123;</span><br><span class="line">    <span class="string">&quot;console_scripts&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;mycli = my_pkg.cli:main_function&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生态系统整合"><a href="#生态系统整合" class="headerlink" title="生态系统整合"></a>生态系统整合</h2><ol><li><strong>与 pip 集成</strong>：Setuptools 是 pip 安装过程的核心组件</li><li><strong>与 virtualenv 协作</strong>：在隔离环境中构建和测试</li><li><strong>与 tox 配合</strong>：跨多Python版本测试</li><li><strong>与 cibuildwheel 集成</strong>：构建跨平台二进制wheel</li><li><strong>与 Sphinx 结合</strong>：自动生成文档</li></ol><h2 id="演进与未来"><a href="#演进与未来" class="headerlink" title="演进与未来"></a>演进与未来</h2><ul><li><strong>PEP 517&#x2F;518</strong>：现代构建系统标准</li><li><strong><code>pyproject.toml</code> 支持</strong>：逐步替代 setup.py</li><li><strong>静态元数据</strong>：减少动态执行需求</li><li><strong>构建隔离</strong>：更安全的构建环境</li></ul><h1 id="Jupyter-介绍"><a href="#Jupyter-介绍" class="headerlink" title="Jupyter 介绍"></a>Jupyter 介绍</h1><p>Jupyter 是一个开源的交互式计算环境，广泛应用于数据科学、机器学习、科学计算和教育领域。它支持多种编程语言（如 Python、R、Julia 等），允许用户以交互式的方式编写代码、运行实验、可视化数据并记录结果。以下是 Jupyter 的核心特性和应用场景的详细介绍。</p><hr><h2 id="核心组件-1"><a href="#核心组件-1" class="headerlink" title="核心组件"></a><strong>核心组件</strong></h2><h3 id="1-Jupyter-Notebook"><a href="#1-Jupyter-Notebook" class="headerlink" title="1. Jupyter Notebook"></a>1. <strong>Jupyter Notebook</strong></h3><ul><li><strong>交互式文档</strong>：以 <code>.ipynb</code> 文件格式存储，包含代码、文本（Markdown）、公式（LaTeX）、图表和多媒体内容。</li><li><strong>代码单元格（Code Cells）</strong>：逐行或分块执行代码，实时查看输出结果。</li><li><strong>Markdown 单元格</strong>：支持富文本格式，用于解释代码、记录实验步骤或撰写报告。</li><li><strong>输出可视化</strong>：直接在 Notebook 中显示图表（如 Matplotlib、Plotly）和交互式控件（如 ipywidgets）。</li></ul><h3 id="2-JupyterLab"><a href="#2-JupyterLab" class="headerlink" title="2. JupyterLab"></a>2. <strong>JupyterLab</strong></h3><ul><li><p>下一代界面</p><p>：基于 Web 的交互式开发环境（IDE），提供更强大的功能：</p><ul><li>多窗口布局：同时打开多个 Notebook、终端、文本编辑器等。</li><li>文件浏览器：直接管理项目文件和目录。</li><li>扩展支持：通过插件扩展功能（如调试器、Git 集成）。</li></ul></li><li><p><strong>兼容性</strong>：完全兼容 Jupyter Notebook，支持所有 Notebook 文件。</p></li></ul><h3 id="3-Jupyter-Kernel"><a href="#3-Jupyter-Kernel" class="headerlink" title="3. Jupyter Kernel"></a>3. <strong>Jupyter Kernel</strong></h3><ul><li><p>计算引擎</p><p>：负责执行代码的核心组件，支持多种编程语言：</p><ul><li><strong>IPython Kernel</strong>：Python 的默认内核。</li><li><strong>IRKernel</strong>：R 语言支持。</li><li><strong>IJulia</strong>：Julia 语言支持。</li><li><strong>其他内核</strong>：如 Bash、Scala、Go 等。</li></ul></li></ul><hr><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a><strong>主要功能</strong></h2><h3 id="1-交互式计算"><a href="#1-交互式计算" class="headerlink" title="1. 交互式计算"></a>1. <strong>交互式计算</strong></h3><ul><li><strong>实时反馈</strong>：代码单元格执行后立即显示结果，适合快速迭代和调试。</li><li><strong>魔法命令（Magic Commands）</strong>：IPython 提供的特殊命令（如 <code>%timeit</code> 测量代码性能）。</li></ul><h3 id="2-数据可视化"><a href="#2-数据可视化" class="headerlink" title="2. 数据可视化"></a>2. <strong>数据可视化</strong></h3><ul><li><strong>静态图表</strong>：通过 Matplotlib、Seaborn 等库生成。</li><li><strong>交互式图表</strong>：支持 Plotly、Bokeh 等库，允许用户缩放、平移和筛选数据。</li></ul><h3 id="3-协作与分享"><a href="#3-协作与分享" class="headerlink" title="3. 协作与分享"></a>3. <strong>协作与分享</strong></h3><ul><li><strong>Notebook 导出</strong>：支持导出为 HTML、PDF、LaTeX、Python 脚本等格式。</li><li><strong>在线共享</strong>：通过 JupyterHub 或平台（如 Google Colab、Binder）共享 Notebook。</li><li><strong>版本控制</strong>：与 Git 集成，方便团队协作和代码管理。</li></ul><h3 id="4-教育与研究"><a href="#4-教育与研究" class="headerlink" title="4. 教育与研究"></a>4. <strong>教育与研究</strong></h3><ul><li><strong>教学工具</strong>：通过 Markdown 单元格编写教程，结合代码示例和可视化。</li><li><strong>实验记录</strong>：记录实验步骤、参数和结果，方便复现和分享。</li></ul><hr><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a><strong>应用场景</strong></h2><h3 id="1-数据科学"><a href="#1-数据科学" class="headerlink" title="1. 数据科学"></a>1. <strong>数据科学</strong></h3><ul><li>数据清洗与探索性分析（EDA）。</li><li>机器学习模型训练与评估。</li><li>结果可视化与报告生成。</li></ul><h3 id="2-科学计算"><a href="#2-科学计算" class="headerlink" title="2. 科学计算"></a>2. <strong>科学计算</strong></h3><ul><li>数值模拟与算法开发。</li><li>科学实验数据的分析与可视化。</li></ul><h3 id="3-教育与培训"><a href="#3-教育与培训" class="headerlink" title="3. 教育与培训"></a>3. <strong>教育与培训</strong></h3><ul><li>编程教学（如 Python、R 入门）。</li><li>数据科学课程实践。</li></ul><h3 id="4-技术文档"><a href="#4-技术文档" class="headerlink" title="4. 技术文档"></a>4. <strong>技术文档</strong></h3><ul><li>编写技术文档或教程，结合代码示例和解释。</li></ul><hr><h2 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a><strong>安装与使用</strong></h2><h3 id="1-安装-Jupyter"><a href="#1-安装-Jupyter" class="headerlink" title="1. 安装 Jupyter"></a>1. <strong>安装 Jupyter</strong></h3><ul><li><p>通过 pip 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line">pip install notebook</span><br></pre></td></tr></table></figure></li><li><p>通过 conda 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line">conda install -c conda-forge notebook</span><br></pre></td></tr></table></figure></li><li><p>安装 JupyterLab</p><p>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line">pip install jupyterlab</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-启动-Jupyter"><a href="#2-启动-Jupyter" class="headerlink" title="2. 启动 Jupyter"></a>2. <strong>启动 Jupyter</strong></h3><ul><li><p>启动 Notebook</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure></li><li><p>启动 JupyterLab</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line">jupyter lab</span><br></pre></td></tr></table></figure></li><li><p>默认会在浏览器中打开 <code>http://localhost:8888</code>。</p></li></ul><h3 id="3-创建-Notebook"><a href="#3-创建-Notebook" class="headerlink" title="3. 创建 Notebook"></a>3. <strong>创建 Notebook</strong></h3><ul><li>在 Jupyter 界面中，点击 <strong>New</strong> → <strong>Python 3</strong>（或其他内核）创建新 Notebook。</li></ul><hr><h2 id="高级功能-1"><a href="#高级功能-1" class="headerlink" title="高级功能"></a><strong>高级功能</strong></h2><h3 id="1-JupyterHub"><a href="#1-JupyterHub" class="headerlink" title="1. JupyterHub"></a>1. <strong>JupyterHub</strong></h3><ul><li><strong>多用户支持</strong>：允许多个用户同时使用 Jupyter Notebook，适合教育机构或企业。</li><li><strong>部署方式</strong>：可通过 Docker、Kubernetes 等容器化技术部署。</li></ul><h3 id="2-Binder"><a href="#2-Binder" class="headerlink" title="2. Binder"></a>2. <strong>Binder</strong></h3><ul><li><strong>免费在线环境</strong>：将 GitHub 仓库中的 Notebook 直接转换为可交互的在线环境。</li><li>示例：访问 <a href="https://mybinder.org/">mybinder.org</a> 并输入仓库 URL。</li></ul><h3 id="3-扩展与插件"><a href="#3-扩展与插件" class="headerlink" title="3. 扩展与插件"></a>3. <strong>扩展与插件</strong></h3><ul><li><strong>JupyterLab 扩展</strong>：如调试器、Git 集成、表格编辑器等。</li><li><strong>Notebook 扩展</strong>：如代码折叠、目录生成等。</li></ul><hr><h2 id="与其他工具的集成"><a href="#与其他工具的集成" class="headerlink" title="与其他工具的集成"></a><strong>与其他工具的集成</strong></h2><h3 id="1-与-Git-集成"><a href="#1-与-Git-集成" class="headerlink" title="1. 与 Git 集成"></a>1. <strong>与 Git 集成</strong></h3><ul><li>通过 <code>nbdime</code> 工具比较和合并 Notebook 版本。</li><li>在 JupyterLab 中直接使用 Git 插件。</li></ul><h3 id="2-与云平台集成"><a href="#2-与云平台集成" class="headerlink" title="2. 与云平台集成"></a>2. <strong>与云平台集成</strong></h3><ul><li><strong>Google Colab</strong>：免费在线 Jupyter 环境，支持 GPU&#x2F;TPU。</li><li><strong>AWS SageMaker</strong>：托管 Jupyter Notebook，支持大规模计算。</li></ul><h3 id="3-与大数据工具集成"><a href="#3-与大数据工具集成" class="headerlink" title="3. 与大数据工具集成"></a>3. <strong>与大数据工具集成</strong></h3><ul><li><strong>Spark</strong>：通过 PySpark 内核在 Jupyter 中运行 Spark 作业。</li><li><strong>Dask</strong>：用于并行计算，支持大规模数据处理。</li></ul><hr><h2 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a><strong>优缺点分析</strong></h2><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a><strong>优点</strong></h3><ol><li><strong>交互性强</strong>：适合快速迭代和实验。</li><li><strong>可视化丰富</strong>：支持多种图表和交互式控件。</li><li><strong>文档化</strong>：结合代码和文本，方便记录和分享。</li><li><strong>多语言支持</strong>：支持 Python、R、Julia 等多种语言。</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h3><ol><li><strong>性能问题</strong>：对于大规模数据处理，Notebook 可能不如脚本高效。</li><li><strong>版本控制困难</strong>：Notebook 文件是 JSON 格式，直接使用 Git 可能产生冲突。</li><li><strong>安全性</strong>：默认情况下，Jupyter 服务器可能暴露在公网，需注意配置。</li></ol><hr><h2 id="推荐使用场景"><a href="#推荐使用场景" class="headerlink" title="推荐使用场景"></a><strong>推荐使用场景</strong></h2><ol><li><strong>数据科学初学者</strong>：快速上手 Python 和数据分析。</li><li><strong>实验性项目</strong>：需要频繁调整参数和可视化结果。</li><li><strong>教学与培训</strong>：编写交互式教程。</li><li><strong>技术文档</strong>：结合代码示例和解释。</li></ol><hr><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>Jupyter 是一个功能强大且灵活的交互式计算环境，适合数据科学、科学计算和教育领域。通过 Jupyter Notebook 和 JupyterLab，用户可以以交互式的方式编写代码、可视化数据并记录结果。尽管存在一些性能和版本控制的挑战，但通过合理使用工具和最佳实践，Jupyter 可以显著提高工作效率和协作能力。</p><h3 id="推荐工具组合"><a href="#推荐工具组合" class="headerlink" title="推荐工具组合"></a><strong>推荐工具组合</strong></h3><ul><li><strong>本地开发</strong>：JupyterLab + 常用扩展（如 Git 集成、调试器）。</li><li><strong>在线协作</strong>：Google Colab 或 JupyterHub。</li><li><strong>大规模计算</strong>：结合 Spark&#x2F;Dask 或云平台（如 AWS SageMaker）。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7操作系统</title>
      <link href="/2025/05/16/CentOS7%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2025/05/16/CentOS7%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h1><h2 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h2><ol><li><p>linux的目录有且只有一个根目录 &#x2F;</p></li><li><p>linux的各个目录存放的内容的规划好的, 不用乱放文件</p></li><li><p>linux是以文件的形式管理我们的设备, 因此linux系统, 一切皆为文件</p></li><li><p>linux的各个目录下存放什么内容, 大家必须有一个认识</p></li><li><p>学习后, 你的脑海里应该有一棵linux目录树</p></li></ol><table><thead><tr><th>目录</th><th>功能</th><th>目录</th><th>功能</th></tr></thead><tbody><tr><td>&#x2F;</td><td>根目录系统的起点包含所有其他目录</td><td>&#x2F;opt</td><td>可选的第三方软件</td></tr><tr><td>&#x2F;bin</td><td>存放基本和系统级的可执行文件</td><td>&#x2F;proc</td><td>虚拟文件系统提供系统信息</td></tr><tr><td>&#x2F;boot</td><td>启动相关文件</td><td>&#x2F;root</td><td>root用户的主目录</td></tr><tr><td>&#x2F;dev</td><td>设备文件</td><td>&#x2F;run</td><td>运行时数据</td></tr><tr><td>&#x2F;etc</td><td>系统配置文件</td><td>&#x2F;tmp</td><td>临时文件</td></tr><tr><td>&#x2F;home</td><td>用户的主目录</td><td>&#x2F;usr</td><td>用户级应用程序和数据</td></tr><tr><td>&#x2F;lib</td><td>共享库文件</td><td>&#x2F;var</td><td>可变数据，如日志和缓存</td></tr><tr><td>&#x2F;mnt</td><td>挂载点</td><td></td><td></td></tr></tbody></table><h2 id="opt与-usr的区别"><a href="#opt与-usr的区别" class="headerlink" title="&#x2F;opt与&#x2F;usr的区别"></a>&#x2F;opt与&#x2F;usr的区别</h2><p>在 Linux 系统中，<code>/opt</code> 和 <code>/usr</code> 是两个重要的目录，但它们的作用和使用场景有显著的区别。以下是它们的详细对比：</p><hr><h3 id="1-usr-目录"><a href="#1-usr-目录" class="headerlink" title="1. /usr 目录"></a><strong>1. <code>/usr</code> 目录</strong></h3><ul><li><strong>作用</strong>：<ul><li><code>/usr</code>（Unix System Resources）是 <strong>系统级软件资源</strong> 的标准存放目录，包含大多数用户应用程序和系统工具。</li><li>由 <strong>系统包管理器</strong>（如 <code>apt</code>、<code>yum</code>、<code>dnf</code>）安装的软件通常会放在这里。</li><li>遵循 <strong>Filesystem Hierarchy Standard (FHS)</strong> 规范，结构严格，按文件类型分目录。</li></ul></li><li><strong>典型子目录</strong>：<ul><li><code>/usr/bin</code>：用户可执行文件（如 <code>ls</code>、<code>gcc</code>）。</li><li><code>/usr/lib</code>：共享库文件（<code>.so</code> 文件）。</li><li><code>/usr/share</code>：架构无关的共享数据（文档、图标、字体等）。</li><li><code>/usr/include</code>：头文件（用于开发）。</li><li><code>/usr/local</code>：用户手动编译安装的软件（与包管理器安装的软件隔离）。</li></ul></li><li><strong>特点</strong>：<ul><li><strong>系统级管理</strong>：由包管理器维护，更新或卸载软件时自动处理依赖。</li><li><strong>标准化结构</strong>：文件按类型分散到不同子目录（如二进制文件、库文件分开存放）。</li><li><strong>历史原因</strong>：早期 Unix 系统的核心目录，设计目标是共享、只读（可网络挂载）。</li></ul></li></ul><hr><h3 id="2-opt-目录"><a href="#2-opt-目录" class="headerlink" title="2. /opt 目录"></a><strong>2. <code>/opt</code> 目录</strong></h3><ul><li><strong>作用</strong>：<ul><li><code>/opt</code>（Optional）用于安装 <strong>第三方独立软件包</strong> 或 <strong>非系统集成的应用程序</strong>。</li><li>通常存放那些 <strong>不通过系统包管理器安装</strong> 的软件（如商业软件、自行编译的大型应用）。</li><li>每个软件在 <code>/opt</code> 下有自己的独立子目录（如 <code>/opt/google/chrome</code>）。</li></ul></li><li><strong>典型内容</strong>：<ul><li>第三方软件（如 MATLAB、IntelliJ IDEA、Google Chrome）。</li><li>某些容器化工具（如早期 Docker 版本）或闭源软件。</li></ul></li><li><strong>特点</strong>：<ul><li><strong>独立存放</strong>：每个软件的所有文件（二进制、库、数据）集中在一个子目录中。</li><li><strong>手动管理</strong>：安装和卸载通常需手动操作（如解压或运行安装脚本）。</li><li><strong>避免污染系统路径</strong>：与系统软件隔离，减少依赖冲突风险。</li></ul></li></ul><hr><h3 id="3-关键区别"><a href="#3-关键区别" class="headerlink" title="3. 关键区别"></a><strong>3. 关键区别</strong></h3><table><thead><tr><th align="left"><strong>对比项</strong></th><th align="left"><code>/usr</code></th><th align="left"><code>/opt</code></th></tr></thead><tbody><tr><td align="left"><strong>用途</strong></td><td align="left">系统级软件（包管理器安装）</td><td align="left">第三方独立软件（手动安装）</td></tr><tr><td align="left"><strong>结构</strong></td><td align="left">按文件类型分散到子目录</td><td align="left">每个软件独占一个子目录</td></tr><tr><td align="left"><strong>管理方式</strong></td><td align="left">包管理器自动管理</td><td align="left">手动维护（需用户干预）</td></tr><tr><td align="left"><strong>遵循 FHS</strong></td><td align="left">严格遵循</td><td align="left">允许灵活结构</td></tr><tr><td align="left"><strong>典型内容</strong></td><td align="left">系统工具、基础服务（如 <code>gcc</code>）</td><td align="left">商业软件、大型应用（如 IDEA）</td></tr></tbody></table><hr><h3 id="4-使用场景建议"><a href="#4-使用场景建议" class="headerlink" title="4. 使用场景建议"></a><strong>4. 使用场景建议</strong></h3><ul><li>**使用 <code>/usr</code>**：<ul><li>通过包管理器安装的软件（如 <code>apt install nginx</code>）。</li><li>需要系统级共享的库或工具（如开发工具链）。</li></ul></li><li>**使用 <code>/opt</code>**：<ul><li>手动安装的第三方软件（如下载 <code>.tar.gz</code> 解压到 <code>/opt</code>）。</li><li>希望独立管理、避免依赖冲突的软件（如多个版本共存）。</li></ul></li></ul><hr><h3 id="5-补充说明"><a href="#5-补充说明" class="headerlink" title="5. 补充说明"></a><strong>5. 补充说明</strong></h3><ul><li><strong><code>/usr/local</code> 与 <code>/opt</code> 的区别</strong>：<ul><li><code>/usr/local</code> 用于 <strong>用户手动编译安装的软件</strong>，结构模仿 <code>/usr</code>（如 <code>/usr/local/bin</code>）。</li><li><code>/opt</code> 更适用于 <strong>完全独立、自包含的软件包</strong>（所有文件集中在一个目录）。</li></ul></li><li><strong>环境变量</strong>：<ul><li>安装在 <code>/opt</code> 下的软件可能需要手动添加路径到 <code>PATH</code>（如 <code>/opt/myapp/bin</code>）。</li><li><code>/usr/bin</code> 默认在系统 <code>PATH</code> 中，无需额外配置。</li></ul></li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul><li><strong>系统原生软件、包管理器安装的软件 → <code>/usr</code></strong></li><li><strong>第三方独立软件、手动安装的大型应用 → <code>/opt</code></strong></li></ul><h1 id="用什么权限安装软件"><a href="#用什么权限安装软件" class="headerlink" title="用什么权限安装软件"></a>用什么权限安装软件</h1><h2 id="1-安装到系统级目录（需-root-权限）"><a href="#1-安装到系统级目录（需-root-权限）" class="headerlink" title="1. 安装到系统级目录（需 root 权限）"></a><strong>1. 安装到系统级目录（需 root 权限）</strong></h2><p>在 Linux 系统中，安装第三方软件时使用 <strong>root 用户</strong>还是<strong>普通用户</strong>取决于软件的安装位置、管理方式以及安全性需求。以下是详细分析和建议：</p><hr><p>如果要将软件安装到系统级目录（如 <code>/opt</code>、<code>/usr/local</code> 或 <code>/usr/bin</code>），通常需要 <strong>root 权限</strong>，因为这些目录默认属于 <code>root</code> 用户，普通用户无权修改。</p><h3 id="典型场景："><a href="#典型场景：" class="headerlink" title="典型场景："></a><strong>典型场景</strong>：</h3><ul><li><p><strong>通过包管理器安装</strong>：例如 <code>apt</code>、<code>yum</code>、<code>dnf</code> 等工具会修改系统目录，必须使用 <code>sudo</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install nginx     <span class="comment"># Debian/Ubuntu</span></span><br><span class="line"><span class="built_in">sudo</span> dnf install docker    <span class="comment"># Fedora/CentOS</span></span><br></pre></td></tr></table></figure></li><li><p>**手动安装到 <code>/opt</code> 或 <code>/usr/local</code>**：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：将软件包解压到 /opt</span></span><br><span class="line"><span class="built_in">sudo</span> tar -xzf myapp.tar.gz -C /opt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：编译安装到 /usr/local</span></span><br><span class="line">./configure --prefix=/usr/local</span><br><span class="line">make</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure></li></ul><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a><strong>特点</strong>：</h3><ul><li><strong>系统级共享</strong>：所有用户均可使用安装的软件。</li><li><strong>依赖集中管理</strong>：库文件、配置文件等集中存放，便于系统维护。</li><li><strong>风险提示</strong>：使用 <code>root</code> 权限需谨慎，避免安装不可信来源的软件。</li></ul><hr><h2 id="2-安装到用户目录（无需-root-权限）"><a href="#2-安装到用户目录（无需-root-权限）" class="headerlink" title="2. 安装到用户目录（无需 root 权限）"></a><strong>2. 安装到用户目录（无需 root 权限）</strong></h2><p>如果软件支持安装到用户主目录（如 <code>~/apps</code>、<code>~/.local</code> 或 <code>~/bin</code>），则可以使用<strong>普通用户权限</strong>，无需 <code>sudo</code>。</p><p><strong>典型场景</strong>：</p><ul><li><p><strong>独立软件包</strong>：如 Python 的 <code>pip install --user</code>、Node.js 的 <code>npm install -g</code>（配合用户目录）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Python 包到用户目录 ~/.local</span></span><br><span class="line">  pip install --user requests</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 安装 Node.js 全局工具到用户目录</span></span><br><span class="line"></span><br><span class="line">  ```bash</span><br><span class="line">npm install -g typescript --prefix ~/.npm-global</span><br><span class="line">- **手动解压到主目录**：</span><br><span class="line"><span class="comment"># 将软件包解压到用户目录</span></span><br><span class="line">  tar -xzf myapp.tar.gz -C ~/apps</span><br></pre></td></tr></table></figure></li></ul><h3 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a><strong>特点</strong>：</h3><ul><li><strong>用户隔离</strong>：软件仅对当前用户可用，避免影响其他用户。</li><li><strong>无需管理员权限</strong>：适合没有 <code>sudo</code> 权限的场景（如共享服务器）。</li><li><strong>灵活性高</strong>：可自由管理版本或卸载，不污染系统目录。</li></ul><hr><h2 id="3-选择-root-还是普通用户？"><a href="#3-选择-root-还是普通用户？" class="headerlink" title="3. 选择 root 还是普通用户？"></a><strong>3. 选择 root 还是普通用户？</strong></h2><table><thead><tr><th align="left"><strong>场景</strong></th><th align="left"><strong>推荐方式</strong></th><th align="left"><strong>示例</strong></th></tr></thead><tbody><tr><td align="left">通过包管理器安装系统工具</td><td align="left"><code>sudo</code> + root 权限</td><td align="left"><code>sudo apt install vim</code></td></tr><tr><td align="left">手动安装到 <code>/opt</code> 或系统目录</td><td align="left"><code>sudo</code> + root 权限</td><td align="left"><code>sudo ./install.sh</code></td></tr><tr><td align="left">开发工具链或全局服务（如 Docker）</td><td align="left"><code>sudo</code> + root 权限</td><td align="left"><code>sudo snap install docker</code></td></tr><tr><td align="left">用户级应用（如 Python 包）</td><td align="left">普通用户权限</td><td align="left"><code>pip install --user pandas</code></td></tr><tr><td align="left">测试或临时使用</td><td align="left">普通用户权限（用户目录）</td><td align="left"><code>./myapp --install-dir ~/apps</code></td></tr></tbody></table><hr><h2 id="4-安全性建议"><a href="#4-安全性建议" class="headerlink" title="4. 安全性建议"></a><strong>4. 安全性建议</strong></h2><ul><li><strong>最小权限原则</strong>：尽量使用普通用户权限安装，仅在必要时使用 <code>sudo</code>。</li><li><strong>验证软件来源</strong>：确保第三方软件来自可信渠道，避免提权操作引入恶意代码。</li><li><strong>隔离环境</strong>：对开发或测试场景，优先使用容器（Docker）或虚拟环境（Python venv、Node.js nvm）。</li></ul><hr><h2 id="5-常见问题解决"><a href="#5-常见问题解决" class="headerlink" title="5. 常见问题解决"></a><strong>5. 常见问题解决</strong></h2><h3 id="权限被拒绝（Permission-Denied）"><a href="#权限被拒绝（Permission-Denied）" class="headerlink" title="权限被拒绝（Permission Denied）"></a><strong>权限被拒绝（Permission Denied）</strong></h3><ul><li><strong>问题</strong>：尝试安装到系统目录时提示权限不足。</li><li><strong>解决</strong>：使用 <code>sudo</code> 提升权限，或更换安装目录到用户主目录。</li></ul><h3 id="安装后命令未找到（Command-Not-Found）"><a href="#安装后命令未找到（Command-Not-Found）" class="headerlink" title="安装后命令未找到（Command Not Found）"></a><strong>安装后命令未找到（Command Not Found）</strong></h3><ul><li><p><strong>问题</strong>：安装到用户目录的软件无法直接运行。</p></li><li><p><strong>解决</strong>：将用户目录的 <code>bin</code> 路径添加到 <code>PATH</code> 环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例如，将 ~/.local/bin 添加到 PATH</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$HOME/.local/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><strong>总结</strong></h2><ul><li><strong>需要系统级安装 → 使用 <code>sudo</code> 或 root 用户</strong>（如 <code>/opt</code>、<code>/usr/local</code>）。</li><li><strong>仅限当前用户使用 → 普通用户权限安装到主目录</strong>。</li><li><strong>优先选择安全的方式</strong>：避免滥用 <code>root</code>，尽量隔离用户级应用。</li></ul><table><thead><tr><th><strong>命令</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>shutdown –h now</td><td>立该进行关机</td></tr><tr><td>shutdown -h 1</td><td>“hello, 1 分钟后会关机了”</td></tr><tr><td>shutdown –r now</td><td>现在重新启动计算机</td></tr><tr><td>halt f</td><td>关机命令</td></tr><tr><td>reboot</td><td>现在重新启动计算机</td></tr><tr><td>sync</td><td>把内存的数据同步到磁盘.</td></tr><tr><td>init 0</td><td>立该进行关机</td></tr><tr><td>init 6</td><td>现在重新启动计算机</td></tr><tr><td>init 1</td><td>单用户模式。仅启动最基本的系统服务（无网络、无多用户登录），通常用于系统修复（如密码找回、文件系统检查等），无需输入密码即可登录 root 账户。</td></tr><tr><td>init 2</td><td>多用户模式。启动多用户环境，但不加载网络文件系统（NFS）服务，部分发行版中可能与<code>init 3</code>功能接近（需结合具体系统配置）。</td></tr><tr><td>init 3</td><td>完全多用户模式（文本界面）。启动完整的多用户环境，支持网络服务，但默认进入文本命令行界面（无图形桌面）。</td></tr><tr><td>init 5</td><td>多用户模式（图形界面）。在<code>init 3</code>的基础上，额外启动图形桌面环境（如 GNOME、KDE 等），默认进入图形登录界面。</td></tr></tbody></table><h2 id="cd-切换到指定目录"><a href="#cd-切换到指定目录" class="headerlink" title="cd 切换到指定目录"></a><strong>cd</strong> <strong>切换到指定目录</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~ 或者<span class="built_in">cd</span> 回到自己的家目录</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../ 回到当前目录的上一级目录</span><br></pre></td></tr></table></figure><h2 id="pwd-现在所在的目录位置"><a href="#pwd-现在所在的目录位置" class="headerlink" title="pwd 现在所在的目录位置"></a><strong>pwd</strong> <strong>现在所在的目录位置</strong></h2><h3 id="ls查看内容"><a href="#ls查看内容" class="headerlink" title="ls查看内容"></a><strong>ls</strong>查看内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -a all,显示全部包括隐藏文件(隐藏文件以.开头)</span><br><span class="line"><span class="built_in">ls</span> -l 等于 ll 显示长格式属性</span><br><span class="line"><span class="built_in">ls</span> -r 反向排序</span><br><span class="line"><span class="built_in">ls</span> -S 按照占磁盘大小从大到小排序</span><br><span class="line"><span class="built_in">ls</span> -t 以时间排序（由新到旧）</span><br><span class="line"><span class="built_in">ls</span> -lh human显示可读的文件大小</span><br><span class="line">指定路径查看</span><br><span class="line"><span class="built_in">ls</span> /home/test</span><br></pre></td></tr></table></figure><h2 id="mkdir-创建目录"><a href="#mkdir-创建目录" class="headerlink" title="mkdir 创建目录"></a><strong>mkdir</strong> <strong>创建目录</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> a 创建一个目录 <span class="built_in">mkdir</span> b c 同时创建多个目录</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p d/e 创建多级目录或称为递归创建</span><br></pre></td></tr></table></figure><h2 id="touch-创建空文件"><a href="#touch-创建空文件" class="headerlink" title="touch 创建空文件"></a><strong>touch</strong> <strong>创建空文件</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> name.txt</span><br><span class="line"><span class="built_in">touch</span> &#123;1..5&#125;.txt</span><br><span class="line"></span><br><span class="line">通配符---配合文件名及目录使用</span><br><span class="line"></span><br><span class="line">？匹配一个字符 f?.txt</span><br><span class="line">\* 匹配全部字符 *.txt</span><br><span class="line"></span><br><span class="line">&#123;1..10&#125; 1到10</span><br><span class="line">&#123;a..z&#125; a b c ...z</span><br><span class="line">&#123;A..Z&#125; A B C .....Z</span><br></pre></td></tr></table></figure><p>##<strong>rm</strong> <strong>删除文件或目录</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">可以删除一个目录中的一个或多个文件或目录及其下属的所有文件及其子目录均删除掉;</span><br><span class="line"></span><br><span class="line">对于链接文件，只是删除整个链接文件，而原有文件保持不变</span><br><span class="line"></span><br><span class="line">-f：强制删除；</span><br><span class="line">-r：递归处理，将指定目录下的所有文件与子目录一并处理（删目录）；</span><br><span class="line"><span class="built_in">rm</span> t.txt 删除文件</span><br><span class="line"><span class="built_in">rm</span> -r a 删除a目录（文件夹）及其里面的文件及子目录</span><br><span class="line"><span class="built_in">rm</span> -rf * 强制删除文件夹下面的子目录和文件</span><br><span class="line"><span class="built_in">rm</span> -rf q*强制删除以q开头的文件夹及下面的子目录和文件</span><br></pre></td></tr></table></figure><h2 id="mv-移动文件和目录-或者重命名"><a href="#mv-移动文件和目录-或者重命名" class="headerlink" title="mv 移动文件和目录, 或者重命名"></a><strong>mv</strong> <strong>移动文件和目录</strong>, <strong>或者重命名</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> a b</span><br><span class="line"><span class="built_in">mv</span> a c/</span><br><span class="line"><span class="built_in">mv</span> a.txt b.txt</span><br><span class="line"><span class="built_in">mv</span> b.txt ../c.txt</span><br></pre></td></tr></table></figure><h2 id="cp-拷贝文件到指定目录"><a href="#cp-拷贝文件到指定目录" class="headerlink" title="cp 拷贝文件到指定目录"></a><strong>cp</strong> <strong>拷贝文件到指定目录</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r 递归拷贝目录（复制包括所有子文件，必须使用）</span><br><span class="line"><span class="built_in">cp</span> a.txt b/a.txt</span><br><span class="line"><span class="built_in">cp</span> a.txt b/b.txt</span><br><span class="line"><span class="built_in">cp</span> -r /root/a /root/b</span><br></pre></td></tr></table></figure><h2 id="ln-软连接-类似win快捷方式"><a href="#ln-软连接-类似win快捷方式" class="headerlink" title="ln 软连接,类似win快捷方式"></a><strong>ln</strong> <strong>软连接</strong>,<em>类似</em>win快捷方式</h2><h3 id="什么是软连接？"><a href="#什么是软连接？" class="headerlink" title="什么是软连接？"></a>什么是软连接？</h3><p>软连接是Linux系统上的另一个文件或目录。</p><p>这和 Windows 系统中的快捷方式有点类似，链接文件中记录的只是原始文件的路径，并不记录原始文件的内容。</p><p>例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/test</span><br><span class="line"><span class="built_in">ln</span> -s /home/test ceshi</span><br><span class="line"><span class="built_in">cd</span> ceshi</span><br></pre></td></tr></table></figure><h3 id="什么是硬链接？"><a href="#什么是硬链接？" class="headerlink" title="什么是硬链接？"></a>什么是硬链接？</h3><p>硬链接是原始文件的一个镜像副本。创建硬链接后，如果把原始文件删除，链接文件也不会受到影响，因为此时原始文件和链接文件互为镜像副本。</p><h2 id="vim-编辑文件"><a href="#vim-编辑文件" class="headerlink" title="vim 编辑文件"></a><strong>vim</strong> <strong>编辑文件</strong></h2><p><img src="/2025/05/16/CentOS7%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20250517184224613.png" alt="image-20250517184224613"></p><h3 id="进入一般模式后，可在键盘输入，实现删除、复制、粘贴。"><a href="#进入一般模式后，可在键盘输入，实现删除、复制、粘贴。" class="headerlink" title="进入一般模式后，可在键盘输入，实现删除、复制、粘贴。"></a><strong>进入一般模式后，可在键盘输入，实现删除、复制、粘贴。</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dd</span> 删除光标所在的行,且保存到剪贴板</span><br><span class="line">3dd 删除光标所在的三行,且保存到剪贴板</span><br><span class="line">yy复制光标所在的行</span><br><span class="line">4yy复制光标所在的连续4行</span><br><span class="line">p（小写） 将已复制的内容在光标的下一行粘贴</span><br><span class="line">P（大写）将已复制的内容在光标的上一行粘贴</span><br><span class="line">x,X：在一行字中，x 为向后删除一个字符（相当于[Del]键），X 为向前删除一个字符（相当于[Backspace]）也可5x等</span><br><span class="line">G光标快速定位到最后一行</span><br><span class="line">gg 光标快速定位到第一行</span><br><span class="line">u 撤销上一步操作</span><br></pre></td></tr></table></figure><h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a><strong>命令行模式</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">q 不保存退出 后面加！为强制退出</span><br><span class="line">wq 保存后退出 后面加！为强制保存后退出</span><br><span class="line">！强制执行（强制退出，强制保存）</span><br><span class="line">:<span class="built_in">set</span> nu 显示行号</span><br><span class="line">:<span class="built_in">set</span> nonu 取消行号</span><br><span class="line">:5 光标快读定位到第5行</span><br><span class="line">:nohl 去除高亮显示</span><br></pre></td></tr></table></figure><h3 id="查找："><a href="#查找：" class="headerlink" title="查找："></a><strong>查找：</strong></h3><p>（以下直接输入&#x2F;）</p><p>&#x2F;hello 查找字符串，按n向下搜索，按N向上搜索</p><h3 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a><strong>替换字符串</strong></h3><p>替换字符串命令的基本语法是 :[range]s&#x2F;⽬标字符串&#x2F;替换字符串&#x2F;[option]，其中range和option字段都可以缺省不填，间隔符除了&#x2F;还可以是其他的。</p><ul><li><p>range：表⽰搜索范围，默认表⽰当前⾏; 1,10表⽰从第1到第10⾏;</p></li><li><p>g 表示全局替换，有多少次替换多少次；无g 只替代每行第一个</p></li><li><p>s 表示替换</p></li></ul><p>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">:1,<span class="variable">$s</span>/nologin/88888/g</span><br><span class="line"></span><br><span class="line">:1,<span class="variable">$s</span>#nologin#88888#g</span><br><span class="line"></span><br><span class="line">把整个文件的nologin替换成888888</span><br><span class="line"></span><br><span class="line">:1,10s/nologin/88888/g</span><br><span class="line"></span><br><span class="line">把1到10行的nologin替换成888888</span><br></pre></td></tr></table></figure><h1 id="搜索查看查找类"><a href="#搜索查看查找类" class="headerlink" title="搜索查看查找类"></a>搜索查看查找类</h1><h2 id="find-从指定目录查找文件"><a href="#find-从指定目录查找文件" class="headerlink" title="find 从指定目录查找文件"></a><strong>find</strong> <strong>从指定目录查找文件</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-name &lt;查询方式&gt; 按照指定的文件名查找模式查找文件</span><br><span class="line">-mtime n 查找n天以前被修改过的所有文件。</span><br><span class="line">-<span class="built_in">exec</span>&lt;执行指令&gt;：假设find指令的回传值为True，就执行该指令；</span><br><span class="line">-size &lt;文件大小&gt; 按照指定的文件大小查找文件</span><br></pre></td></tr></table></figure><p>-exec 只能搭配find使用 </p><p>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">find /root -name <span class="string">&quot;*.pdf&quot;</span></span><br><span class="line">find /root -name <span class="string">&quot;*.pdf&quot;</span> -a -size +1M</span><br><span class="line">find /root -mtime +7 <span class="comment">#七天前被修改过的文件</span></span><br><span class="line">find /root -name <span class="string">&quot;*.sql&quot;</span> -<span class="built_in">exec</span> <span class="built_in">ls</span> -l &#123;&#125; \; <span class="comment">#查找文件并以ls -l形式显示</span></span><br><span class="line">find /root -name <span class="string">&quot;*.pdf&quot;</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> -f &#123;&#125; \;</span><br></pre></td></tr></table></figure><h3 id="head与tail查看行"><a href="#head与tail查看行" class="headerlink" title="head与tail查看行"></a><em>head与</em>tail查看行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">head</span> -n 文件名 （不加默认开头十行）</span><br><span class="line"><span class="built_in">tail</span> -n 文件名 （不加默认结尾十行）</span><br><span class="line"><span class="built_in">head</span> 3.txt</span><br><span class="line"><span class="built_in">tail</span> 3.txt</span><br><span class="line"><span class="built_in">head</span> -n +3 3.txt  <span class="comment">#只显示前三行</span></span><br><span class="line"><span class="built_in">tail</span> -n -3 3.txt  <span class="comment">#只显示后三行</span></span><br></pre></td></tr></table></figure><h2 id="cat查看内容"><a href="#cat查看内容" class="headerlink" title="cat查看内容"></a><strong>cat</strong>查看内容</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span>（英文全拼：concatenate）命令用于连接文件并打印到标准输出设备上。</span><br><span class="line">-n 显示行号包括空行</span><br><span class="line">-b 跳过空白行编号</span><br><span class="line">-s 将所有的连续的多个空行替换为一个空行（压缩成一个空行）</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> 1.<span class="built_in">log</span> 2.<span class="built_in">log</span></span><br><span class="line"><span class="built_in">cat</span> -sb test.log</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="more查看大内容"><a href="#more查看大内容" class="headerlink" title="more查看大内容"></a><strong>more</strong>查看大内容</h2><p>more 分屏查看文件（敲空格查看下一页）</p><h2 id="grep过滤查找"><a href="#grep过滤查找" class="headerlink" title="grep过滤查找"></a><strong>grep</strong>过滤查找</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">以行为单位进行查找，显示结果为满足的行</span><br><span class="line"></span><br><span class="line">-c 统计满足的行数</span><br><span class="line"></span><br><span class="line">-v 反转不包含</span><br><span class="line"></span><br><span class="line">grep <span class="string">&quot;p&quot;</span> 1.txt 单文件搜索包含p的行</span><br><span class="line"></span><br><span class="line">grep <span class="string">&quot;P&quot;</span> 1.txt b.txt 多文件搜索</span><br><span class="line"></span><br><span class="line">grep -v <span class="string">&quot;p&quot;</span> 1.txt 单文件搜索不包含p的行 </span><br><span class="line"></span><br><span class="line">grep -c <span class="string">&quot;p&quot;</span> 1.txt <span class="comment">#统计出现多少行</span></span><br><span class="line"></span><br><span class="line">grep <span class="string">&quot;n$&quot;</span> 1.txt <span class="comment">#现实以n结尾的行</span></span><br><span class="line"></span><br><span class="line">grep <span class="string">&quot;^n&quot;</span> 1.txt <span class="comment">#现实以n开头的行</span></span><br></pre></td></tr></table></figure><h2 id="history-查看已经执行过的历史命令"><a href="#history-查看已经执行过的历史命令" class="headerlink" title="history 查看已经执行过的历史命令"></a><strong>history</strong> <strong>查看已经执行过的历史命令</strong></h2><p>history</p><p>history 5 最近五个命令</p><h2 id="wc统计文件"><a href="#wc统计文件" class="headerlink" title="wc统计文件"></a><strong>wc</strong>统计文件</h2><p>查看文件的字节数 wc -c t2.txt</p><p>查看文件的行数 wc -l t2.txt</p><h2 id="du查看空间"><a href="#du查看空间" class="headerlink" title="du查看空间"></a><strong>du</strong>查看空间</h2><p>du -h 人性化方式（带单位）</p><p>du -s 只统计每个参数所占用空间总的大小</p><p>du -sh &#x2F;etc</p><h2 id="管道符号-配合命令使用"><a href="#管道符号-配合命令使用" class="headerlink" title="管道符号 | 配合命令使用"></a><strong>管道符号</strong> <strong>|</strong> <strong>配合命令使用</strong></h2><p>管道符 | 表示将前一个命令的处理结果输出传递给后面的命令处理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l | grep -c <span class="string">&quot;^d&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ls</span> -l | grep <span class="string">&quot;^d&quot;</span> | <span class="built_in">wc</span> -l</span><br><span class="line"></span><br><span class="line"><span class="built_in">history</span> | grep -c <span class="string">&quot;ls&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">history</span> | grep <span class="string">&quot;ls&quot;</span> | grep <span class="string">&quot;s$&quot;</span> &gt; ttt.txt</span><br></pre></td></tr></table></figure><h2 id="和-指令"><a href="#和-指令" class="headerlink" title="&gt; 和 &gt;&gt; 指令"></a><strong>&gt;</strong> <strong>和</strong> <strong>&gt;&gt;</strong> <strong>指令</strong></h2><p>&gt; 输出重定向(覆盖写), &gt;&gt; 追加（追加写）</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> a.txt b.txt &gt;&gt; ttt.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> a.txt b.txt | grep <span class="string">&quot;s&quot;</span> &gt;&gt; ttt.txt</span><br></pre></td></tr></table></figure><h2 id="输入重定向操作符”"><a href="#输入重定向操作符”" class="headerlink" title="输入重定向操作符”&lt;”"></a>输入重定向操作符”&lt;”</h2><p>在 Shell 编程中，<code>&lt;</code> 符号是 <strong>输入重定向操作符</strong>，它的核心作用是将某个文件或数据流的内容作为命令的标准输入（stdin）。以下是详细解析：</p><h3 id="一、基本作用"><a href="#一、基本作用" class="headerlink" title="一、基本作用"></a>一、基本作用</h3><p><strong>将文件内容作为命令的输入</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> &lt; filename</span><br></pre></td></tr></table></figure><ul><li><p><strong>示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt; file.txt   <span class="comment"># 将 file.txt 的内容传递给 cat 命令（效果等同于 cat file.txt）</span></span><br><span class="line"><span class="built_in">wc</span> -l &lt; data.log <span class="comment"># 统计 data.log 的行数</span></span><br></pre></td></tr></table></figure></li></ul><p>此时，<code>&lt;</code> 会打开文件 <code>filename</code>，并将其内容重定向到 <code>command</code> 的标准输入中。</p><h3 id="二、常见使用场景"><a href="#二、常见使用场景" class="headerlink" title="二、常见使用场景"></a>二、常见使用场景</h3><h4 id="1-替代管道符的输入"><a href="#1-替代管道符的输入" class="headerlink" title="1. 替代管道符的输入"></a>1. <strong>替代管道符的输入</strong></h4><p>当命令需要从文件而非键盘获取输入时：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将文件内容传递给需要 stdin 的命令</span></span><br><span class="line">grep <span class="string">&quot;error&quot;</span> &lt; server.log</span><br></pre></td></tr></table></figure><h4 id="2-Here-Document（文档内输入）"><a href="#2-Here-Document（文档内输入）" class="headerlink" title="2. Here Document（文档内输入）"></a>2. <strong>Here Document（文档内输入）</strong></h4><p>使用 <code>&lt;&lt;</code> 结合 <code>&lt;</code> 定义多行输入块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">第一行内容</span></span><br><span class="line"><span class="string">第二行内容</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">Hello</span></span><br><span class="line"><span class="string">World</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line">World</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-Here-String（字符串输入）"><a href="#3-Here-String（字符串输入）" class="headerlink" title="3. Here String（字符串输入）"></a>3. <strong>Here String（字符串输入）</strong></h4><p>使用 <code>&lt;&lt;&lt;</code> 直接传递字符串：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> &lt;&lt;&lt; <span class="string">&quot;string&quot;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tr</span> <span class="string">&#x27;a-z&#x27;</span> <span class="string">&#x27;A-Z&#x27;</span> &lt;&lt;&lt; <span class="string">&quot;hello&quot;</span>  <span class="comment"># 输出 HELLO</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="三、与其他符号的区别"><a href="#三、与其他符号的区别" class="headerlink" title="三、与其他符号的区别"></a>三、与其他符号的区别</h3><table><thead><tr><th align="left">符号</th><th align="left">作用</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left"><code>&lt;</code></td><td align="left">输入重定向（从文件读取）</td><td align="left"><code>sort &lt; input.txt</code></td></tr><tr><td align="left"><code>&gt;</code></td><td align="left">输出重定向（覆盖写入文件）</td><td align="left"><code>ls &gt; file_list.txt</code></td></tr><tr><td align="left"><code>&gt;&gt;</code></td><td align="left">输出重定向（追加到文件）</td><td align="left"><code>echo &quot;new&quot; &gt;&gt; log.txt</code></td></tr><tr><td align="left">&#96;</td><td align="left">&#96;</td><td align="left">管道符（传递前一个命令的输出）<code>cat file.txt  grep &quot;key&quot;</code></td></tr></tbody></table><h3 id="四、注意事项"><a href="#四、注意事项" class="headerlink" title="四、注意事项"></a>四、注意事项</h3><ol><li><p><strong>文件必须存在</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> &lt; non_existent_file  <span class="comment"># 报错：No such file or directory</span></span><br></pre></td></tr></table></figure></li><li><p><strong>与命令参数的优先级</strong>：</p><ul><li>如果命令本身接受文件名参数（如 <code>cat file.txt</code>），直接传参比 <code>&lt;</code> 更高效，因为 <code>&lt;</code> 需要额外打开文件。</li></ul></li><li><p><strong>输入重定向和管道的区别</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> file.txt | <span class="built_in">command</span>   <span class="comment"># 管道符传递的是 cat 的输出</span></span><br><span class="line"><span class="built_in">command</span> &lt; file.txt       <span class="comment"># 直接传递文件内容到 command 的 stdin</span></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p><code>&lt;</code> 是 Shell 中 <strong>输入方向的重定向符号</strong>，用于将文件或数据流的内容传递给命令的标准输入。熟练掌握输入&#x2F;输出重定向，是 Shell 脚本高效处理文件和数据流的核心技能！</p><h1 id="压缩安装类"><a href="#压缩安装类" class="headerlink" title="压缩安装类"></a>压缩安装类</h1><h2 id="zip-unzip-压缩解压"><a href="#zip-unzip-压缩解压" class="headerlink" title="zip unzip 压缩解压"></a><strong>zip unzip</strong> <strong>压缩解压</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\# 压缩文件和目录</span><br><span class="line">zip 文件名.zip 将要压缩的内容</span><br><span class="line"></span><br><span class="line">\# 解压缩文件</span><br><span class="line">unzip 文件名.zip</span><br></pre></td></tr></table></figure><p><strong>常用选项</strong></p><p>-r：递归压缩，即压缩目录</p><p>-d&lt;目录&gt; ：指定解压后文件的存放目录</p><p>zip test.zip -r a&#x2F;b 注：绝对路径压缩会带前面的路径文件夹</p><p>unzip linux.x64_11gR2_database_1of2.zip -d &#x2F;opt&#x2F;app&#x2F;database&#x2F;</p><ul><li><p><strong>压缩的时候用相对路径</strong></p></li><li><p><strong>解压的时候用绝对路径</strong></p></li></ul><h2 id="tar-压缩解压"><a href="#tar-压缩解压" class="headerlink" title="tar 压缩解压"></a><strong>tar</strong> <strong>压缩解压</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-z 调用 gzip 程序进行压缩或解压</span><br><span class="line">-c 创建（Create）.tar 格式的包文件</span><br><span class="line">-x 解开.tar 格式的包文件</span><br><span class="line">-C &lt;/解压时指定释放的目标文件夹 指定目录</span><br><span class="line">-v 输出详细信息（Verbose）</span><br><span class="line">-f 表示使用归档文件（一般都要带上表示使用tar,放在最后）</span><br></pre></td></tr></table></figure><p>压缩：tar [选项] … 归档文件名（压缩包名字） 源文件或目录</p><p>解压：tar [选项] … 归档文件名 [-C 目标目录]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf abc123.tar.gz abc.txt 123.txt 压缩成abc123.tar.gz的命令</span><br><span class="line"></span><br><span class="line">tar -zcvf abc123.tar.gz m</span><br><span class="line"></span><br><span class="line">tar -zxvf abc123.tar.gz -C <span class="built_in">test</span>/ 解压到指定目录</span><br></pre></td></tr></table></figure><h2 id="Yum包管理"><a href="#Yum包管理" class="headerlink" title="Yum包管理"></a><strong>Yum</strong>包管理</h2><p>Yum是一个Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载</p><p>RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">查询yum服务器是否有需要安装的软件 yum list | grep xxx</span><br><span class="line"></span><br><span class="line">查询指定的yum包信息 yum info xxx</span><br><span class="line"></span><br><span class="line">安装指定的yum包 yum install xxx</span><br><span class="line"></span><br><span class="line">卸载指定的yum包 yum remove xxxs</span><br><span class="line"></span><br><span class="line">查看已安装的软件包 yum list installed</span><br><span class="line"></span><br><span class="line">yum install ntpdate <span class="comment"># 安装网络对时</span></span><br></pre></td></tr></table></figure><h1 id="用户权限类"><a href="#用户权限类" class="headerlink" title="用户权限类"></a>用户权限类</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a><strong>基本介绍</strong></h2><p>登录时尽量少用root帐号登录，因为它是系统管理员，最大的权限，避免操作失误。可</p><p>以利用普通用户登录，登录后再用 su - 用户名 命令来切换</p><h2 id="用户及用户组"><a href="#用户及用户组" class="headerlink" title="用户及用户组"></a><strong>用户及用户组</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">类似于角色，系统可以对有共性的多个用户进行统一的管理。</span><br><span class="line"></span><br><span class="line">新增用户组 groupadd xiaoshou</span><br><span class="line"></span><br><span class="line">添加用户 useradd xiaomei</span><br><span class="line"></span><br><span class="line">添加用户时加上组 useradd -g xiaoshou xiaomei</span><br><span class="line"></span><br><span class="line">指定/修改密码 passwd xiaomei</span><br><span class="line"></span><br><span class="line">查询用户信息 <span class="built_in">id</span> xiaomei</span><br><span class="line"></span><br><span class="line">切换用户 su - xiaomei</span><br><span class="line"></span><br><span class="line">查看当前用户 <span class="built_in">whoami</span></span><br><span class="line"></span><br><span class="line">修改用户的组 usermod -g 用户组 用户名</span><br><span class="line"></span><br><span class="line">删除用户 userdel xiaomei (<span class="built_in">exit</span>退出后再删除)</span><br><span class="line"></span><br><span class="line">删除组 groupdel xiaoshou</span><br></pre></td></tr></table></figure><h2 id="用户和组的相关文件"><a href="#用户和组的相关文件" class="headerlink" title="用户和组的相关文件"></a><strong>用户和组的相关文件</strong></h2><p><strong>&#x2F;etc&#x2F;passwd</strong> <strong>文件</strong></p><ul><li><p>用户（user）的配置文件，记录用户的各种信息</p></li><li><p>每行的含义：用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</p></li></ul><p><strong>&#x2F;etc&#x2F;group</strong> <strong>文件</strong></p><ul><li><p>组(group)的配置文件，记录Linux包含的组的信息</p></li><li><p>每行含义：组名:口令:组标识号:组内用户列表</p></li></ul><h2 id="rwx权限详解"><a href="#rwx权限详解" class="headerlink" title="rwx权限详解"></a>rwx权限详解</h2><ul><li><p>[ r ]代表可读(read): 可以读取</p></li><li><p>[ w ]代表可写(write): 可以修改</p></li><li><p>[ x ]代表可执行(execute):可以被执行</p></li><li></li></ul><p><strong>10个字符确定不同用户能对文件干什么</strong></p><ul><li><p>第一个字符代表文件类型：文件( - ),目录( d ),链接( l )</p></li><li><p>第一组 rwx : 文件拥有者的权限是读、写和执行</p></li><li><p>第二组 rw- : 与文件拥有者同一组的用户的权限是读、写但不能执行</p></li><li><p>第三组 r– : 不与文件拥有者同组的其他用户的权限是读不能写和执行</p></li></ul><p>可用数字表示为: r&#x3D;4,w&#x3D;2,x&#x3D;1</p><p>因此 rwx&#x3D;4+2+1&#x3D;7</p><h2 id="chmod-修改权限"><a href="#chmod-修改权限" class="headerlink" title="chmod 修改权限"></a><strong>chmod</strong> <strong>修改权限</strong></h2><p>通过 chmod 指令，可修改文件或目录的权限</p><p>-R表示递归里面的所有文件及目录</p><p>**+、-、&#x3D; <strong>变更权限</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">u:所有者 g:所有组 o:其他人 a:所有人(u、g、o的总和)</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> u=rwx,g=rx,o=x 文件目录名</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> o+w 文件目录名</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> a-x 文件目录名</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+x file                　　　   给file的属主增加执行权限</span><br><span class="line"><span class="built_in">chmod</span> 751 file                　　　  </span><br><span class="line"><span class="built_in">chmod</span> u=rwx,g=rx,o=x file      上例的另一种形式</span><br><span class="line"><span class="built_in">chmod</span> 444 file              　　　　 同上例</span><br><span class="line"><span class="built_in">chmod</span> a-wx,a+r   file   　　   同上例</span><br><span class="line"><span class="built_in">chmod</span> -R u+r directory         递归地给directory目录下所有文件和子目录的属主分配读的权限</span><br></pre></td></tr></table></figure><h2 id="chown-修改文件所有者"><a href="#chown-修改文件所有者" class="headerlink" title="chown 修改文件所有者"></a><strong>chown</strong> <strong>修改文件所有者</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> [-R] 所有者 文件或目录</span><br><span class="line"></span><br><span class="line">-R表示递归里面的所有文件及目录</span><br><span class="line"></span><br><span class="line"><span class="built_in">chown</span> test02 /root/test.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">chown</span> -R 用户:组 /usr/local/mysql</span><br><span class="line"></span><br><span class="line"><span class="built_in">chown</span> meimei:students 1</span><br></pre></td></tr></table></figure><p>&#x2F;usr&#x2F;local  小文件，小软件的安装</p><p>mysql 端口默认3306</p><p>oracle 端口默认1521</p><h1 id="网络配置类"><a href="#网络配置类" class="headerlink" title="网络配置类"></a>网络配置类</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">clear 清屏 ifconfig 列出网卡信息 ping ip地址 看网络是不是连通</span><br><span class="line"></span><br><span class="line">free 查看内存使用情况</span><br><span class="line"></span><br><span class="line">**top** **查看系统整体资源**</span><br><span class="line"></span><br><span class="line">PID：进程的标识符。 USER：运行进程的用户名。</span><br><span class="line"></span><br><span class="line">PR（优先级）：进程的优先级。 NI（Nice值）：进程的优先级调整值。</span><br><span class="line"></span><br><span class="line">VIRT（虚拟内存）：进程使用的虚拟内存大小。</span><br><span class="line"></span><br><span class="line">RES（常驻内存）：进程实际使用的物理内存大小。</span><br><span class="line"></span><br><span class="line">SHR（共享内存）：进程共享的内存大小。</span><br><span class="line"></span><br><span class="line">%CPU：进程占用 CPU 的使用率。</span><br><span class="line"></span><br><span class="line">%MEM：进程占用内存的使用率。</span><br><span class="line"></span><br><span class="line">TIME+：进程的累计 CPU 时间。</span><br></pre></td></tr></table></figure><h2 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h2><h3 id="1-进程列表区字段含义"><a href="#1-进程列表区字段含义" class="headerlink" title="1. 进程列表区字段含义"></a>1. 进程列表区字段含义</h3><p>默认显示的进程字段如下（可通过快捷键自定义显示内容）：</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td><code>PID</code></td><td>进程 ID（唯一标识，用于杀死进程等操作）</td></tr><tr><td><code>USER</code></td><td>进程所属用户</td></tr><tr><td><code>PR</code></td><td>进程优先级（数值越小，优先级越高）</td></tr><tr><td><code>NI</code></td><td>nice 值（优先级调整值，范围 -20~19，默认 0）</td></tr><tr><td><code>VIRT</code></td><td>进程使用的虚拟内存总量（包括未使用的 swap 空间）</td></tr><tr><td><code>RES</code></td><td>进程使用的物理内存（不包括 swap，单位 KiB）</td></tr><tr><td><code>SHR</code></td><td>进程共享的内存量（包括与其他进程共享的部分）</td></tr><tr><td><code>S</code></td><td>进程状态（R：运行；S：休眠；T：停止；Z：僵尸；D：不可中断休眠）</td></tr><tr><td><code>%CPU</code></td><td>进程占用 CPU 的百分比（自上次刷新以来）</td></tr><tr><td><code>%MEM</code></td><td>进程占用物理内存的百分比</td></tr><tr><td><code>TIME+</code></td><td>进程累计使用的 CPU 时间</td></tr><tr><td><code>COMMAND</code></td><td>进程启动命令（可能被截断，可通过 <code>-c</code> 参数显示完整命令）</td></tr></tbody></table><h3 id="2-常用快捷键（在-top-界面中使用）"><a href="#2-常用快捷键（在-top-界面中使用）" class="headerlink" title="2.常用快捷键（在 top 界面中使用）"></a>2.常用快捷键（在 top 界面中使用）</h3><ul><li><strong>排序相关</strong>：<ul><li><code>P</code>：按 <code>%CPU</code> 使用率从高到低排序（默认）</li><li><code>M</code>：按 <code>%MEM</code> 使用率从高到低排序</li><li><code>N</code>：按 <code>PID</code> 从小到大排序</li><li><code>T</code>：按 <code>TIME+</code>（累计 CPU 时间）从高到低排序。</li></ul></li><li><strong>刷新频率</strong>：<ul><li><code>s</code>：修改刷新间隔时间（输入数字后回车，单位秒，默认 3 秒）。</li></ul></li><li><strong>筛选与查找</strong>：<ul><li><code>u</code>：输入用户名，只显示该用户的进程</li><li><code>k</code>：输入 PID 并回车，再输入信号（如 9 代表强制终止），可杀死指定进程</li><li><code>f</code>：进入字段选择界面，按方向键选择字段，按空格键勾选 &#x2F; 取消，回车返回（自定义显示哪些字段）</li><li><code>o</code>：进入排序条件设置，按字段首字母设置排序规则（如输入 <code>%MEM</code> 按内存排序）</li><li><code>/</code>：输入关键词，搜索进程命令（按 <code>n</code> 切换下一个结果）。</li></ul></li><li><strong>其他操作</strong>：<ul><li><code>H</code>：显示 &#x2F; 隐藏线程（默认只显示进程，开启后显示线程）</li><li><code>c</code>：切换显示完整命令 &#x2F; 命令名（默认显示命令名，开启后显示完整路径）</li><li><code>i</code>：忽略闲置进程（只显示正在运行的进程）</li><li><code>q</code>：退出 top 界面。</li></ul></li></ul><h3 id="3-常用命令参数（启动-top-时使用）"><a href="#3-常用命令参数（启动-top-时使用）" class="headerlink" title="3. 常用命令参数（启动 top 时使用）"></a>3. 常用命令参数（启动 top 时使用）</h3><ul><li><code>top -d N</code>：指定刷新间隔为 N 秒（如 <code>top -d 5</code> 每 5 秒刷新一次）</li><li><code>top -p PID1,PID2</code>：只监控指定 PID 的进程（如 <code>top -p 123,456</code>）</li><li><code>top -u 用户名</code>：只显示指定用户的进程（如 <code>top -u root</code>）</li><li><code>top -c</code>：启动时直接显示完整命令（无需按 <code>c</code> 切换）</li><li><code>top -b</code>：批处理模式（非交互式，可用于输出到文件，如 <code>top -b -n 1 &gt; top.log</code> 保存一次快照）</li><li><code>top -n N</code>：刷新 N 次后自动退出（结合 <code>-b</code> 使用，如 <code>top -b -n 3</code> 刷新 3 次后退出）。</li></ul><h3 id="4-示例场景"><a href="#4-示例场景" class="headerlink" title="4. 示例场景"></a>4. 示例场景</h3><ol><li><strong>查看系统中 CPU 占用最高的进程</strong>：<br>输入 <code>top</code> 后按 <code>P</code>，顶部进程即为 CPU 消耗最高的进程。</li><li><strong>杀死一个占用内存过高的进程</strong>：<br>找到该进程的 <code>PID</code>，按 <code>k</code>，输入 PID，再输入 <code>9</code> 并回车（强制终止）。</li><li><strong>监控特定用户（如 www）的进程</strong>：<br>方法 1：启动时使用 <code>top -u www</code><br>方法 2：在 top 界面按 <code>u</code>，输入 <code>www</code> 回车。</li><li><strong>将进程快照保存到文件</strong>：<br><code>top -b -n 1 -c &gt; process_snapshot.log</code>（保存一次完整命令的进程快照）。</li></ol><p>通过熟练使用 <code>top</code> 命令，可快速定位系统资源瓶颈（如 CPU 过高、内存泄漏等），是 Linux 系统管理的必备技能。</p><h2 id="ps-显示系统执行的进程"><a href="#ps-显示系统执行的进程" class="headerlink" title="ps 显示系统执行的进程"></a><strong>ps</strong> 显示系统执行的进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -aux 查看所有用户所有进程</span><br><span class="line"></span><br><span class="line">ps -ef 查看子父进程之间的关系</span><br></pre></td></tr></table></figure><h2 id="pstree-查看进程树"><a href="#pstree-查看进程树" class="headerlink" title="pstree 查看进程树"></a><strong>pstree</strong> <strong>查看进程树</strong></h2><p>pstree 1660 # 树状的形式显示进程的pid</p><h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a><strong>kill</strong></h2><p>最常用的信号是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 (HUP)：重新加载进程。</span><br><span class="line"></span><br><span class="line">9 (KILL)：强制杀死一个进程。</span><br><span class="line"></span><br><span class="line">15 (TERM)：正常停止一个进程。</span><br><span class="line"></span><br><span class="line"><span class="built_in">kill</span> -9 16989 杀死进程</span><br></pre></td></tr></table></figure><h2 id="systemctl-服务管理"><a href="#systemctl-服务管理" class="headerlink" title="systemctl 服务管理"></a><strong>systemctl</strong> <strong>服务管理</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">systemctl [ start | stop | restart | status] 服务名</span><br><span class="line"></span><br><span class="line">service 服务名 [ start | stop | restart | status]</span><br><span class="line"></span><br><span class="line">服务名：mysql network firewalld等</span><br><span class="line"></span><br><span class="line">systemctl是新版本写法，service是老版本写法</span><br><span class="line"></span><br><span class="line">防火墙操作：status/start/stop/restart/disable/enable 多两个</span><br><span class="line"></span><br><span class="line">查看防火墙： systemctl status firewalld</span><br><span class="line"></span><br><span class="line">停止防火墙： systemctl <span class="built_in">disable</span> firewalld 重启后生效</span><br></pre></td></tr></table></figure><p>注：直接关死即可，单机版使用防火墙</p><h1 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h1><h2 id="一、防火墙的开启、关闭、禁用命令"><a href="#一、防火墙的开启、关闭、禁用命令" class="headerlink" title="一、防火墙的开启、关闭、禁用命令"></a>一、防火墙的开启、关闭、禁用命令</h2><ol><li><p>设置开机启用防火墙：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> firewalld</span><br></pre></td></tr></table></figure></li><li><p>设置开机禁用防火墙：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure></li><li><p>启动防火墙：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure></li><li><p>关闭防火墙：</p></li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld 或 systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><ol start="5"><li><p>检查防火墙状态 </p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure></li></ol><h2 id="二、使用firewall-cmd配置端口"><a href="#二、使用firewall-cmd配置端口" class="headerlink" title="二、使用firewall-cmd配置端口"></a>二、使用firewall-cmd配置端口</h2><ol><li><p>查看防火墙状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></table></figure></li><li><p>重新加载配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>查看开放的端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure></li><li><p>开启防火墙端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=9200/tcp --permanent</span><br></pre></td></tr></table></figure></li></ol><p>​命令含义：<br>​–zone #&#x3D;作用域&#x3D;pubic<br>​–add-port&#x3D;9200&#x2F;tcp #添加端口，格式为：端口&#x2F;通讯协议<br>​–permanent #永久生效，没有此参数重启后失效<br>​注意：添加端口后，必须用命令firewall-cmd –reload重新加载一遍才会生效</p><ol start="5"><li><p>关闭防火墙端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --remove-port=9200/tcp --permanent</span><br></pre></td></tr></table></figure><p>常用命令<br>1.版本信息</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost]# <span class="built_in">cat</span> /etc/os-release</span><br><span class="line">NAME=“openEuler”</span><br><span class="line">VERSION=“22.03 LTS”</span><br><span class="line">ID=“openEuler”</span><br><span class="line">VERSION_ID=“22.03”</span><br><span class="line">PRETTY_NAME=“openEuler 22.03 LTS”</span><br><span class="line">ANSI_COLOR=“0;31”</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# <span class="built_in">cat</span> /proc/version</span><br><span class="line">Linux version 5.10.0-60.43.0.72.oe2203.x86_64 (abuild@obs-worker1639015616-x86-0007) (gcc_old (GCC) 10.3.1, GNU ld (GNU Binutils) 2.37) <span class="comment">#1 SMP Tue Jul 12 01:54:24 UTC 2022</span></span><br><span class="line"></span><br><span class="line">[root@iZ2ze9wbetpobdd5izvo9pZ /]# <span class="built_in">uname</span></span><br><span class="line">Linux</span><br></pre></td></tr></table></figure><h2 id="配置静态ip"><a href="#配置静态ip" class="headerlink" title="配置静态ip"></a><strong>配置静态</strong>ip</h2><p>vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33 网卡配置文件</p><p>重启网络 service network restart</p><h2 id="netstat-端口"><a href="#netstat-端口" class="headerlink" title="netstat 端口"></a><strong>netstat</strong> <strong>端口</strong></h2><p>netstat -nltp 查看网络</p><h2 id="oracle监听"><a href="#oracle监听" class="headerlink" title="oracle监听"></a>oracle监听</h2><p>lsnrctl (status 状态 start 启动 stop 停止)</p><h1 id="其他扩展类"><a href="#其他扩展类" class="headerlink" title="其他扩展类"></a>其他扩展类</h1><h2 id="echo输出字符串"><a href="#echo输出字符串" class="headerlink" title="echo输出字符串"></a>echo输出字符串</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">换行打印输入字符 解释</span><br><span class="line">-n 不换行显示</span><br><span class="line">-e 出现转义字符进行解释处理</span><br><span class="line"></span><br><span class="line">转义字符</span><br><span class="line">\n 换行</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;hello&quot;</span>   不换行显示</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;test&quot;</span> &gt; t.txt</span><br></pre></td></tr></table></figure><h2 id="date显示当前日期-用于日期转字符串"><a href="#date显示当前日期-用于日期转字符串" class="headerlink" title="date显示当前日期 (用于日期转字符串)"></a>date显示当前日期 (用于日期转字符串)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> (显示当前时间)</span><br><span class="line"></span><br><span class="line"><span class="built_in">date</span> +<span class="string">&quot;%Y&quot;</span> (显示当前年份)</span><br><span class="line"></span><br><span class="line"><span class="built_in">date</span> +<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span> (显示当前是哪一天)</span><br></pre></td></tr></table></figure><h2 id="date-d-日期解析（用于字符串转日期）"><a href="#date-d-日期解析（用于字符串转日期）" class="headerlink" title="date -d 日期解析（用于字符串转日期）"></a><strong>date -d</strong> <strong>日期解析（用于字符串转日期）</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;2009-12-12&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;2009-12-12 + 1 day&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;+1 day&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;+1 month&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;+1 year&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;2009-12-12 + 1 day&quot;</span> +<span class="string">&quot;%Y/%m/%d %H:%M:%S&quot;</span> &gt; time.txt</span><br></pre></td></tr></table></figure><h2 id="date-设置日期"><a href="#date-设置日期" class="headerlink" title="date 设置日期"></a><strong>date</strong> 设置日期</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> -s 字符串时间</span><br><span class="line"></span><br><span class="line">设置系统当前时间 <span class="built_in">date</span> -s <span class="string">&quot;2023-08-08 12:34:56&quot;</span></span><br></pre></td></tr></table></figure><h2 id="linux网络对时"><a href="#linux网络对时" class="headerlink" title="linux网络对时"></a>linux网络对时</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.安装netdate</span><br><span class="line">yum install ntpdate</span><br><span class="line"></span><br><span class="line">2.执行命令，同步时间。</span><br><span class="line">ntpdate us.pool.ntp.org</span><br></pre></td></tr></table></figure><h2 id="cal查看日历"><a href="#cal查看日历" class="headerlink" title="cal查看日历"></a>cal查看日历</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cal [[[日] 月] 年]</span><br></pre></td></tr></table></figure><ul><li><p>显示当前日历 cal</p></li><li><p>显示2023年日历 cal 2023</p></li><li><p>显示2023年1月日历 cal 01 2023</p></li><li><p>显示2023年1月15日日历 cal 15 01 2023</p></li></ul><h2 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h2><p>用来从指定的URL下载文件。</p><p>python下载地址：<a href="https://www.python.org/ftp/python">https://www.python.org/ftp/python</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tar.xz</span><br></pre></td></tr></table></figure><h2 id="seq命令"><a href="#seq命令" class="headerlink" title="seq命令"></a>seq命令</h2><p>用于产生从某个数到另外一个数之间的所有整数。</p><ol><li>seq [选项]… 尾数</li><li>seq [选项]… 首数 尾数</li><li>seq [选项]… 首数 增量 尾数</li></ol><p>正序输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">seq</span> 1 10</span><br><span class="line"></span><br><span class="line"><span class="built_in">seq</span> 1 1 100</span><br></pre></td></tr></table></figure><p>倒序输出:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">seq</span> 100 -1 1</span><br></pre></td></tr></table></figure><h2 id="Linux-定时执行计划"><a href="#Linux-定时执行计划" class="headerlink" title="Linux 定时执行计划"></a>Linux <strong>定时执行计划</strong></h2><p>方式一：修改配置文件：&#x2F;etc&#x2F;crontab （要指明执行用户）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">分 时 日 月 周 用户名 执行的命令</span><br><span class="line"></span><br><span class="line">vim /etc/crontab</span><br><span class="line"></span><br><span class="line">5 * * * * root <span class="built_in">date</span> &gt; /root/time.txt</span><br></pre></td></tr></table></figure><p>方式二：通过crontab命令（不需要指明执行用户，默认就是当前用户）</p><ul><li><p>crontab -e 注：编辑用户的cron配置文件；</p></li><li><p>crontab -l 注：查看用户的计划任务；</p></li><li><p>crontab -r 注：删除用户的计划任务；</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 * * * * <span class="built_in">date</span> &gt; /root/time.txt</span><br></pre></td></tr></table></figure><h3 id="特殊符号说明"><a href="#特殊符号说明" class="headerlink" title="特殊符号说明"></a>特殊符号说明</h3><table><thead><tr><th><strong>符号</strong></th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>任何时间。比如第一个 * 就代表一小时中每分钟都执行一次的意思。</td></tr><tr><td>，</td><td>不连续的时间。比如 0 8,12,16 * * * ，在每天的8点0分，12点0分，16点0分都执行一次命令</td></tr><tr><td>-</td><td>连续的时间范围。比如 0 5 * * 1-6 ，在周一到六凌晨5点0分执行命令</td></tr><tr><td>*&#x2F;n</td><td>每隔多久执行一次。比如 *&#x2F;10 * * * * ，每隔10分钟就执行一遍命令</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> +<span class="string">&quot;\%Y&quot;</span> &gt; /root/time.txt <span class="comment"># 注：定时任务中的特殊符号需要转义%</span></span><br></pre></td></tr></table></figure><h2 id="分区及挂载"><a href="#分区及挂载" class="headerlink" title="分区及挂载"></a><strong>分区及挂载</strong></h2><h3 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l 可以查看系统所有硬盘的分区情况</span><br><span class="line"></span><br><span class="line">fdisk /dev/sdb1 可以分区</span><br></pre></td></tr></table></figure><h3 id="df"><a href="#df" class="headerlink" title="df"></a>df</h3><p>用于显示 Linux 系统中各文件系统的硬盘使用情况，包括文件系统所在硬盘分区的总容量、已使用的容量、剩余容量等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -h 查看磁盘使用及挂载情况</span><br></pre></td></tr></table></figure><h2 id="linux添加硬盘分区挂载"><a href="#linux添加硬盘分区挂载" class="headerlink" title="linux添加硬盘分区挂载"></a>linux添加硬盘分区挂载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1.关闭虚拟机添加硬盘：虚拟机-设置-添加-硬盘-1G-单个文件存储-打开虚拟机</span><br><span class="line"></span><br><span class="line">进入目录/dev，查看出现文件sdb</span><br><span class="line"></span><br><span class="line"><span class="built_in">df</span> -h 列出磁盘使用情况，目前没有新加的硬盘</span><br><span class="line"></span><br><span class="line">fdisk -l 发现存在待分区的磁盘</span><br><span class="line"></span><br><span class="line">2.分区：fdisk /dev/sdb 依次输入m n p 1 空 空 w</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /dev 看到sdb1文件出现</span><br><span class="line"></span><br><span class="line">3.创建文件格式：mkfs.ext4 /dev/sdb1</span><br><span class="line"></span><br><span class="line">4.挂载：先创建目录，<span class="built_in">mkdir</span> -p /mnt/pan1</span><br><span class="line"></span><br><span class="line">vim /etc/fstab 添加/dev/sdb1 /mnt/pan1 ext4 defaults 0 0</span><br><span class="line"></span><br><span class="line">重启虚拟机 <span class="built_in">df</span> -h 查看挂载情况 <span class="built_in">df</span> -hl /mnt/pan1 查看目录空间</span><br></pre></td></tr></table></figure><h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><h2 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a><strong>系统变量</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$HOME</span> :当前登录用户的 <span class="string">&quot;家目录&quot;</span> 路径</span><br><span class="line"><span class="variable">$USER</span>：当前用户名</span><br><span class="line"><span class="variable">$RANDOM</span> 可以随机生成 0~32767之间的整数数字</span><br></pre></td></tr></table></figure><h2 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a><strong>自定义变量</strong></h2><p>变量名&#x3D;值；常量：readonly</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xm=<span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;姓名：<span class="variable">$xm</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;姓名：$xm&#x27;</span></span><br><span class="line"><span class="built_in">readonly</span> p=3.14</span><br><span class="line">n=`<span class="built_in">cat</span> /etc/passwd | grep -c <span class="string">&quot;root&quot;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$n</span></span><br></pre></td></tr></table></figure><p><strong>在shell编程中，&#96;&#96;（反引号）的主要作用是命令替换</strong>‌。具体来说，反引号会将其中的命令执行，并将输出结果赋值给变量。</p><p>##<strong>特殊变量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">特殊变量</span><br><span class="line"><span class="variable">$n</span> n为number，</span><br><span class="line"><span class="variable">$0</span>代表该脚本名称，<span class="variable">$1</span>-<span class="variable">$9</span>代表第一到第九个参数</span><br><span class="line"><span class="variable">$#</span> 获取所有输入参数的个数，常用于循环；</span><br><span class="line"><span class="variable">$@</span> 代表命令行中所有的参数，<span class="variable">$@</span>会把每个参数区分对待；</span><br><span class="line">$? 返回最后一次命令执行的状态，返回0代表正确执行，返回非0代表执行不正确。</span><br><span class="line">$$ 进程号</span><br></pre></td></tr></table></figure><h2 id="read-读取终端输入"><a href="#read-读取终端输入" class="headerlink" title="read 读取终端输入"></a><strong>read</strong> <strong>读取终端输入</strong></h2><p>-p：指定读取值时的提示符；</p><p>-t：指定读取值时等待的时间（秒）。</p><p>read -p “请输入密码：” s</p><p>read -p “请输入密码：” -t 10 mima</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a><strong>运算符</strong></h2><p><strong>赋值运算符</strong> <strong>&#x3D;</strong></p><p><strong>算数运算符</strong> <strong>+ - * &#x2F; %</strong></p><p><strong>比较运算符</strong></p><p>字符串比较： &#x3D;&#x3D; !&#x3D;</p><p>数值比较：-eq 等于 -ne 不等于 -lt 小于 -le 小于等于 -gt 大于 -ge 大于等于</p><p>类型权限：-f 存在且是文件 -d 存在且是目录-r 读 (read) -w 写(write) -x 执行 (execute)</p><p><strong>逻辑运算符</strong> <strong>-a -o !</strong></p><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a><strong>算数运算符</strong></h2><ol><li><p><strong>$((运算式)) 或 $[运算式]</strong></p></li><li><p>**+, - , <em>, &#x2F;, % 加，减，乘，除，取余</em>*</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 3 + 4</span><br><span class="line">n1=3</span><br><span class="line">n2=4</span><br><span class="line"><span class="built_in">echo</span> $(((<span class="variable">$n1</span>+<span class="variable">$n2</span>*<span class="number">3</span>)/<span class="number">2</span>%<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$a</span> + <span class="variable">$b</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;a + b : <span class="variable">$val</span>&quot;</span></span><br><span class="line"><span class="built_in">let</span> c=(<span class="variable">$a</span> + <span class="variable">$b</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$c</span></span><br></pre></td></tr></table></figure><h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a><strong>选择结构</strong></h2><p>改变程序的执行顺序</p><p>选择一个结果</p><p>条件为bool类型，只能选择一个执行，</p><p>if和case两种</p><p>if结构，if、 if else、多重if</p><p>可以随意嵌套，两种方法都可以互相实现，选择更适合的方法实现</p><h3 id="if-选择结构-—then-独立一行"><a href="#if-选择结构-—then-独立一行" class="headerlink" title="if 选择结构 —then 独立一行"></a><strong>if</strong> <strong>选择结构</strong> <strong>—then</strong> <strong>独立一行</strong></h3><p><strong>[  ] 必须用空格隔开条件判断。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span> [ 条件判断 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">程序</span><br><span class="line"><span class="keyword">elif</span> [ 条件判断 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">程序</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">程序</span><br><span class="line">  <span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="case语句-等值判断"><a href="#case语句-等值判断" class="headerlink" title="case语句 等值判断"></a>case语句 等值判断</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> $变量名 <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;value 1&quot;</span>）</span><br><span class="line"></span><br><span class="line">如果变量的值等于value 1，则执行程序1</span><br><span class="line"></span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;value 2&quot;</span>）</span><br><span class="line"></span><br><span class="line">如果变量的值等于value 2，则执行程序2</span><br><span class="line"></span><br><span class="line">;;</span><br><span class="line"></span><br><span class="line">…省略其他分支…</span><br><span class="line"></span><br><span class="line">***）**</span><br><span class="line"></span><br><span class="line">如果变量的值都不是以上的值，则执行此处程序</span><br><span class="line"></span><br><span class="line">  ;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if结构</span></span><br><span class="line">sex=<span class="string">&quot;男&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$sex</span> == <span class="string">&quot;男&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;去做饭&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$sex</span> == <span class="string">&quot;女&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;去逛街&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;其他&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># case结构</span></span><br><span class="line">sex=<span class="string">&quot;男&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$sex</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">&quot;男&quot;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">;;</span><br><span class="line"><span class="string">&quot;女&quot;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;2&quot;</span></span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;3&quot;</span></span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多条件应用</span></span><br><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line">c=<span class="string">&quot;s&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> -lt <span class="variable">$b</span> -a <span class="variable">$c</span> == <span class="string">&quot;s&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;false&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 判断文件是否存在</span></span><br><span class="line"><span class="keyword">if</span> [ -f /root/a.txt ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;是&quot;</span></span><br><span class="line"><span class="built_in">cat</span> /root/a.txt</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;不是&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a><strong>for</strong> <strong>循环</strong></h2><p>循环语句</p><p>循环具备的两个条件：循环条件和循环操作</p><p>条件为bool类型，plsql的循环能够让一段代码反复执行，为实现这一功能一共提供了三</p><p>种不同的循环结构：</p><p>loop简单循环或无限循环，其他语言叫do while</p><p>for循环</p><p>while循环</p><p>循环结构</p><p>三种循环各有差异但每个结构都包含两个部分：循环边界以及循环体。循环边界有一些</p><p>保留词组成，包括初始化循环、终止循环条件、完成循环的 end loop 语句。</p><p>循环结构和选择结构随意嵌套，同一功能可以互相实现，选择合适的方法</p><h2 id="WHILE循环"><a href="#WHILE循环" class="headerlink" title="WHILE循环"></a>WHILE循环</h2><p>while循环时一个条件循环，只要循环边界处定义的布尔条件的值为真，循环就会继续。</p><p>while循环的特性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>循环结束语句</td><td>当循环边界的布尔表达式为false 或者null时循环结束。</td></tr><tr><td>结束循环语句位置</td><td>结束循环语句放在while关键字后，在循环体要执行前进行判断，所以while循环可能一次都不会执行循环体。</td></tr><tr><td>while循环使用场景</td><td>无法明确循环体会循环几次，但有明确的循环停止条件，并且循环体不是一定要执行的情况使用 while循环。</td></tr></tbody></table><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a><strong>for</strong>循环</h2><p>for循环的特性</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>循环结束语句</td><td>for循环达到范围区间的循环次数就结束，或者在循环体中使用exit等语句停止。</td></tr><tr><td>结束循环语句位置</td><td>每次循环体执行后，程序自动递增循环索引的值，直到超过区间范围后停止循环。</td></tr><tr><td>while循环使用场景</td><td>有明确循环次数，并不提前结束循环的情况使用for循环。</td></tr></tbody></table><h3 id="for-i-in-集合"><a href="#for-i-in-集合" class="headerlink" title="for i in 集合"></a>for i in 集合</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">\# 序列</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 5`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">\# 位置参数</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串</span></span><br><span class="line">s=<span class="string">&quot;a b c dd e&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$s</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 命令结果</span></span><br><span class="line">s=`<span class="built_in">ls</span> /root` <span class="built_in">echo</span> <span class="variable">$s</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$s</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$s</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a><strong>while</strong> <strong>循环</strong></h2><p>while [ 条件判断 ]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">i=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -le 10 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">i=$((<span class="variable">$i</span>+<span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 不确定循环次数</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;及格了吗？（y/n）：&quot;</span> answer</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$answer</span> == <span class="string">&quot;n&quot;</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;学习做作业考试&quot;</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;及格了吗？（y/n）：&quot;</span> answer</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;终于及格了&quot;</span></span><br></pre></td></tr></table></figure><h2 id="乘法表-双层嵌套"><a href="#乘法表-双层嵌套" class="headerlink" title="乘法表(双层嵌套)"></a><strong>乘法表</strong>(双层嵌套)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 9`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> `<span class="built_in">seq</span> 1 <span class="variable">$i</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot; <span class="variable">$j</span> * <span class="variable">$i</span> = <span class="subst">$(($i * $j)</span>) &quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a><strong>循环控制</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">continue</span></span><br></pre></td></tr></table></figure><h2 id="二重循环"><a href="#二重循环" class="headerlink" title="二重循环"></a><strong>二重循环</strong></h2><p>循环里面嵌套循环，外层循环先开始，内层循环结束后，再开始外层的下一个循环：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 1 5`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> `<span class="built_in">seq</span> 1 5`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;<span class="variable">$j</span>&quot;</span>#内层循环</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span>&quot;</span>#外层循环</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a><strong>自定义函数</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">name</span></span>()&#123;</span><br><span class="line">action;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> name</span><br><span class="line">&#123;</span><br><span class="line">Action;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">name</span><br></pre></td></tr></table></figure><p>因为shell脚本是从上到下逐行运行，不会像其它语言一样先编译，所以函数必须在调用之前，先声明。</p><p>函数返回值，return后只能跟数值n(0-255)</p><p>接收返回值方法：在函数内部使用 echo命令将结果输出，在函数外部使用$()或者&#96;&#96;捕获结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无输入无返回</span></span><br><span class="line"><span class="function"><span class="title">hello</span></span>()&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;test&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">hello</span><br><span class="line"><span class="comment">#写一个自定义函数，计算两个输入参数的和</span></span><br><span class="line"><span class="function"><span class="title">he</span></span>()&#123;</span><br><span class="line">s=0</span><br><span class="line">s=$((<span class="variable">$1</span> + <span class="variable">$2</span>))</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$s</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">he 3 65</span><br><span class="line">jieguo=`he 3 65`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;和是：<span class="variable">$jieguo</span>&quot;</span></span><br></pre></td></tr></table></figure><p>###<strong>可以输入参数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入第一个数：&quot;</span> n1</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入第二个数：&quot;</span> n2</span><br><span class="line"></span><br><span class="line">jieguo=`he <span class="variable">$n1</span> <span class="variable">$n2</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;和是：<span class="variable">$jieguo</span>&quot;</span></span><br><span class="line"></span><br><span class="line">\#也可以使用shell位置参数传递到函数</span><br></pre></td></tr></table></figure><h3 id="可以互相调用"><a href="#可以互相调用" class="headerlink" title="可以互相调用"></a><strong>可以互相调用</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">he</span></span>()&#123;</span><br><span class="line"><span class="built_in">date</span></span><br><span class="line">hello</span><br><span class="line">s=0</span><br><span class="line">s=$((<span class="variable">$1</span> + <span class="variable">$2</span>))</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$s</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归自己调用自己"><a href="#递归自己调用自己" class="headerlink" title="递归自己调用自己"></a>递归自己调用自己</h2><p># 输入一个目录显示里面的所有目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">fun</span></span>()&#123;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">ls</span> <span class="variable">$1</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$1</span>/<span class="variable">$i</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun /root</span><br></pre></td></tr></table></figure><h2 id="Shell工具"><a href="#Shell工具" class="headerlink" title="Shell工具"></a>Shell工具</h2><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a><strong>sort</strong></h3><p>sort命令是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出。</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-n</td><td>依照数值的大小排序</td></tr><tr><td>-r</td><td>以相反的顺序来排序</td></tr><tr><td>-t</td><td>设置排序时所用的分隔字符</td></tr><tr><td>-k</td><td>指定需要排序的列</td></tr></tbody></table><p>参数：指定待排序的文件列表</p><p>shell下面建立如下文件sort.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bb:40:5.4</span><br><span class="line">bd:20:4.2</span><br><span class="line">xz:50:2.3</span><br><span class="line">cls:10:3.5</span><br><span class="line">ss:30:1.6</span><br></pre></td></tr></table></figure><p>按照“：”分割后的第三列倒序排序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span> -t <span class="string">&quot;:&quot;</span> -nrk 3 /root/shell/sort.txt</span><br><span class="line"></span><br><span class="line">bb:40:5.4</span><br><span class="line">bd:20:4.2</span><br><span class="line">cls:10:3.5</span><br><span class="line">xz:50:2.3</span><br><span class="line">ss:30:1.6</span><br></pre></td></tr></table></figure><p><strong>grep 、sed、awk</strong>被称为linux中的三剑客。</p><p>我们总结一下这三个”剑客”的特长。</p><ul><li><p>grep 更适合单纯的<strong>查找或匹配</strong>文本</p></li><li><p>sed  更适合<strong>编辑匹配到的文本</strong></p><ul><li>awk  更适合<strong>格式化文本，对文本进行较复杂格式处理</strong></li></ul></li></ul><h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a><strong>sed</strong></h3><p>sed: stream editor（流编辑器）的简称。</p><p>它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中（“模式空间“），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。</p><ul><li><p>p 打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～</p></li><li><p>i 插入， i 的后面可以接字串，而这些字串会在新的一行出现(<strong>目前的上一行</strong>)；</p></li><li><p>a 新增， a 的后面可以接字串，而这些字串会在新的一行出现(<strong>目前的下一行</strong>)</p></li><li><p>s 取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.显示文件的第 2 行的内容：</span><br><span class="line">sed -n <span class="string">&#x27;2 p&#x27;</span> /root/shell/sort.txt</span><br><span class="line">2.显示文件的第 2 行到第 4 行的内容：</span><br><span class="line">sed -n <span class="string">&#x27;2,4 p&#x27;</span> /root/shell/sort.txt</span><br><span class="line">3.将文件中的bb全部替换为BB</span><br><span class="line">sed <span class="string">&#x27;s/bb/BB/g&#x27;</span> /root/shell/sort.txt</span><br><span class="line">4.以文件bb开头的上一行添加</span><br><span class="line">sed <span class="string">&#x27;/^bb/i hello&#x27;</span> /root/shell/sort.txt</span><br><span class="line">5.将文件中的d全部删除</span><br><span class="line">sed <span class="string">&#x27;s/d//g&#x27;</span> /root/shell/sort.txt</span><br><span class="line">注：可以使用管道符连续处理,接着重定向保存，使用\拼接换行</span><br></pre></td></tr></table></figure><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a><strong>awk</strong></h3><p>一个完整的awk命令形式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk [options] <span class="string">&#x27;BEGIN&#123; commands &#125; &#123; commands &#125; END&#123; commands &#125;&#x27;</span> file</span><br></pre></td></tr></table></figure><p>-v 指定 FS 和 OFS 字段分隔符和输出字段分隔符</p><p>内置参数：</p><ul><li><p>NF 分割完字段的数量</p></li><li><p>$1 代表文本行中的第 1 个数据字段；</p></li><li><p>$2 代表文本行中的第 2 个数据字段；</p></li></ul><p>输出指定列：{print $1,$2}</p><p>分隔符相同的情况输出一整行：{print}</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.以:为分隔符，打印第2列和第1列</span><br><span class="line">awk -v FS=<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $2,$1&#125;&#x27;</span> /root/shell/sort.txt</span><br><span class="line">2.以:为分隔符，打印第2列和第1列，列之间用,分割</span><br><span class="line">awk -v FS=<span class="string">&quot;:&quot;</span> -v OFS=<span class="string">&quot;,&quot;</span> <span class="string">&#x27;&#123;print $2,$1&#125;&#x27;</span> /root/shell/sort.txt</span><br><span class="line">3.添加列保存为csv，下载，使用excel查看</span><br><span class="line">awk -v FS=<span class="string">&quot;:&quot;</span> -v OFS=<span class="string">&quot;,&quot;</span> <span class="string">&#x27;BEGIN&#123;print &quot;one,two,three&quot;&#125;&#123;print $2,$1,$3&#125;&#x27;</span></span><br><span class="line">/root/shell/sort.txt &gt; /root/shell/sort.csv</span><br><span class="line">4.第二列大于30</span><br><span class="line">awk -v FS=<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123; if($2&gt;30)&#123;print $2&#125;&#125;&#x27;</span> /root/shell/sort.txt</span><br><span class="line">5.行列总数量</span><br><span class="line">awk -v FS=<span class="string">&quot;:&quot;</span> <span class="string">&#x27;BEGIN&#123;n=0&#125;&#123;for(i=1;i&lt;=NF;i++)&#123;n++&#125; &#125;END&#123;print n&#125;&#x27;</span> /root/shell/sort.txt</span><br><span class="line">注：可以使用管道符连续处理,接着重定向保存，使用\拼接换行</span><br></pre></td></tr></table></figure><h4 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a><strong>内置变量</strong></h4><ol><li><p><strong><code>FS</code></strong><br>输入字段分隔符，默认空格或制表符。<br><strong>示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;BEGIN&#123;FS=&quot;:&quot;&#125; &#123;print $1&#125;&#x27;</span> /etc/passwd  <span class="comment"># 等价于 `-F:`:cite[3]:cite[7]。</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>OFS</code></strong><br>输出字段分隔符，默认空格。<br><strong>示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;BEGIN&#123;OFS=&quot;|&quot;&#125; &#123;print $1, $2&#125;&#x27;</span> data.txt  <span class="comment"># 输出字段以 `|` 分隔:cite[3]:cite[7]。</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>RS</code> 和 <code>ORS</code></strong></p><ul><li><p><code>RS</code>：输入记录分隔符（默认换行符）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;BEGIN&#123;RS=&quot;;&quot;&#125; &#123;print $0&#125;&#x27;</span> data.txt  <span class="comment"># 以分号分隔记录:cite[3]:cite[7]。</span></span><br></pre></td></tr></table></figure></li><li><p><code>ORS</code>：输出记录分隔符（默认换行符）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;BEGIN&#123;ORS=&quot;;&quot;&#125; &#123;print $0&#125;&#x27;</span> data.txt  <span class="comment"># 输出以分号结尾:cite[3]:cite[7]。</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>NR</code> 和 <code>FNR</code></strong></p><ul><li><code>NR</code>：全局行号（跨文件累计）。</li><li><code>FNR</code>：当前文件行号（每个文件从1开始）。<br><strong>示例</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;print NR, FNR, $0&#125;&#x27;</span> file1.txt file2.txt  <span class="comment"># 显示全局和文件行号:cite[3]:cite[7]。</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>NF</code></strong><br>当前行的字段数。<br><strong>示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;print NF, $NF&#125;&#x27;</span> data.txt  <span class="comment"># 打印字段数和最后一个字段:cite[3]:cite[7]。</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="mysqldump命令"><a href="#mysqldump命令" class="headerlink" title="mysqldump命令"></a>mysqldump命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.导出education数据库里面的<span class="built_in">users</span>表的表数据和表结构（下面以<span class="built_in">users</span>表为例）</span><br><span class="line">mysqldump-u[用户名]-h[ip]-p[密码]-P[端口号]数据库名表名&gt;导出的文件名.sql</span><br><span class="line">mysqldump -uroot-h127.0.0.1 -proot -P3306 education <span class="built_in">users</span>&gt;d:/user.sql</span><br><span class="line">导出多张表：</span><br><span class="line">mysqldump -uroot -proot--databases <span class="built_in">test</span> --tables t1 t2&gt;two.sql</span><br><span class="line">2.只导出表结构不导表数据，添加-d”命令参数</span><br><span class="line">mysqldump -uroot -h127.0.0.1 -proot -P3306 -d education <span class="built_in">users</span>&gt;d:/user.sql</span><br><span class="line">3.只导出表数据不导表结构，添加”t”命令参数</span><br><span class="line">mysqldump -uroot -h127.0.0.1 -proot -P3306 -t education <span class="built_in">users</span>&gt;d:/user.sql</span><br><span class="line">4.导出数据库的表结构和表数据（导入的时候需要指定数据库，保证指定的数据库存在）</span><br><span class="line">导出命令：mysqldump-h127.0.0.1-P3306-uroot-proot education&gt;d:/database.sql</span><br><span class="line">导入命令：mysql-uroot-proot-h127.0.0.1-P3306 education&lt;d:/database.sql</span><br><span class="line">5.导出特定数据库的所有表格的表结构及其数据，添加-databases<span class="string">&quot;命令参数（导入的时侯直接执行导出sql就行）</span></span><br><span class="line"><span class="string">导出命令：mysqldump-h127.0.0.1-P3306-uroot-proot education-databases education&gt;database.sql</span></span><br><span class="line"><span class="string">导入命令：mysql-uroot-proot-h127.0.0.1-P3306&lt;d:/all_database.sql</span></span><br></pre></td></tr></table></figure><h1 id="上机练习17"><a href="#上机练习17" class="headerlink" title="上机练习17"></a>上机练习17</h1><p>实现每天凌晨3点10分备份数据库test到&#x2F;root&#x2F;backup&#x2F;,db<br><strong>一、编写shell脚本为root&#x2F;shell&#x2F;backdb.sh</strong></p><ol><li>判断路径root&#x2F;backup&#x2F;db是否存在，不存在创建，存在开始备份</li><li>备份后的文件以时间命名，如20230401110101.sal</li><li>在备份的同时，检查是否有10天前的备份数据库文件，有则删除之</li></ol><p><strong>二、编写定时任务，任务是执行上面的she脚本</strong></p><h1 id="Linux根目录扩容"><a href="#Linux根目录扩容" class="headerlink" title="Linux根目录扩容"></a>Linux根目录扩容</h1><p>第一步：先关机<br>第二步：添加硬盘-SCSI-创建新虚拟磁盘-设置需要添加的磁盘大小（写作最大磁盘大小）（10G）（存储为单个文件）-下一步-完成</p><p><img src="/2025/05/16/CentOS7%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20250716103919722.png" alt="image-20250716103919722"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前磁盘占用情况</span></span><br><span class="line"><span class="built_in">df</span> -lh</span><br><span class="line"><span class="comment"># 查看新增物理磁盘盘符</span></span><br><span class="line"><span class="built_in">ls</span> /dev/sd*</span><br><span class="line"><span class="comment"># 查看新增物理情况磁盘</span></span><br><span class="line">fdisk -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三步：创建物理卷</span></span><br><span class="line">pvcreate /dev/sdb <span class="comment">#sdb为上一步中新增的盘符，按实际情况设置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看根目录所在卷组名称</span></span><br><span class="line">vgdisplay <span class="comment">#vgs  </span></span><br><span class="line">pvdisplay <span class="comment">#pvs</span></span><br><span class="line">lvdisplay <span class="comment">#lvs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四步：使用新增物理卷扩容根目录卷组</span></span><br><span class="line">vgextend centos /dev/sdb</span><br><span class="line"><span class="comment"># 第五步：扩容根目录所在逻辑卷大小(按照G扩容)</span></span><br><span class="line">lvextend -L +10G /dev/centos/root</span><br><span class="line">lvextend -l +2559 /dev/centos/root <span class="comment">#若以上不行则执行这条，2559为上报错信息</span></span><br><span class="line"><span class="comment"># 第六步：重新读取根目录逻辑卷信息</span></span><br><span class="line">xfs_growfs /dev/mapper/centos-root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看扩容后 磁盘占用</span></span><br><span class="line"><span class="built_in">df</span> -lh</span><br><span class="line"><span class="comment"># 查看磁盘挂载</span></span><br><span class="line">lsblk</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>![image-20250716103919722](Pasted image 20250715222012.png)</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle数据库笔记</title>
      <link href="/2025/04/28/oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/"/>
      <url>/2025/04/28/oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是数据库"><a href="#什么是数据库" class="headerlink" title="什么是数据库"></a>什么是数据库</h1><ul><li><p>数据库（Database，DB）</p></li><li><p>数据库管理系统（Batabase Management System，DBMS）</p></li><li><p>结构化查询语言（Structured Query Language，SQL）</p></li><li><p>关系型数据库（Relational Database，RDB）：目前应用最广泛的数据库。</p><p>常见的五种关系型数据库管理系统：<br>①Oracle Database：甲骨文公司<br>②SQL Server：微软公司<br>③DB2：IBM 公司<br>④PostgreSQL：开源<br>⑤MySQL：开源</p></li></ul><h2 id="术语及概念简单介绍"><a href="#术语及概念简单介绍" class="headerlink" title="术语及概念简单介绍"></a>术语及概念简单介绍</h2><ol><li>服务器：用于接收并处理其它程序发出的请求的程序（软件），或者是安装此类程序的设备（计算机）。</li><li>客户端：向服务器发出请求的程序（软件），或者是安装此类程序的设备（计算机）。</li><li><strong>表（table）</strong>：类似 Excel，由行和列组成的二维表。行（Row）和列（Column）</li><li><strong>字段</strong>：表中的列（垂直方向），叫做一个字段</li><li><strong>记录</strong>：表的行（水平方向），叫做一条记录。【注意】关系数据库必须以行为单位进行数据读写。</li><li><strong>单元格</strong>：行列交汇处。【注意】与 Excel 不同，一个单元格只能输入一个数据。</li></ol><h2 id="SQL是什么？"><a href="#SQL是什么？" class="headerlink" title="SQL是什么？"></a>SQL是什么？</h2><ul><li><p>结构化查询语言(Structured Query Language)，是数据库编程的核心语言。</p></li><li><p>SQL 语句：用关键字、表名和列名等组合而成的一条语句。</p></li><li><p>SQL非常接近英语，关键字其实都是英文单词，记住单词的意思，使用起来非常简单。</p></li></ul><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>环境变量一般是指在操作系统中用来&#x3D;&#x3D;指定操作系统运行环境的一些参数&#x3D;&#x3D;。</p><h2 id="SQL分类"><a href="#SQL分类" class="headerlink" title="SQL分类"></a>SQL分类</h2><ol><li><strong>DQL</strong>（Data Query Language，数据查询语言）:一种用于从数据库中检索数据的语<br>言,代表关键字为select。</li><li><strong>DDL</strong>（Data Definition Language，数据定义语言）:用来创建数据库中的各种对象，<br>创建、删除、修改表的结构，代表关键字为create、drop、alter。</li><li><strong>DML</strong>（Data Manipulation Language，数据操作语言）:用于数据库中对数据的操<br>纵，代表关键字为insert、delete 、update。</li><li><strong>DCL</strong>（Data Control Language，数据控制语言）:用来授予或回收访问数据库的某种<br>特权。代表关键字为grant、revoke。</li><li><strong>TCL</strong>（Trasactional Control Languag, 事务控制语言）：用于维护数据的一致性，包<br>括commit、rollback和savepoint三条语句。</li></ol><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><p>关键字：<strong>distinct</strong></p><p>如果希望一个列表没有重复值，可以利用distinct子句从结果集中除去重复的行。</p><p>格式：SELECT DISTINCT 列名称 FROM 表名;</p><p>distinct 它只能放在所有列的最前面（它的前面不能写任何列）</p><p>distinct 单列：对单列进行去重<br>distinct 多列：&#x3D;&#x3D;当且仅当所有列的值同时相等时，才是重复数据&#x3D;&#x3D;</p><p>select distinct deptno from emp;</p><h2 id="dual虚拟表"><a href="#dual虚拟表" class="headerlink" title="dual虚拟表"></a>dual虚拟表</h2><p>dual是个虚拟表，&#x3D;&#x3D;只有一行一列，基本上oracle引入dual为的就是符合语法！&#x3D;&#x3D;</p><p>因为在oracle当中查询语句必须要有关键字 select ….from tablename; 只有这样语句才完<br>整，要是没有表名就无法查询，而时间，日期等不存在于任何表，这个时候就引入了<br>dual 虚表的概念。</p><h2 id="伪列"><a href="#伪列" class="headerlink" title="伪列"></a>伪列</h2><p>rownum:不是在物理上真实存在的列，它是对查询结果给了一个从一开始的排列数据，<br>获取到结果集之后再加上去的一个列</p><p>ROWNUM与ROWID不同，&#x3D;&#x3D;ROWID是插入记录时生成，ROWNUM是查询数据时生成。&#x3D;&#x3D;<br>ROWID标识的是行的<code>物理地址</code>。ROWNUM标识的是查询结果中的<code>行的次序</code>。<br>通过ROWNUM伪列可以限制查询结果集中返回的行数</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul><li><strong>char</strong>类型，最大长度2000个字节，区别与C语言的char类型一个字节。</li><li><strong>varchar2</strong>存储字符串类型，根据数据实际长度自动调整，最大长度4000个字节。</li><li><strong>number</strong>类型具有精度，格式number(SCALE,PRECISION), 精度指定所有数字位的个数，范围指定小数的位数。</li><li><strong>data</strong>类型  存储日期和时间的组合数。</li><li>**timestamp:**时间戳类型,可存放世纪、纪元、年、月、日、时、分、秒还可以存放秒后6位。</li></ul><h2 id="三大范式"><a href="#三大范式" class="headerlink" title="三大范式"></a>三大范式</h2><ul><li><p>1NF 原子性的，不可分。即实体中的某个属性不能有多个值或者不能有重复的属性。</p></li><li><p>2NF 实体的属性完全依赖于主关键字。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。</p></li><li><p>3NF 表中不包含已在其它表中已包含的非主关键字信息。</p><p><strong>用我的话理解就是：</strong></p><ol><li><strong>第一范式：原子性不可分。实体中的属性不能有多个值或多个重复属性。</strong></li><li><strong>第二范式：实体属性完全依赖主键。</strong></li><li><strong>第三范式：表中不含有其他表中的非主键信息。</strong></li></ol></li></ul><h2 id="表和表空间的关系"><a href="#表和表空间的关系" class="headerlink" title="表和表空间的关系"></a>表和表空间的关系</h2><ul><li>一个表只能属于一个表空间，</li><li>一个表空间可以放任意多个表</li><li>一个表空间至少有一个存储文件.dbf文件，可以有多个，而且这多个数据文件可以在不同 位置 </li><li>一个用户有一个默认的表空间，一个用户可以在默认表空间外的其它表空间建表</li></ul><h3 id="创建表空间"><a href="#创建表空间" class="headerlink" title="创建表空间"></a><strong>创建表空间</strong></h3><p>create tablespace 表空间名 datafile ‘数据文件路径’ size 初始大小（2G） autoextend on next 每次扩展的大小(100M) maxsize 最大容量（unlimited）;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> tablespace ora</span><br><span class="line">datafile <span class="string">&#x27;c:\test\tab.dbf&#x27;</span></span><br><span class="line">size <span class="number">2</span>G autoextend <span class="keyword">on</span> next <span class="number">100</span>M maxsize unlimited;</span><br></pre></td></tr></table></figure><h3 id="创建临时表空间："><a href="#创建临时表空间：" class="headerlink" title="创建临时表空间："></a><strong>创建临时表空间：</strong></h3><p>create temporary tablespace 临时表空间名 tempfile ‘数据文件路径’ size 初始大小</p><p>（2G） autoextend on next 每次扩展的大小(100M) maxsize 最大容量（unlimited）;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> temporary tablespace tabtemp</span><br><span class="line">tempfile <span class="string">&#x27;c:\test\tabtemp.dbf&#x27;</span></span><br><span class="line">size <span class="number">2</span>G autoextend <span class="keyword">on</span> next <span class="number">100</span>M maxsize unlimited;</span><br></pre></td></tr></table></figure><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a><strong>创建用户</strong></h3><p>create user 用户名 identified by 密码 default tablespace 表空间名 temporary tablespace</p><p>临时表空间名;</p><p>default后面的语句是为用户指定默认表空间和临时表空间，如果不指定，默认的表空间是users表空间，临时表空间是temp</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> orastudy</span><br><span class="line">identified <span class="keyword">by</span> oracle <span class="keyword">default</span> tablespace ora temporary tablespace tabtemp;</span><br></pre></td></tr></table></figure><h3 id="用户权限赋予"><a href="#用户权限赋予" class="headerlink" title="用户权限赋予"></a><strong>用户权限赋予</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> 权限 <span class="keyword">to</span> 用户名;</span><br><span class="line"><span class="keyword">grant</span> resource,<span class="keyword">connect</span> <span class="keyword">to</span> ora; <span class="comment">--连接权限和资源权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">any</span> <span class="keyword">table</span> <span class="keyword">to</span> ora; <span class="comment">--建表权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">any</span> tablespace <span class="keyword">to</span> ora; <span class="comment">--建表空间权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">any</span> <span class="keyword">table</span> <span class="keyword">to</span> ora; <span class="comment">--只读权</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">any</span> <span class="keyword">view</span> <span class="keyword">to</span> bw; <span class="comment">--创建视图权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">any</span> <span class="keyword">table</span> <span class="keyword">to</span> ora; <span class="comment">--给ora用户预编译表的权限</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--查看角色权限信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> role_sys_privs;</span><br><span class="line"><span class="keyword">grant</span> dba <span class="keyword">to</span> ora; <span class="comment">--管理员权限</span></span><br></pre></td></tr></table></figure><h3 id="删除表空间"><a href="#删除表空间" class="headerlink" title="删除表空间"></a><strong>删除表空间</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> tablespace student1 including contents;</span><br></pre></td></tr></table></figure><p>including contents选项用于删除表空间时包含其内容。如果不使用这个选项，表空间会被删除，但数据文件仍然存在，磁盘空间不会被释放。使用这个选项可以确保表空间及其内容被完全删除，从而释放磁盘空间</p><h3 id="扩容-表空间"><a href="#扩容-表空间" class="headerlink" title="扩容 表空间"></a><strong>扩容 表空间</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> tablespace student</span><br><span class="line"><span class="keyword">add</span> datafile <span class="string">&#x27;C:\test\student.dbf&#x27;</span> size <span class="number">100</span>m autoextend <span class="keyword">on</span> next <span class="number">10</span>m maxsize unlimited;</span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><h3 id="1-列级约束（Column-Level-Constraints）"><a href="#1-列级约束（Column-Level-Constraints）" class="headerlink" title="1. 列级约束（Column-Level Constraints）"></a><strong>1. 列级约束（Column-Level Constraints）</strong></h3><p> <strong>定义位置</strong>：直接在<strong>列的定义中</strong>声明约束。</p><p><strong>适用场景</strong>：约束仅作用于<strong>单个列</strong>。</p><p><strong>特点</strong>：</p><ul><li><p>简洁直观，适合单列约束。</p></li><li><p>无法定义涉及多列的约束（如复合主键）。</p></li><li><p>外键约束的列级语法需要直接引用父表列。</p></li></ul><h3 id="2-表级约束（Table-Level-Constraints）"><a href="#2-表级约束（Table-Level-Constraints）" class="headerlink" title="2. 表级约束（Table-Level Constraints）"></a><strong>2. 表级约束（Table-Level Constraints）</strong></h3><ul><li><p><strong>定义位置</strong>：在<strong>所有列定义之后</strong>单独声明约束。所有使用alter语句添加的约束基本都是 表级约束。</p></li><li><p><strong>适用场景</strong>：</p><ul><li><p>约束涉及<strong>多个列</strong>（如复合主键、联合唯一键）。</p></li><li><p>需要显式命名约束（便于后续管理）。</p></li><li><p>外键约束需要指定父表列名。<br> [ CONSTRAINT &lt;约束名&gt; ] &lt;约束类型&gt; 约束名：约束不指定名称时，系统会给定一个名称。</p></li></ul></li></ul><h3 id="六大约束"><a href="#六大约束" class="headerlink" title="六大约束"></a>六大约束</h3><ol><li><p>非空约束 <strong>not null</strong></p></li><li><p>默认约束 <strong>default</strong></p></li><li><p>唯一约束 <strong>unique</strong></p></li><li><p>主键约束 <strong>primary key</strong></p></li><li><p>检查约束 <strong>check(条件表达式)</strong></p></li><li><p>外键约束 <strong>references 主表(主键列)</strong></p><p> &#x3D;&#x3D;另起一行constraint开头的是表级约束&#x3D;&#x3D;</p></li></ol><h1 id="操作符与增删改"><a href="#操作符与增删改" class="headerlink" title="操作符与增删改"></a>操作符与增删改</h1><h2 id="insert插入"><a href="#insert插入" class="headerlink" title="insert插入"></a>insert插入</h2><ul><li><p>Insert into 表名(列名1，列名2，列名3)values(value1，value2,value3);</p></li><li><p>Insert into 表名 values (value1,value2,value3);</p><p>  <strong>如果值中需要空值，需要在value中输入null</strong></p></li><li><p>Insert into 表名(列名1，列名2，列名3) select * from 表名 where</p><p>  插入一整个表</p></li></ul><h2 id="update修改"><a href="#update修改" class="headerlink" title="update修改"></a>update修改</h2><ul><li><p>Update 表名 set 列名 &#x3D;’values’ ,列名&#x3D;’values’ where</p></li><li><p>Update 表名 set 列名&#x3D;(select * from 表名) where</p></li></ul><h2 id="delete删除"><a href="#delete删除" class="headerlink" title="delete删除"></a>delete删除</h2><p><strong>delete删除的是一整条记录，而不是其中一个字段值。</strong></p><ul><li>Delete from 表 where 条件</li><li>Delete from 表 where sal&gt;(select avg(hissal) from salgrade where grade&#x3D;4)</li></ul><h2 id="delete，drop，truncate的区别"><a href="#delete，drop，truncate的区别" class="headerlink" title="delete，drop，truncate的区别"></a>delete，drop，truncate的区别</h2><table><thead><tr><th align="center"></th><th align="center">delete</th><th align="center">turncate</th><th align="center">drop</th></tr></thead><tbody><tr><td align="center">删除表数据</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">删除表结构</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">是否能回滚</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">执行速度</td><td align="center">慢</td><td align="center">中</td><td align="center">快</td></tr></tbody></table><h2 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a><strong>Merge</strong></h2><p><strong>根据与源表联接的结果，对目标表执行插入、更新或删除操作。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Merge</span> <span class="keyword">into</span> 目标表 <span class="keyword">as</span> 别名</span><br><span class="line"><span class="keyword">Using</span> 源表 <span class="keyword">as</span> 别名</span><br><span class="line"><span class="keyword">On</span> (<span class="keyword">values</span><span class="operator">=</span><span class="keyword">values</span> <span class="operator">|</span><span class="keyword">and</span> )</span><br><span class="line"><span class="keyword">When</span> matched <span class="keyword">then</span> <span class="keyword">update</span> 和 <span class="keyword">delete</span> <span class="comment">--匹配则更新和删除</span></span><br><span class="line"><span class="keyword">When</span> <span class="keyword">not</span> matched <span class="keyword">then</span> <span class="keyword">insert</span>       <span class="comment">--不匹配则插入</span></span><br></pre></td></tr></table></figure><h2 id="操作符优先级"><a href="#操作符优先级" class="headerlink" title="操作符优先级"></a>操作符优先级</h2><p>   <strong>算术操作符&gt;链接操作符&gt;比较操作符合&gt;not逻辑操作符&gt;and逻辑操作符&gt;or逻辑操作符</strong><br> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;all: 表示大于最大值        大于全部值</span><br><span class="line">&lt;all：表示小于最小值        小于全部值</span><br><span class="line">&gt;any：表示大于最小值大于任意一个值</span><br><span class="line">&lt;any：表示小于最大值   小于任意一个值</span><br><span class="line">=any: 和in类似等于任意一个值</span><br></pre></td></tr></table></figure><br><strong>and取交集<br>or取并集<br>not取反结果</strong></p><table><thead><tr><th align="center">操作符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">between…and…</td><td align="left">在两个值之间(包含边界)</td></tr><tr><td align="center">in(set)</td><td align="left">等于值列表中的一个</td></tr><tr><td align="center">like</td><td align="left">模糊查询</td></tr><tr><td align="center">is null</td><td align="left">空值</td></tr></tbody></table><p>like：<br>在where子句中使用like关键字查询数据的方式也称为<strong>字符串模式匹配</strong>或字符串模糊查询，like关键字需要使用通配符在字符串内查找指定的模式。</p><p><em>要查询的字符串中含有<strong>“%”</strong>或__“</em>”时，可以使用转义（escape）关键字实现。</p><p>在“\”之后的“<em>”<strong>字符已不是通配符，而是他</strong>本来的含义</em></p><h1 id="排列、分组查询"><a href="#排列、分组查询" class="headerlink" title="排列、分组查询"></a>排列、分组查询</h1><h2 id="排列查询"><a href="#排列查询" class="headerlink" title="排列查询"></a>排列查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> col_name <span class="keyword">from</span> table_name <span class="keyword">order</span> <span class="keyword">by</span> col_name1,col_name2....(<span class="keyword">asc</span><span class="operator">/</span><span class="keyword">desc</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">order</span>:排列查询的关键字</span><br><span class="line"><span class="keyword">by</span>:介词，后面跟列名</span><br><span class="line"><span class="keyword">asc</span>:升序（默认）</span><br><span class="line"><span class="keyword">desc</span>:降序</span><br></pre></td></tr></table></figure><p><strong>order by 是唯一一个可以使用别名的关键词,与sql语句的执行顺序有关</strong> </p><p>&#96;注意：</p><p><code>降序排序时如果有空值，那么空值会作为最大值排在最前面</code></p><p><code>可以在order by后通过数字指定列进行排序，通常不使用这种方法</code></p><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><p>目的是用来<strong>汇总数据或为某个分组显示单行的汇总信息</strong>，通常在查询结果集</p><p>中使用group by 子句对记录进行分组。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> col_name <span class="keyword">from</span> table_name <span class="keyword">group</span> <span class="keyword">by</span> col_name</span><br><span class="line"><span class="keyword">group</span>:分组的关键字</span><br><span class="line"><span class="keyword">by</span>:介词，后面加列名</span><br><span class="line"><span class="keyword">Having</span>：过滤组关键字</span><br></pre></td></tr></table></figure><p>聚合函数：定义：也叫组函数，<strong>对一组数据（一列或多列）进行处理，返回单个结果</strong></p><p>使用group by子句和聚合函数，可以实现对查询结果中每一组数据进行分类统计。</p><h3 id="where-和-having的区别"><a href="#where-和-having的区别" class="headerlink" title="where 和 having的区别"></a>where 和 having的区别</h3><table><thead><tr><th align="center"></th><th align="center">where</th><th align="center">having</th></tr></thead><tbody><tr><td align="center">处理目标</td><td align="center">行过滤</td><td align="center">分组过滤</td></tr><tr><td align="center">书写位置</td><td align="center">from后</td><td align="center">一般在group by后</td></tr><tr><td align="center">执行优先</td><td align="center">分组前过滤</td><td align="center">分组后过滤</td></tr><tr><td align="center">是否加过滤条件</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">加聚会函数过滤条件</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">效率</td><td align="center">快</td><td align="center">慢</td></tr></tbody></table><h3 id="where条件里为什么不能有聚合函数"><a href="#where条件里为什么不能有聚合函数" class="headerlink" title="where条件里为什么不能有聚合函数"></a>where条件里为什么不能有聚合函数</h3><p>基于整列数据进行计算的，而where子句则是对数据行进行过滤的(这里过滤是在一个记录里边过滤的,基于”行”<br>为聚集函数要对全列数据时行计算，因而<strong>使用它的前提是：结果集已经确定</strong>！</p><h1 id="递归查询"><a href="#递归查询" class="headerlink" title="递归查询"></a>递归查询</h1><p>递归查询的书写方案</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TO</span> <span class="type">DATE</span>(<span class="number">2017</span><span class="number">-12</span><span class="number">-01</span><span class="string">&#x27;,&#x27;</span>YYYY <span class="operator">-</span> MM <span class="operator">-</span> DD<span class="string">&#x27;)+LEVEL * INTERVAL&#x27;</span><span class="number">1</span><span class="string">&#x27;day</span></span><br><span class="line"><span class="string">FROM dual</span></span><br><span class="line"><span class="string">CONNECT BY LEVEL &lt;=24</span></span><br></pre></td></tr></table></figure><h1 id="同环比"><a href="#同环比" class="headerlink" title="同环比"></a>同环比</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.dat,a.amount,b.amount,c.amount</span><br><span class="line"><span class="keyword">from</span> tab a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> tab b <span class="keyword">on</span> to_date (a.dat,<span class="string">&#x27;yyyymm&#x27;</span>)<span class="operator">=</span>add_months(to_date(b.dat,<span class="string">&#x27;yyyymm&#x27;</span>),<span class="number">1</span>)</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> tab c <span class="keyword">on</span> to_date(a.dat,<span class="string">&#x27;yyyymm&#x27;</span>)<span class="operator">=</span>add_months(to_date(c.dat,<span class="string">&#x27;yyyymm&#x27;</span>),<span class="number">12</span>)</span><br><span class="line">                                                               </span><br><span class="line">                                                               </span><br><span class="line"><span class="keyword">select</span> a.dat,a.year,a.month a.amount</span><br><span class="line"><span class="keyword">from</span> tab a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> tab b <span class="keyword">on</span> ta.year<span class="operator">=</span>b.year <span class="keyword">and</span> a.month<span class="operator">=</span>b.month<span class="operator">+</span><span class="number">1</span>)<span class="keyword">or</span> (a.year<span class="operator">=</span>b.year<span class="operator">+</span><span class="number">1</span> <span class="keyword">and</span> a.month<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> b.month<span class="operator">=</span><span class="number">12</span>)</span><br><span class="line"><span class="keyword">Left</span> <span class="keyword">join</span> tab c <span class="keyword">on</span> a.month<span class="operator">=</span>c.month <span class="keyword">and</span> a.year<span class="operator">=</span>c.year<span class="operator">+</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="关键词执行顺序"><a href="#关键词执行顺序" class="headerlink" title="关键词执行顺序"></a>关键词执行顺序</h1><table><thead><tr><th align="center"></th><th align="center">目标</th><th align="center">书写顺序</th><th align="center">执行顺序</th></tr></thead><tbody><tr><td align="center">select</td><td align="center">列</td><td align="center">1</td><td align="center">5</td></tr><tr><td align="center">from</td><td align="center">表</td><td align="center">2</td><td align="center">1</td></tr><tr><td align="center">where</td><td align="center">条件</td><td align="center">3</td><td align="center">2</td></tr><tr><td align="center">group by</td><td align="center">列</td><td align="center">4</td><td align="center">3</td></tr><tr><td align="center">having</td><td align="center">条件:聚合</td><td align="center">5</td><td align="center">4</td></tr><tr><td align="center">order by</td><td align="center">列</td><td align="center">6</td><td align="center">6</td></tr></tbody></table><p><strong>分组后select 后面只能跟分了组的列和聚合函数<br>group by后面产生所有的聚合函数，select只是展示</strong></p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a><strong>函数</strong></h1><p><strong>函数:SQL 函数会对传递进来的参数进行处理，并返回一个处理结果，也就是返回一个值。</strong></p><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><table><thead><tr><th>序号</th><th>函数名</th><th>含义</th></tr></thead><tbody><tr><td>1</td><td>length(str)</td><td>返回一个字符串长度</td></tr><tr><td>2</td><td>concat(str1,str2)</td><td>字符串连接函数</td></tr><tr><td>3</td><td>chr()</td><td>将一个ASCII码转换为字符</td></tr><tr><td>4</td><td>ascii(字符)</td><td>将一个字符转换为ASCII码值，ASCII码转换的是键盘交互的所有的键</td></tr><tr><td>5</td><td>instr(str1,str2,start,n)</td><td>instr(源字符串,目标字符串,开始位置,匹配序号)，返回匹配位置的下标。替换like 查找第几位有什么字符，确定原始字符里有多少个字符。如果start是负数，则从后往前数，从前往后截取。</td></tr><tr><td>6</td><td>substr(str,start,len)</td><td>从start位置开始截取长度为len的字符串，返回一个字符串。如果start是负数，则从后往前数，到开始位置停下了往后截取。</td></tr><tr><td>7</td><td>initcap(str)</td><td>将首字母大写其他字母小写(以空格来区分单词的)</td></tr><tr><td>8</td><td>lower&#x2F;upper()</td><td>大小写转换函数</td></tr><tr><td>9</td><td>replace(str,s,d)</td><td>字符串替换函数，将字符串str中的s字符替换成字符d。使用功能: 1. 替换 2.删除 3.脱敏</td></tr><tr><td>10</td><td>translate(char, from,to)</td><td>返回将出现在from中的每个字符替换为to中的相应字符</td></tr><tr><td>11</td><td>round(num,[num1,])</td><td>四舍五入函数，num1是正数时精度是正数小数点之后，是负数时小数点之前</td></tr><tr><td>12</td><td>mod(num1，num2)</td><td>求余函数</td></tr><tr><td>13</td><td>trunc()</td><td>截取函数</td></tr><tr><td>14</td><td>floor()</td><td>向下取整</td></tr><tr><td>15</td><td>ceil()</td><td>向上取整</td></tr><tr><td>16</td><td>power(n, m)</td><td>返回n的m次幂</td></tr><tr><td>17</td><td>sqrt(n)</td><td>返回数字n的平方根</td></tr><tr><td>18</td><td>to_date(str)</td><td>将字符串转换成日期yyyy,MM,dd,hh24,mi,ss</td></tr><tr><td>19</td><td>to_number()</td><td>将字符串转换成数字</td></tr><tr><td>20</td><td>to_char()</td><td>字符串转换函数。跟日期有关的不管是日期转字符还是字符转日期都要带日期格式。to_char()的站位用法：’990.99’:9代表占一个位置，0代表把小数点之前的0补齐</td></tr><tr><td>21</td><td>last_day(日期)</td><td>取当前日期月的最后一天</td></tr><tr><td>22</td><td>next_day(sysdate,n)</td><td>取下一个(最近的)一周的第几天，1是星期日</td></tr><tr><td>23</td><td>add_months(日期,月)</td><td>给一个日期加上若干个月</td></tr><tr><td>24</td><td>months_between(date1,date2)</td><td>取两个日期相差的月数</td></tr><tr><td>25</td><td>nvl2(列名,值1,值2)</td><td>空值转换函数，当第一个参数的值是空时，返回结果是第3个参数的值，当第一个参数不为空时，返回结果是第2个参数的值</td></tr></tbody></table><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><ol><li><p>隐式转换<br> 指Oracle在执行SQL语句时自动将数据类型转换成需要的数据类型。<strong>隐式转换可能会导致精度损失或数据不准确，</strong>因此在使用时需要谨慎。</p></li><li><p>显示转换<br> 显式转换是指在SQL语句中使用一些函数<strong>强制将某个数据类型转换成另一个数据类型</strong>。<br> to_number ：字符转换为数字<br> to_date()：作用将字符类型按一定格式转化为日期类型。<br> to_char 数字转化为字符<br> to_char 日期转化为字符,<strong>必须加单引号,并且区分大小写</strong></p></li></ol><h3 id="转换函数示例"><a href="#转换函数示例" class="headerlink" title="转换函数示例"></a>转换函数示例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> to_number(<span class="string">&#x27;0.9890&#x27;</span>)<span class="operator">+</span><span class="number">3</span> <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> to_date(<span class="string">&#x27;1999-09-09 &#x27;</span>,<span class="string">&#x27;yyyy/MM/dd&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> to_date(<span class="string">&#x27;19990909&#x27;</span>,<span class="string">&#x27;yyyyMMdd&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> to_date(<span class="string">&#x27;1999/09/09 22:56:18&#x27;</span>,<span class="string">&#x27;yyyy/MM/dd hh24:mi:ss&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> to_date(<span class="number">19990909</span>,<span class="string">&#x27;yyyyMMdd&#x27;</span>) <span class="keyword">from</span> dual;<span class="comment">---数字也可以去转</span></span><br><span class="line"><span class="keyword">select</span> to_char(<span class="string">&#x27;.83&#x27;</span>,<span class="string">&#x27;0.99&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> to_char(sysdate,<span class="string">&#x27;dd&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> to_char(sysdate,<span class="string">&#x27;mm&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> to_char(sysdate,<span class="string">&#x27;yyyy&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> to_char(sysdate,<span class="string">&#x27;yyyy-mm-dd&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> to_char(sysdate,<span class="string">&#x27;yyyy/MM/dd hh24:mi:ss&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> last_day(sysdate) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> next_day(sysdate,<span class="number">4</span>) <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">select</span> add_months(sysdate,<span class="number">-3</span>) <span class="keyword">from</span> dual<span class="comment">--求3个月前的今天</span></span><br><span class="line"><span class="keyword">select</span> sysdate<span class="operator">-</span>hiredate <span class="keyword">from</span> emp;<span class="comment">----得出结果以天为单位的</span></span><br><span class="line"><span class="keyword">select</span> months_between(sysdate,to_date(<span class="string">&#x27;2020-3-3&#x27;</span>,<span class="string">&#x27;yyyy/MM/dd&#x27;</span>)) <span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">select</span> comm,nvl2(comm,comm,<span class="number">1</span>) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><h2 id="空值赋值nvl"><a href="#空值赋值nvl" class="headerlink" title="空值赋值nvl"></a>空值赋值nvl</h2><p>【语法】NVL (expr1, expr2)<br>【功能】若expr1为NULL，返回expr2；expr1不为NULL，返回expr1。</p><p>注意两者的类型要一致</p><p>【语法】NVL2 (expr1, expr2, expr3)<br>【功能】expr1不为NULL，返回expr2；expr2为NULL，返回expr3。</p><p>expr2和expr3类型不同的话，expr3会转换为expr2的类型</p><h2 id="TRANSLATE-c1-c2-c3"><a href="#TRANSLATE-c1-c2-c3" class="headerlink" title="TRANSLATE(c1,c2,c3)"></a>TRANSLATE(c1,c2,c3)</h2><p>【功能】将字符表达式值中，指定字符替换为新字符</p><p>c1 希望被替换的字符或变量<br>c2 查询原始的字符集<br>c3 替换新的字符集，将c2对应顺序字符，替换为c3对应顺序字符</p><p>如果c3长度大于c2，则c3长出后面的字符无效<br>如果c3长度小于c2，则c2长出后面的字符均替换为空(删除)<br>如果c3长度为0，则返回空字符串。<br>如果c2里字符重复，按首次位置为替换依据</p><h2 id="Case-when"><a href="#Case-when" class="headerlink" title="Case when"></a>Case when</h2><ol><li><p>翻译</p></li><li><p>行转列</p></li><li><p>判断输出</p></li><li><p>简单Case函数</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,<span class="keyword">case</span> deptno</span><br><span class="line"><span class="keyword">when</span> <span class="number">10</span> <span class="keyword">then</span> <span class="string">&#x27;第一部门&#x27;</span></span><br><span class="line"><span class="keyword">when</span> <span class="number">20</span> <span class="keyword">then</span> <span class="string">&#x27;第二部门&#x27;</span></span><br><span class="line"><span class="keyword">when</span> <span class="number">30</span> <span class="keyword">then</span> <span class="string">&#x27;第三部门&#x27;</span></span><br><span class="line"><span class="keyword">else</span> <span class="string">&#x27;第四部门&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><ol start="2"><li>Case搜索函数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> deptno<span class="operator">=</span><span class="number">10</span> <span class="keyword">then</span> <span class="string">&#x27;第一部门&#x27;</span></span><br><span class="line"> <span class="keyword">when</span> deptno<span class="operator">=</span><span class="number">20</span> <span class="keyword">then</span> <span class="string">&#x27;第二部门&#x27;</span></span><br><span class="line"> <span class="keyword">when</span> deptno<span class="operator">=</span><span class="number">30</span> <span class="keyword">then</span> <span class="string">&#x27;第三部门&#x27;</span></span><br><span class="line"><span class="keyword">else</span> <span class="string">&#x27;第四部门&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">from</span> emp;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="keyword">Case</span>函数只返回第一个符合条件的值，剩下的<span class="keyword">Case</span>部分将会被自动忽略。<span class="operator">*</span><span class="operator">*</span></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><p>*<strong>Case when 生成的列也可以丢到group by 后面去分组的,where,having都可以使用CASE表达式需注意的点</strong></p></li><li><p>&#x3D;&#x3D;Case函数只返回第一个符合条件的值，剩下的Case部分将会被自动忽略。&#x3D;&#x3D;</p></li></ol><h2 id="decode-等值翻译"><a href="#decode-等值翻译" class="headerlink" title="decode 等值翻译"></a>decode 等值翻译</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,deptno,</span><br><span class="line">decode(deptno,<span class="number">10</span>,<span class="string">&#x27;十号部门&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;二十号部门&#x27;</span>,<span class="number">30</span>,<span class="string">&#x27;三十号部门&#x27;</span>,<span class="string">&#x27;其他部门&#x27;</span>) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><h2 id="decode与case-when-的比较"><a href="#decode与case-when-的比较" class="headerlink" title="decode与case when 的比较"></a>decode与case when 的比较</h2><table><thead><tr><th align="center">函数</th><th align="center">Oracle</th><th align="center">SQL Server</th><th align="center">MySQL</th><th align="center">informix</th></tr></thead><tbody><tr><td align="center">decode支持</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">case when支持</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr></tbody></table><ol><li><strong>decode 只能用做相等判断，但是可以配合sign函数进行大于，小于，等于的判断</strong></li><li><strong>CASE when可用于&#x3D;,&gt;&#x3D;,&lt;,&lt;&#x3D;,&lt;&gt;,is null,is not null 等的判断；</strong></li></ol><h2 id="聚合case实现行转列"><a href="#聚合case实现行转列" class="headerlink" title="聚合case实现行转列"></a><strong>聚合</strong>case实现行转列</h2><ol><li>行转列方法一</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,</span><br><span class="line"><span class="built_in">max</span>(<span class="keyword">case</span> <span class="keyword">when</span> job<span class="operator">=</span><span class="string">&#x27;SALESMAN&#x27;</span> <span class="keyword">then</span> sal <span class="keyword">end</span>) salesman,</span><br><span class="line"><span class="built_in">max</span>(<span class="keyword">case</span> <span class="keyword">when</span> job<span class="operator">=</span><span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">then</span> sal <span class="keyword">end</span>) manager,</span><br><span class="line"><span class="built_in">max</span>(<span class="keyword">case</span> <span class="keyword">when</span> job<span class="operator">=</span><span class="string">&#x27;CLERK&#x27;</span> <span class="keyword">then</span> sal <span class="keyword">end</span>) clerk</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> deptno</span><br></pre></td></tr></table></figure><h2 id="行转列-列转行-函数"><a href="#行转列-列转行-函数" class="headerlink" title="行转列 列转行 函数"></a>行转列 列转行 函数</h2><p><strong>pivot格式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> （数据查询集）</span><br><span class="line">PIVOT</span><br><span class="line">(</span><br><span class="line"><span class="built_in">SUM</span>(Score<span class="operator">/</span>行转列后 列的值<span class="operator">/</span>) <span class="keyword">FOR</span></span><br><span class="line">coursename<span class="operator">/</span>需要行转列的列<span class="operator">/</span> <span class="keyword">IN</span> (转换后列的值)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol start="2"><li>行转列方法二</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> deptno,job,sal <span class="keyword">from</span> emp)</span><br><span class="line">pivot</span><br><span class="line">(</span><br><span class="line"><span class="built_in">max</span>(sal) <span class="keyword">for</span> job <span class="keyword">in</span> (<span class="string">&#x27;SALESMAN&#x27;</span>,<span class="string">&#x27;MANAGER&#x27;</span>,<span class="string">&#x27;CLERK&#x27;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">--行转列 列转行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> deptno,job,sal <span class="keyword">from</span> emp)</span><br><span class="line">pivot</span><br><span class="line">(</span><br><span class="line"><span class="built_in">max</span>(sal) <span class="keyword">for</span> job <span class="keyword">in</span> (<span class="string">&#x27;SALESMAN&#x27;</span> salesman,<span class="string">&#x27;MANAGER&#x27;</span> manager,<span class="string">&#x27;CLERK&#x27;</span> clerk)</span><br><span class="line">)</span><br><span class="line">unpivot</span><br><span class="line">(</span><br><span class="line">newsal <span class="keyword">for</span> job <span class="keyword">in</span>(salesman,manager,clerk)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="开窗函数over"><a href="#开窗函数over" class="headerlink" title="开窗函数over()"></a><strong>开窗函数</strong>over()</h2><h3 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a><strong>窗口函数</strong></h3><p>（分析函数）（主要做排序）</p><p>开窗函数格式： 函数名(列) OVER(选项)</p><p><strong>over(partition by 分组列 order by 排序列)</strong></p><p><code>注：order by后面可以是处理后的列</code></p><p>over 关键字表示把函数当成开窗函数而不是聚合函数。SQL 标准允许将所有聚合函数用做开窗函数，&#x3D;&#x3D;使用 over 关键字来区分这两种用法。&#x3D;&#x3D;</p><h3 id="ROW-NUMBER"><a href="#ROW-NUMBER" class="headerlink" title="ROW_NUMBER()"></a>ROW_NUMBER()</h3><p>ROW_NUMBER()函数作用就是将select查询到的数据进行排序，每一条数据加一个序号。排序的序号和rownum伪列相同，连续序号，不考虑值相等的情况（值相同序号不相同）</p><h3 id="RANK-–并列跳号"><a href="#RANK-–并列跳号" class="headerlink" title="RANK()–并列跳号"></a>RANK()–并列跳号</h3><p>RANK()函数，顾名思义排名函数，可以对某一个字段进行排名，可以用来做排序，<strong>它序号不连续</strong>，考虑重复数据，<strong>如果值相等序号相同</strong></p><h3 id="DENSE-RANK-–并列不跳号"><a href="#DENSE-RANK-–并列不跳号" class="headerlink" title="DENSE_RANK()–并列不跳号"></a>DENSE_RANK()–并列不跳号</h3><p>DENSE_RANK()密集的排名，紧密排序，可以用来做排序，它序号连续，考虑重复数据，如果值相等序号就相同他和RANK()区别在于，排名的连续性，<strong>DENSE_RANK()排名是连续的，RANK()是跳跃的排名</strong></p><h3 id="用聚合函数来开窗"><a href="#用聚合函数来开窗" class="headerlink" title="用聚合函数来开窗"></a><strong>用聚合函数来开窗</strong></h3><p>avg() max() count() sum() min()</p><p>可以不加任何条件，如果加order by 则是按照顺序依次进行计算，一般不加order by</p><h3 id="wm-concat函数"><a href="#wm-concat函数" class="headerlink" title="wm_concat函数"></a><strong>wm_concat</strong>函数</h3><p>wm_concat(列名),该函数可以把列值以”,”号分隔起来,并显示成一行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> wm_concat(ename) <span class="keyword">from</span> emp</span><br></pre></td></tr></table></figure><h3 id="listagg函数"><a href="#listagg函数" class="headerlink" title="listagg函数"></a><strong>listagg</strong>函数</h3><p>LISTAGG 将多行合并成一行</p><ol><li>作为普通函数，对工资进行排序，用逗号进行拼接。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">listagg</span>(ename,<span class="string">&#x27;,&#x27;</span>)<span class="keyword">within</span> <span class="keyword">group</span>(<span class="keyword">order</span> <span class="keyword">by</span> sal)name <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal;</span><br></pre></td></tr></table></figure><ol start="2"><li>作为分组函数：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">listagg</span>(ename,<span class="string">&#x27;,&#x27;</span>)<span class="keyword">within</span> <span class="keyword">group</span>(<span class="keyword">order</span> <span class="keyword">by</span> sal)name <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br></pre></td></tr></table></figure><ol start="3"><li>作为分析函数：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno,ename,sal,<span class="built_in">listagg</span>(ename,<span class="string">&#x27;,&#x27;</span>)<span class="keyword">within</span> <span class="keyword">group</span>(<span class="keyword">order</span> <span class="keyword">by</span> sal)<span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span></span><br><span class="line">   deptno)name <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p>listagg()里面的order by语法是必带的，搭配开窗，开窗里的order by 不用带</p><h3 id="偏移分析函数"><a href="#偏移分析函数" class="headerlink" title="偏移分析函数"></a><strong>偏移分析函数</strong></h3><p><strong>lead(params,m,n) 以params为目标向下m位取数，当取不到时默认为 n</strong></p><p><strong>lag(params,m,n) 以params为目标向上m位取数，当取不到时默认为 n</strong></p><p>例如：lead(field, num, defaultvalue) field需要查找的字段，num往后查找的num行的数据，defaultvalue没有符合条件的默认值。</p><h2 id="group-by-和partition-by"><a href="#group-by-和partition-by" class="headerlink" title="group by 和partition by"></a>group by 和partition by</h2><p>在 SQL 中，<code>PARTITION BY</code> 和 <code>GROUP BY</code> 都用于对数据进行分组，但它们的 <strong>核心目的</strong>、<strong>使用场景</strong> 和 <strong>结果形态</strong> 有本质区别。</p><h3 id="1-核心作用"><a href="#1-核心作用" class="headerlink" title="1. 核心作用"></a>1. 核心作用</h3><table><thead><tr><th align="left"><strong><code>GROUP BY</code></strong></th><th align="left"><strong><code>PARTITION BY</code></strong></th></tr></thead><tbody><tr><td align="left">对数据进行 <strong>聚合分组</strong>，生成汇总结果（每个分组返回一行）。</td><td align="left">对数据进行 <strong>分区</strong>，定义窗口函数的计算范围（不减少行数）。</td></tr><tr><td align="left">常与聚合函数（<code>SUM</code>, <code>AVG</code>, <code>COUNT</code>）结合使用。</td><td align="left">常与窗口函数（<code>ROW_NUMBER</code>, <code>RANK</code>, <code>SUM OVER</code>）结合使用。</td></tr></tbody></table><hr><h3 id="2-结果集形态"><a href="#2-结果集形态" class="headerlink" title="2. 结果集形态"></a><strong>2. 结果集形态</strong></h3><table><thead><tr><th align="left"><strong><code>GROUP BY</code></strong></th><th align="left"><strong><code>PARTITION BY</code></strong></th></tr></thead><tbody><tr><td align="left">结果集中的行数 <strong>减少</strong>，每个分组返回一行。</td><td align="left">结果集中的行数 <strong>不变</strong>，原始数据行全部保留。</td></tr><tr><td align="left"><strong>示例</strong>：按部门分组统计总工资，每个部门一行。</td><td align="left"><strong>示例</strong>：按部门分区，计算每个员工的部门内工资排名。</td></tr></tbody></table><hr><ol><li><p>&#x3D;&#x3D;group by有去重效果&#x3D;&#x3D;</p></li><li><p>&#x3D;&#x3D;partition by没有去重效果&#x3D;&#x3D;</p><p>求每个部门最高工资的人员信息，max()函数少用，不止一个工资最高也可能存在其他漏洞</p></li></ol><h3 id="3-语法与使用场景"><a href="#3-语法与使用场景" class="headerlink" title="3. 语法与使用场景"></a><strong>3. 语法与使用场景</strong></h3><h4 id="1-GROUP-BY"><a href="#1-GROUP-BY" class="headerlink" title="(1) GROUP BY"></a><strong>(1) <code>GROUP BY</code></strong></h4><ul><li><p><strong>语法</strong>：配合聚合函数，生成汇总统计结果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">SELECT</span> department, <span class="built_in">SUM</span>(salary) <span class="keyword">AS</span> total_salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department;  <span class="comment">-- 每个部门返回一行汇总数据</span></span><br></pre></td></tr></table></figure></li><li><p><strong>结果示例</strong>：</p><table><thead><tr><th align="left">department</th><th align="left">total_salary</th></tr></thead><tbody><tr><td align="left">HR</td><td align="left">250000</td></tr><tr><td align="left">IT</td><td align="left">380000</td></tr></tbody></table></li></ul><h4 id="2-PARTITION-BY"><a href="#2-PARTITION-BY" class="headerlink" title="(2) PARTITION BY"></a><strong>(2) <code>PARTITION BY</code></strong></h4><ul><li><p><strong>语法</strong>：在窗口函数中定义数据分区范围，保留所有原始行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  employee_id, </span><br><span class="line">  department, </span><br><span class="line">  salary,</span><br><span class="line">  <span class="built_in">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> department <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>) <span class="keyword">AS</span> dept_rank</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure></li><li><p><strong>结果示例</strong>：</p><table><thead><tr><th align="left">employee_id</th><th align="left">department</th><th align="left">salary</th><th align="left">dept_rank</th></tr></thead><tbody><tr><td align="left">101</td><td align="left">HR</td><td align="left">80000</td><td align="left">1</td></tr><tr><td align="left">102</td><td align="left">HR</td><td align="left">75000</td><td align="left">2</td></tr><tr><td align="left">201</td><td align="left">IT</td><td align="left">95000</td><td align="left">1</td></tr></tbody></table></li></ul><hr><h3 id="4-关键区别总结"><a href="#4-关键区别总结" class="headerlink" title="4. 关键区别总结"></a><strong>4. 关键区别总结</strong></h3><table><thead><tr><th align="left"><strong>特性</strong></th><th align="left"><strong><code>GROUP BY</code></strong></th><th align="left"><strong><code>PARTITION BY</code></strong></th></tr></thead><tbody><tr><td align="left"><strong>行数变化</strong></td><td align="left">减少（每个分组一行）</td><td align="left">不变（保留所有原始行）</td></tr><tr><td align="left"><strong>函数类型</strong></td><td align="left">聚合函数（<code>SUM</code>, <code>AVG</code>）</td><td align="left">窗口函数（<code>RANK</code>, <code>ROW_NUMBER</code>）</td></tr><tr><td align="left"><strong>结果内容</strong></td><td align="left">分组键 + 聚合值</td><td align="left">原始数据 + 窗口计算结果</td></tr><tr><td align="left"><strong>典型用途</strong></td><td align="left">生成汇总统计报表</td><td align="left">排名、累计值、前后行对比分析</td></tr></tbody></table><h3 id="5-如何选择？"><a href="#5-如何选择？" class="headerlink" title="5. 如何选择？"></a><strong>5. 如何选择？</strong></h3><ul><li>**用 <code>GROUP BY</code>**：<br>需要生成汇总统计结果（如部门总工资、订单总数），且不需要保留原始明细数据。</li><li>**用 <code>PARTITION BY</code>**：<br>需要在保留所有原始行的基础上，添加分组计算列（如部门内排名、累计销售额）。</li></ul><hr><h3 id="一句话总结"><a href="#一句话总结" class="headerlink" title="一句话总结"></a><strong>一句话总结</strong></h3><ul><li><code>GROUP BY</code> 是 <strong>纵向压缩</strong>（聚合分组，减少行数）。</li><li><code>PARTITION BY</code> 是 <strong>横向扩展</strong>（分区计算，保留所有行）。</li></ul><h1 id="子查询、联合查询"><a href="#子查询、联合查询" class="headerlink" title="子查询、联合查询"></a><strong>子查询、联合查询</strong></h1><h2 id="子查询-最好加别名"><a href="#子查询-最好加别名" class="headerlink" title="子查询(最好加别名)"></a>子查询(最好加别名)</h2><p>&#x3D;&#x3D;子查询就是嵌套在查询中的查询。&#x3D;&#x3D;</p><p>很多时候，我们对数据的查询处理不是一个查询语句就可以完成的；</p><p>不能完成的原因，可能是查询条件比较复杂，也可能是受困于SQL自身语法的限制；</p><h3 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a><strong>单行子查询</strong></h3><p><strong>单行子查询是指返回一行数据的子查询语句。</strong>当where子句引用单行子查询时，可以使用比较运算符（&#x3D; 、&gt;、&lt;等）。</p><p>查询结果表现形式：单行单列 多行单列 多行多列 单行多列</p><p>​   单行单列，一个值 一个列 一个表</p><h3 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a><strong>多行子查询</strong></h3><p>多行子查询<strong>是指返回多行数据的子查询语句。</strong>当where子句引用多行子查询时，必须使用多行比较符（in、any、all、exist等）</p><p>查询结果表现形式:多行单列 一个列 一个表</p><p>例子：</p><p>多条件查询，大多数可以使用开窗代替</p><p>查看每个部门工资最高的员工姓名和他的工资</p><p>开窗的做法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> ename,sal,deptno,<span class="built_in">rank</span>()<span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> deptno <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>) r <span class="keyword">from</span> emp</span><br><span class="line">)</span><br><span class="line"><span class="keyword">where</span> r<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>多条件多行操作</li></ul><figure class="highlight plaintext"><figcaption><span>ename,sal,deptno from emp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">where (deptno,sal) in (select deptno,max(sal) from emp group by deptno)</span><br></pre></td></tr></table></figure><ul><li>多行多列 单行多列 一个表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,sal,<span class="built_in">rank</span>()<span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>) <span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> ename,sal,<span class="built_in">rank</span>()<span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>) paiming <span class="keyword">from</span> emp</span><br><span class="line">)</span><br><span class="line"><span class="keyword">where</span> paiming<span class="operator">&lt;=</span><span class="number">3</span>;</span><br></pre></td></tr></table></figure><h2 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a><strong>联合查询</strong></h2><p>SQL联合查询主要是涉及两个表或者多个表（自身表多次）的查询。</p><p>主要分为连接查询和集合查询两大类，其中，</p><p><strong>连接查询</strong>分：</p><ul><li><p>内连接（inner Join 或 Join）</p></li><li><p>左外连接（left outer Join 或 left Join）</p></li><li><p>右外连接（right outer Join 或 right Join）</p></li><li><p>全外连接（full outer Join 或 full Join）</p></li></ul><p><strong>集合查询</strong>分:</p><ul><li><p>minus（差集）</p></li><li><p>intersect（交集）</p></li><li><p>union （并集）排序去重</p></li><li><p>union all（并集）不排序去重</p></li></ul><h2 id="连接查询（JOIN）"><a href="#连接查询（JOIN）" class="headerlink" title="连接查询（JOIN）"></a>连接查询（JOIN）</h2><ul><li><p>inner join （等值连接或者叫内连接）：只返回两个表中连接字段相等的行。</p></li><li><p>left join （左连接，左外连接）：返回包括左表中的所有记录和右表中连接字段相等的记录，如果没有匹配上，以null值代表右边表的列。</p></li><li><p>right join （右连接，右外连接）：返回包括右表中的所有记录和左表中连接字段相等的记录，如果没有匹配，以null值代表左边表的列</p></li><li><p>full join （全外连接）：返回左右表中所有的记录和左右表中连接字段相等的记录，没有匹配上，以null值代表左右边表的列。</p></li></ul><p><img src="/2025/04/28/oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/image-20250509164008543.png" alt="image-20250509164008543"></p><p><img src="/2025/04/28/oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/image-20250509164028422.png" alt="image-20250509164028422"></p><h3 id="笛卡尔连接-交叉连接-："><a href="#笛卡尔连接-交叉连接-：" class="headerlink" title="笛卡尔连接(交叉连接)："></a>笛卡尔连接(交叉连接)：</h3><p>把笛卡尔积所有的结果给显示出来了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A <span class="keyword">cross</span> <span class="keyword">join</span> B</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">cross</span> <span class="keyword">join</span> dept;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,dept;</span><br></pre></td></tr></table></figure><p><strong>交叉连接的左外右外写法(+)写在左边就是右外，写在右边就是左外</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.deptno<span class="operator">=</span>dept.deptno(<span class="operator">+</span>)</span><br></pre></td></tr></table></figure><h3 id="自然连接：一种特殊的内连接"><a href="#自然连接：一种特殊的内连接" class="headerlink" title="自然连接：一种特殊的内连接"></a>自然连接：一种特殊的内连接</h3><p>没有链接条件on，如果两个表里面有一列相等，<strong>系统默认把这一列作为链接条件，并且把这两列合成一列放到表的最面</strong>,适用于知道表里面有这样一列，并且要用这一列的时候</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">natural</span> <span class="keyword">join</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">natural</span> <span class="keyword">join</span> dept</span><br><span class="line"><span class="keyword">using</span>:跟自然连接作用相同，不同在于它，当有多个列相同时，可以指定用哪一列来做链接</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">join</span> dept <span class="keyword">using</span>(deptno)</span><br></pre></td></tr></table></figure><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.deptno<span class="operator">=</span>dept.deptno</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">inner</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.deptno<span class="operator">=</span>dept.deptn</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>–查询出每个员工的上级领导(查询内容：员工编号、员工姓名、领导编号、领导姓名)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> yg.empno,yg.ename,ld.empno,ld.ename</span><br><span class="line"><span class="keyword">from</span> emp yg <span class="keyword">inner</span> <span class="keyword">join</span> emp ld <span class="keyword">on</span> yg.mgr<span class="operator">=</span>ld.empno</span><br></pre></td></tr></table></figure><h3 id="不等值连接：（过滤条件的符号不是等号）"><a href="#不等值连接：（过滤条件的符号不是等号）" class="headerlink" title="不等值连接：（过滤条件的符号不是等号）"></a>不等值连接：（过滤条件的符号不是等号）</h3><p>–查询员工的工资级别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename,grade,sal <span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> salgrade <span class="keyword">on</span> emp.sal <span class="keyword">between</span> losal <span class="keyword">and</span> hisal</span><br></pre></td></tr></table></figure><h3 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> yg.empno,yg.ename,ld.empno,ld.ename,dname</span><br><span class="line"><span class="keyword">from</span> emp yg <span class="keyword">inner</span> <span class="keyword">join</span> emp ld <span class="keyword">on</span> yg.mgr<span class="operator">=</span>ld.empno</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> dept <span class="keyword">on</span> ld.deptno<span class="operator">=</span>dept.deptno</span><br></pre></td></tr></table></figure><h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.deptno<span class="operator">=</span>dept.deptno</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> emp <span class="keyword">on</span> emp.deptno<span class="operator">=</span>dept.deptno</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.deptno<span class="operator">=</span>dept.deptno</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dept <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> emp <span class="keyword">on</span> emp.deptno<span class="operator">=</span>dept.deptno</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">full</span> <span class="keyword">outer</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.deptno<span class="operator">=</span>dept.deptno</span><br></pre></td></tr></table></figure><p>–筛选出来emp表中不满足条件的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.deptno<span class="operator">=</span>dept.deptno</span><br><span class="line"><span class="keyword">where</span> dept.deptno <span class="keyword">is</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><p>–筛选出DEPT表中不满足条件数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno<span class="operator">=</span>d.deptno</span><br><span class="line"><span class="keyword">where</span> e.deptno <span class="keyword">is</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><p>–筛选出emp和dept表中不满足条件的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">full</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.deptno<span class="operator">=</span>d.deptno</span><br><span class="line"><span class="keyword">where</span> d.deptno <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">or</span> e.deptno <span class="keyword">is</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><h3 id="on和where使用区别"><a href="#on和where使用区别" class="headerlink" title="on和where使用区别"></a><strong>on</strong>和<strong>where</strong>使用区别</h3><p>内连接无差别，外连接用on效率高</p><h4 id="1-ON-的作用"><a href="#1-ON-的作用" class="headerlink" title="1. ON 的作用"></a><strong>1. <code>ON</code> 的作用</strong></h4><ul><li><p><strong>应用场景</strong>：专门用于 <strong><code>JOIN</code> 操作</strong>（如 <code>INNER JOIN</code>、<code>LEFT JOIN</code> 等）。</p></li><li><p><strong>作用时机</strong>：在 <strong>表连接过程中</strong> 定义连接条件。</p></li><li><p><strong>核心逻辑</strong>：</p><ul><li><p>决定两张表的行如何匹配。</p></li><li><p>如果条件不满足，<strong>仍可能保留主表的行</strong>（取决于 <code>JOIN</code> 类型）。</p></li></ul></li></ul><h4 id="2-WHERE-的作用"><a href="#2-WHERE-的作用" class="headerlink" title="2. WHERE 的作用"></a><strong>2. <code>WHERE</code> 的作用</strong></h4><ul><li><strong>应用场景</strong>：用于 <strong>最终结果集的全局过滤</strong>。</li><li><strong>作用时机</strong>：在 <strong>所有表连接完成后</strong> 筛选数据。</li><li><strong>核心逻辑</strong>：<ul><li>过滤掉不满足条件的行。</li><li>如果条件不满足，<strong>直接丢弃整行数据</strong>。</li></ul></li></ul><h4 id="3-关键区别总结"><a href="#3-关键区别总结" class="headerlink" title="3. 关键区别总结"></a><strong>3. 关键区别总结</strong></h4><table><thead><tr><th align="left">特性</th><th align="left"><code>ON</code></th><th align="left"><code>WHERE</code></th></tr></thead><tbody><tr><td align="left"><strong>作用阶段</strong></td><td align="left">表连接过程中</td><td align="left">表连接完成后</td></tr><tr><td align="left"><strong>影响范围</strong></td><td align="left">定义表之间的匹配规则</td><td align="left">全局过滤结果集</td></tr><tr><td align="left"><strong>保留主表数据</strong></td><td align="left">是（如 <code>LEFT JOIN</code>）</td><td align="left">否（不满足条件则丢弃所有行）</td></tr><tr><td align="left"><strong>性能影响</strong></td><td align="left">可能减少连接的数据量</td><td align="left">对最终结果过滤</td></tr><tr><td align="left"><strong>典型用途</strong></td><td align="left">指定连接条件</td><td align="left">筛选最终结果</td></tr></tbody></table><h4 id="4-不同-JOIN-类型下的行为"><a href="#4-不同-JOIN-类型下的行为" class="headerlink" title="4. 不同 JOIN 类型下的行为"></a><strong>4. 不同 <code>JOIN</code> 类型下的行为</strong></h4><p><strong>场景：左表有数据，右表无匹配</strong></p><ul><li><strong><code>LEFT JOIN</code> + <code>ON</code> 条件不满足</strong><ul><li>左表行保留，右表字段填充 <code>NULL</code>。</li></ul></li><li><strong><code>LEFT JOIN</code> + <code>WHERE</code> 条件不满足</strong><ul><li>整行被丢弃。</li></ul></li></ul><h4 id="5-何时用-ON-或-WHERE？"><a href="#5-何时用-ON-或-WHERE？" class="headerlink" title="5. 何时用 ON 或 WHERE？"></a><strong>5. 何时用 <code>ON</code> 或 <code>WHERE</code>？</strong></h4><ul><li>**用 <code>ON</code>**：<ul><li>定义表之间的连接逻辑。</li><li>在 <code>JOIN</code> 过程中过滤右表数据（同时保留主表数据）。</li></ul></li><li>**用 <code>WHERE</code>**：<ul><li>对最终结果集进行全局过滤。</li><li>需要严格筛选所有行时。</li></ul></li></ul><h4 id="6-一句话总结"><a href="#6-一句话总结" class="headerlink" title="6. 一句话总结"></a><strong>6. 一句话总结</strong></h4><ul><li><strong><code>ON</code> 决定如何连接表</strong>，<code>WHERE</code> 决定最终显示什么。</li><li>在 <code>LEFT JOIN</code> 中，若希望保留主表数据，右表的过滤条件应写在 <code>ON</code> 中；若想严格过滤结果，则用 <code>WHERE</code>。</li></ul><h2 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a><strong>集合查询</strong></h2><ol><li><p>集合查询后的结果字段名<strong>显示为第一条select语句字段名</strong></p></li><li><p>union&#x2F;union all,intersect 没有上下关系，minus有<strong>（永远是上减下）</strong></p></li><li><p>集合做运算的时候，可以不仅是一列，多列做运算时，要求列数量相等，并且列的数据类型相同</p></li><li><p>union、union all、intersect、minus运算可以进行混合运算、它们之间优先级相同。</p></li><li><p>可以使用圆括号控制集合运算的优先级，它具有最高的优先级</p></li><li><p><strong>union拼接后结果排序，去重，union all ，不排序，不去重，union all 效率更高</strong></p></li></ol><h4 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> dept</span><br><span class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> dept</span><br></pre></td></tr></table></figure><h4 id="union-all-并集全部显示"><a href="#union-all-并集全部显示" class="headerlink" title="union all 并集全部显示"></a>union all 并集全部显示</h4><p>（列名可以不一样，类型一样就可以了）要</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> sal <span class="keyword">from</span> emp</span><br></pre></td></tr></table></figure><h4 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">intersect</span></span><br><span class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> dept</span><br></pre></td></tr></table></figure><h4 id="差集minus"><a href="#差集minus" class="headerlink" title="差集minus"></a>差集minus</h4><p><strong>永远都是上减下</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> dept</span><br><span class="line">minus</span><br><span class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> emp</span><br><span class="line">(<span class="keyword">select</span> deptno <span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> dept)</span><br><span class="line">minus</span><br><span class="line"><span class="keyword">select</span> deptno <span class="keyword">from</span> emp</span><br></pre></td></tr></table></figure><h4 id="灵活应用"><a href="#灵活应用" class="headerlink" title="灵活应用"></a>灵活应用</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,ename <span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">333</span>,<span class="string">&#x27;test&#x27;</span> <span class="keyword">from</span> dual</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> empno <span class="keyword">desc</span>; </span><br></pre></td></tr></table></figure><h1 id="exits-和-exit"><a href="#exits-和-exit" class="headerlink" title="exits 和 exit"></a>exits 和 exit</h1><h3 id="一、EXIT：退出流程控制"><a href="#一、EXIT：退出流程控制" class="headerlink" title="一、EXIT：退出流程控制"></a><strong>一、<code>EXIT</code>：退出流程控制</strong></h3><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h4><p>主要用于 <strong>PL&#x2F;SQL</strong>（Oracle 的过程化 SQL）中，控制循环或代码块的执行流程。</p><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a><strong>功能</strong></h4><ul><li><strong>终止循环</strong>：立即退出 <code>LOOP</code>、<code>WHILE</code> 或 <code>FOR</code> 循环。</li><li><strong>退出代码块</strong>：在特定条件下提前结束程序执行。</li></ul><h4 id="语法示例"><a href="#语法示例" class="headerlink" title="*语法示例"></a>*<em>语法示例</em></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">FOR</span> i <span class="keyword">IN</span> <span class="number">1.</span><span class="number">.10</span> LOOP</span><br><span class="line">    EXIT <span class="keyword">WHEN</span> i <span class="operator">=</span> <span class="number">5</span>;  <span class="comment">-- 当 i=5 时退出循环</span></span><br><span class="line">    DBMS_OUTPUT.PUT_LINE(i);</span><br><span class="line">  <span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p><strong>输出</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><hr><h3 id="二、EXISTS：存在性检查"><a href="#二、EXISTS：存在性检查" class="headerlink" title="二、EXISTS：存在性检查"></a><strong>二、<code>EXISTS</code>：存在性检查</strong></h3><h4 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a><strong>适用场景</strong></h4><p>用于 <strong>SQL 查询</strong> 中，检查子查询是否返回至少一行数据。</p><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a><strong>功能</strong></h4><ul><li><strong>条件过滤</strong>：结合 <code>WHERE</code> 子句，判断子查询是否有结果。</li><li><strong>高效验证</strong>：子查询一旦找到匹配记录即终止扫描，性能优于 <code>IN</code> 或 <code>JOIN</code>。</li></ul><h4 id="语法示例-1"><a href="#语法示例-1" class="headerlink" title="语法示例"></a><strong>语法示例</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 查询有订单的客户</span><br><span class="line">SELECT customer_id, name</span><br><span class="line">FROM customers c</span><br><span class="line">WHERE EXISTS (</span><br><span class="line">  SELECT 1</span><br><span class="line">  FROM orders o</span><br><span class="line">  WHERE o.customer_id = c.customer_id</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>结果</strong>：仅返回至少有一个订单的客户。</p><hr><h3 id="三、核心区别总结"><a href="#三、核心区别总结" class="headerlink" title="三、核心区别总结"></a><strong>三、核心区别总结</strong></h3><table><thead><tr><th align="left">特性</th><th align="left"><code>EXIT</code></th><th align="left"><code>EXISTS</code></th></tr></thead><tbody><tr><td align="left"><strong>用途</strong></td><td align="left">控制流程（退出循环&#x2F;代码块）</td><td align="left">检查子查询是否存在结果</td></tr><tr><td align="left"><strong>语境</strong></td><td align="left">PL&#x2F;SQL 编程</td><td align="left">SQL 查询</td></tr><tr><td align="left"><strong>执行逻辑</strong></td><td align="left">终止当前循环或代码块</td><td align="left">快速验证子查询是否返回数据</td></tr><tr><td align="left"><strong>常见场景</strong></td><td align="left">循环中的条件终止</td><td align="left">筛选关联数据、优化复杂查询</td></tr></tbody></table><hr><h3 id="四、常见误区"><a href="#四、常见误区" class="headerlink" title="四、常见误区"></a><strong>四、常见误区</strong></h3><h4 id="1-误将-EXIT-用于-SQL-查询"><a href="#1-误将-EXIT-用于-SQL-查询" class="headerlink" title="1. 误将 EXIT 用于 SQL 查询"></a>1. <strong>误将 <code>EXIT</code> 用于 SQL 查询</strong></h4><ul><li><code>EXIT</code> 是 PL&#x2F;SQL 的关键字，<strong>不能直接在纯 SQL 语句中使用</strong>（如 <code>SELECT</code> 查询）。</li></ul><h4 id="2-混淆-EXISTS-和-IN"><a href="#2-混淆-EXISTS-和-IN" class="headerlink" title="2. 混淆 EXISTS 和 IN"></a>2. <strong>混淆 <code>EXISTS</code> 和 <code>IN</code></strong></h4><ul><li><code>EXISTS</code> 关注子查询是否有结果，而 <code>IN</code> 用于匹配具体值列表。</li><li><strong>性能差异</strong>：<code>EXISTS</code> 通常比 <code>IN</code> 高效，尤其是子查询数据量大时。</li></ul><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a><strong>五、总结</strong></h3><ul><li><p><strong><code>EXIT</code></strong> 是 PL&#x2F;SQL 的流程控制工具，用于终止循环或代码块。</p></li><li><p><strong><code>EXISTS</code></strong> 是 SQL 的逻辑运算符，用于高效验证子查询是否存在数据。</p></li></ul><h3 id="exists和in的区别"><a href="#exists和in的区别" class="headerlink" title="exists和in的区别"></a><strong>exists</strong>和<strong>in</strong>的区别</h3><p>  IN适合于外表大而内表小的情况;EXISTS适合于外表小而内表大的情况,这样效率会高的。</p><h4 id="带索引分析exists和in的区别"><a href="#带索引分析exists和in的区别" class="headerlink" title="带索引分析exists和in的区别"></a><em>带索引分析exists和</em>in的区别</h4><pre><code> in是把外表和内表作hash连接，而exists是对外表作loop循环，每次loop循环再对内表进行查询，一直以来认为exists比in效率高的说法是不准确的。如果查询的两个表大小相当，那么用in和exists差别不大；如果两个表中一个较小一个较大，则子查询表大的用exists，子查询表小的用in；</code></pre><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a><strong>结论</strong></h4><p>​正如所看到的，not in出现了不期望的结果集，存在逻辑错误，所以，请尽量不要使用not in(它会调用子查询)，而尽量使用not exists（它会调用关联子查询）。<strong>如果子查询中返回的任意一条记录含有空值，则查询将不返回任何记录。</strong>如果子查询字段有非空限制，这时可以使用not in。<strong>如果查询语句使用了not in，那么对内外表都进行全表扫描，没有用到索引；而notexists的子查询依然能用到表上的索引。</strong>所以无论哪个表大，用not exists都比not in 要快。</p><h1 id="2种批量插入方式"><a href="#2种批量插入方式" class="headerlink" title="2种批量插入方式"></a>2种批量插入方式</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><ol><li>执行创表语句，如下：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> shuiguo <span class="keyword">for</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure><ol start="2"><li>点击开锁，鼠标图标向右，右滑全选中全蓝色，选择需要负责的数据，到工具里面粘贴，打钩√。</li></ol><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><ol><li>工具-&gt;ODBC导入器-&gt;填用&#x2F;系统Excel Files-&gt;连接-&gt;填写路径并选择文件-&gt;选择插入的表-&gt;选择完说有字段并设置格式-&gt;导入</li></ol><h1 id="定义操作控制等语句"><a href="#定义操作控制等语句" class="headerlink" title="定义操作控制等语句"></a><strong>定义操作控制等语句</strong></h1><h2 id="索引视图序列"><a href="#索引视图序列" class="headerlink" title="索引视图序列"></a><strong>索引视图序列</strong></h2><p>在对包含很多行的表进行检索其中几行数据时，都应该创建索引，以加快检索速度。</p><ol><li><p>索引是数据库对象之一，<strong>用于加快数据的检索</strong>，类似于书籍的索引。在数据库中索引<strong>可以减少数据库程序查询结果时需要读取的数据量</strong>，类似于在书籍中我们利用索引可以不用翻阅整本书即可找到想要的信息。</p></li><li><p><strong>索引是建立在表上的可选对象</strong>；索引的关键在于通过一组排序后的索引键来取代默认的全表扫描检索方式，从而提高检索效率</p></li><li><p>索引在逻辑上和物理上都与相关的表和数据无关，当创建或者删除一个索引时，不会影响基本的表；</p></li><li><p>索引<strong>一旦建立，会自动管理索引</strong>，索引删除，不会对表产生影响</p></li><li><p>oracle创建主键时会<strong>自动</strong>在该列上创建索引</p></li></ol><h3 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a><strong>索引的分类</strong></h3><h4 id="一、按存储形式（即索引中存储的内容不同）"><a href="#一、按存储形式（即索引中存储的内容不同）" class="headerlink" title="一、按存储形式（即索引中存储的内容不同）"></a><strong>一、按存储形式（即索引中存储的内容不同）</strong></h4><ol><li><p>B-TREE索引(索引列原始数据+ROWID)</p></li><li><p>位图索引(位图+ROWID)</p></li><li><p>反向键索引(索引列原始数据的反向存储+ROWID)</p></li><li><p>基于函数的索引(将索引列原始数据经函数处理后存储+ROWID)</p></li></ol><p>索引的命名规范：IND_TBNAME_COLNAME</p><table><thead><tr><th></th><th>B-TREE索引</th><th>位图索引</th><th>反向键索引</th><th>基于函数的索引</th></tr></thead><tbody><tr><td>说明</td><td>ORACLE的<strong>默认索引类</strong>型，工作中最常见、使用范围最广的索引</td><td>位图索引在创建时，会扫描整张表，为索引列的每个取值建立一个<strong>不重复的位图（</strong>BITMAP）来描述该取值</td><td>可以视作一种特殊的B-TREE索引，<strong>存储索引列的反向值</strong></td><td>可以视作一种特殊的B-TREE索引，<strong>存储函数处理后的数据</strong></td></tr><tr><td>语法</td><td><strong>create</strong> <strong>index</strong> ind_name <strong>on</strong> TB_NAME(COL_NAME);</td><td><strong>CREATE</strong> <strong>BITMAP</strong> <strong>INDEX</strong> IND_NAME <strong>ON</strong> TB_NAME(COL_NAME);</td><td><strong>CREATE INDEX</strong> IND_NAME <strong>ON</strong> TB_NAME(COL_NAME) <strong>REVERSE</strong>;</td><td><strong>CREATE INDEX</strong> IND_NAME <strong>ON</strong> TB_NAME(<strong>FUNCTION</strong>(COL_NAME));</td></tr><tr><td>背景</td><td><strong>列基数比较大</strong>的时候使用（行业、身高）</td><td><strong>列基数比较小</strong>的时候使用（性别、婚姻状况）</td><td>为防止B-TREE索引在某叶上<strong>数据量占比过高</strong>而使用的一种索引</td><td>在某个字段上以原值建立了索引，但是在筛选时在该字段上<strong>经常加函数，导致索引无法生效</strong></td></tr></tbody></table><p><strong>二、按唯一性（索引列中的数据是否有重复值）</strong></p><ol><li><strong>唯一索引</strong> –索引列中<strong>不可能出现重复值</strong></li></ol><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX IND_NAME <span class="keyword">ON</span> TB_NAME(COL_NAME);</span><br></pre></td></tr></table></figure><p>注意点：</p><ol><li><p>B-TREE索引可以建立唯一索引，位图索引不能建立唯一索引</p></li><li><p>如果在某列上建立了唯一约束或主键约束，ORACLE会自动在该列上建立一个同名的唯一索引</p></li><li><p><strong>非唯一索引</strong> –索引列中<strong>可能出现重复值</strong></p></li></ol><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX IND_NAME <span class="keyword">ON</span> TB_NAME(COL_NAME);</span><br></pre></td></tr></table></figure><p><strong>三、按列的个数（索引覆盖的列的个数）</strong></p><ol><li>单列索引 –基于一个列建立的索引</li></ol><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX IND_NAME <span class="keyword">ON</span> TB_NAME(COL_NAME);</span><br></pre></td></tr></table></figure><ol start="2"><li>复合索引(也称为联合索引） –基于两个或两个以上列建立的索引</li></ol><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX IND_NAME <span class="keyword">ON</span> TB_NAME(COL_NAME1,COL_NAME2...);</span><br></pre></td></tr></table></figure><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a><strong>创建索引</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> [<span class="keyword">unique</span><span class="operator">|</span>BITMAP] index 索引名称 <span class="keyword">on</span> 表名（列名[，列名]） tablespace 表空间名；</span><br></pre></td></tr></table></figure><ol><li><p>Unique 用于指定是否强制要求索引列为唯一性数据，表空间可选择是否指定，不指定则用默认表空间。</p></li><li><p>出于性能考虑索引表空间和表的表空间要分开。</p></li></ol><h3 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a><strong>修改索引</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Alter</span> index 索引名 rename <span class="keyword">to</span> 新索引名；</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a><strong>删除索引</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过<span class="keyword">drop</span> index 索引名；</span><br></pre></td></tr></table></figure><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a><strong>视图</strong></h3><p>视图实际上是一个或多个表的预定义查询，视图的使用方法和表一样。视图不存储数据，他们只访问基表中的行。</p><p>创建视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">or</span> replace <span class="keyword">view</span> 视图名 <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">with</span> read <span class="keyword">only</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Drop</span> <span class="keyword">view</span> 视图名；删除视图</span><br></pre></td></tr></table></figure><p>scott账号要使用system账号赋予权限才能创建视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">any</span> <span class="keyword">view</span> <span class="keyword">to</span> scott</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a><strong>事务</strong></h2><p>事务：<strong>它是数据库在执行一系列操作时，保证所有的操作都正确完成，要么都执行，要么都不执行，保证数据的完整性</strong>。</p><p>必须具备以下四个属性，简称<strong>ACID 属性</strong>：</p><p>A:原子性（Atomicity）：事务是一个完整的操作。事务的各步操作是不可分的（原子的）；要么都执行，要么都不执行。</p><p>C:一致性（Consistency）：一个查询的结果必须与数据库在查询开始时的状态保持一致（读不等待写，写不等待读）。</p><p>I:隔离性（Isolation）：数据库中每一个用户的操作都是互不影响的，对于其他会话来说，未完成的（也就是未提交的）事务必须不见。</p><p>D:持久性（Durability）：事务一旦提交完成后，数据库就不可以丢失这个事务的结果，数据就永久的保存到数据库中。</p><h3 id="事务的开始和结束"><a href="#事务的开始和结束" class="headerlink" title="事务的开始和结束"></a><strong>事务的开始和结束</strong></h3><p>事务采用隐性的方式，起始于session的第一条DML语句，</p><p>事务结束于：</p><ol><li><p>COMMIT（提交）或ROLLBACK（回滚）</p></li><li><p>DDL语句被执行（提交）</p></li><li><p>DCL语句被执行（提交）</p></li><li><p>用户退出SQLPLUS（正常退出是提交，非正常退出是回滚）</p></li><li><p>服务器故障或系统崩溃（回滚）</p></li><li><p>shutdowm immediate(回滚）</p></li></ol><p>在一个事务里如果某个DML语句失败，之前其他任何DML语句将保持完好，而且不会提交！</p><h3 id="Oracle-的事务保存点功能"><a href="#Oracle-的事务保存点功能" class="headerlink" title="Oracle 的事务保存点功能"></a><strong>Oracle</strong> <strong>的事务保存点功能</strong></h3><p>savepoint命令允许在事务进行中设置一个标记（保存点），这个标记可以控制rollback的效果，即在一个事务中回滚掉最近的部分dml语句，保留下保存点之前的的dml语句，并使事务本身继续执行(考点）。也就是说回滚到保存点这个动作并不使事务结束。</p><p>commit 提交</p><p>rollback 回滚</p><p>保存点：savepoint 可以把在保存点之后的事务给撤销掉</p><p>操作完之后-&gt;savepoint 保存点名字</p><p>回退到保存点-&gt;rollback to 保存点名字</p><h3 id="排它锁和共享锁"><a href="#排它锁和共享锁" class="headerlink" title="排它锁和共享锁"></a>排它锁和共享锁</h3><p>数据库中两种基本类型的锁：排它锁和共享锁。当数据被上了排它锁，就不能被其他事</p><p>务读取和修改；而上了共享锁，只能被其他事务读取，但是不能被修改数据库。</p><p>update emp set sal&#x3D;sal*1.1 where deptno&#x3D;10;–行级排他锁</p><p>查看自己的sessionid</p><p>select userenv(‘sid’) from dual;</p><p>解决锁定冲突</p><ol><li><p>执行commit或者rollback结束事务</p></li><li><p>终止会话</p></li><li><p>管理员杀死进程</p></li></ol><h3 id="Oracle锁表解锁-system用户登录"><a href="#Oracle锁表解锁-system用户登录" class="headerlink" title="Oracle锁表解锁 system用户登录"></a>Oracle锁表解锁 system用户登录</h3><p>既然清楚了锁表如何形成的，那么我们就要开始解锁。解锁的方法很简单，通过Sql语句</p><p>就可实现。</p><p>1.查看被锁的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> b.owner,b.object_name,a.session_id,a.locked_mode</span><br><span class="line"><span class="keyword">From</span> v$locked_object a,dba_objects b</span><br><span class="line"><span class="keyword">Where</span> b.object_id <span class="operator">=</span> a.object_id;</span><br></pre></td></tr></table></figure><p>2.查看那个用户那个进程造成死锁</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.sid, q.sql_text</span><br><span class="line"><span class="keyword">FROM</span> v$sqltext q, v$session s</span><br><span class="line"><span class="keyword">WHERE</span> q.address <span class="operator">=</span> s.sql_address <span class="keyword">AND</span> s.sid <span class="operator">=</span> <span class="operator">&amp;</span>sid <span class="comment">-- 这个&amp;sid 是第一步查询出来的</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> piece;<span class="comment">--查看导致锁死的SQL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span></span><br><span class="line">b.username,b.sid,b.serial#,logon_time</span><br><span class="line"><span class="keyword">From</span> v$locked_object a,v$session b</span><br><span class="line"><span class="keyword">Where</span> a.session_id <span class="operator">=</span> b.sid <span class="keyword">order</span> <span class="keyword">by</span> b.logon_time;</span><br></pre></td></tr></table></figure><p>3.杀掉进程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;alter system kill session &#x27;&#x27;&#x27;</span> <span class="operator">||</span> sid <span class="operator">||</span> <span class="string">&#x27;,&#x27;</span> <span class="operator">||</span> serial# <span class="operator">||</span> <span class="string">&#x27;&#x27;&#x27;;&#x27;</span> &quot;Deadlock&quot; <span class="keyword">FROM</span> v$session</span><br><span class="line"><span class="keyword">WHERE</span> sid <span class="keyword">IN</span> (<span class="keyword">SELECT</span> sid <span class="keyword">FROM</span> v$lock <span class="keyword">WHERE</span> block <span class="operator">=</span> <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>两个事务并发访问数据库数据时可能存在的问题</p><ol><li>幻想读：</li></ol><p>　　<strong>事务T1读取一条指定where条件的语句，返回结果集。此时事务T2插入一行新记录</strong></p><p><strong>并commit，恰好满足T1的where条件。然后T1使用相同的条件再次查询，结果集中可以</strong></p><p><strong>看到T2插入的记录，这条新纪录就是幻想。</strong></p><ol start="2"><li>不可重复读取：</li></ol><p>　　事务T1读取一行记录，紧接着事务T2修改了T1刚刚读取的记录并commit，然后T1再</p><p>次查询，发现与第一次读取的记录不同，这称为不可重复读。</p><ol start="3"><li>脏读：</li></ol><p>　　<strong>事务T1更新了一行记录，还未提交所做的修改，这个T2读取了更新后的数据，然后</strong></p><p><strong>T1执行回滚操作，取消刚才的修改，所以T2所读取的行就无效，也就是脏数据</strong></p><h2 id="同义词"><a href="#同义词" class="headerlink" title="同义词"></a><strong>同义词</strong></h2><p>同义词：它是给数据库中的对象起一个别名，可以和使用原对象一样去使用同义词</p><p>同义词一般是给原对象取一个简单易记的名字，管理员system创建同义词</p><p>创建语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace synonym 同义词名 <span class="keyword">for</span> 对象名;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> synonym e <span class="keyword">for</span> scott.emp; <span class="comment">--给表创建同义词</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> e;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> scott.emp;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace synonym de <span class="keyword">for</span> scott.dept_emp; <span class="comment">--给视图创建同义词</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> de;</span><br></pre></td></tr></table></figure><p><strong>同义词可以用来做只读用户，同义词可以用来做只读用户提高安全性</strong></p><p>Oracle数据库中提供了同义词管理的功能。</p><p><strong>同义词是数据库方案对象的一个别名，经常用于简化对象访问和提高对象访问的安全性。</strong>在使用同义词时，Oracle数据库将它翻译成对应方案对象的名字。<strong>与视图类似，同义词并不占用实际存储空间</strong>，<strong>只在数据字典中保存了同义词的定义。</strong>在Oracle数据库中的大部分数据库对象，如表、视图、同义词、序列、存储过程、包等等，数据库管理员都可以根据实际情况为他们定义同义词</p><h2 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a><strong>数据字典</strong></h2><p><strong>数据库字典：是数据库自己维护一组表，它存放了用户创建的所有对象的信息。</strong></p><p><strong>数据库字典视图：就是数据库字典视图</strong></p><p><strong>dba_:管理员数据库字典视图</strong></p><p><strong>user_:用户的数据库字典视图</strong></p><p><strong>all_:所有用户都可见的数据库字典视图</strong></p><h2 id="数据导入导出"><a href="#数据导入导出" class="headerlink" title="数据导入导出"></a><strong>数据导入导出</strong></h2><p>数据的迁移和备份，导入导出，虚拟机cmd进行操作</p><p>exp 账号&#x2F;密码@数据库名 file&#x3D;文件存放路径 full&#x3D;y –全库导出，命令行语句，不需要登录数据，只需要在命令行运行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--按用户导出：</span></span><br><span class="line">exp scott<span class="operator">/</span>oracle<span class="variable">@orcl</span> file<span class="operator">=</span>c:\test\exp_0512_scott.bak OWNER<span class="operator">=</span>scott</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">--导入</span></span><br><span class="line">imp scott<span class="operator">/</span>oracle<span class="variable">@orcl</span> file<span class="operator">=</span>c:\test\exp_0711_scott.bak ignore<span class="operator">=</span>y</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><h1 id="with-as-子查询"><a href="#with-as-子查询" class="headerlink" title="with..as 子查询"></a><strong>with..as</strong> <strong>子查询</strong></h1><p>with..as关键字，是以‘with’关键字开头的sql语句，在实际工作中，我们经常会遇到同一个查询sql会同时查询多个相同的结果集，即sql一模一样，这时候我们可以<strong>将这些相同的sql抽取出来，使用with..as定义。with..as相当于一张中间表，可以简单理解为sql片段。</strong></p><p>–<strong>with as 可以理解为一张临时表或者理解成sql片段，在多次查询语句相同的时候可以抽取出来，达到’一次解析，多次使用’</strong></p><p>–<strong>如果每个部分都去执行一遍的话，则成本比较高，可以使用with as短语，则只要执行一遍即可</strong></p><p>例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> temp <span class="keyword">as</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(sal) a,<span class="built_in">max</span>(deptno) m <span class="keyword">from</span> emp)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> sal<span class="operator">&lt;</span>(<span class="keyword">select</span> a <span class="keyword">from</span> temp) <span class="keyword">and</span> deptno<span class="operator">=</span>(<span class="keyword">select</span> m <span class="keyword">from</span> temp)</span><br><span class="line"></span><br><span class="line"><span class="comment">--with as 非常适合在union 语句中</span></span><br><span class="line"><span class="comment">--注意：with as 语句最后面不能加分号，否则报缺失select关键字错误。</span></span><br><span class="line"><span class="keyword">with</span> temp1 <span class="keyword">as</span></span><br><span class="line">(<span class="keyword">select</span> <span class="string">&#x27;female&#x27;</span> sex, <span class="string">&#x27;zhangsan&#x27;</span> stu_name <span class="keyword">from</span> dual),</span><br><span class="line">temp2 <span class="keyword">as</span></span><br><span class="line">(<span class="keyword">select</span> <span class="string">&#x27;male&#x27;</span> sex, <span class="string">&#x27;lisi&#x27;</span> stu_name <span class="keyword">from</span> dual),</span><br><span class="line">temp3 <span class="keyword">as</span></span><br><span class="line">(<span class="keyword">select</span> <span class="string">&#x27;female&#x27;</span> sex, <span class="string">&#x27;wangwu&#x27;</span> stu_name <span class="keyword">from</span> dual)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> temp1</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> temp2</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> temp3</span><br><span class="line"></span><br><span class="line"><span class="comment">--前面定义的with..as语句可以在后面定义的with..as语句使用</span></span><br><span class="line"><span class="keyword">with</span> temp1 <span class="keyword">as</span></span><br><span class="line">(<span class="keyword">select</span> <span class="string">&#x27;female&#x27;</span> sex, <span class="string">&#x27;zhangsan&#x27;</span> stu_name <span class="keyword">from</span> dual),</span><br><span class="line">temp2 <span class="keyword">as</span></span><br><span class="line">(<span class="keyword">select</span> <span class="string">&#x27;male&#x27;</span> sex, <span class="string">&#x27;lisi&#x27;</span> stu_name <span class="keyword">from</span> dual),</span><br><span class="line">temp3 <span class="keyword">as</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> temp2)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> temp1</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> temp2</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> temp3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
